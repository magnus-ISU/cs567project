src/vs/nls.build.ts:export function localize(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): string {
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, "Cu&&t"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.cutLabel', "Cut"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.cutLabel', "Cut"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.cutLabel', "Cut"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, "&&Copy"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.copyLabel', "Copy"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.copyLabel', "Copy"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.copyLabel', "Copy"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:MenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, { submenu: MenuId.MenubarCopy, title: { value: nls.localize('copy as', "Copy As"), original: 'Copy As', }, group: '2_ccp', order: 3 });
src/vs/editor/contrib/clipboard/browser/clipboard.ts:MenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextCopy, title: { value: nls.localize('copy as', "Copy As"), original: 'Copy As', }, group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 });
src/vs/editor/contrib/clipboard/browser/clipboard.ts:MenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextShare, title: { value: nls.localize('share', "Share"), original: 'Share', }, group: '11_share', order: -1 });
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, "&&Paste"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.pasteLabel', "Paste"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.pasteLabel', "Paste"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:		title: nls.localize('actions.clipboard.pasteLabel', "Paste"),
src/vs/editor/contrib/clipboard/browser/clipboard.ts:			label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', "Copy With Syntax Highlighting"),
src/vs/editor/contrib/codelens/browser/codelensController.ts:			label: localize('showLensOnLine', "Show CodeLens Commands For Current Line"),
src/vs/editor/contrib/comment/browser/comment.ts:			label: nls.localize('comment.line', "Toggle Line Comment"),
src/vs/editor/contrib/comment/browser/comment.ts:				title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, "&&Toggle Line Comment"),
src/vs/editor/contrib/comment/browser/comment.ts:			label: nls.localize('comment.line.add', "Add Line Comment"),
src/vs/editor/contrib/comment/browser/comment.ts:			label: nls.localize('comment.line.remove', "Remove Line Comment"),
src/vs/editor/contrib/comment/browser/comment.ts:			label: nls.localize('comment.block', "Toggle Block Comment"),
src/vs/editor/contrib/comment/browser/comment.ts:				title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, "Toggle &&Block Comment"),
src/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace.ts:			label: nls.localize('InPlaceReplaceAction.previous.label', "Replace with Previous Value"),
src/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace.ts:			label: nls.localize('InPlaceReplaceAction.next.label', "Replace with Next Value"),
src/vs/editor/contrib/indentation/browser/indentation.ts:			label: nls.localize('indentationToSpaces', "Convert Indentation to Spaces"),
src/vs/editor/contrib/indentation/browser/indentation.ts:			label: nls.localize('indentationToTabs', "Convert Indentation to Tabs"),
src/vs/editor/contrib/indentation/browser/indentation.ts:			description: n === creationOpts.tabSize ? nls.localize('configuredTabSize', "Configured Tab Size") : undefined
src/vs/editor/contrib/indentation/browser/indentation.ts:			quickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, "Select Tab Size for Current File"), activeItem: picks[autoFocusIndex] }).then(pick => {
src/vs/editor/contrib/indentation/browser/indentation.ts:			label: nls.localize('indentUsingTabs', "Indent Using Tabs"),
src/vs/editor/contrib/indentation/browser/indentation.ts:			label: nls.localize('indentUsingSpaces', "Indent Using Spaces"),
src/vs/editor/contrib/indentation/browser/indentation.ts:			label: nls.localize('detectIndentation', "Detect Indentation from Content"),
src/vs/editor/contrib/indentation/browser/indentation.ts:			label: nls.localize('editor.reindentlines', "Reindent Lines"),
src/vs/editor/contrib/indentation/browser/indentation.ts:			label: nls.localize('editor.reindentselectedlines', "Reindent Selected Lines"),
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.arrayForeground', 'The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.booleanForeground', 'The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.classForeground', 'The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.colorForeground', 'The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.constantForeground', 'The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.constructorForeground', 'The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.enumeratorForeground', 'The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.enumeratorMemberForeground', 'The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.eventForeground', 'The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.fieldForeground', 'The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.fileForeground', 'The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.folderForeground', 'The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.functionForeground', 'The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.interfaceForeground', 'The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.keyForeground', 'The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.keywordForeground', 'The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.methodForeground', 'The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.moduleForeground', 'The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.namespaceForeground', 'The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.nullForeground', 'The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.numberForeground', 'The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.objectForeground', 'The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.operatorForeground', 'The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.packageForeground', 'The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.propertyForeground', 'The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.referenceForeground', 'The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.snippetForeground', 'The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.stringForeground', 'The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.structForeground', 'The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.textForeground', 'The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.typeParameterForeground', 'The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.unitForeground', 'The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/symbolIcons/browser/symbolIcons.ts:}, localize('symbolIcon.variableForeground', 'The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget.'));
src/vs/editor/contrib/inlineCompletions/browser/ghostTextHoverParticipant.ts:			label: nls.localize('showNextInlineSuggestion', "Next"),
src/vs/editor/contrib/inlineCompletions/browser/ghostTextHoverParticipant.ts:			label: nls.localize('showPreviousInlineSuggestion', "Previous"),
src/vs/editor/contrib/inlineCompletions/browser/ghostTextHoverParticipant.ts:			label: nls.localize('acceptInlineSuggestion', "Accept"),
src/vs/editor/contrib/inlineCompletions/browser/ghostTextHoverParticipant.ts:			const inlineSuggestionAvailable = nls.localize('inlineSuggestionFollows', "Suggestion:");
src/vs/editor/contrib/suggest/browser/suggestController.ts:			const msg = nls.localize('aria.alert.snippet', "Accepting '{0}' made {1} additional edits", item.textLabel, item.completion.additionalTextEdits.length);
src/vs/editor/contrib/suggest/browser/suggestController.ts:			label: nls.localize('suggest.trigger.label', "Trigger Suggest"),
src/vs/editor/contrib/suggest/browser/suggestController.ts:		title: nls.localize('accept.insert', "Insert"),
src/vs/editor/contrib/suggest/browser/suggestController.ts:		title: nls.localize('accept.insert', "Insert"),
src/vs/editor/contrib/suggest/browser/suggestController.ts:		title: nls.localize('accept.replace', "Replace"),
src/vs/editor/contrib/suggest/browser/suggestController.ts:		title: nls.localize('accept.replace', "Replace")
src/vs/editor/contrib/suggest/browser/suggestController.ts:		title: nls.localize('accept.insert', "Insert")
src/vs/editor/contrib/suggest/browser/suggestController.ts:		title: nls.localize('detail.more', "show less")
src/vs/editor/contrib/suggest/browser/suggestController.ts:		title: nls.localize('detail.less', "show more")
src/vs/editor/contrib/suggest/browser/suggestController.ts:			label: nls.localize('suggest.reset.label', "Reset Suggest Widget Size"),
src/vs/editor/contrib/suggest/browser/suggestWidgetRenderer.ts:const suggestMoreInfoIcon = registerIcon('suggest-more-info', Codicon.chevronRight, nls.localize('suggestMoreInfoIcon', 'Icon for more information in the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidgetRenderer.ts:		data.readMore.title = nls.localize('readMore', "Read More");
src/vs/editor/contrib/tokenization/browser/tokenization.ts:			label: nls.localize('forceRetokenize', "Developer: Force Retokenize"),
src/vs/editor/contrib/suggest/browser/suggestWidgetStatus.ts:			this.label.textContent = localize('ddd', '{0} ({1})', this._action.label, StatusBarViewItem.symbolPrintEnter(kb));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:registerColor('editorSuggestWidget.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('editorSuggestWidgetBackground', 'Background color of the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:registerColor('editorSuggestWidget.border', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, nls.localize('editorSuggestWidgetBorder', 'Border color of the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:const editorSuggestWidgetForeground = registerColor('editorSuggestWidget.foreground', { dark: editorForeground, light: editorForeground, hcDark: editorForeground, hcLight: editorForeground }, nls.localize('editorSuggestWidgetForeground', 'Foreground color of the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:registerColor('editorSuggestWidget.selectedForeground', { dark: quickInputListFocusForeground, light: quickInputListFocusForeground, hcDark: quickInputListFocusForeground, hcLight: quickInputListFocusForeground }, nls.localize('editorSuggestWidgetSelectedForeground', 'Foreground color of the selected entry in the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:registerColor('editorSuggestWidget.selectedIconForeground', { dark: quickInputListFocusIconForeground, light: quickInputListFocusIconForeground, hcDark: quickInputListFocusIconForeground, hcLight: quickInputListFocusIconForeground }, nls.localize('editorSuggestWidgetSelectedIconForeground', 'Icon foreground color of the selected entry in the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:const editorSuggestWidgetSelectedBackground = registerColor('editorSuggestWidget.selectedBackground', { dark: quickInputListFocusBackground, light: quickInputListFocusBackground, hcDark: quickInputListFocusBackground, hcLight: quickInputListFocusBackground }, nls.localize('editorSuggestWidgetSelectedBackground', 'Background color of the selected entry in the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:registerColor('editorSuggestWidget.highlightForeground', { dark: listHighlightForeground, light: listHighlightForeground, hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('editorSuggestWidgetHighlightForeground', 'Color of the match highlights in the suggest widget.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:registerColor('editorSuggestWidget.focusHighlightForeground', { dark: listFocusHighlightForeground, light: listFocusHighlightForeground, hcDark: listFocusHighlightForeground, hcLight: listFocusHighlightForeground }, nls.localize('editorSuggestWidgetFocusHighlightForeground', 'Color of the match highlights in the suggest widget when an item is focused.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:registerColor('editorSuggestWidgetStatus.foreground', { dark: transparent(editorSuggestWidgetForeground, .5), light: transparent(editorSuggestWidgetForeground, .5), hcDark: transparent(editorSuggestWidgetForeground, .5), hcLight: transparent(editorSuggestWidgetForeground, .5) }, nls.localize('editorSuggestWidgetStatusForeground', 'Foreground color of the suggest widget status.'));
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:	private static LOADING_MESSAGE: string = nls.localize('suggestWidget.loading', "Loading...");
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:	private static NO_SUGGESTIONS_MESSAGE: string = nls.localize('suggestWidget.noSuggestions', "No suggestions.");
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:				getWidgetAriaLabel: () => nls.localize('suggest', "Suggest"),
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:							label = nls.localize('label.full', '{0}{1}, {2}', label, detail, description);
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:							label = nls.localize('label.detail', '{0}{1}', label, detail);
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:							label = nls.localize('label.desc', '{0}, {1}', label, description);
src/vs/editor/contrib/suggest/browser/suggestWidget.ts:					return nls.localize('ariaCurrenttSuggestionReadDetails', "{0}, docs: {1}", label, docs);
src/vs/editor/contrib/suggest/browser/suggest.ts:	HasFocusedSuggestion: new RawContextKey<boolean>('suggestWidgetHasFocusedSuggestion', false, localize('suggestWidgetHasSelection', "Whether any suggestion is focused")),
src/vs/editor/contrib/suggest/browser/suggest.ts:	DetailsVisible: new RawContextKey<boolean>('suggestWidgetDetailsVisible', false, localize('suggestWidgetDetailsVisible', "Whether suggestion details are visible")),
src/vs/editor/contrib/suggest/browser/suggest.ts:	MultipleSuggestions: new RawContextKey<boolean>('suggestWidgetMultipleSuggestions', false, localize('suggestWidgetMultipleSuggestions', "Whether there are multiple suggestions to pick from")),
src/vs/editor/contrib/suggest/browser/suggest.ts:	MakesTextEdit: new RawContextKey<boolean>('suggestionMakesTextEdit', true, localize('suggestionMakesTextEdit', "Whether inserting the current suggestion yields in a change or has everything already been typed")),
src/vs/editor/contrib/suggest/browser/suggest.ts:	AcceptSuggestionsOnEnter: new RawContextKey<boolean>('acceptSuggestionOnEnter', true, localize('acceptSuggestionOnEnter', "Whether suggestions are inserted when pressing Enter")),
src/vs/editor/contrib/suggest/browser/suggest.ts:	HasInsertAndReplaceRange: new RawContextKey<boolean>('suggestionHasInsertAndReplaceRange', false, localize('suggestionHasInsertAndReplaceRange', "Whether the current suggestion has insert and replace behaviour")),
src/vs/editor/contrib/suggest/browser/suggest.ts:	InsertMode: new RawContextKey<'insert' | 'replace'>('suggestionInsertMode', undefined, { type: 'string', description: localize('suggestionInsertMode', "Whether the default behaviour is to insert or replace") }),
src/vs/editor/contrib/suggest/browser/suggest.ts:	CanResolve: new RawContextKey<boolean>('suggestionCanResolve', false, localize('suggestionCanResolve', "Whether the current suggestion supports to resolve further details")),
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:const editorWordHighlight = registerColor('editor.wordHighlightBackground', { dark: '#575757B8', light: '#57575740', hcDark: null, hcLight: null }, nls.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:const editorWordHighlightStrong = registerColor('editor.wordHighlightStrongBackground', { dark: '#004972B8', light: '#0e639c40', hcDark: null, hcLight: null }, nls.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:const editorWordHighlightBorder = registerColor('editor.wordHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:const editorWordHighlightStrongBorder = registerColor('editor.wordHighlightStrongBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:const overviewRulerWordHighlightForeground = registerColor('editorOverviewRuler.wordHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:const overviewRulerWordHighlightStrongForeground = registerColor('editorOverviewRuler.wordHighlightStrongForeground', { dark: '#C0A0C0CC', light: '#C0A0C0CC', hcDark: '#C0A0C0CC', hcLight: '#C0A0C0CC' }, nls.localize('overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:			label: nls.localize('wordHighlight.next.label', "Go to Next Symbol Highlight"),
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:			label: nls.localize('wordHighlight.previous.label', "Go to Previous Symbol Highlight"),
src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.ts:			label: nls.localize('wordHighlight.trigger.label', "Trigger Symbol Highlight"),
src/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.ts:			label: nls.localize({ key: 'toggle.tabMovesFocus', comment: ['Turn on/off use of tab key for moving focus around VS Code'] }, "Toggle Tab Key Moves Focus"),
src/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.ts:			alert(nls.localize('toggle.tabMovesFocus.on', "Pressing Tab will now move focus to the next focusable element"));
src/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.ts:			alert(nls.localize('toggle.tabMovesFocus.off', "Pressing Tab will now insert the tab character"));
src/vs/editor/contrib/wordOperations/browser/wordOperations.ts:			label: nls.localize('deleteInsideWord', "Delete Word"),
src/vs/editor/contrib/inlineCompletions/browser/ghostTextController.ts:	public static readonly inlineSuggestionVisible = new RawContextKey<boolean>('inlineSuggestionVisible', false, nls.localize('inlineSuggestionVisible', "Whether an inline suggestion is visible"));
src/vs/editor/contrib/inlineCompletions/browser/ghostTextController.ts:	public static readonly inlineSuggestionHasIndentation = new RawContextKey<boolean>('inlineSuggestionHasIndentation', false, nls.localize('inlineSuggestionHasIndentation', "Whether the inline suggestion starts with whitespace"));
src/vs/editor/contrib/inlineCompletions/browser/ghostTextController.ts:	public static readonly inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey<boolean>('inlineSuggestionHasIndentationLessThanTabSize', true, nls.localize('inlineSuggestionHasIndentationLessThanTabSize', "Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab"));
src/vs/editor/contrib/inlineCompletions/browser/ghostTextController.ts:			label: nls.localize('action.inlineSuggest.showNext', "Show Next Inline Suggestion"),
src/vs/editor/contrib/inlineCompletions/browser/ghostTextController.ts:			label: nls.localize('action.inlineSuggest.showPrevious', "Show Previous Inline Suggestion"),
src/vs/editor/contrib/inlineCompletions/browser/ghostTextController.ts:			label: nls.localize('action.inlineSuggest.trigger', "Trigger Inline Suggestion"),
src/vs/editor/contrib/suggest/browser/suggestWidgetDetails.ts:		this._close.title = nls.localize('details.close', "Close");
src/vs/editor/contrib/suggest/browser/suggestWidgetDetails.ts:		this._type.textContent = nls.localize('loading', "Loading...");
src/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.ts:				title: nls.localize('unusualLineTerminators.title', "Unusual Line Terminators"),
src/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.ts:				message: nls.localize('unusualLineTerminators.message', "Detected unusual line terminators"),
src/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.ts:				detail: nls.localize('unusualLineTerminators.detail', "The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\n\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.", basename(model.uri)),
src/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.ts:				primaryButton: nls.localize('unusualLineTerminators.fix', "Remove Unusual Line Terminators"),
src/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.ts:				secondaryButton: nls.localize('unusualLineTerminators.ignore', "Ignore")
src/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.ts:				value: localize('toggleStickyScroll', "Toggle Sticky Scroll"),
src/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.ts:				mnemonicTitle: localize('mitoggleStickyScroll', "&&Toggle Sticky Scroll"),
src/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.ts:				title: localize('stickyScroll', "Sticky Scroll"),
src/vs/editor/contrib/stickyScroll/browser/stickyScrollActions.ts:				mnemonicTitle: localize('miStickyScroll', "&&Sticky Scroll"),
src/vs/editor/contrib/lineSelection/browser/lineSelection.ts:			label: nls.localize('expandLineSelection', "Expand Line Selection"),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:export const warningIcon = registerIcon('extensions-warning-message', Codicon.warning, nls.localize('warningIcon', 'Icon shown with a warning message in the extensions editor.'));
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					message: nls.localize('unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters', 'This document contains many non-basic ASCII unicode characters'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					message: nls.localize('unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters', 'This document contains many ambiguous unicode characters'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					message: nls.localize('unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters', 'This document contains many invisible unicode characters'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					reason = nls.localize(
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					reason = nls.localize(
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					reason = nls.localize(
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			const adjustSettings = nls.localize('unicodeHighlight.adjustSettings', 'Adjust settings');
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:	public readonly shortLabel = nls.localize('unicodeHighlight.disableHighlightingInComments.shortLabel', 'Disable Highlight In Comments');
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			label: nls.localize('action.unicodeHighlight.disableHighlightingInComments', 'Disable highlighting of characters in comments'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:	public readonly shortLabel = nls.localize('unicodeHighlight.disableHighlightingInStrings.shortLabel', 'Disable Highlight In Strings');
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			label: nls.localize('action.unicodeHighlight.disableHighlightingInStrings', 'Disable highlighting of characters in strings'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:	public readonly shortLabel = nls.localize('unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel', 'Disable Ambiguous Highlight');
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			label: nls.localize('action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters', 'Disable highlighting of ambiguous characters'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:	public readonly shortLabel = nls.localize('unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel', 'Disable Invisible Highlight');
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			label: nls.localize('action.unicodeHighlight.disableHighlightingOfInvisibleCharacters', 'Disable highlighting of invisible characters'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:	public readonly shortLabel = nls.localize('unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel', 'Disable Non ASCII Highlight');
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			label: nls.localize('action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters', 'Disable highlighting of non basic ASCII characters'),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			label: nls.localize('action.unicodeHighlight.showExcludeOptions', "Show Exclude Options"),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:				return nls.localize('unicodeHighlight.excludeInvisibleCharFromBeingHighlighted', 'Exclude {0} (invisible character) from being highlighted', codePointToHex(codePoint));
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			return nls.localize('unicodeHighlight.excludeCharFromBeingHighlighted', 'Exclude {0} from being highlighted', `${codePointToHex(codePoint)} "${char}"`);
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					label: nls.localize("unicodeHighlight.allowCommonCharactersInLanguage", "Allow unicode characters that are more common in the language \"{0}\".", locale),
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:			{ title: nls.localize('unicodeHighlight.configureUnicodeHighlightOptions', 'Configure Unicode Highlight Options') }
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:				executor.emitOne(new MarkdownHover(this, anchor.range, [new MarkdownString().appendText(localize('hint.dbl', "Double click to insert"))], false, 10001));
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:						? localize('links.navigate.kb.meta.mac', "cmd + click")
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:						: localize('links.navigate.kb.meta', "ctrl + click")
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:						? localize('links.navigate.kb.alt.mac', "option + click")
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:						: localize('links.navigate.kb.alt', "alt + click");
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:					linkHint = new MarkdownString().appendText(localize('hint.defAndCommand', 'Go to Definition ({0}), right click for more', kb));
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:					linkHint = new MarkdownString().appendText(localize('hint.def', 'Go to Definition ({0})', kb));
src/vs/editor/contrib/inlayHints/browser/inlayHintsHover.ts:					linkHint = new MarkdownString(`[${localize('hint.cmd', "Execute Command")}](${asCommandLink(part.part.command)} "${part.part.command.title}") (${kb})`, { isTrusted: true });
src/vs/editor/contrib/snippet/browser/snippetController2.ts:	static readonly InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', "Whether the editor in current in snippet mode"));
src/vs/editor/contrib/snippet/browser/snippetController2.ts:	static readonly HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', "Whether there is a next tab stop when in snippet mode"));
src/vs/editor/contrib/snippet/browser/snippetController2.ts:	static readonly HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', "Whether there is a previous tab stop when in snippet mode"));
src/vs/editor/contrib/snippet/browser/snippetController2.ts:							command: { id: 'jumpToNextSnippetPlaceholder', title: localize('next', 'Go to next placeholder...') }
src/vs/editor/contrib/smartSelect/browser/smartSelect.ts:			label: nls.localize('smartSelect.expand', "Expand Selection"),
src/vs/editor/contrib/smartSelect/browser/smartSelect.ts:				title: nls.localize({ key: 'miSmartSelectGrow', comment: ['&& denotes a mnemonic'] }, "&&Expand Selection"),
src/vs/editor/contrib/smartSelect/browser/smartSelect.ts:			label: nls.localize('smartSelect.shrink', "Shrink Selection"),
src/vs/editor/contrib/smartSelect/browser/smartSelect.ts:				title: nls.localize({ key: 'miSmartSelectShrink', comment: ['&& denotes a mnemonic'] }, "&&Shrink Selection"),
src/vs/editor/contrib/snippet/browser/snippetVariables.ts:	private static readonly dayNames = [nls.localize('Sunday', "Sunday"), nls.localize('Monday', "Monday"), nls.localize('Tuesday', "Tuesday"), nls.localize('Wednesday', "Wednesday"), nls.localize('Thursday', "Thursday"), nls.localize('Friday', "Friday"), nls.localize('Saturday', "Saturday")];
src/vs/editor/contrib/snippet/browser/snippetVariables.ts:	private static readonly dayNamesShort = [nls.localize('SundayShort', "Sun"), nls.localize('MondayShort', "Mon"), nls.localize('TuesdayShort', "Tue"), nls.localize('WednesdayShort', "Wed"), nls.localize('ThursdayShort', "Thu"), nls.localize('FridayShort', "Fri"), nls.localize('SaturdayShort', "Sat")];
src/vs/editor/contrib/snippet/browser/snippetVariables.ts:	private static readonly monthNames = [nls.localize('January', "January"), nls.localize('February', "February"), nls.localize('March', "March"), nls.localize('April', "April"), nls.localize('May', "May"), nls.localize('June', "June"), nls.localize('July', "July"), nls.localize('August', "August"), nls.localize('September', "September"), nls.localize('October', "October"), nls.localize('November', "November"), nls.localize('December', "December")];
src/vs/editor/contrib/snippet/browser/snippetVariables.ts:	private static readonly monthNamesShort = [nls.localize('JanuaryShort', "Jan"), nls.localize('FebruaryShort', "Feb"), nls.localize('MarchShort', "Mar"), nls.localize('AprilShort', "Apr"), nls.localize('MayShort', "May"), nls.localize('JuneShort', "Jun"), nls.localize('JulyShort', "Jul"), nls.localize('AugustShort', "Aug"), nls.localize('SeptemberShort', "Sep"), nls.localize('OctoberShort', "Oct"), nls.localize('NovemberShort', "Nov"), nls.localize('DecemberShort', "Dec")];
src/vs/editor/contrib/readOnlyMessage/browser/contribution.ts:				messageController.showMessage(nls.localize('editor.simple.readonly', "Cannot edit in read-only input"), this.editor.getPosition());
src/vs/editor/contrib/readOnlyMessage/browser/contribution.ts:				messageController.showMessage(nls.localize('editor.readonly', "Cannot edit in read-only editor"), this.editor.getPosition());
src/vs/editor/contrib/hover/browser/hover.ts:			label: nls.localize({
src/vs/editor/contrib/hover/browser/hover.ts:			label: nls.localize({
src/vs/editor/contrib/rename/browser/renameInputField.ts:export const CONTEXT_RENAME_INPUT_VISIBLE = new RawContextKey<boolean>('renameInputVisible', false, localize('renameInputVisible', "Whether the rename input widget is visible"));
src/vs/editor/contrib/rename/browser/renameInputField.ts:			this._input.setAttribute('aria-label', localize('renameAriaLabel', "Rename input. Type new name and press Enter to commit."));
src/vs/editor/contrib/rename/browser/renameInputField.ts:				this._label!.innerText = localize({ key: 'label', comment: ['placeholders are keybindings, e.g "F2 to Rename, Shift+F2 to Preview"'] }, "{0} to Rename, {1} to Preview", this._keybindingService.lookupKeybinding(accept)?.getLabel(), this._keybindingService.lookupKeybinding(preview)?.getLabel());
src/vs/editor/contrib/rename/browser/rename.ts:			return this._provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('no result', "No result.")), token);
src/vs/editor/contrib/rename/browser/rename.ts:			MessageController.get(this.editor)?.showMessage(e || nls.localize('resolveRenameLocationFailed', "An unknown error occurred while resolving rename location"), position);
src/vs/editor/contrib/rename/browser/rename.ts:				label: nls.localize('label', "Renaming '{0}' to '{1}'", loc?.text, inputFieldResult.newName),
src/vs/editor/contrib/rename/browser/rename.ts:				quotableLabel: nls.localize('quotableLabel', "Renaming {0} to {1}", loc?.text, inputFieldResult.newName),
src/vs/editor/contrib/rename/browser/rename.ts:					alert(nls.localize('aria', "Successfully renamed '{0}' to '{1}'. Summary: {2}", loc!.text, inputFieldResult.newName, result.ariaSummary));
src/vs/editor/contrib/rename/browser/rename.ts:				this._notificationService.error(nls.localize('rename.failedApply', "Rename failed to apply edits"));
src/vs/editor/contrib/rename/browser/rename.ts:			this._notificationService.error(nls.localize('rename.failed', "Rename failed to compute edits"));
src/vs/editor/contrib/rename/browser/rename.ts:			label: nls.localize('rename.label', "Rename Symbol"),
src/vs/editor/contrib/rename/browser/rename.ts:			description: nls.localize('enablePreview', "Enable/disable the ability to preview changes before renaming"),
src/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.ts:		const label = localize('cannotRunGotoLine', "Open a text editor first to go to a line.");
src/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.ts:				return localize('gotoLineColumnLabel', "Go to line {0} and character {1}.", lineNumber, column);
src/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.ts:			return localize('gotoLineLabel', "Go to line {0}.", lineNumber);
src/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.ts:			return localize('gotoLineLabelEmptyWithLimit', "Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.", position.lineNumber, position.column, lineCount);
src/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.ts:		return localize('gotoLineLabelEmpty', "Current Line: {0}, Character: {1}. Type a line number to navigate to.", position.lineNumber, position.column);
src/vs/editor/contrib/hover/browser/markdownHoverParticipant.ts:		return new MarkdownHover(this, anchor.range, [new MarkdownString().appendText(nls.localize('modesContentHover.loading', "Loading..."))], false, 2000);
src/vs/editor/contrib/hover/browser/markdownHoverParticipant.ts:				value: nls.localize('stopped rendering', "Rendering paused for long line for performance reasons. This can be configured via `editor.stopRenderingLineAfter`.")
src/vs/editor/contrib/hover/browser/markdownHoverParticipant.ts:				value: nls.localize('too many characters', "Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`.")
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:		this.provideLabelPick(picker, localize('cannotRunGotoSymbolWithoutEditor', "To go to a symbol, first open a text editor with symbol information."));
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:		this.provideLabelPick(picker, localize('cannotRunGotoSymbolWithoutSymbolProvider', "The active text editor does not provide symbol information."));
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:						this.provideLabelPick(picker, localize('noMatchingSymbolResults', "No matching editor symbols"));
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:						this.provideLabelPick(picker, localize('noSymbolResults', "No editor symbols"));
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:				tooltip: openSideBySideDirection === 'right' ? localize('openToSide', "Open to the Side") : localize('openToBottom', "Open to the Bottom")
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:				{ label: localize('symbols', "symbols ({0})", filteredSymbolPicks.length), type: 'separator' },
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:const FALLBACK_NLS_SYMBOL_KIND = localize('property', "properties ({0})");
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Method]: localize('method', "methods ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Function]: localize('function', "functions ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Constructor]: localize('_constructor', "constructors ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Variable]: localize('variable', "variables ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Class]: localize('class', "classes ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Struct]: localize('struct', "structs ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Event]: localize('event', "events ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Operator]: localize('operator', "operators ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Interface]: localize('interface', "interfaces ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Namespace]: localize('namespace', "namespaces ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Package]: localize('package', "packages ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.TypeParameter]: localize('typeParameter', "type parameters ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Module]: localize('modules', "modules ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Property]: localize('property', "properties ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Enum]: localize('enum', "enumerations ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.EnumMember]: localize('enumMember', "enumeration members ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.String]: localize('string', "strings ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.File]: localize('file', "files ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Array]: localize('array', "arrays ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Number]: localize('number', "numbers ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Boolean]: localize('boolean', "booleans ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Object]: localize('object', "objects ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Key]: localize('key', "keys ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Field]: localize('field', "fields ({0})"),
src/vs/editor/contrib/quickAccess/browser/gotoSymbolQuickAccess.ts:	[SymbolKind.Constant]: localize('constant', "constants ({0})")
src/vs/editor/contrib/message/browser/messageController.ts:	static readonly MESSAGE_VISIBLE = new RawContextKey<boolean>('messageVisible', false, nls.localize('messageVisible', 'Whether the editor is currently showing an inline message'));
src/vs/editor/contrib/peekView/browser/peekView.ts:	export const inPeekEditor = new RawContextKey<boolean>('inReferenceSearchEditor', true, nls.localize('inReferenceSearchEditor', "Whether the current code editor is embedded inside peek"));
src/vs/editor/contrib/peekView/browser/peekView.ts:			this._actionbarWidget.push(new Action('peekview.close', nls.localize('label.close', "Close"), Codicon.close.classNames, true, () => {
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewTitleBackground = registerColor('peekViewTitle.background', { dark: transparent(editorInfoForeground, .1), light: transparent(editorInfoForeground, .1), hcDark: null, hcLight: null }, nls.localize('peekViewTitleBackground', 'Background color of the peek view title area.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewTitleForeground = registerColor('peekViewTitleLabel.foreground', { dark: Color.white, light: Color.black, hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewTitleForeground', 'Color of the peek view title.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewTitleInfoForeground = registerColor('peekViewTitleDescription.foreground', { dark: '#ccccccb3', light: '#616161', hcDark: '#FFFFFF99', hcLight: '#292929' }, nls.localize('peekViewTitleInfoForeground', 'Color of the peek view title info.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewBorder = registerColor('peekView.border', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('peekViewBorder', 'Color of the peek view borders and arrow.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewResultsBackground = registerColor('peekViewResult.background', { dark: '#252526', light: '#F3F3F3', hcDark: Color.black, hcLight: Color.white }, nls.localize('peekViewResultsBackground', 'Background color of the peek view result list.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewResultsMatchForeground = registerColor('peekViewResult.lineForeground', { dark: '#bbbbbb', light: '#646465', hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewResultsMatchForeground', 'Foreground color for line nodes in the peek view result list.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewResultsFileForeground = registerColor('peekViewResult.fileForeground', { dark: Color.white, light: '#1E1E1E', hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewResultsFileForeground', 'Foreground color for file nodes in the peek view result list.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewResultsSelectionBackground = registerColor('peekViewResult.selectionBackground', { dark: '#3399ff33', light: '#3399ff33', hcDark: null, hcLight: null }, nls.localize('peekViewResultsSelectionBackground', 'Background color of the selected entry in the peek view result list.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewResultsSelectionForeground = registerColor('peekViewResult.selectionForeground', { dark: Color.white, light: '#6C6C6C', hcDark: Color.white, hcLight: editorForeground }, nls.localize('peekViewResultsSelectionForeground', 'Foreground color of the selected entry in the peek view result list.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewEditorBackground = registerColor('peekViewEditor.background', { dark: '#001F33', light: '#F2F8FC', hcDark: Color.black, hcLight: Color.white }, nls.localize('peekViewEditorBackground', 'Background color of the peek view editor.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewEditorGutterBackground = registerColor('peekViewEditorGutter.background', { dark: peekViewEditorBackground, light: peekViewEditorBackground, hcDark: peekViewEditorBackground, hcLight: peekViewEditorBackground }, nls.localize('peekViewEditorGutterBackground', 'Background color of the gutter in the peek view editor.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewResultsMatchHighlight = registerColor('peekViewResult.matchHighlightBackground', { dark: '#ea5c004d', light: '#ea5c004d', hcDark: null, hcLight: null }, nls.localize('peekViewResultsMatchHighlight', 'Match highlight color in the peek view result list.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewEditorMatchHighlight = registerColor('peekViewEditor.matchHighlightBackground', { dark: '#ff8f0099', light: '#f5d802de', hcDark: null, hcLight: null }, nls.localize('peekViewEditorMatchHighlight', 'Match highlight color in the peek view editor.'));
src/vs/editor/contrib/peekView/browser/peekView.ts:export const peekViewEditorMatchHighlightBorder = registerColor('peekViewEditor.matchHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('peekViewEditorMatchHighlightBorder', 'Match highlight border in the peek view editor.'));
src/vs/editor/contrib/multicursor/browser/multicursor.ts:		const msg = cursorDiff.length === 1 ? nls.localize('cursorAdded', "Cursor added: {0}", cursorPositions) : nls.localize('cursorsAdded', "Cursors added: {0}", cursorPositions);
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('mutlicursor.insertAbove', "Add Cursor Above"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				title: nls.localize({ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, "&&Add Cursor Above"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('mutlicursor.insertBelow', "Add Cursor Below"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				title: nls.localize({ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, "A&&dd Cursor Below"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', "Add Cursors to Line Ends"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				title: nls.localize({ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, "Add C&&ursors to Line Ends"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('mutlicursor.addCursorsToBottom', "Add Cursors To Bottom"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('mutlicursor.addCursorsToTop', "Add Cursors To Top"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('addSelectionToNextFindMatch', "Add Selection To Next Find Match"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				title: nls.localize({ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, "Add &&Next Occurrence"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('addSelectionToPreviousFindMatch', "Add Selection To Previous Find Match"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				title: nls.localize({ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, "Add P&&revious Occurrence"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('moveSelectionToNextFindMatch', "Move Last Selection To Next Find Match"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('moveSelectionToPreviousFindMatch', "Move Last Selection To Previous Find Match"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('selectAllOccurrencesOfFindMatch', "Select All Occurrences of Find Match"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				title: nls.localize({ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, "Select All &&Occurrences"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('changeAll.label', "Change All Occurrences"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('mutlicursor.focusNextCursor', "Focus Next Cursor"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				description: nls.localize('mutlicursor.focusNextCursor.description', "Focuses the next cursor"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:			label: nls.localize('mutlicursor.focusPreviousCursor', "Focus Previous Cursor"),
src/vs/editor/contrib/multicursor/browser/multicursor.ts:				description: nls.localize('mutlicursor.focusPreviousCursor.description', "Focuses the previous cursor"),
src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts:const parameterHintsNextIcon = registerIcon('parameter-hints-next', Codicon.chevronDown, nls.localize('parameterHintsNextIcon', 'Icon for show next parameter hint.'));
src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts:const parameterHintsPreviousIcon = registerIcon('parameter-hints-previous', Codicon.chevronUp, nls.localize('parameterHintsPreviousIcon', 'Icon for show previous parameter hint.'));
src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts:				aria.alert(nls.localize('hint', "{0}, hint", labelToAnnounce));
src/vs/editor/contrib/parameterHints/browser/parameterHintsWidget.ts:const editorHoverWidgetHighlightForeground = registerColor('editorHoverWidget.highlightForeground', { dark: listHighlightForeground, light: listHighlightForeground, hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('editorHoverWidgetHighlightForeground', 'Foreground color of the active item in the parameter hint.'));
src/vs/editor/contrib/hover/browser/markerHoverParticipant.ts:				label: nls.localize('view problem', "View Problem"),
src/vs/editor/contrib/hover/browser/markerHoverParticipant.ts:						quickfixPlaceholderElement.textContent = nls.localize('noQuickFixes', "No quick fixes available");
src/vs/editor/contrib/hover/browser/markerHoverParticipant.ts:			const updatePlaceholderDisposable = this.recentMarkerCodeActionsInfo && !this.recentMarkerCodeActionsInfo.hasCodeActions ? Disposable.None : disposables.add(disposableTimeout(() => quickfixPlaceholderElement.textContent = nls.localize('checkingForQuickFixes', "Checking for quick fixes..."), 200));
src/vs/editor/contrib/hover/browser/markerHoverParticipant.ts:					quickfixPlaceholderElement.textContent = nls.localize('noQuickFixes', "No quick fixes available");
src/vs/editor/contrib/hover/browser/markerHoverParticipant.ts:					label: nls.localize('quick fixes', "Quick Fix..."),
src/vs/editor/contrib/parameterHints/browser/parameterHints.ts:			label: nls.localize('parameterHints.trigger.label', "Trigger Parameter Hints"),
src/vs/editor/contrib/links/browser/links.ts:				this.notificationService.warn(nls.localize('invalid.url', 'Failed to open this link because it is not well-formed: {0}', link.url!.toString()));
src/vs/editor/contrib/links/browser/links.ts:				this.notificationService.warn(nls.localize('missing.url', 'Failed to open this link because its target is missing.'));
src/vs/editor/contrib/links/browser/links.ts:			? nls.localize('links.navigate.executeCmd', 'Execute command')
src/vs/editor/contrib/links/browser/links.ts:			: nls.localize('links.navigate.follow', 'Follow link');
src/vs/editor/contrib/links/browser/links.ts:			? nls.localize('links.navigate.kb.meta.mac', "cmd + click")
src/vs/editor/contrib/links/browser/links.ts:			: nls.localize('links.navigate.kb.meta', "ctrl + click")
src/vs/editor/contrib/links/browser/links.ts:			? nls.localize('links.navigate.kb.alt.mac', "option + click")
src/vs/editor/contrib/links/browser/links.ts:			: nls.localize('links.navigate.kb.alt', "alt + click");
src/vs/editor/contrib/links/browser/links.ts:				nativeLabel = nls.localize('tooltip.explanation', "Execute command {0}", commandId);
src/vs/editor/contrib/links/browser/links.ts:			label: nls.localize('label', "Open Link"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.copyUp', "Copy Line Up"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:				title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, "&&Copy Line Up"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.copyDown', "Copy Line Down"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:				title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, "Co&&py Line Down"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('duplicateSelection', "Duplicate Selection"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:				title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, "&&Duplicate Selection"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.moveUp', "Move Line Up"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:				title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, "Mo&&ve Line Up"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.moveDown', "Move Line Down"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:				title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, "Move &&Line Down"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.sortAscending', "Sort Lines Ascending"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.sortDescending', "Sort Lines Descending"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.deleteDuplicates', "Delete Duplicate Lines"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.trimTrailingWhitespace', "Trim Trailing Whitespace"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.delete', "Delete Line"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.indent', "Indent Line"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.outdent', "Outdent Line"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.insertBefore', "Insert Line Above"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.insertAfter', "Insert Line Below"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.deleteAllLeft', "Delete All Left"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.deleteAllRight', "Delete All Right"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('lines.joinLines', "Join Lines"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('editor.transpose', "Transpose characters around the cursor"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('editor.transformToUppercase', "Transform to Uppercase"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('editor.transformToLowercase', "Transform to Lowercase"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('editor.transformToTitlecase', "Transform to Title Case"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('editor.transformToSnakecase', "Transform to Snake Case"),
src/vs/editor/contrib/linesOperations/browser/linesOperations.ts:			label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),
src/vs/editor/contrib/linkedEditing/browser/linkedEditing.ts:			label: nls.localize('linkedEditing.label', "Start Linked Editing"),
src/vs/editor/contrib/linkedEditing/browser/linkedEditing.ts:export const editorLinkedEditingBackground = registerColor('editor.linkedEditingBackground', { dark: Color.fromHex('#f00').transparent(0.3), light: Color.fromHex('#f00').transparent(0.3), hcDark: Color.fromHex('#f00').transparent(0.3), hcLight: Color.white }, nls.localize('editorLinkedEditingBackground', 'Background color when the editor auto renames on type.'));
src/vs/editor/contrib/codeAction/browser/lightBulbWidget.ts:				this.title = nls.localize('preferredcodeActionWithKb', "Show Code Actions. Preferred Quick Fix Available ({0})", this._preferredKbLabel);
src/vs/editor/contrib/codeAction/browser/lightBulbWidget.ts:			this.title = nls.localize('codeActionWithKb', "Show Code Actions ({0})", this._quickFixKbLabel);
src/vs/editor/contrib/codeAction/browser/lightBulbWidget.ts:			this.title = nls.localize('codeAction', "Show Code Actions");
src/vs/editor/contrib/codeAction/browser/codeAction.ts:					: nls.localize('applyCodeActionFailed', "An unknown error occurred while applying the code action"));
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	Visible: new RawContextKey<boolean>('codeActionMenuVisible', false, localize('codeActionMenuVisible', "Whether the code action list widget is visible"))
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:const uncategorizedCodeActionGroup = Object.freeze<CodeActionGroup>({ kind: CodeActionKind.Empty, title: localize('codeAction.widget.id.more', 'More Actions...') });
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	{ kind: CodeActionKind.QuickFix, title: localize('codeAction.widget.id.quickfix', 'Quick Fix...') },
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	{ kind: CodeActionKind.RefactorExtract, title: localize('codeAction.widget.id.extract', 'Extract...'), icon: { codicon: Codicon.wrench } },
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	{ kind: CodeActionKind.RefactorInline, title: localize('codeAction.widget.id.inline', 'Inline...'), icon: { codicon: Codicon.wrench } },
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	{ kind: CodeActionKind.RefactorRewrite, title: localize('codeAction.widget.id.convert', 'Rewrite...'), icon: { codicon: Codicon.wrench } },
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	{ kind: CodeActionKind.RefactorMove, title: localize('codeAction.widget.id.move', 'Move...'), icon: { codicon: Codicon.wrench } },
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	{ kind: CodeActionKind.SurroundWith, title: localize('codeAction.widget.id.surround', 'Surround With...'), icon: { codicon: Codicon.symbolSnippet } },
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:	{ kind: CodeActionKind.Source, title: localize('codeAction.widget.id.source', 'Source Action...'), icon: { codicon: Codicon.symbolFile } },
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:			data.container.title = localize({ key: 'label', comment: ['placeholders are keybindings, e.g "F2 to Apply, Shift+F2 to Preview"'] }, "{0} to Apply, {1} to Preview", this.keybindingService.lookupKeybinding(acceptSelectedCodeActionCommand)?.getLabel(), this.keybindingService.lookupKeybinding(previewSelectedCodeActionCommand)?.getLabel());
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:							label = localize({ key: 'customCodeActionWidget.labels', comment: ['Code action labels for accessibility.'] }, "{0}, Disabled Reason: {1}", label, element.action.action.disabled);
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:				getWidgetAriaLabel: () => localize({ key: 'customCodeActionWidget', comment: ['A Code Action Option'] }, "Code Action Widget"),
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:				label: localize('hideMoreCodeActions', 'Hide Disabled'),
src/vs/editor/contrib/codeAction/browser/codeActionWidget.ts:				label: localize('showMoreCodeActions', 'Show Disabled'),
src/vs/editor/contrib/codeAction/browser/codeActionContributions.ts:			description: nls.localize('showCodeActionHeaders', "Enable/disable showing group headers in the code action menu."),
src/vs/editor/contrib/format/browser/formatActions.ts:			label: nls.localize('formatDocument.label', "Format Document"),
src/vs/editor/contrib/format/browser/formatActions.ts:			label: nls.localize('formatSelection.label', "Format Selection"),
src/vs/editor/contrib/format/browser/format.ts:			alert(nls.localize('hint11', "Made 1 formatting edit on line {0}", startLineNumber));
src/vs/editor/contrib/format/browser/format.ts:			alert(nls.localize('hintn1', "Made {0} formatting edits on line {1}", edits.length, startLineNumber));
src/vs/editor/contrib/format/browser/format.ts:			alert(nls.localize('hint1n', "Made 1 formatting edit between lines {0} and {1}", startLineNumber, endLineNumber));
src/vs/editor/contrib/format/browser/format.ts:			alert(nls.localize('hintnn', "Made {0} formatting edits between lines {1} and {2}", edits.length, startLineNumber, endLineNumber));
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				? nls.localize('editor.action.refactor.noneMessage.preferred.kind', "No preferred refactorings for '{0}' available", userArgs.kind)
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				: nls.localize('editor.action.refactor.noneMessage.kind', "No refactorings for '{0}' available", userArgs.kind)
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				? nls.localize('editor.action.refactor.noneMessage.preferred', "No preferred refactorings available")
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				: nls.localize('editor.action.refactor.noneMessage', "No refactorings available"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			description: nls.localize('args.schema.kind', "Kind of the code action to run."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			description: nls.localize('args.schema.apply', "Controls when the returned actions are applied."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				nls.localize('args.schema.apply.first', "Always apply the first returned code action."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				nls.localize('args.schema.apply.ifSingle', "Apply the first returned code action if it is the only one."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				nls.localize('args.schema.apply.never', "Do not apply the returned code actions."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			description: nls.localize('args.schema.preferred', "Controls if only preferred code actions should be returned."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			label: nls.localize('quickfix.trigger.label', "Quick Fix..."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:		return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', "No code actions available"), undefined, undefined, false, CodeActionTriggerSource.QuickFix);
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', "No preferred code actions for '{0}' available", userArgs.kind)
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					: nls.localize('editor.action.codeAction.noneMessage.kind', "No code actions for '{0}' available", userArgs.kind)
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					? nls.localize('editor.action.codeAction.noneMessage.preferred', "No preferred code actions available")
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					: nls.localize('editor.action.codeAction.noneMessage', "No code actions available"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			label: nls.localize('refactor.label', "Refactor..."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			label: nls.localize('refactor.preview.label', "Refactor with Preview..."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			label: nls.localize('source.label', "Source Action..."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					? nls.localize('editor.action.source.noneMessage.preferred.kind', "No preferred source actions for '{0}' available", userArgs.kind)
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					: nls.localize('editor.action.source.noneMessage.kind', "No source actions for '{0}' available", userArgs.kind)
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					? nls.localize('editor.action.source.noneMessage.preferred', "No preferred source actions available")
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:					: nls.localize('editor.action.source.noneMessage', "No source actions available"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			label: nls.localize('organizeImports.label', "Organize Imports"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			nls.localize('editor.action.organize.noneMessage', "No organize imports action available"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			label: nls.localize('fixAll.label', "Fix All"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			nls.localize('fixAll.noneMessage', "No fix all action available"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			label: nls.localize('autoFix.label', "Auto Fix..."),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:			nls.localize('editor.action.autoFix.noneMessage', "No auto fixes available"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				value: nls.localize('hideCodeActionWidget.title', "Hide code action widget"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				value: nls.localize('selectPrevCodeAction.title', "Select previous code action"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				value: nls.localize('selectNextCodeAction.title', "Select next code action"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				value: nls.localize('acceptSelected.title', "Accept selected code action"),
src/vs/editor/contrib/codeAction/browser/codeActionCommands.ts:				value: nls.localize('previewSelected.title', "Preview selected code action"),
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize(
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize(
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize('aria.fileReferences.1', "1 symbol in {0}, full path {1}", basename(this.uri), this.uri.fsPath);
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize('aria.fileReferences.N', "{0} symbols in {1}, full path {2}", len, basename(this.uri), this.uri.fsPath);
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize('aria.result.0', "No results found");
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize('aria.result.1', "Found 1 symbol in {0}", this.references[0].uri.fsPath);
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize('aria.result.n1', "Found {0} symbols in {1}", this.references.length, this.groups[0].uri.fsPath);
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize('aria.result.nm', "Found {0} symbols in {1} files", this.references.length, this.groups.length);
src/vs/editor/contrib/dropIntoEditor/browser/dropIntoEditorContribution.ts:				title: localize('dropProgressTitle', "Running drop handlers..."),
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget.ts:		this._previewNotAvailableMessage = new TextModel(nls.localize('missingPreviewMessage', "no preview available"), PLAINTEXT_LANGUAGE_ID, TextModel.DEFAULT_CREATION_OPTIONS, null, this._undoRedoService, this._languageService, this._languageConfigurationService);
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget.ts:			this._messageContainer.innerText = nls.localize('noResults', "No results");
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesWidget.ts:			this.setTitle(nls.localize('peekView.alternateTitle', "References"));
src/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.ts:export const ctxHasSymbols = new RawContextKey('hasSymbols', false, localize('hasSymbols', "Whether there are symbol locations that can be navigated via keyboard-only."));
src/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.ts:			? localize('location.kb', "Symbol {0} of {1}, {2} for next", this._currentIdx + 1, this._currentModel!.references.length, kb.getLabel())
src/vs/editor/contrib/gotoSymbol/browser/symbolNavigation.ts:			: localize('location', "Symbol {0} of {1}", this._currentIdx + 1, this._currentModel!.references.length);
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.ts:			this.badge.setTitleFormat(localize('referencesCount', "{0} references", len));
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.ts:			this.badge.setTitleFormat(localize('referenceCount', "{0} reference", len));
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesTree.ts:		return localize('treeAriaLabel', "References");
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesController.ts:export const ctxReferenceSearchVisible = new RawContextKey<boolean>('referenceSearchVisible', false, nls.localize('referenceSearchVisible', "Whether reference peek is visible, like 'Peek References' or 'Peek Definition'"));
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesController.ts:		this._widget.setTitle(nls.localize('labelLoading', "Loading..."));
src/vs/editor/contrib/gotoSymbol/browser/peek/referencesController.ts:						this._widget.setMetaTitle(nls.localize('metaTitle.N', "{0} ({1})", this._model.title, this._model.references.length));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:	title: nls.localize('peek.submenu', "Peek"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return new ReferencesModel(await getDefinitionsAtPosition(languageFeaturesService.definitionProvider, model, position, token), nls.localize('def.title', 'Definitions'));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			? nls.localize('noResultWord', "No definition found for '{0}'", info.word)
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			: nls.localize('generic.noResults', "No definition found");
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.goToDecl.label', "Go to Definition"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				mnemonicTitle: nls.localize({ key: 'miGotoDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Definition")
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.goToDeclToSide.label', "Open Definition to the Side"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.previewDecl.label', "Peek Definition"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return new ReferencesModel(await getDeclarationsAtPosition(languageFeaturesService.declarationProvider, model, position, token), nls.localize('decl.title', 'Declarations'));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			? nls.localize('decl.noResultWord', "No declaration found for '{0}'", info.word)
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			: nls.localize('decl.generic.noResults', "No declaration found");
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.goToDeclaration.label', "Go to Declaration"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				mnemonicTitle: nls.localize({ key: 'miGotoDeclaration', comment: ['&& denotes a mnemonic'] }, "Go to &&Declaration")
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			? nls.localize('decl.noResultWord', "No declaration found for '{0}'", info.word)
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			: nls.localize('decl.generic.noResults', "No declaration found");
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.peekDecl.label', "Peek Declaration"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return new ReferencesModel(await getTypeDefinitionsAtPosition(languageFeaturesService.typeDefinitionProvider, model, position, token), nls.localize('typedef.title', 'Type Definitions'));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			? nls.localize('goToTypeDefinition.noResultWord', "No type definition found for '{0}'", info.word)
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			: nls.localize('goToTypeDefinition.generic.noResults', "No type definition found");
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.goToTypeDefinition.label', "Go to Type Definition"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				mnemonicTitle: nls.localize({ key: 'miGotoTypeDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Type Definition")
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.peekTypeDefinition.label', "Peek Type Definition"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return new ReferencesModel(await getImplementationsAtPosition(languageFeaturesService.implementationProvider, model, position, token), nls.localize('impl.title', 'Implementations'));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			? nls.localize('goToImplementation.noResultWord', "No implementation found for '{0}'", info.word)
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			: nls.localize('goToImplementation.generic.noResults', "No implementation found");
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.goToImplementation.label', "Go to Implementations"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				mnemonicTitle: nls.localize({ key: 'miGotoImplementation', comment: ['&& denotes a mnemonic'] }, "Go to &&Implementations")
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('actions.peekImplementation.label', "Peek Implementations"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			? nls.localize('references.no', "No references found for '{0}'", info.word)
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			: nls.localize('references.noGeneric', "No references found");
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('goToReferences.label', "Go to References"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				mnemonicTitle: nls.localize({ key: 'miGotoReference', comment: ['&& denotes a mnemonic'] }, "Go to &&References")
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return new ReferencesModel(await getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, true, token), nls.localize('ref.title', 'References'));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('references.action.label', "Peek References"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return new ReferencesModel(await getReferencesAtPosition(languageFeaturesService.referenceProvider, model, position, false, token), nls.localize('ref.title', 'References'));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:				value: nls.localize('label.generic', "Go to Any Symbol"),
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return new ReferencesModel(this._references, nls.localize('generic.title', 'Locations'));
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:		return info && nls.localize('generic.noResult', "No results for '{0}'", info.word) || '';
src/vs/editor/contrib/gotoSymbol/browser/goToCommands.ts:			const references = createCancelablePromise(token => getReferencesAtPosition(languageFeaturesService.referenceProvider, control.getModel(), corePosition.Position.lift(position), false, token).then(references => new ReferencesModel(references, nls.localize('ref.title', 'References'))));
src/vs/editor/contrib/editorState/browser/keybindingCancellation.ts:const ctxCancellableOperation = new RawContextKey('cancellableOperation', false, localize('cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \'Peek References\''));
src/vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition.ts:					new MarkdownString().appendText(nls.localize('multipleResults', "Click to show {0} definitions.", results.length))
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('unfoldAction.label', "Unfold"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('unFoldRecursivelyAction.label', "Unfold Recursively"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('foldAction.label', "Fold"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('toggleFoldAction.label', "Toggle Fold"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('foldRecursivelyAction.label', "Fold Recursively"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('foldAllBlockComments.label', "Fold All Block Comments"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('foldAllMarkerRegions.label', "Fold All Regions"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('unfoldAllMarkerRegions.label', "Unfold All Regions"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('foldAllExcept.label', "Fold All Regions Except Selected"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('unfoldAllExcept.label', "Unfold All Regions Except Selected"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('foldAllAction.label', "Fold All"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('unfoldAllAction.label', "Unfold All"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('gotoParentFold.label', "Go to Parent Fold"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('gotoPreviousFold.label', "Go to Previous Folding Range"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('gotoNextFold.label', "Go to Next Folding Range"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('createManualFoldRange.label', "Create Manual Folding Range from Selection"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('removeManualFoldingRanges.label', "Remove Manual Folding Ranges"),
src/vs/editor/contrib/folding/browser/folding.ts:			label: nls.localize('foldLevelAction.label', "Fold Level {0}", i),
src/vs/editor/contrib/folding/browser/folding.ts:export const foldBackgroundBackground = registerColor('editor.foldBackground', { light: transparent(editorSelectionBackground, 0.3), dark: transparent(editorSelectionBackground, 0.3), hcDark: null, hcLight: null }, nls.localize('foldBackgroundBackground', "Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations."), true);
src/vs/editor/contrib/folding/browser/folding.ts:export const editorFoldForeground = registerColor('editorGutter.foldingControlForeground', { dark: iconForeground, light: iconForeground, hcDark: iconForeground, hcLight: iconForeground }, nls.localize('editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.'));
src/vs/editor/contrib/folding/browser/foldingDecorations.ts:export const foldingExpandedIcon = registerIcon('folding-expanded', Codicon.chevronDown, localize('foldingExpandedIcon', 'Icon for expanded ranges in the editor glyph margin.'));
src/vs/editor/contrib/folding/browser/foldingDecorations.ts:export const foldingCollapsedIcon = registerIcon('folding-collapsed', Codicon.chevronRight, localize('foldingCollapsedIcon', 'Icon for collapsed ranges in the editor glyph margin.'));
src/vs/editor/contrib/folding/browser/foldingDecorations.ts:export const foldingManualCollapsedIcon = registerIcon('folding-manual-collapsed', foldingCollapsedIcon, localize('foldingManualCollapedIcon', 'Icon for manually collapsed ranges in the editor glyph margin.'));
src/vs/editor/contrib/folding/browser/foldingDecorations.ts:export const foldingManualExpandedIcon = registerIcon('folding-manual-expanded', foldingExpandedIcon, localize('foldingManualExpandedIcon', 'Icon for manually expanded ranges in the editor glyph margin.'));
src/vs/editor/contrib/find/browser/findWidget.ts:const findSelectionIcon = registerIcon('find-selection', Codicon.selection, nls.localize('findSelectionIcon', 'Icon for \'Find in Selection\' in the editor find widget.'));
src/vs/editor/contrib/find/browser/findWidget.ts:const findCollapsedIcon = registerIcon('find-collapsed', Codicon.chevronRight, nls.localize('findCollapsedIcon', 'Icon to indicate that the editor find widget is collapsed.'));
src/vs/editor/contrib/find/browser/findWidget.ts:const findExpandedIcon = registerIcon('find-expanded', Codicon.chevronDown, nls.localize('findExpandedIcon', 'Icon to indicate that the editor find widget is expanded.'));
src/vs/editor/contrib/find/browser/findWidget.ts:export const findReplaceIcon = registerIcon('find-replace', Codicon.replace, nls.localize('findReplaceIcon', 'Icon for \'Replace\' in the editor find widget.'));
src/vs/editor/contrib/find/browser/findWidget.ts:export const findReplaceAllIcon = registerIcon('find-replace-all', Codicon.replaceAll, nls.localize('findReplaceAllIcon', 'Icon for \'Replace All\' in the editor find widget.'));
src/vs/editor/contrib/find/browser/findWidget.ts:export const findPreviousMatchIcon = registerIcon('find-previous-match', Codicon.arrowUp, nls.localize('findPreviousMatchIcon', 'Icon for \'Find Previous\' in the editor find widget.'));
src/vs/editor/contrib/find/browser/findWidget.ts:export const findNextMatchIcon = registerIcon('find-next-match', Codicon.arrowDown, nls.localize('findNextMatchIcon', 'Icon for \'Find Next\' in the editor find widget.'));
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_FIND_INPUT_LABEL = nls.localize('label.find', "Find");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_FIND_INPUT_PLACEHOLDER = nls.localize('placeholder.find', "Find");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('label.previousMatchButton', "Previous Match");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_NEXT_MATCH_BTN_LABEL = nls.localize('label.nextMatchButton', "Next Match");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_TOGGLE_SELECTION_FIND_TITLE = nls.localize('label.toggleSelectionFind', "Find in Selection");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_CLOSE_BTN_LABEL = nls.localize('label.closeButton', "Close");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_REPLACE_INPUT_LABEL = nls.localize('label.replace', "Replace");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_REPLACE_INPUT_PLACEHOLDER = nls.localize('placeholder.replace', "Replace");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_REPLACE_BTN_LABEL = nls.localize('label.replaceButton', "Replace");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_REPLACE_ALL_BTN_LABEL = nls.localize('label.replaceAllButton', "Replace All");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = nls.localize('label.toggleReplaceButton', "Toggle Replace");
src/vs/editor/contrib/find/browser/findWidget.ts:const NLS_MATCHES_COUNT_LIMIT_TITLE = nls.localize('title.matchesCountLimit', "Only the first {0} results are highlighted, but all find operations work on the entire text.", MATCHES_LIMIT);
src/vs/editor/contrib/find/browser/findWidget.ts:export const NLS_MATCHES_LOCATION = nls.localize('label.matchesLocation', "{0} of {1}");
src/vs/editor/contrib/find/browser/findWidget.ts:export const NLS_NO_RESULTS = nls.localize('label.noResults', "No results");
src/vs/editor/contrib/find/browser/findWidget.ts:				? nls.localize('ariaSearchNoResultEmpty', "{0} found", label)
src/vs/editor/contrib/find/browser/findWidget.ts:				: nls.localize('ariaSearchNoResult', "{0} found for '{1}'", label, searchString);
src/vs/editor/contrib/find/browser/findWidget.ts:			const ariaLabel = nls.localize('ariaSearchNoResultWithLineNum', "{0} found for '{1}', at {2}", label, searchString, currentMatch.startLineNumber + ':' + currentMatch.startColumn);
src/vs/editor/contrib/find/browser/findWidget.ts:		return nls.localize('ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString);
src/vs/editor/contrib/find/browser/findWidget.ts:						nls.localize('ctrlEnter.keybindingChanged',
src/vs/editor/contrib/gotoError/browser/gotoError.ts:	static LABEL: string = nls.localize('markerAction.next.label', "Go to Next Problem (Error, Warning, Info)");
src/vs/editor/contrib/gotoError/browser/gotoError.ts:				icon: registerIcon('marker-navigation-next', Codicon.arrowDown, nls.localize('nextMarkerIcon', 'Icon for goto next marker.')),
src/vs/editor/contrib/gotoError/browser/gotoError.ts:	static LABEL: string = nls.localize('markerAction.previous.label', "Go to Previous Problem (Error, Warning, Info)");
src/vs/editor/contrib/gotoError/browser/gotoError.ts:				icon: registerIcon('marker-navigation-previous', Codicon.arrowUp, nls.localize('previousMarkerIcon', 'Icon for goto previous marker.')),
src/vs/editor/contrib/gotoError/browser/gotoError.ts:			label: nls.localize('markerAction.nextInFiles.label', "Go to Next Problem in Files (Error, Warning, Info)"),
src/vs/editor/contrib/gotoError/browser/gotoError.ts:				title: nls.localize({ key: 'miGotoNextProblem', comment: ['&& denotes a mnemonic'] }, "Next &&Problem"),
src/vs/editor/contrib/gotoError/browser/gotoError.ts:			label: nls.localize('markerAction.previousInFiles.label', "Go to Previous Problem in Files (Error, Warning, Info)"),
src/vs/editor/contrib/gotoError/browser/gotoError.ts:				title: nls.localize({ key: 'miGotoPreviousProblem', comment: ['&& denotes a mnemonic'] }, "Previous &&Problem"),
src/vs/editor/contrib/find/browser/findController.ts:	label: nls.localize('startFindAction', "Find"),
src/vs/editor/contrib/find/browser/findController.ts:		title: nls.localize({ key: 'miFind', comment: ['&& denotes a mnemonic'] }, "&&Find"),
src/vs/editor/contrib/find/browser/findController.ts:					description: nls.localize('actions.find.isRegexOverride', 'Overrides "Use Regular Expression" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
src/vs/editor/contrib/find/browser/findController.ts:					description: nls.localize('actions.find.wholeWordOverride', 'Overrides "Match Whole Word" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
src/vs/editor/contrib/find/browser/findController.ts:					description: nls.localize('actions.find.matchCaseOverride', 'Overrides "Math Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
src/vs/editor/contrib/find/browser/findController.ts:					description: nls.localize('actions.find.preserveCaseOverride', 'Overrides "Preserve Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False')
src/vs/editor/contrib/find/browser/findController.ts:			label: nls.localize('startFindWithArgsAction', "Find With Arguments"),
src/vs/editor/contrib/find/browser/findController.ts:			label: nls.localize('startFindWithSelectionAction', "Find With Selection"),
src/vs/editor/contrib/find/browser/findController.ts:			label: nls.localize('findNextMatchAction', "Find Next"),
src/vs/editor/contrib/find/browser/findController.ts:			label: nls.localize('findPreviousMatchAction', "Find Previous"),
src/vs/editor/contrib/find/browser/findController.ts:			label: nls.localize('nextSelectionMatchFindAction', "Find Next Selection"),
src/vs/editor/contrib/find/browser/findController.ts:			label: nls.localize('previousSelectionMatchFindAction', "Find Previous Selection"),
src/vs/editor/contrib/find/browser/findController.ts:	label: nls.localize('startReplace', "Replace"),
src/vs/editor/contrib/find/browser/findController.ts:		title: nls.localize({ key: 'miReplace', comment: ['&& denotes a mnemonic'] }, "&&Replace"),
src/vs/editor/contrib/fontZoom/browser/fontZoom.ts:			label: nls.localize('EditorFontZoomIn.label', "Editor Font Zoom In"),
src/vs/editor/contrib/fontZoom/browser/fontZoom.ts:			label: nls.localize('EditorFontZoomOut.label', "Editor Font Zoom Out"),
src/vs/editor/contrib/fontZoom/browser/fontZoom.ts:			label: nls.localize('EditorFontZoomReset.label', "Editor Font Zoom Reset"),
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:				severityLabel = nls.localize('Error', "Error");
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:				severityLabel = nls.localize('Warning', "Warning");
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:				severityLabel = nls.localize('Info', "Info");
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:				severityLabel = nls.localize('Hint', "Hint");
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:		let ariaLabel = nls.localize('marker aria', "{0} at {1}. ", severityLabel, marker.startLineNumber + ':' + marker.startColumn);
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:				? nls.localize('problems', "{0} of {1} problems", markerIdx, markerCount)
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:				: nls.localize('change', "{0} of {1} problem", markerIdx, markerCount);
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:const editorMarkerNavigationError = registerColor('editorMarkerNavigationError.background', { dark: errorDefault, light: errorDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorMarkerNavigationError', 'Editor marker navigation widget error color.'));
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:const editorMarkerNavigationErrorHeader = registerColor('editorMarkerNavigationError.headerBackground', { dark: transparent(editorMarkerNavigationError, .1), light: transparent(editorMarkerNavigationError, .1), hcDark: null, hcLight: null }, nls.localize('editorMarkerNavigationErrorHeaderBackground', 'Editor marker navigation widget error heading background.'));
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:const editorMarkerNavigationWarning = registerColor('editorMarkerNavigationWarning.background', { dark: warningDefault, light: warningDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:const editorMarkerNavigationWarningHeader = registerColor('editorMarkerNavigationWarning.headerBackground', { dark: transparent(editorMarkerNavigationWarning, .1), light: transparent(editorMarkerNavigationWarning, .1), hcDark: '#0C141F', hcLight: transparent(editorMarkerNavigationWarning, .2) }, nls.localize('editorMarkerNavigationWarningBackground', 'Editor marker navigation widget warning heading background.'));
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:const editorMarkerNavigationInfo = registerColor('editorMarkerNavigationInfo.background', { dark: infoDefault, light: infoDefault, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:const editorMarkerNavigationInfoHeader = registerColor('editorMarkerNavigationInfo.headerBackground', { dark: transparent(editorMarkerNavigationInfo, .1), light: transparent(editorMarkerNavigationInfo, .1), hcDark: null, hcLight: null }, nls.localize('editorMarkerNavigationInfoHeaderBackground', 'Editor marker navigation widget info heading background.'));
src/vs/editor/contrib/gotoError/browser/gotoErrorWidget.ts:const editorMarkerNavigationBackground = registerColor('editorMarkerNavigation.background', { dark: editorBackground, light: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:			label: nls.localize('context.minimap.minimap', "Minimap"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:			label: nls.localize('context.minimap.renderCharacters', "Render Characters"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:			nls.localize('context.minimap.size', "Vertical size"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:				label: nls.localize('context.minimap.size.proportional', "Proportional"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:				label: nls.localize('context.minimap.size.fill', "Fill"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:				label: nls.localize('context.minimap.size.fit', "Fit"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:			nls.localize('context.minimap.slider', "Slider"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:				label: nls.localize('context.minimap.slider.mouseover', "Mouse Over"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:				label: nls.localize('context.minimap.slider.always', "Always"),
src/vs/editor/contrib/contextmenu/browser/contextmenu.ts:			label: nls.localize('action.showContextMenu.label', "Show Editor Context Menu"),
src/vs/editor/contrib/colorPicker/browser/colorPickerWidget.ts:		const tooltip = localize('clickToToggleColorOptions', "Click to toggle color options (rgb/hsl/hex)");
src/vs/editor/contrib/copyPaste/browser/copyPasteController.ts:				title: localize('pasteProgressTitle', "Running paste handlers..."),
src/vs/editor/contrib/copyPaste/browser/copyPasteContribution.ts:			description: nls.localize('pasteActions', "Enable/disable running edits from extensions on paste."),
src/vs/editor/contrib/caretOperations/browser/caretOperations.ts:			label: nls.localize('caret.moveLeft', "Move Selected Text Left"),
src/vs/editor/contrib/caretOperations/browser/caretOperations.ts:			label: nls.localize('caret.moveRight', "Move Selected Text Right"),
src/vs/editor/contrib/cursorUndo/browser/cursorUndo.ts:			label: nls.localize('cursor.undo', "Cursor Undo"),
src/vs/editor/contrib/cursorUndo/browser/cursorUndo.ts:			label: nls.localize('cursor.redo', "Cursor Redo"),
src/vs/editor/contrib/bracketMatching/browser/bracketMatching.ts:const overviewRulerBracketMatchForeground = registerColor('editorOverviewRuler.bracketMatchForeground', { dark: '#A0A0A0', light: '#A0A0A0', hcDark: '#A0A0A0', hcLight: '#A0A0A0' }, nls.localize('overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.'));
src/vs/editor/contrib/bracketMatching/browser/bracketMatching.ts:			label: nls.localize('smartSelect.jumpBracket', "Go to Bracket"),
src/vs/editor/contrib/bracketMatching/browser/bracketMatching.ts:			label: nls.localize('smartSelect.selectToBracket', "Select to Bracket"),
src/vs/editor/contrib/bracketMatching/browser/bracketMatching.ts:		title: nls.localize({ key: 'miGoToBracket', comment: ['&& denotes a mnemonic'] }, "Go to &&Bracket")
src/vs/editor/contrib/caretOperations/browser/transpose.ts:			label: nls.localize('transposeLetters.label', "Transpose Letters"),
src/vs/editor/contrib/anchorSelect/browser/anchorSelect.ts:						hoverMessage: new MarkdownString().appendText(localize('selectionAnchor', "Selection Anchor")),
src/vs/editor/contrib/anchorSelect/browser/anchorSelect.ts:			alert(localize('anchorSet', "Anchor set at {0}:{1}", position.lineNumber, position.column));
src/vs/editor/contrib/anchorSelect/browser/anchorSelect.ts:			label: localize('setSelectionAnchor', "Set Selection Anchor"),
src/vs/editor/contrib/anchorSelect/browser/anchorSelect.ts:			label: localize('goToSelectionAnchor', "Go to Selection Anchor"),
src/vs/editor/contrib/anchorSelect/browser/anchorSelect.ts:			label: localize('selectFromAnchorToCursor', "Select from Anchor to Cursor"),
src/vs/editor/contrib/anchorSelect/browser/anchorSelect.ts:			label: localize('cancelSelectionAnchor', "Cancel Selection Anchor"),
src/vs/server/node/serverEnvironmentService.ts:	'host': { type: 'string', cat: 'o', args: 'ip-address', description: nls.localize('host', "The host name or IP address the server should listen to. If not set, defaults to 'localhost'.") },
src/vs/server/node/serverEnvironmentService.ts:	'port': { type: 'string', cat: 'o', args: 'port | port range', description: nls.localize('port', "The port the server should listen to. If 0 is passed a random free port is picked. If a range in the format num-num is passed, a free port from the range (end inclusive) is selected.") },
src/vs/server/node/serverEnvironmentService.ts:	'socket-path': { type: 'string', cat: 'o', args: 'path', description: nls.localize('socket-path', "The path to a socket file for the server to listen to.") },
src/vs/server/node/serverEnvironmentService.ts:	'connection-token': { type: 'string', cat: 'o', args: 'token', deprecates: ['connectionToken'], description: nls.localize('connection-token', "A secret that must be included with all requests.") },
src/vs/server/node/serverEnvironmentService.ts:	'connection-token-file': { type: 'string', cat: 'o', args: 'path', deprecates: ['connection-secret', 'connectionTokenFile'], description: nls.localize('connection-token-file', "Path to a file that contains the connection token.") },
src/vs/server/node/serverEnvironmentService.ts:	'without-connection-token': { type: 'boolean', cat: 'o', description: nls.localize('without-connection-token', "Run without a connection token. Only use this if the connection is secured by other means.") },
src/vs/server/node/serverEnvironmentService.ts:	'accept-server-license-terms': { type: 'boolean', cat: 'o', description: nls.localize('acceptLicenseTerms', "If set, the user accepts the server license terms and the server will be started without a user prompt.") },
src/vs/server/node/serverEnvironmentService.ts:	'server-data-dir': { type: 'string', cat: 'o', description: nls.localize('serverDataDir', "Specifies the directory that server data is kept in.") },
src/vs/server/node/serverEnvironmentService.ts:	'telemetry-level': { type: 'string', cat: 'o', args: 'level', description: nls.localize('telemetry-level', "Sets the initial telemetry level. Valid levels are: 'off', 'crash', 'error' and 'all'. If not specified, the server will send telemetry until a client connects, it will then use the clients telemetry setting. Setting this to 'off' is equivalent to --disable-telemetry") },
src/vs/server/node/serverEnvironmentService.ts:	'default-folder': { type: 'string', description: nls.localize('default-folder', 'The workspace folder to open when no input is specified in the browser URL. A relative or absolute path resolved against the current working directory.') },
src/vs/server/node/serverEnvironmentService.ts:	'default-workspace': { type: 'string', description: nls.localize('default-workspace', 'The workspace to open when no input is specified in the browser URL. A relative or absolute path resolved against the current working directory.') },
src/vs/server/node/serverEnvironmentService.ts:	'start-server': { type: 'boolean', cat: 'e', description: nls.localize('start-server', "Start the server when installing or uninstalling extensions. To be used in combination with 'install-extension', 'install-builtin-extension' and 'uninstall-extension'.") },
src/vs/nls.ts: * For example, `localize({ key: 'sayHello', comment: ['Welcomes user'] }, 'hello {0}', name)`
src/vs/nls.ts:export function localize(info: ILocalizeInfo, message: string, ...args: (string | number | boolean | undefined | null)[]): string;
src/vs/nls.ts: * For example, `localize('sayHello', 'hello {0}', name)`
src/vs/nls.ts:export function localize(key: string, message: string, ...args: (string | number | boolean | undefined | null)[]): string;
src/vs/nls.ts:export function localize(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): string {
src/vs/nls.ts: * @param stringFromLocalizeCall You must pass in a string that was returned from a `nls.localize()` call
src/vs/platform/workspaces/electron-main/workspacesManagementMainService.ts:				buttons: [mnemonicButtonLabel(localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK"))],
src/vs/platform/workspaces/electron-main/workspacesManagementMainService.ts:				message: localize('workspaceOpenedMessage', "Unable to save workspace '{0}'", basename(workspacePath)),
src/vs/platform/workspaces/electron-main/workspacesManagementMainService.ts:				detail: localize('workspaceOpenedDetail', "The workspace is already opened in another window. Please close that window first and then try again."),
src/vs/platform/terminal/node/ptyService.ts:			const restoreMessage = localize('terminal-history-restored', "History restored");
src/vs/platform/terminal/node/terminalProcess.ts:				return { message: localize('launchFail.cwdNotDirectory', "Starting directory (cwd) \"{0}\" is not a directory", this._initialCwd.toString()) };
src/vs/platform/terminal/node/terminalProcess.ts:				return { message: localize('launchFail.cwdDoesNotExist', "Starting directory (cwd) \"{0}\" does not exist", this._initialCwd.toString()) };
src/vs/platform/terminal/node/terminalProcess.ts:			return { message: localize('launchFail.executableDoesNotExist', "Path to shell executable \"{0}\" does not exist", slc.executable) };
src/vs/platform/terminal/node/terminalProcess.ts:				return { message: localize('launchFail.executableIsNotFileOrSymlink', "Path to shell executable \"{0}\" is not a file or a symlink", slc.executable) };
src/vs/platform/workspace/common/workspace.ts:export const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', "Code Workspace"), extensions: [WORKSPACE_EXTENSION] }];
src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts:					title: localize('newWindow', "New Window"),
src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts:					description: localize('newWindowDesc', "Opens a new window"),
src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts:					name: hasWorkspaces ? localize('recentFoldersAndWorkspaces', "Recent Folders & Workspaces") : localize('recentFolders', "Recent Folders"),
src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts:			return { title: localize('untitledWorkspace', "Untitled (Workspace)"), description: '' };
src/vs/platform/workspaces/electron-main/workspacesHistoryMainService.ts:		return { title: localize('workspaceName', "{0} (Workspace)", filename), description: this.renderJumpListPathDescription(workspace.configPath) };
src/vs/platform/workspace/common/workspaceTrust.ts:		return localize('trusted', "Trusted");
src/vs/platform/workspace/common/workspaceTrust.ts:		return localize('untrusted', "Restricted Mode");
src/vs/platform/terminal/common/terminalProfiles.ts:		description: localize('terminalAutomaticProfile', 'Automatically detect the default')
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:		description: localize('terminalProfile.args', 'An optional set of arguments to run the shell executable with.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:		description: localize('terminalProfile.overrideName', 'Controls whether or not the profile name overrides the auto detected one.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:		description: localize('terminalProfile.icon', 'A codicon ID to associate with the terminal icon.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:		description: localize('terminalProfile.color', 'A theme color ID to associate with the terminal icon.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:		markdownDescription: localize('terminalProfile.env', "An object with environment variables that will be added to the terminal profile process. Set to `null` to delete environment variables from the base environment."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			description: localize('terminalProfile.path', 'A single path to a shell executable or an array of paths that will be used as fallbacks when one fails.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			description: localize('terminalAutomationProfile.path', 'A single path to a shell executable.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:const shellDeprecationMessageLinux = localize('terminal.integrated.shell.linux.deprecation', "This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in {0} and setting its profile name as the default in {1}. This will currently take priority over the new profiles settings but that will change in the future.", '`#terminal.integrated.profiles.linux#`', '`#terminal.integrated.defaultProfile.linux#`');
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:const shellDeprecationMessageOsx = localize('terminal.integrated.shell.osx.deprecation', "This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in {0} and setting its profile name as the default in {1}. This will currently take priority over the new profiles settings but that will change in the future.", '`#terminal.integrated.profiles.osx#`', '`#terminal.integrated.defaultProfile.osx#`');
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:const shellDeprecationMessageWindows = localize('terminal.integrated.shell.windows.deprecation', "This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in {0} and setting its profile name as the default in {1}. This will currently take priority over the new profiles settings but that will change in the future.", '`#terminal.integrated.profiles.windows#`', '`#terminal.integrated.defaultProfile.windows#`');
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:const automationShellDeprecationMessageLinux = localize('terminal.integrated.automationShell.linux.deprecation', "This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with {0}. This will currently take priority over the new automation profile settings but that will change in the future.", '`#terminal.integrated.automationProfile.linux#`');
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:const automationShellDeprecationMessageOsx = localize('terminal.integrated.automationShell.osx.deprecation', "This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with {0}. This will currently take priority over the new automation profile settings but that will change in the future.", '`#terminal.integrated.automationProfile.osx#`');
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:const automationShellDeprecationMessageWindows = localize('terminal.integrated.automationShell.windows.deprecation', "This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with {0}. This will currently take priority over the new automation profile settings but that will change in the future.", '`#terminal.integrated.automationProfile.windows#`');
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:	title: localize('terminalIntegratedConfigurationTitle', "Integrated Terminal"),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize({
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize({
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize({
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.automationProfile.linux', "The terminal profile to use on Linux for automation-related terminal usage like tasks and debug. This setting will currently be ignored if {0} (now deprecated) is set.", '`terminal.integrated.automationShell.linux`'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.automationProfile.osx', "The terminal profile to use on macOS for automation-related terminal usage like tasks and debug. This setting will currently be ignored if {0} (now deprecated) is set.", '`terminal.integrated.automationShell.osx`'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.automationProfile.windows', "The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if {0} (now deprecated) is set.", '`terminal.integrated.automationShell.windows`'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.shell.linux', "The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.shell.osx', "The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.shell.windows', "The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.shellArgs.linux', "The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.shellArgs.osx', "The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.shellArgs.windows', "The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:						markdownDescription: localize('terminal.integrated.shellArgs.windows', "The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).")
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:					markdownDescription: localize('terminal.integrated.shellArgs.windows.string', "The command line arguments in [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6) to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).")
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize(
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.windowsSource', 'A profile source that will auto detect the paths to the shell. Note that non-standard executable locations are not supported and must be created manually in a new profile.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.windowsExtensionIdentifier', 'The extension that contributed this profile.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.windowsExtensionId', 'The id of the extension terminal'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.windowsExtensionTitle', 'The name of the extension terminal'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize(
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.osxExtensionIdentifier', 'The extension that contributed this profile.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.osxExtensionId', 'The id of the extension terminal'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.osxExtensionTitle', 'The name of the extension terminal'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize(
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.linuxExtensionIdentifier', 'The extension that contributed this profile.'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.linuxExtensionId', 'The id of the extension terminal'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:								description: localize('terminalProfile.linuxExtensionTitle', 'The name of the extension terminal'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			description: localize('terminal.integrated.useWslProfiles', 'Controls whether or not WSL distros are shown in the terminal dropdown'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			description: localize('terminal.integrated.inheritEnv', "Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize('terminal.integrated.persistentSessionScrollback', "Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `#terminal.integrated.scrollback#`."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			description: localize('terminal.integrated.showLinkHover', "Whether to show hovers for links in the terminal output."),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			description: localize('terminal.integrated.confirmIgnoreProcesses', "A set of process names to ignore when using the {0} setting.", '`terminal.integrated.confirmOnKill`'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:		title: localize('terminalIntegratedConfigurationTitle', "Integrated Terminal"),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:				markdownDescription: localize('terminal.integrated.defaultProfile.linux', "The default profile used on Linux. This setting will currently be ignored if either {0} or {1} are set.", '`terminal.integrated.shell.linux`', '`terminal.integrated.shellArgs.linux`'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:				markdownDescription: localize('terminal.integrated.defaultProfile.osx', "The default profile used on macOS. This setting will currently be ignored if either {0} or {1} are set.", '`terminal.integrated.shell.osx`', '`terminal.integrated.shellArgs.osx`'),
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:				markdownDescription: localize('terminal.integrated.defaultProfile.windows', "The default profile used on Windows. This setting will currently be ignored if either {0} or {1} are set.", '`terminal.integrated.shell.windows`', '`terminal.integrated.shellArgs.windows`'),
src/vs/platform/windows/electron-main/windowImpl.ts:							mnemonicButtonLabel(localize({ key: 'reopen', comment: ['&& denotes a mnemonic'] }, "&&Reopen")),
src/vs/platform/windows/electron-main/windowImpl.ts:							mnemonicButtonLabel(localize({ key: 'wait', comment: ['&& denotes a mnemonic'] }, "&&Keep Waiting")),
src/vs/platform/windows/electron-main/windowImpl.ts:							mnemonicButtonLabel(localize({ key: 'close', comment: ['&& denotes a mnemonic'] }, "&&Close"))
src/vs/platform/windows/electron-main/windowImpl.ts:						message: localize('appStalled', "The window is not responding"),
src/vs/platform/windows/electron-main/windowImpl.ts:						detail: localize('appStalledDetail', "You can reopen or close the window or keep waiting."),
src/vs/platform/windows/electron-main/windowImpl.ts:						checkboxLabel: this._config?.workspace ? localize('doNotRestoreEditors', "Don't restore editors") : undefined
src/vs/platform/windows/electron-main/windowImpl.ts:						message = localize('appGone', "The window terminated unexpectedly");
src/vs/platform/windows/electron-main/windowImpl.ts:						message = localize('appGoneDetails', "The window terminated unexpectedly (reason: '{0}', code: '{1}')", details.reason, details.exitCode ?? '<unknown>');
src/vs/platform/windows/electron-main/windowImpl.ts:							mnemonicButtonLabel(localize({ key: 'reopen', comment: ['&& denotes a mnemonic'] }, "&&Reopen")),
src/vs/platform/windows/electron-main/windowImpl.ts:							mnemonicButtonLabel(localize({ key: 'close', comment: ['&& denotes a mnemonic'] }, "&&Close"))
src/vs/platform/windows/electron-main/windowImpl.ts:						detail: localize('appGoneDetail', "We are sorry for the inconvenience. You can reopen the window to continue where you left off."),
src/vs/platform/windows/electron-main/windowImpl.ts:						checkboxLabel: this._config?.workspace ? localize('doNotRestoreEditors', "Don't restore editors") : undefined
src/vs/platform/windows/electron-main/windowImpl.ts:				this.send('vscode:showInfoMessage', localize('hiddenMenuBar', "You can still access the menu bar by pressing the Alt-key."));
src/vs/platform/windows/electron-main/windowsMainService.ts:				buttons: [mnemonicButtonLabel(localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK"))],
src/vs/platform/windows/electron-main/windowsMainService.ts:				message: uri.scheme === Schemas.file ? localize('pathNotExistTitle', "Path does not exist") : localize('uriInvalidTitle', "URI can not be opened"),
src/vs/platform/windows/electron-main/windowsMainService.ts:					localize('pathNotExistDetail', "The path '{0}' does not exist on this computer.", getPathLabel(uri, { os: OS, tildify: this.environmentMainService })) :
src/vs/platform/windows/electron-main/windowsMainService.ts:					localize('uriInvalidDetail', "The URI '{0}' is not valid and can not be opened.", uri.toString(true)),
src/vs/platform/telemetry/common/telemetryService.ts:	const telemetryText = localize('telemetry.telemetryLevelMd', "Controls {0} telemetry, first-party extension telemetry and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how {0} is performing, where improvements need to be made, and how features are being used.", product.nameLong);
src/vs/platform/telemetry/common/telemetryService.ts:		localize("telemetry.docsStatement", "Read more about the [data we collect]({0}).", 'https://aka.ms/vscode-telemetry') :
src/vs/platform/telemetry/common/telemetryService.ts:		localize("telemetry.docsAndPrivacyStatement", "Read more about the [data we collect]({0}) and our [privacy statement]({1}).", 'https://aka.ms/vscode-telemetry', product.privacyStatementUrl);
src/vs/platform/telemetry/common/telemetryService.ts:	const restartString = !isWeb ? localize('telemetry.restart', 'A full restart of the application is necessary for crash reporting changes to take effect.') : '';
src/vs/platform/telemetry/common/telemetryService.ts:	const crashReportsHeader = localize('telemetry.crashReports', "Crash Reports");
src/vs/platform/telemetry/common/telemetryService.ts:	const errorsHeader = localize('telemetry.errors', "Error Telemetry");
src/vs/platform/telemetry/common/telemetryService.ts:	const usageHeader = localize('telemetry.usage', "Usage Data");
src/vs/platform/telemetry/common/telemetryService.ts:	const telemetryTableDescription = localize('telemetry.telemetryLevel.tableDescription', "The following table outlines the data sent with each setting:");
src/vs/platform/telemetry/common/telemetryService.ts:	const deprecatedSettingNote = localize('telemetry.telemetryLevel.deprecated', "****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*");
src/vs/platform/telemetry/common/telemetryService.ts:	'title': localize('telemetryConfigurationTitle', "Telemetry"),
src/vs/platform/telemetry/common/telemetryService.ts:				localize('telemetry.telemetryLevel.default', "Sends usage data, errors, and crash reports."),
src/vs/platform/telemetry/common/telemetryService.ts:				localize('telemetry.telemetryLevel.error', "Sends general error telemetry and crash reports."),
src/vs/platform/telemetry/common/telemetryService.ts:				localize('telemetry.telemetryLevel.crash', "Sends OS level crash reports."),
src/vs/platform/telemetry/common/telemetryService.ts:				localize('telemetry.telemetryLevel.off', "Disables all product telemetry.")
src/vs/platform/telemetry/common/telemetryService.ts:	'title': localize('telemetryConfigurationTitle', "Telemetry"),
src/vs/platform/telemetry/common/telemetryService.ts:					localize('telemetry.enableTelemetry', "Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made.", product.nameLong) :
src/vs/platform/telemetry/common/telemetryService.ts:					localize('telemetry.enableTelemetryMd', "Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made. [Read more]({1}) about what we collect and our privacy statement.", product.nameLong, product.privacyStatementUrl),
src/vs/platform/telemetry/common/telemetryService.ts:			'markdownDeprecationMessage': localize('enableTelemetryDeprecated', "If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the {0} setting.", `\`#${TELEMETRY_SETTING_ID}#\``),
src/vs/platform/update/common/update.config.contribution.ts:	title: localize('updateConfigurationTitle', "Update"),
src/vs/platform/update/common/update.config.contribution.ts:			description: localize('updateMode', "Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service."),
src/vs/platform/update/common/update.config.contribution.ts:				localize('none', "Disable updates."),
src/vs/platform/update/common/update.config.contribution.ts:				localize('manual', "Disable automatic background update checks. Updates will be available if you manually check for updates."),
src/vs/platform/update/common/update.config.contribution.ts:				localize('start', "Check for updates only on startup. Disable automatic background update checks."),
src/vs/platform/update/common/update.config.contribution.ts:				localize('default', "Enable automatic update checks. Code will check for updates automatically and periodically.")
src/vs/platform/update/common/update.config.contribution.ts:			description: localize('updateMode', "Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service."),
src/vs/platform/update/common/update.config.contribution.ts:			deprecationMessage: localize('deprecated', "This setting is deprecated, please use '{0}' instead.", 'update.mode')
src/vs/platform/update/common/update.config.contribution.ts:			title: localize('enableWindowsBackgroundUpdatesTitle', "Enable Background Updates on Windows"),
src/vs/platform/update/common/update.config.contribution.ts:			description: localize('enableWindowsBackgroundUpdates', "Enable to download and install new VS Code versions in the background on Windows."),
src/vs/platform/update/common/update.config.contribution.ts:			description: localize('showReleaseNotes', "Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service."),
src/vs/platform/userDataProfile/common/userDataProfile.ts:			const defaultProfile = toUserDataProfile(hash(this.environmentService.userRoamingDataHome.path).toString(16), localize('defaultProfile', "Default"), this.environmentService.userRoamingDataHome);
src/vs/platform/remoteTunnel/electron-browser/remoteTunnelService.ts:		this.setTunnelStatus(TunnelStates.connecting(localize('remoteTunnelService.authorizing', 'Authorizing')));
src/vs/platform/userDataSync/common/abstractSynchronizer.ts:			throw new UserDataSyncError(localize({ key: 'incompatible', comment: ['This is an error while syncing a resource that its local version is not compatible with its remote version.'] }, "Cannot sync {0} as its local version {1} is not compatible with its remote version {2}", this.resource, this.version, remoteUserData.syncData.version), UserDataSyncErrorCode.IncompatibleLocalContent, this.resource);
src/vs/platform/userDataSync/common/abstractSynchronizer.ts:		throw new UserDataSyncError(localize('incompatible sync data', "Cannot parse sync data as it is not compatible with the current version."), UserDataSyncErrorCode.IncompatibleRemoteContent, this.resource);
src/vs/platform/userDataSync/common/keybindingsSync.ts:				throw new UserDataSyncError(localize('errorInvalidSettings', "Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it."), UserDataSyncErrorCode.LocalInvalidContent, this.resource);
src/vs/platform/userDataSync/common/keybindingsSync.ts:				throw new UserDataSyncError(localize('errorInvalidSettings', "Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it."), UserDataSyncErrorCode.LocalInvalidContent, this.resource);
src/vs/platform/userDataSync/common/settingsSync.ts:			throw new UserDataSyncError(localize('errorInvalidSettings', "Unable to sync settings as there are errors/warning in settings file."), UserDataSyncErrorCode.LocalInvalidContent, this.resource);
src/vs/platform/userDataSync/common/userDataSync.ts:		title: localize('settings sync', "Settings Sync"),
src/vs/platform/userDataSync/common/userDataSync.ts:				description: localize('settingsSync.keybindingsPerPlatform', "Synchronize keybindings for each platform."),
src/vs/platform/userDataSync/common/userDataSync.ts:				markdownDescription: localize('settingsSync.ignoredExtensions', "List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`."),
src/vs/platform/userDataSync/common/userDataSync.ts:					errorMessage: localize('app.extension.identifier.errorMessage', "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'.")
src/vs/platform/userDataSync/common/userDataSync.ts:				description: localize('settingsSync.ignoredSettings', "Configure settings to be ignored while synchronizing."),
src/vs/platform/userDataSync/common/userDataSyncMachines.ts:			throw new Error(localize('error incompatible', "Cannot read machines data as the current version is incompatible. Please update {0} and try again.", this.productService.nameLong));
src/vs/platform/userDataSync/common/userDataAutoSyncService.ts:						throw new UserDataAutoSyncError(localize('default service changed', "Cannot sync because default service has changed"), UserDataSyncErrorCode.DefaultServiceChanged);
src/vs/platform/userDataSync/common/userDataAutoSyncService.ts:						throw new UserDataAutoSyncError(localize('service changed', "Cannot sync because sync service has changed"), UserDataSyncErrorCode.ServiceChanged);
src/vs/platform/userDataSync/common/userDataAutoSyncService.ts:					throw new UserDataAutoSyncError(localize('turned off', "Cannot sync because syncing is turned off in the cloud"), UserDataSyncErrorCode.TurnedOff);
src/vs/platform/userDataSync/common/userDataAutoSyncService.ts:						throw new UserDataAutoSyncError(localize('default service changed', "Cannot sync because default service has changed"), UserDataSyncErrorCode.DefaultServiceChanged);
src/vs/platform/userDataSync/common/userDataAutoSyncService.ts:						throw new UserDataAutoSyncError(localize('service changed', "Cannot sync because sync service has changed"), UserDataSyncErrorCode.ServiceChanged);
src/vs/platform/userDataSync/common/userDataAutoSyncService.ts:					throw new UserDataAutoSyncError(localize('session expired', "Cannot sync because current session is expired"), UserDataSyncErrorCode.SessionExpired);
src/vs/platform/userDataSync/common/userDataAutoSyncService.ts:				throw new UserDataAutoSyncError(localize('turned off machine', "Cannot sync because syncing is turned off on this machine from another machine."), UserDataSyncErrorCode.TurnedOff);
src/vs/platform/userDataSync/common/userDataSyncResourceProvider.ts:		throw new UserDataSyncError(localize('incompatible sync data', "Cannot parse sync data as it is not compatible with the current version."), UserDataSyncErrorCode.IncompatibleRemoteContent, syncResource);
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize('confirmWorkspace', "Would you like to undo '{0}' across all files?", element.label),
src/vs/platform/undoRedo/common/undoRedoService.ts:					nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1'] }, "Undo in {0} Files", editStackSnapshot.editStacks.length),
src/vs/platform/undoRedo/common/undoRedoService.ts:					nls.localize('nok', "Undo this File"),
src/vs/platform/undoRedo/common/undoRedoService.ts:					nls.localize('cancel', "Cancel"),
src/vs/platform/undoRedo/common/undoRedoService.ts:			const message = nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:			nls.localize('confirmDifferentSource', "Would you like to undo '{0}'?", element.label),
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize('confirmDifferentSource.yes', "Yes"),
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize('confirmDifferentSource.no', "No"),
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:			const message = nls.localize(
src/vs/platform/theme/common/iconRegistry.ts:					fontId: { type: 'string', description: localize('iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.') },
src/vs/platform/theme/common/iconRegistry.ts:					fontCharacter: { type: 'string', description: localize('iconDefinition.fontCharacter', 'The font character associated with the icon definition.') }
src/vs/platform/theme/common/iconRegistry.ts:export const widgetClose = registerIcon('widget-close', Codicon.close, localize('widgetClose', 'Icon for the close action in widgets.'));
src/vs/platform/theme/common/iconRegistry.ts:export const gotoPreviousLocation = registerIcon('goto-previous-location', Codicon.arrowUp, localize('previousChangeIcon', 'Icon for goto previous editor location.'));
src/vs/platform/theme/common/iconRegistry.ts:export const gotoNextLocation = registerIcon('goto-next-location', Codicon.arrowDown, localize('nextChangeIcon', 'Icon for goto next editor location.'));
src/vs/platform/theme/common/tokenClassificationRegistry.ts:		//errorMessage: nls.localize('schema.token.errors', 'Valid token selectors have the form (*|tokenType)(.tokenModifier)*(:tokenLanguage)?.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:				description: nls.localize('schema.token.settings', 'Colors and styles for the token.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						description: nls.localize('schema.token.foreground', 'Foreground color for the token.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						deprecationMessage: nls.localize('schema.token.background.warning', 'Token background colors are currently not supported.')
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						description: nls.localize('schema.token.fontStyle', 'Sets the all font styles of the rule: \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						patternErrorMessage: nls.localize('schema.fontStyle.error', 'Font style must be \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. The empty string unsets all styles.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:							{ label: nls.localize('schema.token.fontStyle.none', 'None (clear inherited style)'), bodyText: '""' },
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						description: nls.localize('schema.token.bold', 'Sets or unsets the font style to bold. Note, the presence of \'fontStyle\' overrides this setting.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						description: nls.localize('schema.token.italic', 'Sets or unsets the font style to italic. Note, the presence of \'fontStyle\' overrides this setting.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						description: nls.localize('schema.token.underline', 'Sets or unsets the font style to underline. Note, the presence of \'fontStyle\' overrides this setting.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:						description: nls.localize('schema.token.strikethrough', 'Sets or unsets the font style to strikethrough. Note, the presence of \'fontStyle\' overrides this setting.'),
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('comment', nls.localize('comment', "Style for comments."), [['comment']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('string', nls.localize('string', "Style for strings."), [['string']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('keyword', nls.localize('keyword', "Style for keywords."), [['keyword.control']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('number', nls.localize('number', "Style for numbers."), [['constant.numeric']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('regexp', nls.localize('regexp', "Style for expressions."), [['constant.regexp']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('operator', nls.localize('operator', "Style for operators."), [['keyword.operator']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('namespace', nls.localize('namespace', "Style for namespaces."), [['entity.name.namespace']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('type', nls.localize('type', "Style for types."), [['entity.name.type'], ['support.type']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('struct', nls.localize('struct', "Style for structs."), [['entity.name.type.struct']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('class', nls.localize('class', "Style for classes."), [['entity.name.type.class'], ['support.class']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('interface', nls.localize('interface', "Style for interfaces."), [['entity.name.type.interface']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('enum', nls.localize('enum', "Style for enums."), [['entity.name.type.enum']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('typeParameter', nls.localize('typeParameter', "Style for type parameters."), [['entity.name.type.parameter']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('function', nls.localize('function', "Style for functions"), [['entity.name.function'], ['support.function']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('member', nls.localize('member', "Style for member functions"), [], 'method', 'Deprecated use `method` instead');
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('method', nls.localize('method', "Style for method (member functions)"), [['entity.name.function.member'], ['support.function']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('macro', nls.localize('macro', "Style for macros."), [['entity.name.function.preprocessor']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('variable', nls.localize('variable', "Style for variables."), [['variable.other.readwrite'], ['entity.name.variable']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('parameter', nls.localize('parameter', "Style for parameters."), [['variable.parameter']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('property', nls.localize('property', "Style for properties."), [['variable.other.property']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('enumMember', nls.localize('enumMember', "Style for enum members."), [['variable.other.enummember']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('event', nls.localize('event', "Style for events."), [['variable.other.event']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('decorator', nls.localize('decorator', "Style for decorators & annotations."), [['entity.name.decorator'], ['entity.name.function']]);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registerTokenType('label', nls.localize('labels', "Style for labels. "), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('declaration', nls.localize('declaration', "Style for all symbol declarations."), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('documentation', nls.localize('documentation', "Style to use for references in documentation."), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('static', nls.localize('static', "Style to use for symbols that are static."), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('abstract', nls.localize('abstract', "Style to use for symbols that are abstract."), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('deprecated', nls.localize('deprecated', "Style to use for symbols that are deprecated."), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('modification', nls.localize('modification', "Style to use for write accesses."), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('async', nls.localize('async', "Style to use for symbols that are async."), undefined);
src/vs/platform/theme/common/tokenClassificationRegistry.ts:	registry.registerTokenModifier('readonly', nls.localize('readonly', "Style to use for symbols that are readonly."), undefined);
src/vs/platform/theme/common/colorRegistry.ts:export const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('foreground', "Overall foreground color. This color is only used if not overridden by a component."));
src/vs/platform/theme/common/colorRegistry.ts:export const disabledForeground = registerColor('disabledForeground', { dark: '#CCCCCC80', light: '#61616180', hcDark: '#A5A5A5', hcLight: '#7F7F7F' }, nls.localize('disabledForeground', "Overall foreground for disabled elements. This color is only used if not overridden by a component."));
src/vs/platform/theme/common/colorRegistry.ts:export const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('errorForeground', "Overall foreground color for error messages. This color is only used if not overridden by a component."));
src/vs/platform/theme/common/colorRegistry.ts:export const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', "Foreground color for description text providing additional information, for example for a label."));
src/vs/platform/theme/common/colorRegistry.ts:export const iconForeground = registerColor('icon.foreground', { dark: '#C5C5C5', light: '#424242', hcDark: '#FFFFFF', hcLight: '#292929' }, nls.localize('iconForeground', "The default color for icons in the workbench."));
src/vs/platform/theme/common/colorRegistry.ts:export const focusBorder = registerColor('focusBorder', { dark: '#007FD4', light: '#0090F1', hcDark: '#F38518', hcLight: '#0F4A85' }, nls.localize('focusBorder', "Overall border color for focused elements. This color is only used if not overridden by a component."));
src/vs/platform/theme/common/colorRegistry.ts:export const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hcDark: '#6FC3DF', hcLight: '#0F4A85' }, nls.localize('contrastBorder', "An extra border around elements to separate them from others for greater contrast."));
src/vs/platform/theme/common/colorRegistry.ts:export const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('activeContrastBorder', "An extra border around active elements to separate them from others for greater contrast."));
src/vs/platform/theme/common/colorRegistry.ts:export const selectionBackground = registerColor('selection.background', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('selectionBackground', "The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor."));
src/vs/platform/theme/common/colorRegistry.ts:export const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hcDark: Color.black, hcLight: '#292929' }, nls.localize('textSeparatorForeground', "Color for text separators."));
src/vs/platform/theme/common/colorRegistry.ts:export const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkForeground', "Foreground color for links in text."));
src/vs/platform/theme/common/colorRegistry.ts:export const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hcDark: '#3794FF', hcLight: '#0F4A85' }, nls.localize('textLinkActiveForeground', "Foreground color for links in text when clicked on and on mouse hover."));
src/vs/platform/theme/common/colorRegistry.ts:export const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hcDark: '#D7BA7D', hcLight: '#292929' }, nls.localize('textPreformatForeground', "Foreground color for preformatted text segments."));
src/vs/platform/theme/common/colorRegistry.ts:export const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#7f7f7f1a', dark: '#7f7f7f1a', hcDark: null, hcLight: '#F2F2F2' }, nls.localize('textBlockQuoteBackground', "Background color for block quotes in text."));
src/vs/platform/theme/common/colorRegistry.ts:export const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hcDark: Color.white, hcLight: '#292929' }, nls.localize('textBlockQuoteBorder', "Border color for block quotes in text."));
src/vs/platform/theme/common/colorRegistry.ts:export const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hcDark: Color.black, hcLight: '#F2F2F2' }, nls.localize('textCodeBlockBackground', "Background color for code blocks in text."));
src/vs/platform/theme/common/colorRegistry.ts:export const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', "Input box background."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('inputBoxForeground', "Input box foreground."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', "Input box border."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC00', light: '#007ACC00', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', "Border color of activated options in input fields."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', "Background color of activated options in input fields."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', "Background hover color of options in input fields."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: null, hcLight: foreground }, nls.localize('inputOption.activeForeground', "Foreground color of activated options in input fields."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', "Input box foreground color for placeholder text."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', "Input validation background color for information severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', "Input validation foreground color for information severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', "Input validation border color for information severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', "Input validation background color for warning severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', "Input validation foreground color for warning severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', "Input validation border color for warning severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', "Input validation background color for error severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', "Input validation foreground color for error severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', "Input validation border color for error severity."));
src/vs/platform/theme/common/colorRegistry.ts:export const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', "Dropdown background."));
src/vs/platform/theme/common/colorRegistry.ts:export const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', "Dropdown list background."));
src/vs/platform/theme/common/colorRegistry.ts:export const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', "Dropdown foreground."));
src/vs/platform/theme/common/colorRegistry.ts:export const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', "Dropdown border."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: Color.white }, nls.localize('buttonForeground', "Button foreground color."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonSeparator = registerColor('button.separator', { dark: transparent(buttonForeground, .4), light: transparent(buttonForeground, .4), hcDark: transparent(buttonForeground, .4), hcLight: transparent(buttonForeground, .4) }, nls.localize('buttonSeparator', "Button separator color."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', "Button background color."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonHoverBackground', "Button background color when hovering."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonBorder = registerColor('button.border', { dark: contrastBorder, light: contrastBorder, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('buttonBorder', "Button border color."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', "Secondary button foreground color."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', "Secondary button background color."));
src/vs/platform/theme/common/colorRegistry.ts:export const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', "Secondary button background color when hovering."));
src/vs/platform/theme/common/colorRegistry.ts:export const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', "Badge background color. Badges are small information labels, e.g. for search results count."));
src/vs/platform/theme/common/colorRegistry.ts:export const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', "Badge foreground color. Badges are small information labels, e.g. for search results count."));
src/vs/platform/theme/common/colorRegistry.ts:export const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', "Scrollbar shadow to indicate that the view is scrolled."));
src/vs/platform/theme/common/colorRegistry.ts:export const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', "Scrollbar slider background color."));
src/vs/platform/theme/common/colorRegistry.ts:export const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', "Scrollbar slider background color when hovering."));
src/vs/platform/theme/common/colorRegistry.ts:export const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', "Scrollbar slider background color when clicked on."));
src/vs/platform/theme/common/colorRegistry.ts:export const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', "Background color of the progress bar that can show for long running operations."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD37', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: '#' }, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));
src/vs/platform/theme/common/colorRegistry.ts:export const sashHoverBorder = registerColor('sash.hoverBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, nls.localize('sashActiveBorder', "Border color of active sashes."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', "Editor background color."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', "Editor default foreground color."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorStickyScrollBackground = registerColor('editorStickyScroll.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorStickyScrollBackground', "Sticky scroll background color for the editor"));
src/vs/platform/theme/common/colorRegistry.ts:export const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', "Sticky scroll on hover background color for the editor"));
src/vs/platform/theme/common/colorRegistry.ts:export const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('editorWidgetResizeBorder', "Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget."));
src/vs/platform/theme/common/colorRegistry.ts:export const quickInputBackground = registerColor('quickInput.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('pickerBackground', "Quick picker background color. The quick picker widget is the container for pickers like the command palette."));
src/vs/platform/theme/common/colorRegistry.ts:export const quickInputForeground = registerColor('quickInput.foreground', { dark: editorWidgetForeground, light: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('pickerForeground', "Quick picker foreground color. The quick picker widget is the container for pickers like the command palette."));
src/vs/platform/theme/common/colorRegistry.ts:export const quickInputTitleBackground = registerColor('quickInputTitle.background', { dark: new Color(new RGBA(255, 255, 255, 0.105)), light: new Color(new RGBA(0, 0, 0, 0.06)), hcDark: '#000000', hcLight: Color.white }, nls.localize('pickerTitleBackground', "Quick picker title background color. The quick picker widget is the container for pickers like the command palette."));
src/vs/platform/theme/common/colorRegistry.ts:export const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupForeground', "Quick picker color for grouping labels."));
src/vs/platform/theme/common/colorRegistry.ts:export const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('pickerGroupBorder', "Quick picker color for grouping borders."));
src/vs/platform/theme/common/colorRegistry.ts:export const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', "Keybinding label background color. The keybinding label is used to represent a keyboard shortcut."));
src/vs/platform/theme/common/colorRegistry.ts:export const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', "Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut."));
src/vs/platform/theme/common/colorRegistry.ts:export const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', "Keybinding label border color. The keybinding label is used to represent a keyboard shortcut."));
src/vs/platform/theme/common/colorRegistry.ts:export const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', "Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', "Color of the editor selection."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', "Color of the selected text for high contrast."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', "Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', "Border color for regions with the same content as the selection."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', "Color of the current search match."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', "Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', "Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', "Border color of the current search match."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', "Border color of the other search matches."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', "Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
src/vs/platform/theme/common/colorRegistry.ts:export const searchEditorFindMatch = registerColor('searchEditor.findMatchBackground', { light: transparent(editorFindMatchHighlight, 0.66), dark: transparent(editorFindMatchHighlight, 0.66), hcDark: editorFindMatchHighlight, hcLight: editorFindMatchHighlight }, nls.localize('searchEditor.queryMatch', "Color of the Search Editor query matches."));
src/vs/platform/theme/common/colorRegistry.ts:export const searchEditorFindMatchBorder = registerColor('searchEditor.findMatchBorder', { light: transparent(editorFindMatchHighlightBorder, 0.66), dark: transparent(editorFindMatchHighlightBorder, 0.66), hcDark: editorFindMatchHighlightBorder, hcLight: editorFindMatchHighlightBorder }, nls.localize('searchEditor.editorFindMatchBorder', "Border color of the Search Editor query matches."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', "Background color of the editor hover status bar."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: badgeForeground, light: badgeForeground, hcDark: Color.black, hcLight: badgeForeground }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .8), light: transparent(badgeBackground, .6), hcDark: '#f38518', hcLight: badgeBackground }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));
src/vs/platform/theme/common/colorRegistry.ts:export const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', "The color used for the lightbulb actions icon."));
src/vs/platform/theme/common/colorRegistry.ts:export const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', "The color used for the lightbulb auto fix actions icon."));
src/vs/platform/theme/common/colorRegistry.ts:export const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));
src/vs/platform/theme/common/colorRegistry.ts:export const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));
src/vs/platform/theme/common/colorRegistry.ts:export const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));
src/vs/platform/theme/common/colorRegistry.ts:export const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));
src/vs/platform/theme/common/colorRegistry.ts:export const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));
src/vs/platform/theme/common/colorRegistry.ts:export const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));
src/vs/platform/theme/common/colorRegistry.ts:export const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));
src/vs/platform/theme/common/colorRegistry.ts:export const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', "Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views."));
src/vs/platform/theme/common/colorRegistry.ts:export const listFocusBackground = registerColor('list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusBackground', "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusForeground', "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listFocusOutline = registerColor('list.focusOutline', { dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('listFocusOutline', "List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusAndSelectionOutline', "List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusBackground', "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusOutline', "List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
src/vs/platform/theme/common/colorRegistry.ts:export const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', "List/Tree background when hovering over items using the mouse."));
src/vs/platform/theme/common/colorRegistry.ts:export const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listHoverForeground', "List/Tree foreground when hovering over items using the mouse."));
src/vs/platform/theme/common/colorRegistry.ts:export const listDropBackground = registerColor('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', "List/Tree drag and drop background when moving items around using the mouse."));
src/vs/platform/theme/common/colorRegistry.ts:export const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listFocusHighlightForeground = registerColor('list.focusHighlightForeground', { dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listWarningForeground = registerColor('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listFilterWidgetShadow = registerColor('listFilterWidget.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, nls.localize('listFilterWidgetShadow', 'Shadown color of the type filter widget in lists and trees.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listFilterMatchHighlight = registerColor('list.filterMatchBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));
src/vs/platform/theme/common/colorRegistry.ts:export const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder', { dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));
src/vs/platform/theme/common/colorRegistry.ts:export const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', "Tree stroke color for the indentation guides."));
src/vs/platform/theme/common/colorRegistry.ts:export const tableColumnsBorder = registerColor('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', "Table border color between columns."));
src/vs/platform/theme/common/colorRegistry.ts:export const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground', { dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', "Background color for odd table rows."));
src/vs/platform/theme/common/colorRegistry.ts:export const listDeemphasizedForeground = registerColor('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', "List/Tree foreground color for items that are deemphasized. "));
src/vs/platform/theme/common/colorRegistry.ts:export const checkboxBackground = registerColor('checkbox.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('checkbox.background', "Background color of checkbox widget."));
src/vs/platform/theme/common/colorRegistry.ts:export const checkboxSelectBackground = registerColor('checkbox.selectBackground', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('checkbox.select.background', "Background color of checkbox widget when the element it's in is selected."));
src/vs/platform/theme/common/colorRegistry.ts:export const checkboxForeground = registerColor('checkbox.foreground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('checkbox.foreground', "Foreground color of checkbox widget."));
src/vs/platform/theme/common/colorRegistry.ts:export const checkboxBorder = registerColor('checkbox.border', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, nls.localize('checkbox.border', "Border color of checkbox widget."));
src/vs/platform/theme/common/colorRegistry.ts:export const checkboxSelectBorder = registerColor('checkbox.selectBorder', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('checkbox.select.border', "Border color of checkbox widget when the element it's in is selected."));
src/vs/platform/theme/common/colorRegistry.ts:export const _deprecatedQuickInputListFocusBackground = registerColor('quickInput.list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, '', undefined, nls.localize('quickInput.list.focusBackground deprecation', "Please use quickInputList.focusBackground instead"));
src/vs/platform/theme/common/colorRegistry.ts:export const quickInputListFocusForeground = registerColor('quickInputList.focusForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('quickInput.listFocusForeground', "Quick picker foreground color for the focused item."));
src/vs/platform/theme/common/colorRegistry.ts:export const quickInputListFocusIconForeground = registerColor('quickInputList.focusIconForeground', { dark: listActiveSelectionIconForeground, light: listActiveSelectionIconForeground, hcDark: listActiveSelectionIconForeground, hcLight: listActiveSelectionIconForeground }, nls.localize('quickInput.listFocusIconForeground', "Quick picker icon foreground color for the focused item."));
src/vs/platform/theme/common/colorRegistry.ts:export const quickInputListFocusBackground = registerColor('quickInputList.focusBackground', { dark: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), light: oneOf(_deprecatedQuickInputListFocusBackground, listActiveSelectionBackground), hcDark: null, hcLight: null }, nls.localize('quickInput.listFocusBackground', "Quick picker background color for the focused item."));
src/vs/platform/theme/common/colorRegistry.ts:export const menuBorder = registerColor('menu.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuBorder', "Border color of menus."));
src/vs/platform/theme/common/colorRegistry.ts:export const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: foreground, hcDark: selectForeground, hcLight: selectForeground }, nls.localize('menuForeground', "Foreground color of menu items."));
src/vs/platform/theme/common/colorRegistry.ts:export const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, nls.localize('menuBackground', "Background color of menu items."));
src/vs/platform/theme/common/colorRegistry.ts:export const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hcDark: listActiveSelectionForeground, hcLight: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', "Foreground color of the selected menu item in menus."));
src/vs/platform/theme/common/colorRegistry.ts:export const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hcDark: listActiveSelectionBackground, hcLight: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', "Background color of the selected menu item in menus."));
src/vs/platform/theme/common/colorRegistry.ts:export const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('menuSelectionBorder', "Border color of the selected menu item in menus."));
src/vs/platform/theme/common/colorRegistry.ts:export const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#606060', light: '#D4D4D4', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('menuSeparatorBackground', "Color of a separator menu item in menus."));
src/vs/platform/theme/common/colorRegistry.ts:export const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', "Toolbar background when hovering over actions using the mouse"));
src/vs/platform/theme/common/colorRegistry.ts:export const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', "Toolbar outline when hovering over actions using the mouse"));
src/vs/platform/theme/common/colorRegistry.ts:export const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', "Toolbar background when holding the mouse over actions"));
src/vs/platform/theme/common/colorRegistry.ts:export const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', "Highlight background color of a snippet tabstop."));
src/vs/platform/theme/common/colorRegistry.ts:export const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetTabstopHighlightBorder', "Highlight border color of a snippet tabstop."));
src/vs/platform/theme/common/colorRegistry.ts:export const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetFinalTabstopHighlightBackground', "Highlight background color of the final tabstop of a snippet."));
src/vs/platform/theme/common/colorRegistry.ts:export const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', "Highlight border color of the final tabstop of a snippet."));
src/vs/platform/theme/common/colorRegistry.ts:export const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hcDark: transparent(foreground, 0.8), hcLight: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
src/vs/platform/theme/common/colorRegistry.ts:export const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('breadcrumbsBackground', "Background color of breadcrumb items."));
src/vs/platform/theme/common/colorRegistry.ts:export const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
src/vs/platform/theme/common/colorRegistry.ts:export const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', "Color of selected breadcrumb items."));
src/vs/platform/theme/common/colorRegistry.ts:export const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', "Background color of breadcrumb item picker."));
src/vs/platform/theme/common/colorRegistry.ts:export const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency), hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency), hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hcDark: transparent(mergeCommonHeaderBackground, contentTransparency), hcLight: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));
src/vs/platform/theme/common/colorRegistry.ts:export const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));
src/vs/platform/theme/common/colorRegistry.ts:export const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));
src/vs/platform/theme/common/colorRegistry.ts:export const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));
src/vs/platform/theme/common/colorRegistry.ts:export const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const minimapFindMatch = registerColor('minimap.findMatchHighlight', { light: '#d18616', dark: '#d18616', hcDark: '#AB5A00', hcLight: '#0F4A85' }, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const minimapSelectionOccurrenceHighlight = registerColor('minimap.selectionOccurrenceHighlight', { light: '#c9c9c9', dark: '#676767', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const minimapSelection = registerColor('minimap.selectionHighlight', { light: '#ADD6FF', dark: '#264F78', hcDark: '#ffffff', hcLight: '#0F4A85' }, nls.localize('minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true);
src/vs/platform/theme/common/colorRegistry.ts:export const minimapError = registerColor('minimap.errorHighlight', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('minimapError', 'Minimap marker color for errors.'));
src/vs/platform/theme/common/colorRegistry.ts:export const minimapWarning = registerColor('minimap.warningHighlight', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Minimap marker color for warnings.'));
src/vs/platform/theme/common/colorRegistry.ts:export const minimapBackground = registerColor('minimap.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('minimapBackground', "Minimap background color."));
src/vs/platform/theme/common/colorRegistry.ts:export const minimapForegroundOpacity = registerColor('minimap.foregroundOpacity', { dark: Color.fromHex('#000f'), light: Color.fromHex('#000f'), hcDark: Color.fromHex('#000f'), hcLight: Color.fromHex('#000f') }, nls.localize('minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, "#000000c0" will render the elements with 75% opacity.'));
src/vs/platform/theme/common/colorRegistry.ts:export const minimapSliderBackground = registerColor('minimapSlider.background', { light: transparent(scrollbarSliderBackground, 0.5), dark: transparent(scrollbarSliderBackground, 0.5), hcDark: transparent(scrollbarSliderBackground, 0.5), hcLight: transparent(scrollbarSliderBackground, 0.5) }, nls.localize('minimapSliderBackground', "Minimap slider background color."));
src/vs/platform/theme/common/colorRegistry.ts:export const minimapSliderHoverBackground = registerColor('minimapSlider.hoverBackground', { light: transparent(scrollbarSliderHoverBackground, 0.5), dark: transparent(scrollbarSliderHoverBackground, 0.5), hcDark: transparent(scrollbarSliderHoverBackground, 0.5), hcLight: transparent(scrollbarSliderHoverBackground, 0.5) }, nls.localize('minimapSliderHoverBackground', "Minimap slider background color when hovering."));
src/vs/platform/theme/common/colorRegistry.ts:export const minimapSliderActiveBackground = registerColor('minimapSlider.activeBackground', { light: transparent(scrollbarSliderActiveBackground, 0.5), dark: transparent(scrollbarSliderActiveBackground, 0.5), hcDark: transparent(scrollbarSliderActiveBackground, 0.5), hcLight: transparent(scrollbarSliderActiveBackground, 0.5) }, nls.localize('minimapSliderActiveBackground', "Minimap slider background color when clicked on."));
src/vs/platform/theme/common/colorRegistry.ts:export const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('problemsErrorIconForeground', "The color used for the problems error icon."));
src/vs/platform/theme/common/colorRegistry.ts:export const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('problemsWarningIconForeground', "The color used for the problems warning icon."));
src/vs/platform/theme/common/colorRegistry.ts:export const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('problemsInfoIconForeground', "The color used for the problems info icon."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsForeground = registerColor('charts.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('chartsForeground', "The foreground color used in charts."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsLines = registerColor('charts.lines', { dark: transparent(foreground, .5), light: transparent(foreground, .5), hcDark: transparent(foreground, .5), hcLight: transparent(foreground, .5) }, nls.localize('chartsLines', "The color used for horizontal lines in charts."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('chartsRed', "The red color used in chart visualizations."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsBlue = registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('chartsBlue', "The blue color used in chart visualizations."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('chartsYellow', "The yellow color used in chart visualizations."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsOrange = registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hcDark: minimapFindMatch, hcLight: minimapFindMatch }, nls.localize('chartsOrange', "The orange color used in chart visualizations."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', "The green color used in chart visualizations."));
src/vs/platform/theme/common/colorRegistry.ts:export const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', "The purple color used in chart visualizations."));
src/vs/platform/request/common/request.ts:		title: localize('httpConfigurationTitle', "HTTP"),
src/vs/platform/request/common/request.ts:				markdownDescription: localize('proxy', "The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables."),
src/vs/platform/request/common/request.ts:				description: localize('strictSSL', "Controls whether the proxy server certificate should be verified against the list of supplied CAs."),
src/vs/platform/request/common/request.ts:				markdownDescription: localize('proxyAuthorization', "The value to send as the `Proxy-Authorization` header for every network request."),
src/vs/platform/request/common/request.ts:					localize('proxySupportOff', "Disable proxy support for extensions."),
src/vs/platform/request/common/request.ts:					localize('proxySupportOn', "Enable proxy support for extensions."),
src/vs/platform/request/common/request.ts:					localize('proxySupportFallback', "Enable proxy support for extensions, fall back to request options, when no proxy found."),
src/vs/platform/request/common/request.ts:					localize('proxySupportOverride', "Enable proxy support for extensions, override request options."),
src/vs/platform/request/common/request.ts:				description: localize('proxySupport', "Use the proxy support for extensions."),
src/vs/platform/request/common/request.ts:				description: localize('systemCertificates', "Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)"),
src/vs/platform/shell/node/shellEnv.ts:					reject(new Error(localize('resolveShellEnvTimeout', "Unable to resolve your shell environment in a reasonable time. Please review your shell configuration.")));
src/vs/platform/shell/node/shellEnv.ts:						reject(new Error(localize('resolveShellEnvError', "Unable to resolve your shell environment: {0}", toErrorMessage(error))));
src/vs/platform/shell/node/shellEnv.ts:				return reject(new Error(localize('resolveShellEnvExitError', "Unexpected exit code from spawned shell (code {0}, signal {1})", code, signal)));
src/vs/platform/quickinput/browser/commandsQuickAccess.ts:				localize('commandPickAriaLabelWithKeybinding', "{0}, {1}", commandPick.label, keybinding.getAriaLabel()) :
src/vs/platform/quickinput/browser/commandsQuickAccess.ts:				commandPicks.push({ type: 'separator', label: localize('recentlyUsed', "recently used") });
src/vs/platform/quickinput/browser/commandsQuickAccess.ts:				commandPicks.push({ type: 'separator', label: localize('morecCommands', "other commands") });
src/vs/platform/quickinput/browser/commandsQuickAccess.ts:							this.dialogService.show(Severity.Error, localize('canNotRun', "Command '{0}' resulted in an error ({1})", commandPick.label, toErrorMessage(error)));
src/vs/platform/quickinput/browser/quickPickPin.ts:		formattedItems.push({ type: 'separator', label: localize("terminal.commands.pinned", 'pinned') });
src/vs/platform/quickinput/browser/quickPickPin.ts:		tooltip: removePin ? localize('pinCommand', "Pin command") : localize('pinnedCommand', "Pinned command"),
src/vs/platform/quickinput/browser/helpQuickAccess.ts:				ariaLabel: localize('helpPickAriaLabel', "{0}, {1}", label, helpEntry.description),
src/vs/platform/list/browser/listService.ts:	title: localize('workbenchConfigurationTitle', "Workbench"),
src/vs/platform/list/browser/listService.ts:				localize('multiSelectModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
src/vs/platform/list/browser/listService.ts:				localize('multiSelectModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
src/vs/platform/list/browser/listService.ts:			description: localize({
src/vs/platform/list/browser/listService.ts:			description: localize({
src/vs/platform/list/browser/listService.ts:			description: localize('horizontalScrolling setting', "Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.")
src/vs/platform/list/browser/listService.ts:			description: localize('tree indent setting', "Controls tree indentation in pixels.")
src/vs/platform/list/browser/listService.ts:			description: localize('render tree indent guides', "Controls whether the tree should render indent guides.")
src/vs/platform/list/browser/listService.ts:			description: localize('list smoothScrolling setting', "Controls whether lists and trees have smooth scrolling."),
src/vs/platform/list/browser/listService.ts:			markdownDescription: localize('Mouse Wheel Scroll Sensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.")
src/vs/platform/list/browser/listService.ts:			description: localize('Fast Scroll Sensitivity', "Scrolling speed multiplier when pressing `Alt`.")
src/vs/platform/list/browser/listService.ts:				localize('defaultFindModeSettingKey.highlight', "Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements."),
src/vs/platform/list/browser/listService.ts:				localize('defaultFindModeSettingKey.filter', "Filter elements when searching.")
src/vs/platform/list/browser/listService.ts:			description: localize('defaultFindModeSettingKey', "Controls the default find mode for lists and trees in the workbench.")
src/vs/platform/list/browser/listService.ts:				localize('keyboardNavigationSettingKey.simple', "Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes."),
src/vs/platform/list/browser/listService.ts:				localize('keyboardNavigationSettingKey.highlight', "Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements."),
src/vs/platform/list/browser/listService.ts:				localize('keyboardNavigationSettingKey.filter', "Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.")
src/vs/platform/list/browser/listService.ts:			description: localize('keyboardNavigationSettingKey', "Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter."),
src/vs/platform/list/browser/listService.ts:			deprecationMessage: localize('keyboardNavigationSettingKeyDeprecated', "Please use 'workbench.list.defaultFindMode' instead.")
src/vs/platform/list/browser/listService.ts:			description: localize('expand mode', "Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable."),
src/vs/platform/native/electron-main/nativeHostMainService.ts:				message: localize('warnEscalation', "{0} will now prompt with 'osascript' for Administrator privileges to install the shell command.", this.productService.nameShort),
src/vs/platform/native/electron-main/nativeHostMainService.ts:					mnemonicButtonLabel(localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")),
src/vs/platform/native/electron-main/nativeHostMainService.ts:					mnemonicButtonLabel(localize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")),
src/vs/platform/native/electron-main/nativeHostMainService.ts:					throw new Error(localize('cantCreateBinFolder', "Unable to install the shell command '{0}'.", source));
src/vs/platform/native/electron-main/nativeHostMainService.ts:						message: localize('warnEscalationUninstall', "{0} will now prompt with 'osascript' for Administrator privileges to uninstall the shell command.", this.productService.nameShort),
src/vs/platform/native/electron-main/nativeHostMainService.ts:							mnemonicButtonLabel(localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")),
src/vs/platform/native/electron-main/nativeHostMainService.ts:							mnemonicButtonLabel(localize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")),
src/vs/platform/native/electron-main/nativeHostMainService.ts:							throw new Error(localize('cantUninstall', "Unable to uninstall the shell command '{0}'.", source));
src/vs/platform/native/electron-main/nativeHostMainService.ts:			throw new Error(localize('sourceMissing', "Unable to find shell script in '{0}'", target));
src/vs/platform/issue/electron-main/issueMainService.ts:				processes.push({ name: localize('local', "Local"), rootProcess: await listProcesses(process.pid) });
src/vs/platform/issue/electron-main/issueMainService.ts:				message: localize('issueReporterWriteToClipboard', "There is too much data to send to GitHub directly. The data will be copied to the clipboard, please paste it into the GitHub issue page that is opened."),
src/vs/platform/issue/electron-main/issueMainService.ts:					mnemonicButtonLabel(localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")),
src/vs/platform/issue/electron-main/issueMainService.ts:					mnemonicButtonLabel(localize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")),
src/vs/platform/issue/electron-main/issueMainService.ts:				message: localize('confirmCloseIssueReporter', "Your input will not be saved. Are you sure you want to close this window?"),
src/vs/platform/issue/electron-main/issueMainService.ts:					mnemonicButtonLabel(localize({ key: 'yes', comment: ['&& denotes a mnemonic'] }, "&&Yes")),
src/vs/platform/issue/electron-main/issueMainService.ts:					mnemonicButtonLabel(localize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")),
src/vs/platform/issue/electron-main/issueMainService.ts:					title: localize('issueReporter', "Issue Reporter"),
src/vs/platform/issue/electron-main/issueMainService.ts:					title: localize('processExplorer', "Process Explorer"),
src/vs/platform/issue/electron-main/issueMainService.ts:			message: localize('trace.message', "Successfully created the trace file"),
src/vs/platform/issue/electron-main/issueMainService.ts:			detail: localize('trace.detail', "Please create an issue and manually attach the following file:\n{0}", path),
src/vs/platform/issue/electron-main/issueMainService.ts:			buttons: [mnemonicButtonLabel(localize({ key: 'trace.ok', comment: ['&& denotes a mnemonic'] }, "&&OK"))],
src/vs/platform/menubar/electron-main/menubar.ts:			dockMenu.append(new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'miNewWindow', comment: ['&& denotes a mnemonic'] }, "New &&Window")), click: () => this.windowsMainService.openEmptyWindow({ context: OpenContext.DOCK }) }));
src/vs/platform/menubar/electron-main/menubar.ts:			const fileMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mFile', comment: ['&& denotes a mnemonic'] }, "&&File")), submenu: fileMenu });
src/vs/platform/menubar/electron-main/menubar.ts:			const editMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mEdit', comment: ['&& denotes a mnemonic'] }, "&&Edit")), submenu: editMenu });
src/vs/platform/menubar/electron-main/menubar.ts:			const selectionMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mSelection', comment: ['&& denotes a mnemonic'] }, "&&Selection")), submenu: selectionMenu });
src/vs/platform/menubar/electron-main/menubar.ts:			const viewMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mView', comment: ['&& denotes a mnemonic'] }, "&&View")), submenu: viewMenu });
src/vs/platform/menubar/electron-main/menubar.ts:			const gotoMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mGoto', comment: ['&& denotes a mnemonic'] }, "&&Go")), submenu: gotoMenu });
src/vs/platform/menubar/electron-main/menubar.ts:			const debugMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mRun', comment: ['&& denotes a mnemonic'] }, "&&Run")), submenu: debugMenu });
src/vs/platform/menubar/electron-main/menubar.ts:			const terminalMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, "&&Terminal")), submenu: terminalMenu });
src/vs/platform/menubar/electron-main/menubar.ts:			macWindowMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize('mWindow', "Window")), submenu: windowMenu, role: 'window' });
src/vs/platform/menubar/electron-main/menubar.ts:			const helpMenuItem = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'mHelp', comment: ['&& denotes a mnemonic'] }, "&&Help")), submenu: helpMenu, role: 'help' });
src/vs/platform/menubar/electron-main/menubar.ts:		const about = this.createMenuItem(nls.localize('mAbout', "About {0}", this.productService.nameLong), 'workbench.action.showAboutDialog');
src/vs/platform/menubar/electron-main/menubar.ts:			preferences = new MenuItem({ label: this.mnemonicLabel(nls.localize({ key: 'miPreferences', comment: ['&& denotes a mnemonic'] }, "&&Preferences")), submenu: preferencesMenu });
src/vs/platform/menubar/electron-main/menubar.ts:		const services = new MenuItem({ label: nls.localize('mServices', "Services"), role: 'services', submenu: servicesMenu });
src/vs/platform/menubar/electron-main/menubar.ts:		const hide = new MenuItem({ label: nls.localize('mHide', "Hide {0}", this.productService.nameLong), role: 'hide', accelerator: 'Command+H' });
src/vs/platform/menubar/electron-main/menubar.ts:		const hideOthers = new MenuItem({ label: nls.localize('mHideOthers', "Hide Others"), role: 'hideOthers', accelerator: 'Command+Alt+H' });
src/vs/platform/menubar/electron-main/menubar.ts:		const showAll = new MenuItem({ label: nls.localize('mShowAll', "Show All"), role: 'unhide' });
src/vs/platform/menubar/electron-main/menubar.ts:			label: nls.localize('miQuit', "Quit {0}", this.productService.nameLong), click: async (item, window, event) => {
src/vs/platform/menubar/electron-main/menubar.ts:					mnemonicButtonLabel(nls.localize({ key: 'quit', comment: ['&& denotes a mnemonic'] }, "&&Quit")),
src/vs/platform/menubar/electron-main/menubar.ts:					mnemonicButtonLabel(nls.localize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel"))
src/vs/platform/menubar/electron-main/menubar.ts:				message: nls.localize('quitMessage', "Are you sure you want to quit?"),
src/vs/platform/menubar/electron-main/menubar.ts:		const minimize = new MenuItem({ label: nls.localize('mMinimize', "Minimize"), role: 'minimize', accelerator: 'Command+M', enabled: this.windowsMainService.getWindowCount() > 0 });
src/vs/platform/menubar/electron-main/menubar.ts:		const zoom = new MenuItem({ label: nls.localize('mZoom', "Zoom"), role: 'zoom', enabled: this.windowsMainService.getWindowCount() > 0 });
src/vs/platform/menubar/electron-main/menubar.ts:		const bringAllToFront = new MenuItem({ label: nls.localize('mBringToFront', "Bring All to Front"), role: 'front', enabled: this.windowsMainService.getWindowCount() > 0 });
src/vs/platform/menubar/electron-main/menubar.ts:		const switchWindow = this.createMenuItem(nls.localize({ key: 'miSwitchWindow', comment: ['&& denotes a mnemonic'] }, "Switch &&Window..."), 'workbench.action.switchWindow');
src/vs/platform/menubar/electron-main/menubar.ts:			nativeTabMenuItems.push(this.createMenuItem(nls.localize('mNewTab', "New Tab"), 'workbench.action.newWindowTab'));
src/vs/platform/menubar/electron-main/menubar.ts:			nativeTabMenuItems.push(this.createRoleMenuItem(nls.localize('mShowPreviousTab', "Show Previous Tab"), 'workbench.action.showPreviousWindowTab', 'selectPreviousTab'));
src/vs/platform/menubar/electron-main/menubar.ts:			nativeTabMenuItems.push(this.createRoleMenuItem(nls.localize('mShowNextTab', "Show Next Tab"), 'workbench.action.showNextWindowTab', 'selectNextTab'));
src/vs/platform/menubar/electron-main/menubar.ts:			nativeTabMenuItems.push(this.createRoleMenuItem(nls.localize('mMoveTabToNewWindow', "Move Tab to New Window"), 'workbench.action.moveWindowTabToNewWindow', 'moveTabToNewWindow'));
src/vs/platform/menubar/electron-main/menubar.ts:			nativeTabMenuItems.push(this.createRoleMenuItem(nls.localize('mMergeAllWindows', "Merge All Windows"), 'workbench.action.mergeAllWindowTabs', 'mergeAllWindows'));
src/vs/platform/menubar/electron-main/menubar.ts:					label: this.mnemonicLabel(nls.localize('miCheckForUpdates', "Check for &&Updates...")), click: () => setTimeout(() => {
src/vs/platform/menubar/electron-main/menubar.ts:				return [new MenuItem({ label: nls.localize('miCheckingForUpdates', "Checking for Updates..."), enabled: false })];
src/vs/platform/menubar/electron-main/menubar.ts:					label: this.mnemonicLabel(nls.localize('miDownloadUpdate', "D&&ownload Available Update")), click: () => {
src/vs/platform/menubar/electron-main/menubar.ts:				return [new MenuItem({ label: nls.localize('miDownloadingUpdate', "Downloading Update..."), enabled: false })];
src/vs/platform/menubar/electron-main/menubar.ts:					label: this.mnemonicLabel(nls.localize('miInstallUpdate', "Install &&Update...")), click: () => {
src/vs/platform/menubar/electron-main/menubar.ts:				return [new MenuItem({ label: nls.localize('miInstallingUpdate', "Installing Update..."), enabled: false })];
src/vs/platform/menubar/electron-main/menubar.ts:					label: this.mnemonicLabel(nls.localize('miRestartToUpdate', "Restart to &&Update")), click: () => {
src/vs/platform/markers/common/markers.ts:	_displayStrings[MarkerSeverity.Error] = localize('sev.error', "Error");
src/vs/platform/markers/common/markers.ts:	_displayStrings[MarkerSeverity.Warning] = localize('sev.warning', "Warning");
src/vs/platform/markers/common/markers.ts:	_displayStrings[MarkerSeverity.Info] = localize('sev.info', "Info");
src/vs/platform/languagePacks/common/localizedStrings.ts:const open: string = nls.localize('open', 'open');
src/vs/platform/languagePacks/common/localizedStrings.ts:const close: string = nls.localize('close', 'close');
src/vs/platform/languagePacks/common/localizedStrings.ts:const find: string = nls.localize('find', 'find');
src/vs/platform/languagePacks/common/languagePacks.ts:			description += localize('currentDisplayLanguage', " (Current)");
src/vs/platform/keybinding/common/abstractKeybindingService.ts:		this._currentChordStatusMessage = this._notificationService.status(nls.localize('first.chord', "({0}) was pressed. Waiting for second key of chord...", keypressLabel));
src/vs/platform/keybinding/common/abstractKeybindingService.ts:				this._notificationService.status(nls.localize('missing.chord', "The key combination ({0}, {1}) is not a command.", this._currentChord.label, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ });
src/vs/platform/environment/node/argvHelper.ts:		console.warn(localize('multipleValues', "Option '{0}' is defined more than once. Using value '{1}'.", id, val));
src/vs/platform/environment/node/argvHelper.ts:		console.warn(localize('emptyValue', "Option '{0}' requires a non empty value. Ignoring the option.", id));
src/vs/platform/environment/node/argvHelper.ts:		console.warn(localize('deprecatedArgument', "Option '{0}' is deprecated: {1}", deprecatedOption, message));
src/vs/platform/environment/node/argvHelper.ts:				console.warn(localize('unknownSubCommandOption', "Warning: '{0}' is not in the list of known options for subcommand '{1}'", id, command));
src/vs/platform/environment/node/argvHelper.ts:			console.warn(localize('unknownOption', "Warning: '{0}' is not in the list of known options, but still passed to Electron/Chromium.", id));
src/vs/platform/environment/node/argvHelper.ts:		args._.forEach(arg => assert(/^(\w:)?[^:]+(:\d*){0,2}$/.test(arg), localize('gotoValidation', "Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`.")));
src/vs/platform/environment/node/argv.ts:	o: localize('optionsUpperCase', "Options"),
src/vs/platform/environment/node/argv.ts:	e: localize('extensionsManagement', "Extensions Management"),
src/vs/platform/environment/node/argv.ts:	t: localize('troubleshooting', "Troubleshooting")
src/vs/platform/environment/node/argv.ts:			'cli-data-dir': { type: 'string', args: 'dir', description: localize('cliDataDir', "Directory where CLI metadata should be stored.") },
src/vs/platform/environment/node/argv.ts:	'diff': { type: 'boolean', cat: 'o', alias: 'd', args: ['file', 'file'], description: localize('diff', "Compare two files with each other.") },
src/vs/platform/environment/node/argv.ts:	'merge': { type: 'boolean', cat: 'o', alias: 'm', args: ['path1', 'path2', 'base', 'result'], description: localize('merge', "Perform a three-way merge by providing paths for two modified versions of a file, the common origin of both modified versions and the output file to save merge results.") },
src/vs/platform/environment/node/argv.ts:	'add': { type: 'boolean', cat: 'o', alias: 'a', args: 'folder', description: localize('add', "Add folder(s) to the last active window.") },
src/vs/platform/environment/node/argv.ts:	'goto': { type: 'boolean', cat: 'o', alias: 'g', args: 'file:line[:character]', description: localize('goto', "Open a file at the path on the specified line and character position.") },
src/vs/platform/environment/node/argv.ts:	'new-window': { type: 'boolean', cat: 'o', alias: 'n', description: localize('newWindow', "Force to open a new window.") },
src/vs/platform/environment/node/argv.ts:	'reuse-window': { type: 'boolean', cat: 'o', alias: 'r', description: localize('reuseWindow', "Force to open a file or folder in an already opened window.") },
src/vs/platform/environment/node/argv.ts:	'wait': { type: 'boolean', cat: 'o', alias: 'w', description: localize('wait', "Wait for the files to be closed before returning.") },
src/vs/platform/environment/node/argv.ts:	'locale': { type: 'string', cat: 'o', args: 'locale', description: localize('locale', "The locale to use (e.g. en-US or zh-TW).") },
src/vs/platform/environment/node/argv.ts:	'user-data-dir': { type: 'string', cat: 'o', args: 'dir', description: localize('userDataDir', "Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code.") },
src/vs/platform/environment/node/argv.ts:	'profile': { type: 'string', 'cat': 'o', args: 'profileName', description: localize('profileName', "Opens the provided folder or workspace with the given profile and associates the profile with the workspace. If the profile does not exist, a new empty one is created. A folder or workspace must be provided for the profile to take effect.") },
src/vs/platform/environment/node/argv.ts:	'help': { type: 'boolean', cat: 'o', alias: 'h', description: localize('help', "Print usage.") },
src/vs/platform/environment/node/argv.ts:	'extensions-dir': { type: 'string', deprecates: ['extensionHomePath'], cat: 'e', args: 'dir', description: localize('extensionHomePath', "Set the root path for extensions.") },
src/vs/platform/environment/node/argv.ts:	'list-extensions': { type: 'boolean', cat: 'e', description: localize('listExtensions', "List the installed extensions.") },
src/vs/platform/environment/node/argv.ts:	'show-versions': { type: 'boolean', cat: 'e', description: localize('showVersions', "Show versions of installed extensions, when using --list-extensions.") },
src/vs/platform/environment/node/argv.ts:	'category': { type: 'string', cat: 'e', description: localize('category', "Filters installed extensions by provided category, when using --list-extensions."), args: 'category' },
src/vs/platform/environment/node/argv.ts:	'install-extension': { type: 'string[]', cat: 'e', args: 'ext-id | path', description: localize('installExtension', "Installs or updates an extension. The argument is either an extension id or a path to a VSIX. The identifier of an extension is '${publisher}.${name}'. Use '--force' argument to update to latest version. To install a specific version provide '@${version}'. For example: 'vscode.csharp@1.2.3'.") },
src/vs/platform/environment/node/argv.ts:	'pre-release': { type: 'boolean', cat: 'e', description: localize('install prerelease', "Installs the pre-release version of the extension, when using --install-extension") },
src/vs/platform/environment/node/argv.ts:	'uninstall-extension': { type: 'string[]', cat: 'e', args: 'ext-id', description: localize('uninstallExtension', "Uninstalls an extension.") },
src/vs/platform/environment/node/argv.ts:	'enable-proposed-api': { type: 'string[]', allowEmptyValue: true, cat: 'e', args: 'ext-id', description: localize('experimentalApis', "Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually.") },
src/vs/platform/environment/node/argv.ts:	'version': { type: 'boolean', cat: 't', alias: 'v', description: localize('version', "Print version.") },
src/vs/platform/environment/node/argv.ts:	'verbose': { type: 'boolean', cat: 't', global: true, description: localize('verbose', "Print verbose output (implies --wait).") },
src/vs/platform/environment/node/argv.ts:	'log': { type: 'string[]', cat: 't', args: 'level', global: true, description: localize('log', "Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'. You can also configure the log level of an extension by passing extension id and log level in the following format: '${publisher}.${name}:${logLevel}'. For example: 'vscode.csharp:trace'. Can receive one or more such entries.") },
src/vs/platform/environment/node/argv.ts:	'status': { type: 'boolean', alias: 's', cat: 't', description: localize('status', "Print process usage and diagnostics information.") },
src/vs/platform/environment/node/argv.ts:	'prof-startup': { type: 'boolean', cat: 't', description: localize('prof-startup', "Run CPU profiler during startup.") },
src/vs/platform/environment/node/argv.ts:	'disable-extensions': { type: 'boolean', deprecates: ['disableExtensions'], cat: 't', description: localize('disableExtensions', "Disable all installed extensions.") },
src/vs/platform/environment/node/argv.ts:	'disable-extension': { type: 'string[]', cat: 't', args: 'ext-id', description: localize('disableExtension', "Disable an extension.") },
src/vs/platform/environment/node/argv.ts:	'sync': { type: 'string', cat: 't', description: localize('turn sync', "Turn sync on or off."), args: ['on | off'] },
src/vs/platform/environment/node/argv.ts:	'inspect-extensions': { type: 'string', allowEmptyValue: true, deprecates: ['debugPluginHost'], args: 'port', cat: 't', description: localize('inspect-extensions', "Allow debugging and profiling of extensions. Check the developer tools for the connection URI.") },
src/vs/platform/environment/node/argv.ts:	'inspect-brk-extensions': { type: 'string', allowEmptyValue: true, deprecates: ['debugBrkPluginHost'], args: 'port', cat: 't', description: localize('inspect-brk-extensions', "Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI.") },
src/vs/platform/environment/node/argv.ts:	'disable-gpu': { type: 'boolean', cat: 't', description: localize('disableGPU', "Disable GPU hardware acceleration.") },
src/vs/platform/environment/node/argv.ts:	'max-memory': { type: 'string', cat: 't', description: localize('maxMemory', "Max memory size for a window (in Mbytes)."), args: 'memory' },
src/vs/platform/environment/node/argv.ts:	'telemetry': { type: 'boolean', cat: 't', description: localize('telemetry', "Shows all telemetry events which VS code collects.") },
src/vs/platform/environment/node/argv.ts:							errorReporter.onDeprecatedOption(deprecatedId, o.deprecationMessage || localize('deprecated.useInstead', 'Use {0} instead.', optionId));
src/vs/platform/environment/node/argv.ts:	const inputFiles = capabilities?.noInputFiles !== true ? `[${localize('paths', 'paths')}...]` : '';
src/vs/platform/environment/node/argv.ts:	help.push(`${localize('usage', "Usage")}: ${executableName} [${localize('options', "options")}]${inputFiles}`);
src/vs/platform/environment/node/argv.ts:			help.push(localize('stdinWindows', "To read output from another program, append '-' (e.g. 'echo Hello World | {0} -')", executableName));
src/vs/platform/environment/node/argv.ts:			help.push(localize('stdinUnix', "To read from stdin, append '-' (e.g. 'ps aux | grep code | {0} -')", executableName));
src/vs/platform/environment/node/argv.ts:		help.push(localize('subcommands', "Subcommands"));
src/vs/platform/environment/node/argv.ts:	return `${version || localize('unknownVersion', "Unknown version")}\n${commit || localize('unknownCommit', "Unknown commit")}\n${process.arch}`;
src/vs/platform/files/common/files.ts:		return createFileSystemProviderError(localize('unknownError', "Unknown Error"), FileSystemProviderErrorCode.Unknown); // https://github.com/microsoft/vscode/issues/72798
src/vs/platform/files/common/files.ts:			return localize('sizeB', "{0}B", size.toFixed(0));
src/vs/platform/files/common/files.ts:			return localize('sizeKB', "{0}KB", (size / ByteSize.KB).toFixed(2));
src/vs/platform/files/common/files.ts:			return localize('sizeMB', "{0}MB", (size / ByteSize.MB).toFixed(2));
src/vs/platform/files/common/files.ts:			return localize('sizeGB', "{0}GB", (size / ByteSize.GB).toFixed(2));
src/vs/platform/files/common/files.ts:		return localize('sizeTB', "{0}TB", (size / ByteSize.TB).toFixed(2));
src/vs/platform/files/node/diskFileSystemProvider.ts:						throw createFileSystemProviderError(localize('fileExists', "File already exists"), FileSystemProviderErrorCode.FileExists);
src/vs/platform/files/node/diskFileSystemProvider.ts:						throw createFileSystemProviderError(localize('fileNotExists', "File does not exist"), FileSystemProviderErrorCode.FileNotFound);
src/vs/platform/files/node/diskFileSystemProvider.ts:				error = new Error(localize('moveError', "Unable to move '{0}' into '{1}' ({2}).", basename(fromFilePath), basename(dirname(toFilePath)), error.toString()));
src/vs/platform/files/node/diskFileSystemProvider.ts:				error = new Error(localize('copyError', "Unable to copy '{0}' into '{1}' ({2}).", basename(fromFilePath), basename(dirname(toFilePath)), error.toString()));
src/vs/platform/files/node/diskFileSystemProvider.ts:			throw createFileSystemProviderError(localize('fileCopyErrorPathCase', "'File cannot be copied to same path with different path case"), FileSystemProviderErrorCode.FileExists);
src/vs/platform/files/node/diskFileSystemProvider.ts:				throw createFileSystemProviderError(localize('fileCopyErrorExists', "File at target already exists"), FileSystemProviderErrorCode.FileExists);
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('invalidPath', "Unable to resolve filesystem provider with relative file path '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_INVALID_PATH);
src/vs/platform/files/common/fileService.ts:			error.message = localize('noProviderFound', "No file system provider found for resource '{0}'", resource.toString());
src/vs/platform/files/common/fileService.ts:				throw new FileOperationError(localize('fileNotFoundError', "Unable to resolve nonexistent file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_NOT_FOUND);
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('fileExists', "Unable to create file '{0}' that already exists when overwrite flag is not set", this.resourceForError(resource)), FileOperationResult.FILE_MODIFIED_SINCE, options);
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('err.write', "Unable to write file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString()), toFileOperationResult(error), options);
src/vs/platform/files/common/fileService.ts:			throw new Error(localize('writeFailedUnlockUnsupported', "Unable to unlock file '{0}' because provider does not support it.", this.resourceForError(resource)));
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('fileIsDirectoryWriteError', "Unable to write file '{0}' that is actually a directory", this.resourceForError(resource)), FileOperationResult.FILE_IS_DIRECTORY, options);
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('fileModifiedError', "File Modified Since"), FileOperationResult.FILE_MODIFIED_SINCE, options);
src/vs/platform/files/common/fileService.ts:			const message = localize('err.read', "Unable to read file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString());
src/vs/platform/files/common/fileService.ts:			error: error => new FileOperationError(localize('err.read', "Unable to read file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString()), toFileOperationResult(error), options)
src/vs/platform/files/common/fileService.ts:			errorTransformer: error => new FileOperationError(localize('err.read', "Unable to read file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString()), toFileOperationResult(error), options)
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('fileIsDirectoryReadError', "Unable to read file '{0}' that is actually a directory", this.resourceForError(resource)), FileOperationResult.FILE_IS_DIRECTORY, options);
src/vs/platform/files/common/fileService.ts:			throw new NotModifiedSinceFileOperationError(localize('fileNotModifiedError', "File not modified since"), stat, options);
src/vs/platform/files/common/fileService.ts:				throw new FileOperationError(localize('fileTooLargeError', "Unable to read file '{0}' that is too large to open", this.resourceForError(resource)), tooLargeErrorResult);
src/vs/platform/files/common/fileService.ts:				throw new Error(localize('unableToMoveCopyError1', "Unable to copy when source '{0}' is same as target '{1}' with different path case on a case insensitive file system", this.resourceForError(source), this.resourceForError(target)));
src/vs/platform/files/common/fileService.ts:				throw new Error(localize('unableToMoveCopyError2', "Unable to move/copy when source '{0}' is parent of target '{1}'.", this.resourceForError(source), this.resourceForError(target)));
src/vs/platform/files/common/fileService.ts:				throw new FileOperationError(localize('unableToMoveCopyError3', "Unable to move/copy '{0}' because target '{1}' already exists at destination.", this.resourceForError(source), this.resourceForError(target)), FileOperationResult.FILE_MOVE_CONFLICT);
src/vs/platform/files/common/fileService.ts:					throw new Error(localize('unableToMoveCopyError4', "Unable to move/copy '{0}' into '{1}' since a file would replace the folder it is contained in.", this.resourceForError(source), this.resourceForError(target)));
src/vs/platform/files/common/fileService.ts:					throw new Error(localize('mkdirExistsError', "Unable to create folder '{0}' that already exists but is not a directory", this.resourceForError(directory)));
src/vs/platform/files/common/fileService.ts:			throw new Error(localize('deleteFailedTrashUnsupported', "Unable to delete file '{0}' via trash because provider does not support it.", this.resourceForError(resource)));
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('deleteFailedNotFound', "Unable to delete nonexistent file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_NOT_FOUND);
src/vs/platform/files/common/fileService.ts:				throw new Error(localize('deleteFailedNonEmptyFolder', "Unable to delete non-empty folder '{0}'.", this.resourceForError(resource)));
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('err.readonly', "Unable to modify readonly file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_PERMISSION_DENIED);
src/vs/platform/files/common/fileService.ts:			throw new FileOperationError(localize('err.readonly', "Unable to modify readonly file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_PERMISSION_DENIED);
src/vs/platform/files/electron-main/diskFileSystemProviderServer.ts:			throw createFileSystemProviderError(isWindows ? localize('binFailed', "Failed to move '{0}' to the recycle bin", basename(filePath)) : localize('trashFailed', "Failed to move '{0}' to the trash", basename(filePath)), FileSystemProviderErrorCode.Unknown);
src/vs/platform/history/browser/contextScopedHistoryWidget.ts:export const historyNavigationVisible = new RawContextKey<boolean>('suggestWidgetVisible', false, localize('suggestWidgetVisible', "Whether suggestion are visible"));
src/vs/platform/files/browser/indexedDBFileSystemProvider.ts:const ERR_FILE_NOT_FOUND = createFileSystemProviderError(localize('fileNotExists', "File does not exist"), FileSystemProviderErrorCode.FileNotFound);
src/vs/platform/files/browser/indexedDBFileSystemProvider.ts:const ERR_FILE_IS_DIR = createFileSystemProviderError(localize('fileIsDirectory', "File is Directory"), FileSystemProviderErrorCode.FileIsADirectory);
src/vs/platform/files/browser/indexedDBFileSystemProvider.ts:const ERR_FILE_NOT_DIR = createFileSystemProviderError(localize('fileNotDirectory', "File is not a directory"), FileSystemProviderErrorCode.FileNotADirectory);
src/vs/platform/files/browser/indexedDBFileSystemProvider.ts:const ERR_DIR_NOT_EMPTY = createFileSystemProviderError(localize('dirIsNotEmpty', "Directory is not empty"), FileSystemProviderErrorCode.Unknown);
src/vs/platform/files/browser/indexedDBFileSystemProvider.ts:const ERR_UNKNOWN_INTERNAL = (message: string) => createFileSystemProviderError(localize('internal', "Internal error occurred in IndexedDB File System Provider. ({0})", message), FileSystemProviderErrorCode.Unknown);
src/vs/platform/files/browser/htmlFileSystemProvider.ts:				throw this.createFileSystemProviderError(from, localize('fileSystemRenameError', "Rename is only supported for files."), FileSystemProviderErrorCode.Unavailable);
src/vs/platform/files/browser/htmlFileSystemProvider.ts:			error = new Error(localize('fileSystemNotAllowedError', "Insufficient permissions. Please retry and allow the operation."));
src/vs/platform/externalTerminal/node/externalTerminalService.ts:const TERMINAL_TITLE = nls.localize('console.title', "VS Code Console");
src/vs/platform/externalTerminal/node/externalTerminalService.ts:							reject(new Error(nls.localize('mac.terminal.script.failed', "Script '{0}' failed with exit code {1}", script, code)));
src/vs/platform/externalTerminal/node/externalTerminalService.ts:				reject(new Error(nls.localize('mac.terminal.type.not.supported', "'{0}' not supported", terminalApp)));
src/vs/platform/externalTerminal/node/externalTerminalService.ts:	private static readonly WAIT_MESSAGE = nls.localize('press.any.key', "Press any key to continue...");
src/vs/platform/externalTerminal/node/externalTerminalService.ts:							reject(new Error(nls.localize('linux.term.failed', "'{0}' failed with exit code {1}", exec, code)));
src/vs/platform/externalTerminal/node/externalTerminalService.ts:		return new Error(nls.localize('ext.term.app.not.found', "can't find terminal application '{0}'", err['path']));
src/vs/platform/extensionManagement/node/extensionManagementUtil.ts:				throw new Error(localize('invalidManifest', "VSIX invalid: package.json is not a JSON file."));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:const notFound = (id: string) => localize('notFound', "Extension '{0}' not found.", id);
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:const useId = localize('useId', "Make sure you use the full extension ID, including the publisher, e.g.: {0}", 'ms-dotnettools.csharp');
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:			output.log(localize('listFromLocation', "Extensions installed on {0}:", this.location));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:			output.log(this.location ? localize('installingExtensionsOnLocation', "Installing extensions on {0}...", this.location) : localize('installingExtensions', "Installing extensions..."));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:					output.log(localize('alreadyInstalled-checkAndUpdate', "Extension '{0}' v{1} is already installed. Use '--force' option to update to latest version or provide '@<version>' to install a specific version, for example: '{2}@1.2.3'.", id, installedExtension.manifest.version, id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:					output.log(localize('alreadyInstalled', "Extension '{0}' is already installed.", `${id}@${version}`));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:			throw new Error(localize('installation failed', "Failed Installing Extensions: {0}", failed.join(', ')));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(localize('successVsixInstall', "Extension '{0}' was successfully installed.", basename(vsix)));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:					output.log(localize('cancelVsixInstall', "Cancelled installing extension '{0}'.", basename(vsix)));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(localize('alreadyInstalled', "Extension '{0}' is already installed.", version ? `${id}@${version}` : id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:			output.log(localize('updateMessage', "Updating the extension '{0}' to the version {1}", id, galleryExtension.version));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(version ? localize('installing builtin with version', "Installing builtin extension '{0}' v{1}...", id, version) : localize('installing builtin ', "Installing builtin extension '{0}'...", id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(version ? localize('installing with version', "Installing extension '{0}' v{1}...", id, version) : localize('installing', "Installing extension '{0}'...", id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:			output.log(localize('successInstall', "Extension '{0}' v{1} was successfully installed.", id, local.manifest.version));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(localize('cancelInstall', "Cancelled installing extension '{0}'.", id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:			output.log(localize('forceDowngrade', "A newer version of extension '{0}' v{1} is already installed. Use '--force' option to downgrade to older version.", newer.identifier.id, newer.manifest.version, manifest.version));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(localize('builtin', "Extension '{0}' is a Built-in extension and cannot be uninstalled", id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(localize('forceUninstall', "Extension '{0}' is marked as a Built-in extension by user. Please use '--force' option to uninstall it.", id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:			output.log(localize('uninstalling', "Uninstalling {0}...", id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(localize('successUninstallFromLocation', "Extension '{0}' was successfully uninstalled from {1}!", id, this.location));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:				output.log(localize('successUninstall', "Extension '{0}' was successfully uninstalled!", id));
src/vs/platform/extensionManagement/common/extensionManagementCLI.ts:		return this.location ? localize('notInstalleddOnLocation', "Extension '{0}' is not installed on {1}.", id, this.location) : localize('notInstalled', "Extension '{0}' is not installed.", id);
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:				throw new ExtensionManagementError(nls.localize('MarketPlaceDisabled', "Marketplace is not enabled"), ExtensionManagementErrorCode.Internal);
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			throw new ExtensionManagementError(nls.localize('malicious extension', "Can't install '{0}' extension since it was reported to be problematic.", extension.identifier.id), ExtensionManagementErrorCode.Malicious);
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			throw new ExtensionManagementError(nls.localize('incompatible platform', "The '{0}' extension is not available in {1} for {2}.", extension.identifier.id, this.productService.nameLong, TargetPlatformToString(targetPlatform)), ExtensionManagementErrorCode.IncompatibleTargetPlatform);
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:				throw new ExtensionManagementError(nls.localize('notFoundCompatiblePrereleaseDependency', "Can't install pre-release version of '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.IncompatiblePreRelease);
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:				throw new ExtensionManagementError(nls.localize('notFoundReleaseExtension', "Can't install release version of '{0}' extension because it has no release version.", extension.identifier.id), ExtensionManagementErrorCode.ReleaseVersionNotFound);
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			throw new ExtensionManagementError(nls.localize('notFoundCompatibleDependency', "Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.Incompatible);
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:				return nls.localize('singleDependentError', "Cannot uninstall '{0}' extension. '{1}' extension depends on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:				return nls.localize('twoDependentsError', "Cannot uninstall '{0}' extension. '{1}' and '{2}' extensions depend on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			return nls.localize('multipleDependentsError', "Cannot uninstall '{0}' extension. '{1}', '{2}' and other extension depend on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			return nls.localize('singleIndirectDependentError', "Cannot uninstall '{0}' extension . It includes uninstalling '{1}' extension and '{2}' extension depends on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			return nls.localize('twoIndirectDependentsError', "Cannot uninstall '{0}' extension. It includes uninstalling '{1}' extension and '{2}' and '{3}' extensions depend on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:		return nls.localize('multipleIndirectDependentsError', "Cannot uninstall '{0}' extension. It includes uninstalling '{1}' extension and '{2}', '{3}' and other extensions depend on this.",
src/vs/platform/extensionManagement/common/extensionNls.ts:						console.warn(`[${extensionManifest.name}]: ${localize('missingNLSKey', "Couldn't find message for key {0}.", messageKey)}`);
src/vs/platform/extensionManagement/common/extensionManagement.ts:export const ExtensionsLabel = localize('extensions', "Extensions");
src/vs/platform/extensionManagement/common/extensionManagement.ts:export const PreferencesLabel = localize('preferences', "Preferences");
src/vs/platform/extensionManagement/electron-sandbox/extensionTipsService.ts:		const message = localize({ key: 'exeRecommended', comment: ['Placeholder string is the name of the software that is installed.'] }, "You have {0} installed on your system. Do you want to install the recommended extensions for it?", tips[0].exeFriendlyName);
src/vs/platform/extensionManagement/node/extensionManagementService.ts:				throw new Error(nls.localize('incompatible', "Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.", getGalleryExtensionId(manifest.publisher, manifest.name), this.productService.version));
src/vs/platform/extensionManagement/node/extensionManagementService.ts:			throw new Error(nls.localize('MarketPlaceDisabled', "Marketplace is not enabled"));
src/vs/platform/extensionManagement/node/extensionManagementService.ts:			throw new Error(nls.localize('Not a Marketplace extension', "Only Marketplace Extensions can be reinstalled"));
src/vs/platform/extensionManagement/node/extensionManagementService.ts:			throw new Error(nls.localize('removeError', "Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.", toErrorMessage(e)));
src/vs/platform/extensionManagement/node/extensionManagementService.ts:			throw new ExtensionManagementError(nls.localize('errorDeleting', "Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again", extensionPath, extensionKey.id), ExtensionManagementErrorCode.Delete);
src/vs/platform/extensionManagement/node/extensionManagementService.ts:			throw new ExtensionManagementError(error.message || nls.localize('renameError', "Unknown error while renaming {0} to {1}", extractPath, renamePath), error.code || ExtensionManagementErrorCode.Rename);
src/vs/platform/extensionManagement/node/extensionManagementService.ts:		throw new Error(nls.localize('cannot read', "Cannot read the extension from {0}", location.path));
src/vs/platform/extensionManagement/node/extensionManagementService.ts:				throw new ExtensionManagementError(nls.localize('quitCode', "Unable to install the extension. Please Quit and Start VS Code before reinstalling."), ExtensionManagementErrorCode.Internal);
src/vs/platform/extensionManagement/node/extensionManagementService.ts:				throw new ExtensionManagementError(nls.localize('exitCode', "Unable to install the extension. Please Exit and Start VS Code before reinstalling."), ExtensionManagementErrorCode.Internal);
src/vs/platform/extensionManagement/node/extensionManagementService.ts:					throw new Error(nls.localize('restartCode', "Please restart VS Code before reinstalling {0}.", this.manifest.displayName || this.manifest.name));
src/vs/platform/extensionManagement/node/extensionManagementService.ts:					throw new Error(nls.localize('restartCode', "Please restart VS Code before reinstalling {0}.", this.manifest.displayName || this.manifest.name));
src/vs/platform/extensions/common/extensionValidator.ts:		validations.push([Severity.Error, nls.localize('extensionDescription.publisher', "property publisher must be of type `string`.")]);
src/vs/platform/extensions/common/extensionValidator.ts:		validations.push([Severity.Error, nls.localize('extensionDescription.name', "property `{0}` is mandatory and must be of type `string`", 'name')]);
src/vs/platform/extensions/common/extensionValidator.ts:		validations.push([Severity.Error, nls.localize('extensionDescription.version', "property `{0}` is mandatory and must be of type `string`", 'version')]);
src/vs/platform/extensions/common/extensionValidator.ts:		validations.push([Severity.Error, nls.localize('extensionDescription.engines', "property `{0}` is mandatory and must be of type `object`", 'engines')]);
src/vs/platform/extensions/common/extensionValidator.ts:		validations.push([Severity.Error, nls.localize('extensionDescription.engines.vscode', "property `{0}` is mandatory and must be of type `string`", 'engines.vscode')]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Error, nls.localize('extensionDescription.extensionDependencies', "property `{0}` can be omitted or must be of type `string[]`", 'extensionDependencies')]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Error, nls.localize('extensionDescription.activationEvents1', "property `{0}` can be omitted or must be of type `string[]`", 'activationEvents')]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Error, nls.localize('extensionDescription.activationEvents2', "properties `{0}` and `{1}` must both be specified or must both be omitted", 'activationEvents', 'main')]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Warning, nls.localize('extensionDescription.extensionKind', "property `{0}` can be defined only if property `main` is also defined.", 'extensionKind')]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Error, nls.localize('extensionDescription.main1', "property `{0}` can be omitted or must be of type `string`", 'main')]);
src/vs/platform/extensions/common/extensionValidator.ts:				validations.push([Severity.Warning, nls.localize('extensionDescription.main2', "Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.", mainLocation.path, extensionLocation.path)]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Error, nls.localize('extensionDescription.main3', "properties `{0}` and `{1}` must both be specified or must both be omitted", 'activationEvents', 'main')]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Error, nls.localize('extensionDescription.browser1', "property `{0}` can be omitted or must be of type `string`", 'browser')]);
src/vs/platform/extensions/common/extensionValidator.ts:				validations.push([Severity.Warning, nls.localize('extensionDescription.browser2', "Expected `browser` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.", browserLocation.path, extensionLocation.path)]);
src/vs/platform/extensions/common/extensionValidator.ts:			validations.push([Severity.Error, nls.localize('extensionDescription.browser3', "properties `{0}` and `{1}` must both be specified or must both be omitted", 'activationEvents', 'browser')]);
src/vs/platform/extensions/common/extensionValidator.ts:		validations.push([Severity.Error, nls.localize('notSemver', "Extension version is not semver compatible.")]);
src/vs/platform/extensions/common/extensionValidator.ts:		notices.push(nls.localize('versionSyntax', "Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.", requestedVersion));
src/vs/platform/extensions/common/extensionValidator.ts:			notices.push(nls.localize('versionSpecificity1', "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.", requestedVersion));
src/vs/platform/extensions/common/extensionValidator.ts:			notices.push(nls.localize('versionSpecificity2', "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.", requestedVersion));
src/vs/platform/extensions/common/extensionValidator.ts:		notices.push(nls.localize('versionMismatch', "Extension is not compatible with Code {0}. Extension requires: {1}.", currentVersion, requestedVersion));
src/vs/editor/common/viewLayout/viewLineRenderer.ts:		sb.appendString(nls.localize('showMore', "Show more ({0})", renderOverflowingCharCount(overflowingCharCount)));
src/vs/editor/common/viewLayout/viewLineRenderer.ts:		return nls.localize('overflow.chars', "{0} chars", n);
src/vs/platform/dnd/browser/dnd.ts:				dialogService.show(Severity.Warning, localize('fileTooLarge', "File is too large to open as untitled editor. Please upload it first into the file explorer and then try again."));
src/vs/platform/files/common/io.ts:			throw createFileSystemProviderError(localize('fileTooLargeForHeapError', "To open a file of this size, you need to restart and allow to use more memory"), FileSystemProviderErrorCode.FileExceedsMemoryLimit);
src/vs/platform/files/common/io.ts:			throw createFileSystemProviderError(localize('fileTooLargeError', "File is too large to open"), FileSystemProviderErrorCode.FileTooLarge);
src/vs/platform/extensionManagement/common/extensionsScannerService.ts:				this.logService.error(this.formatMessage(extensionLocation, localize('fileReadFail', "Cannot read file {0}: {1}.", manifestLocation.path, error.message)));
src/vs/platform/extensionManagement/common/extensionsScannerService.ts:				this.logService.error(this.formatMessage(extensionLocation, localize('jsonParseFail', "Failed to parse {0}: [{1}, {2}] {3}.", manifestLocation.path, e.offset, e.length, getParseErrorMessage(e.error))));
src/vs/platform/extensionManagement/common/extensionsScannerService.ts:			this.logService.error(this.formatMessage(extensionLocation, localize('jsonParseInvalidType', "Invalid manifest file {0}: Not an JSON object.", manifestLocation.path)));
src/vs/platform/extensionManagement/common/extensionsScannerService.ts:						this.logService.error(this.formatMessage(extensionLocation, localize('jsonsParseReportErrors', "Failed to parse {0}: {1}.", localizedMessages.default?.path, getParseErrorMessage(error.error))));
src/vs/platform/extensionManagement/common/extensionsScannerService.ts:					this.logService.error(this.formatMessage(extensionLocation, localize('jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localizedMessages.default?.path)));
src/vs/platform/extensionManagement/common/extensionsScannerService.ts:				this.logService.error(this.formatMessage(extensionLocation, localize('jsonsParseReportErrors', "Failed to parse {0}: {1}.", localized?.path, getParseErrorMessage(error.error))));
src/vs/platform/extensionManagement/common/extensionsScannerService.ts:			this.logService.error(this.formatMessage(extensionLocation, localize('jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localized?.path)));
src/vs/platform/dialogs/electron-main/dialogMainService.ts:		return this.doPick({ ...options, pickFolders: true, pickFiles: true, title: localize('open', "Open") }, window);
src/vs/platform/dialogs/electron-main/dialogMainService.ts:		return this.doPick({ ...options, pickFolders: true, title: localize('openFolder', "Open Folder") }, window);
src/vs/platform/dialogs/electron-main/dialogMainService.ts:		return this.doPick({ ...options, pickFiles: true, title: localize('openFile', "Open File") }, window);
src/vs/platform/dialogs/electron-main/dialogMainService.ts:		const title = localize('openWorkspaceTitle', "Open Workspace from File");
src/vs/platform/dialogs/electron-main/dialogMainService.ts:		const buttonLabel = mnemonicButtonLabel(localize({ key: 'openWorkspace', comment: ['&& denotes a mnemonic'] }, "&&Open"));
src/vs/platform/dialogs/common/dialogs.ts:			message.push(localize('moreFile', "...1 additional file not shown"));
src/vs/platform/dialogs/common/dialogs.ts:			message.push(localize('moreFiles', "...{0} additional files not shown", fileNamesOrResources.length - MAX_CONFIRM_FILES));
src/vs/platform/contextkey/common/contextkeys.ts:export const IsMacContext = new RawContextKey<boolean>('isMac', isMacintosh, localize('isMac', "Whether the operating system is macOS"));
src/vs/platform/contextkey/common/contextkeys.ts:export const IsLinuxContext = new RawContextKey<boolean>('isLinux', isLinux, localize('isLinux', "Whether the operating system is Linux"));
src/vs/platform/contextkey/common/contextkeys.ts:export const IsWindowsContext = new RawContextKey<boolean>('isWindows', isWindows, localize('isWindows', "Whether the operating system is Windows"));
src/vs/platform/contextkey/common/contextkeys.ts:export const IsWebContext = new RawContextKey<boolean>('isWeb', isWeb, localize('isWeb', "Whether the platform is a web browser"));
src/vs/platform/contextkey/common/contextkeys.ts:export const IsMacNativeContext = new RawContextKey<boolean>('isMacNative', isMacintosh && !isWeb, localize('isMacNative', "Whether the operating system is macOS on a non-browser platform"));
src/vs/platform/contextkey/common/contextkeys.ts:export const IsIOSContext = new RawContextKey<boolean>('isIOS', isIOS, localize('isIOS', "Whether the operating system is iOS"));
src/vs/platform/contextkey/common/contextkeys.ts:export const IsMobileContext = new RawContextKey<boolean>('isMobile', isMobile, localize('isMobile', "Whether the platform is a mobile web browser"));
src/vs/platform/contextkey/common/contextkeys.ts:export const ProductQualityContext = new RawContextKey<string>('productQualityType', '', localize('productQualityType', "Quality type of VS Code"));
src/vs/platform/contextkey/common/contextkeys.ts:export const InputFocusedContext = new RawContextKey<boolean>(InputFocusedContextKey, false, localize('inputFocus', "Whether keyboard focus is inside an input box"));
src/vs/platform/contextkey/browser/contextKeyService.ts:		description: localize('getContextKeyInfo', "A command that returns information about context keys"),
src/vs/editor/common/standaloneStrings.ts:	export const noSelection = nls.localize("noSelection", "No selection");
src/vs/editor/common/standaloneStrings.ts:	export const singleSelectionRange = nls.localize("singleSelectionRange", "Line {0}, Column {1} ({2} selected)");
src/vs/editor/common/standaloneStrings.ts:	export const singleSelection = nls.localize("singleSelection", "Line {0}, Column {1}");
src/vs/editor/common/standaloneStrings.ts:	export const multiSelectionRange = nls.localize("multiSelectionRange", "{0} selections ({1} characters selected)");
src/vs/editor/common/standaloneStrings.ts:	export const multiSelection = nls.localize("multiSelection", "{0} selections");
src/vs/editor/common/standaloneStrings.ts:	export const emergencyConfOn = nls.localize("emergencyConfOn", "Now changing the setting `accessibilitySupport` to 'on'.");
src/vs/editor/common/standaloneStrings.ts:	export const openingDocs = nls.localize("openingDocs", "Now opening the Editor Accessibility documentation page.");
src/vs/editor/common/standaloneStrings.ts:	export const readonlyDiffEditor = nls.localize("readonlyDiffEditor", " in a read-only pane of a diff editor.");
src/vs/editor/common/standaloneStrings.ts:	export const editableDiffEditor = nls.localize("editableDiffEditor", " in a pane of a diff editor.");
src/vs/editor/common/standaloneStrings.ts:	export const readonlyEditor = nls.localize("readonlyEditor", " in a read-only code editor");
src/vs/editor/common/standaloneStrings.ts:	export const editableEditor = nls.localize("editableEditor", " in a code editor");
src/vs/editor/common/standaloneStrings.ts:	export const changeConfigToOnMac = nls.localize("changeConfigToOnMac", "To configure the editor to be optimized for usage with a Screen Reader press Command+E now.");
src/vs/editor/common/standaloneStrings.ts:	export const changeConfigToOnWinLinux = nls.localize("changeConfigToOnWinLinux", "To configure the editor to be optimized for usage with a Screen Reader press Control+E now.");
src/vs/editor/common/standaloneStrings.ts:	export const auto_on = nls.localize("auto_on", "The editor is configured to be optimized for usage with a Screen Reader.");
src/vs/editor/common/standaloneStrings.ts:	export const auto_off = nls.localize("auto_off", "The editor is configured to never be optimized for usage with a Screen Reader, which is not the case at this time.");
src/vs/editor/common/standaloneStrings.ts:	export const tabFocusModeOnMsg = nls.localize("tabFocusModeOnMsg", "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.");
src/vs/editor/common/standaloneStrings.ts:	export const tabFocusModeOnMsgNoKb = nls.localize("tabFocusModeOnMsgNoKb", "Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.");
src/vs/editor/common/standaloneStrings.ts:	export const tabFocusModeOffMsg = nls.localize("tabFocusModeOffMsg", "Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.");
src/vs/editor/common/standaloneStrings.ts:	export const tabFocusModeOffMsgNoKb = nls.localize("tabFocusModeOffMsgNoKb", "Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.");
src/vs/editor/common/standaloneStrings.ts:	export const openDocMac = nls.localize("openDocMac", "Press Command+H now to open a browser window with more information related to editor accessibility.");
src/vs/editor/common/standaloneStrings.ts:	export const openDocWinLinux = nls.localize("openDocWinLinux", "Press Control+H now to open a browser window with more information related to editor accessibility.");
src/vs/editor/common/standaloneStrings.ts:	export const outroMsg = nls.localize("outroMsg", "You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.");
src/vs/editor/common/standaloneStrings.ts:	export const showAccessibilityHelpAction = nls.localize("showAccessibilityHelpAction", "Show Accessibility Help");
src/vs/editor/common/standaloneStrings.ts:	export const inspectTokensAction = nls.localize('inspectTokens', "Developer: Inspect Tokens");
src/vs/editor/common/standaloneStrings.ts:	export const gotoLineActionLabel = nls.localize('gotoLineActionLabel', "Go to Line/Column...");
src/vs/editor/common/standaloneStrings.ts:	export const helpQuickAccessActionLabel = nls.localize('helpQuickAccess', "Show all Quick Access Providers");
src/vs/editor/common/standaloneStrings.ts:	export const quickCommandActionLabel = nls.localize('quickCommandActionLabel', "Command Palette");
src/vs/editor/common/standaloneStrings.ts:	export const quickCommandHelp = nls.localize('quickCommandActionHelp', "Show And Run Commands");
src/vs/editor/common/standaloneStrings.ts:	export const quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', "Go to Symbol...");
src/vs/editor/common/standaloneStrings.ts:	export const quickOutlineByCategoryActionLabel = nls.localize('quickOutlineByCategoryActionLabel', "Go to Symbol by Category...");
src/vs/editor/common/standaloneStrings.ts:	export const editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', "Editor content");
src/vs/editor/common/standaloneStrings.ts:	export const accessibilityHelpMessage = nls.localize('accessibilityHelpMessage', "Press Alt+F1 for Accessibility Options.");
src/vs/editor/common/standaloneStrings.ts:	export const toggleHighContrast = nls.localize('toggleHighContrast', "Toggle High Contrast Theme");
src/vs/editor/common/standaloneStrings.ts:	export const bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', "Made {0} edits in {1} files");
src/vs/platform/configuration/common/configurationRegistry.ts:			title: nls.localize('defaultLanguageConfigurationOverrides.title', "Default Language Configuration Overrides"),
src/vs/platform/configuration/common/configurationRegistry.ts:						description: nls.localize('defaultLanguageConfiguration.description', "Configure settings to be overridden for the {0} language.", plainKey),
src/vs/platform/configuration/common/configurationRegistry.ts:				description: nls.localize('overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
src/vs/platform/configuration/common/configurationRegistry.ts:				errorMessage: nls.localize('overrideSettings.errorMessage', "This setting does not support per-language configuration."),
src/vs/platform/configuration/common/configurationRegistry.ts:			description: nls.localize('overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."),
src/vs/platform/configuration/common/configurationRegistry.ts:			errorMessage: nls.localize('overrideSettings.errorMessage', "This setting does not support per-language configuration."),
src/vs/platform/configuration/common/configurationRegistry.ts:		return nls.localize('config.property.empty', "Cannot register an empty property");
src/vs/platform/configuration/common/configurationRegistry.ts:		return nls.localize('config.property.languageDefault', "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.", property);
src/vs/platform/configuration/common/configurationRegistry.ts:		return nls.localize('config.property.duplicate', "Cannot register '{0}'. This property is already registered.", property);
src/vs/platform/configuration/common/configurationRegistry.ts:		return nls.localize('config.policy.duplicate', "Cannot register '{0}'. The associated policy {1} is already registered with {2}.", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));
src/vs/platform/actions/common/menuService.ts:		label: localize('hide.label', 'Hide \'{0}\'', title),
src/vs/platform/action/common/actionCommonCategories.ts:	View: { value: localize('view', "View"), original: 'View' },
src/vs/platform/action/common/actionCommonCategories.ts:	Help: { value: localize('help', "Help"), original: 'Help' },
src/vs/platform/action/common/actionCommonCategories.ts:	Test: { value: localize('test', "Test"), original: 'Test' },
src/vs/platform/action/common/actionCommonCategories.ts:	Preferences: { value: localize('preferences', "Preferences"), original: 'Preferences' },
src/vs/platform/action/common/actionCommonCategories.ts:	Developer: { value: localize({ key: 'developer', comment: ['A developer on Code itself or someone diagnosing issues in Code'] }, "Developer"), original: 'Developer' }
src/vs/platform/actions/common/menuResetAction.ts:				value: localize('title', 'Reset All Menus'),
src/vs/editor/common/model/editStack.ts:		const newElement = new SingleModelEditStackElement(nls.localize('edit', "Typing"), 'undoredo.textBufferEdit', this._model, beforeCursorState);
src/vs/platform/actions/browser/menuEntryActionViewItem.ts:			? localize('titleAndKb', "{0} ({1})", tooltip, keybindingLabel)
src/vs/platform/actions/browser/menuEntryActionViewItem.ts:				? localize('titleAndKb', "{0} ({1})", altTooltip, altKeybindingLabel)
src/vs/platform/actions/browser/menuEntryActionViewItem.ts:			title = localize('titleAndKbAndAlt', "{0}\n[{1}] {2}", title, UILabelProvider.modifierLabels[OS].altKey, altTitleSection);
src/vs/editor/browser/widget/diffReview.ts:const diffReviewInsertIcon = registerIcon('diff-review-insert', Codicon.add, nls.localize('diffReviewInsertIcon', 'Icon for \'Insert\' in diff review.'));
src/vs/editor/browser/widget/diffReview.ts:const diffReviewRemoveIcon = registerIcon('diff-review-remove', Codicon.remove, nls.localize('diffReviewRemoveIcon', 'Icon for \'Remove\' in diff review.'));
src/vs/editor/browser/widget/diffReview.ts:const diffReviewCloseIcon = registerIcon('diff-review-close', Codicon.close, nls.localize('diffReviewCloseIcon', 'Icon for \'Close\' in diff review.'));
src/vs/editor/browser/widget/diffReview.ts:		this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', "Close"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, async () => this.hide()), { label: false, icon: true });
src/vs/editor/browser/widget/diffReview.ts:				return nls.localize('no_lines_changed', "no lines changed");
src/vs/editor/browser/widget/diffReview.ts:				return nls.localize('one_line_changed', "1 line changed");
src/vs/editor/browser/widget/diffReview.ts:				return nls.localize('more_lines_changed', "{0} lines changed", lines);
src/vs/editor/browser/widget/diffReview.ts:		header.setAttribute('aria-label', nls.localize({
src/vs/editor/browser/widget/diffReview.ts:				lineContent = nls.localize('blankLine', "blank");
src/vs/editor/browser/widget/diffReview.ts:						ariaLabel = nls.localize({ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, "{0} unchanged line {1}", lineContent, originalLine);
src/vs/editor/browser/widget/diffReview.ts:						ariaLabel = nls.localize('equalLine', "{0} original line {1} modified line {2}", lineContent, originalLine, modifiedLine);
src/vs/editor/browser/widget/diffReview.ts:					ariaLabel = nls.localize('insertLine', "+ {0} modified line {1}", lineContent, modifiedLine);
src/vs/editor/browser/widget/diffReview.ts:					ariaLabel = nls.localize('deleteLine', "- {0} original line {1}", lineContent, originalLine);
src/vs/editor/browser/widget/diffReview.ts:			label: nls.localize('editor.action.diffReview.next', "Go to Next Difference"),
src/vs/editor/browser/widget/diffReview.ts:			label: nls.localize('editor.action.diffReview.prev', "Go to Previous Difference"),
src/vs/platform/actions/browser/toolbar.ts:						label: localize('hide', "Hide"),
src/vs/platform/actions/browser/toolbar.ts:						label: localize('resetThisMenu', "Reset Menu"),
src/vs/editor/common/languages/modesRegistry.ts:	aliases: [nls.localize('plainText.alias', "Plain Text"), 'text'],
src/vs/editor/browser/widget/inlineDiffMargin.ts:					? nls.localize('diff.clipboard.copyDeletedLinesContent.label', "Copy deleted lines")
src/vs/editor/browser/widget/inlineDiffMargin.ts:					: nls.localize('diff.clipboard.copyDeletedLinesContent.single.label', "Copy deleted line"))
src/vs/editor/browser/widget/inlineDiffMargin.ts:					? nls.localize('diff.clipboard.copyChangedLinesContent.label', "Copy changed lines")
src/vs/editor/browser/widget/inlineDiffMargin.ts:					: nls.localize('diff.clipboard.copyChangedLinesContent.single.label', "Copy changed line")),
src/vs/editor/browser/widget/inlineDiffMargin.ts:					? nls.localize('diff.clipboard.copyDeletedLineContent.label', "Copy deleted line ({0})", diff.originalStartLineNumber)
src/vs/editor/browser/widget/inlineDiffMargin.ts:					: nls.localize('diff.clipboard.copyChangedLineContent.label', "Copy changed line ({0})", diff.originalStartLineNumber),
src/vs/editor/browser/widget/inlineDiffMargin.ts:			actions.push(new Action('diff.inline.revertChange', nls.localize('diff.inline.revertChange.label', "Revert this change"), undefined, true, async () => {
src/vs/editor/browser/widget/inlineDiffMargin.ts:								? nls.localize('diff.clipboard.copyDeletedLineContent.label', "Copy deleted line ({0})", diff.originalStartLineNumber + currentLineNumberOffset)
src/vs/editor/browser/widget/inlineDiffMargin.ts:								: nls.localize('diff.clipboard.copyChangedLineContent.label', "Copy changed line ({0})", diff.originalStartLineNumber + currentLineNumberOffset);
src/vs/editor/browser/widget/codeEditorWidget.ts:						this._notificationService.warn(nls.localize('cursors.maximum', "The number of cursors has been limited to {0}.", CursorsController.MAX_CURSOR_COUNT));
src/vs/editor/common/editorContextKeys.ts:	export const editorTextFocus = new RawContextKey<boolean>('editorTextFocus', false, nls.localize('editorTextFocus', "Whether the editor text has focus (cursor is blinking)"));
src/vs/editor/common/editorContextKeys.ts:	export const focus = new RawContextKey<boolean>('editorFocus', false, nls.localize('editorFocus', "Whether the editor or an editor widget has focus (e.g. focus is in the find widget)"));
src/vs/editor/common/editorContextKeys.ts:	export const textInputFocus = new RawContextKey<boolean>('textInputFocus', false, nls.localize('textInputFocus', "Whether an editor or a rich text input has focus (cursor is blinking)"));
src/vs/editor/common/editorContextKeys.ts:	export const readOnly = new RawContextKey<boolean>('editorReadonly', false, nls.localize('editorReadonly', "Whether the editor is read only"));
src/vs/editor/common/editorContextKeys.ts:	export const inDiffEditor = new RawContextKey<boolean>('inDiffEditor', false, nls.localize('inDiffEditor', "Whether the context is a diff editor"));
src/vs/editor/common/editorContextKeys.ts:	export const columnSelection = new RawContextKey<boolean>('editorColumnSelection', false, nls.localize('editorColumnSelection', "Whether `editor.columnSelection` is enabled"));
src/vs/editor/common/editorContextKeys.ts:	export const hasNonEmptySelection = new RawContextKey<boolean>('editorHasSelection', false, nls.localize('editorHasSelection', "Whether the editor has text selected"));
src/vs/editor/common/editorContextKeys.ts:	export const hasMultipleSelections = new RawContextKey<boolean>('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', "Whether the editor has multiple selections"));
src/vs/editor/common/editorContextKeys.ts:	export const tabMovesFocus = new RawContextKey<boolean>('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', "Whether `Tab` will move focus out of the editor"));
src/vs/editor/common/editorContextKeys.ts:	export const hoverVisible = new RawContextKey<boolean>('editorHoverVisible', false, nls.localize('editorHoverVisible', "Whether the editor hover is visible"));
src/vs/editor/common/editorContextKeys.ts:	export const inCompositeEditor = new RawContextKey<boolean>('inCompositeEditor', undefined, nls.localize('inCompositeEditor', "Whether the editor is part of a larger editor (e.g. notebooks)"));
src/vs/editor/common/editorContextKeys.ts:	export const languageId = new RawContextKey<string>('editorLangId', '', nls.localize('editorLangId', "The language identifier of the editor"));
src/vs/editor/common/editorContextKeys.ts:	export const hasCompletionItemProvider = new RawContextKey<boolean>('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', "Whether the editor has a completion item provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasCodeActionsProvider = new RawContextKey<boolean>('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', "Whether the editor has a code actions provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasCodeLensProvider = new RawContextKey<boolean>('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', "Whether the editor has a code lens provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasDefinitionProvider = new RawContextKey<boolean>('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', "Whether the editor has a definition provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasDeclarationProvider = new RawContextKey<boolean>('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', "Whether the editor has a declaration provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasImplementationProvider = new RawContextKey<boolean>('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', "Whether the editor has an implementation provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasTypeDefinitionProvider = new RawContextKey<boolean>('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', "Whether the editor has a type definition provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasHoverProvider = new RawContextKey<boolean>('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', "Whether the editor has a hover provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasDocumentHighlightProvider = new RawContextKey<boolean>('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', "Whether the editor has a document highlight provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasDocumentSymbolProvider = new RawContextKey<boolean>('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', "Whether the editor has a document symbol provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasReferenceProvider = new RawContextKey<boolean>('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', "Whether the editor has a reference provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasRenameProvider = new RawContextKey<boolean>('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', "Whether the editor has a rename provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasSignatureHelpProvider = new RawContextKey<boolean>('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', "Whether the editor has a signature help provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasInlayHintsProvider = new RawContextKey<boolean>('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', "Whether the editor has an inline hints provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasDocumentFormattingProvider = new RawContextKey<boolean>('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', "Whether the editor has a document formatting provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', "Whether the editor has a document selection formatting provider"));
src/vs/editor/common/editorContextKeys.ts:	export const hasMultipleDocumentFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', "Whether the editor has multiple document formatting providers"));
src/vs/editor/common/editorContextKeys.ts:	export const hasMultipleDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', "Whether the editor has multiple document selection formatting providers"));
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			{ handler: NewWindowTabHandler, id: 'workbench.action.newWindowTab', title: { value: localize('newTab', "New Window Tab"), original: 'New Window Tab' } },
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			{ handler: ShowPreviousWindowTabHandler, id: 'workbench.action.showPreviousWindowTab', title: { value: localize('showPreviousTab', "Show Previous Window Tab"), original: 'Show Previous Window Tab' } },
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			{ handler: ShowNextWindowTabHandler, id: 'workbench.action.showNextWindowTab', title: { value: localize('showNextWindowTab', "Show Next Window Tab"), original: 'Show Next Window Tab' } },
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			{ handler: MoveWindowTabToNewWindowHandler, id: 'workbench.action.moveWindowTabToNewWindow', title: { value: localize('moveWindowTabToNewWindow', "Move Window Tab to New Window"), original: 'Move Window Tab to New Window' } },
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			{ handler: MergeWindowTabsHandlerHandler, id: 'workbench.action.mergeAllWindowTabs', title: { value: localize('mergeAllWindowTabs', "Merge All Windows"), original: 'Merge All Windows' } },
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			{ handler: ToggleWindowTabsBarHandler, id: 'workbench.action.toggleWindowTabsBar', title: { value: localize('toggleWindowTabsBar', "Toggle Window Tabs Bar"), original: 'Toggle Window Tabs Bar' } }
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			title: localize({ key: 'miExit', comment: ['&& denotes a mnemonic'] }, "E&&xit")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:		'title': localize('windowConfigurationTitle', "Window"),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.openWithoutArgumentsInNewWindow.on', "Open a new empty window."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.openWithoutArgumentsInNewWindow.off', "Focus the last active running instance.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'markdownDescription': localize('openWithoutArgumentsInNewWindow', "Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.reopenFolders.preserve', "Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.reopenFolders.all', "Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line)."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.reopenFolders.folders', "Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line)."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.reopenFolders.one', "Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line)."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.reopenFolders.none', "Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('restoreWindows', "Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('restoreFullscreen', "Controls whether a window should restore to full screen mode if it was exited in full screen mode.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('zoomLevel', "Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.newWindowDimensions.default', "Open new windows in the center of the screen."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.newWindowDimensions.inherit', "Open new windows with same dimension as last active one."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.newWindowDimensions.offset', "Open new windows with same dimension as last active one with an offset position."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.newWindowDimensions.maximized', "Open new windows maximized."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:					localize('window.newWindowDimensions.fullscreen', "Open new windows in full screen mode.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('newWindowDimensions', "Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('closeWhenEmpty', "Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'markdownDescription': localize('window.doubleClickIconToClose', "If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `#window.titleBarStyle#` is set to `custom`.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('titleBarStyle', "Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('windowControlsOverlay', "Use window controls provided by the platform instead of our HTML-based window controls. Changes require a full restart to apply."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('dialogStyle', "Adjust the appearance of dialog windows.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('window.nativeTabs', "Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('window.nativeFullScreen', "Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('window.clickThroughInactive', "If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				description: localize('experimentalUseSandbox', "Experimental: When enabled, the window will have sandbox mode enabled via Electron API."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:		title: localize('telemetryConfigurationTitle', "Telemetry"),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('telemetry.enableCrashReporting', "Enable crash reports to be collected. This helps us improve stability. \nThis option requires restart to take effect."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'markdownDeprecationMessage': localize('enableCrashReporterDeprecated', "If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the {0} setting.", `\`#${TELEMETRY_SETTING_ID}#\``),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:		'title': localize('keyboardConfigurationTitle', "Keyboard"),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'description': localize('touchbar.enabled', "Enables the macOS touchbar buttons on the keyboard if available."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				'markdownDescription': localize('touchbar.ignored', 'A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).'),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				description: localize('argv.locale', 'The display Language to use. Picking a different language requires the associated language pack to be installed.')
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				description: localize('argv.disableHardwareAcceleration', 'Disables hardware acceleration. ONLY change this option if you encounter graphic issues.')
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				markdownDescription: localize('argv.forceColorProfile', 'Allows to override the color profile to use. If you experience colors appear badly, try to set this to `srgb` and restart.')
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				markdownDescription: localize('argv.enableCrashReporter', 'Allows to disable crash reporting, should restart the app if the value is changed.')
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				markdownDescription: localize('argv.crashReporterId', 'Unique id used for correlating crash reports sent from this app instance.')
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				description: localize('argv.enebleProposedApi', "Enable proposed APIs for a list of extension ids (such as \`vscode.git\`). Proposed APIs are unstable and subject to breaking without warning at any time. This should only be set for extension development and testing purposes."),
src/vs/workbench/electron-sandbox/desktop.contribution.ts:				description: localize('argv.logLevel', "Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.")
src/vs/workbench/electron-sandbox/desktop.contribution.ts:			description: localize('argv.force-renderer-accessibility', 'Forces the renderer to be accessible. ONLY change this if you are using a screen reader on Linux. On other platforms the renderer will automatically be accessible. This flag is automatically set if you have editor.accessibilitySupport: on.'),
src/vs/editor/browser/widget/diffEditorWidget.ts:const diffInsertIcon = registerIcon('diff-insert', Codicon.add, nls.localize('diffInsertIcon', 'Line decoration for inserts in the diff editor.'));
src/vs/editor/browser/widget/diffEditorWidget.ts:const diffRemoveIcon = registerIcon('diff-remove', Codicon.remove, nls.localize('diffRemoveIcon', 'Line decoration for removals in the diff editor.'));
src/vs/editor/browser/widget/diffEditorWidget.ts:const ariaNavigationTip = nls.localize('diff-aria-navigation-tip', ' use Shift + F7 to navigate changes');
src/vs/editor/browser/widget/diffEditorWidget.ts:				this._notificationService.warn(nls.localize("diff.tooLarge", "Cannot compare files because one file is too large."));
src/vs/workbench/services/extensionManagement/common/extensionManagementServerService.ts:				get label() { return labelService.getHostLabel(Schemas.vscodeRemote, remoteAgentConnection!.remoteAuthority) || localize('remote', "Remote"); },
src/vs/workbench/services/extensionManagement/common/extensionManagementServerService.ts:				label: localize('browser', "Browser"),
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			return localize('singleDependentError', "Cannot uninstall extension '{0}'. Extension '{1}' depends on this.",
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			return localize('twoDependentsError', "Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.",
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:		return localize('multipleDependentsError', "Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.",
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			return Promise.reject(localize('Manifest is not found', "Installing Extension {0} failed: Manifest is not found.", gallery.displayName || gallery.name));
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:		const error = new Error(localize('cannot be installed', "Cannot install the '{0}' extension because it is not available in this setup.", gallery.displayName || gallery.name));
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:				extensions.length === 1 ? localize('install extension', "Install Extension") : localize('install extensions', "Install Extensions"),
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:					localize('install', "Install"),
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:					localize('install and do no sync', "Install (Do not sync)"),
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:					localize('cancel', "Cancel"),
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:						? localize('install single extension', "Would you like to install and synchronize '{0}' extension across your devices?", extensions[0].displayName)
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:						: localize('install multiple extensions', "Would you like to install and synchronize extensions across your devices?")
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:				message: localize('extensionInstallWorkspaceTrustMessage', "Enabling this extension requires a trusted workspace."),
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:					{ label: localize('extensionInstallWorkspaceTrustButton', "Trust Workspace & Install"), type: 'ContinueWithTrust' },
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:					{ label: localize('extensionInstallWorkspaceTrustContinueButton', "Install"), type: 'ContinueWithoutTrust' },
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:					{ label: localize('extensionInstallWorkspaceTrustManageButton', "Learn More"), type: 'Manage' }
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:		const productName = localize('VS Code for Web', "{0} for the Web", this.productService.nameLong);
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:		const limitedSupportMessage = localize('limited support', "'{0}' has limited functionality in {1}.", extension.displayName || extension.identifier.id, productName);
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			detail = `${virtualWorkspaceSupportReason ? `${virtualWorkspaceSupportReason}\n` : ''}${localize('non web extensions detail', "Contains extensions which are not supported.")}`;
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			buttons = [localize('install anyways', "Install Anyway"), localize('showExtensions', "Show Extensions"), localize('cancel', "Cancel")];
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			buttons = [localize('install anyways', "Install Anyway"), localize('cancel', "Cancel")];
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			message = localize('non web extensions', "'{0}' contains extensions which are not supported in {1}.", extension.displayName || extension.identifier.id, productName);
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			buttons = [localize('install anyways', "Install Anyway"), localize('showExtensions', "Show Extensions"), localize('cancel', "Cancel")];
src/vs/workbench/services/extensions/common/remoteExtensionHost.ts:							Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id: remoteExtHostLog, label: localize('remote extension host Log', "Remote Extension Host"), file: logFile, log: true });
src/vs/workbench/services/extensions/common/extensionsUtil.ts:			logService.warn(localize('overwritingExtension', "Overwriting extension {0} with {1}.", extension.extensionLocation.fsPath, systemExtension.extensionLocation.fsPath));
src/vs/workbench/services/extensions/common/extensionsUtil.ts:				logService.warn(localize('overwritingExtension', "Overwriting extension {0} with {1}.", extension.extensionLocation.fsPath, userExtension.extensionLocation.fsPath));
src/vs/workbench/services/extensions/common/extensionsUtil.ts:		logService.info(localize('extensionUnderDevelopment', "Loading development extension at {0}", developedExtension.extensionLocation.fsPath));
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:		nls.localize('ui', "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:		nls.localize('workspace', "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.engines', "Engine compatibility."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.engines.vscode', 'For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.publisher', 'The publisher of the VS Code extension.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.displayName', 'The display name for the extension used in the VS Code gallery.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.categories', 'The categories used by the VS Code gallery to categorize the extension.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					deprecationMessage: nls.localize('vscode.extension.category.languages.deprecated', 'Use \'Programming  Languages\' instead'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.galleryBanner', 'Banner used in the VS Code marketplace.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.galleryBanner.color', 'The banner color on the VS Code marketplace page header.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.galleryBanner.theme', 'The color theme for the font used in the banner.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.contributes', 'All contributions of the VS Code extension represented by this package.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.preview', 'Sets the extension to be flagged as a Preview in the Marketplace.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			deprecationMessage: nls.localize('vscode.extension.enableProposedApi.deprecated', 'Use `enabledApiProposals` instead.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			markdownDescription: nls.localize('vscode.extension.enabledApiProposals', 'Enable API proposals to try them out. Only valid **during development**. Extensions **cannot be published** with this property. For more details visit: https://code.visualstudio.com/api/advanced-topics/using-proposed-api'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.activationEvents', 'Activation events for the VS Code extension.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onWebviewPanel', 'An activation event emmited when a webview is loaded of a certain viewType'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onLanguage', 'An activation event emitted whenever a file that resolves to the specified language gets opened.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onCommand', 'An activation event emitted whenever the specified command gets invoked.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onDebug', 'An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onDebugInitialConfigurations', 'An activation event emitted whenever a "launch.json" needs to be created (and all provideDebugConfigurations methods need to be called).'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onDebugDynamicConfigurations', 'An activation event emitted whenever a list of all debug configurations needs to be created (and all provideDebugConfigurations methods for the "dynamic" scope need to be called).'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onDebugResolve', 'An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onDebugAdapterProtocolTracker', 'An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.workspaceContains', 'An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onStartupFinished', 'An activation event emitted after the start-up finished (after all `*` activated extensions have finished activating).'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onTaskType', 'An activation event emitted whenever tasks of a certain type need to be listed or resolved.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onFileSystem', 'An activation event emitted whenever a file or folder is accessed with the given scheme.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onEditSession', 'An activation event emitted whenever an edit session is accessed with the given scheme.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onSearch', 'An activation event emitted whenever a search is started in the folder with the given scheme.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onView', 'An activation event emitted whenever the specified view is expanded.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onUri', 'An activation event emitted whenever a system-wide Uri directed towards this extension is open.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onOpenExternalUri', 'An activation event emitted whenever a external uri (such as an http or https link) is being opened.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onCustomEditor', 'An activation event emitted whenever the specified custom editor becomes visible.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onNotebook', 'An activation event emitted whenever the specified notebook document is opened.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onAuthenticationRequest', 'An activation event emitted whenever sessions are requested from the specified authentication provider.')
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onRenderer', 'An activation event emitted whenever a notebook output renderer is used.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onTerminalProfile', 'An activation event emitted when a specific terminal profile is launched.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.onWalkthrough', 'An activation event emitted when a specified walkthrough is opened.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.activationEvents.star', 'An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.badges', 'Array of badges to display in the sidebar of the Marketplace\'s extension page.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.badges.url', 'Badge image URL.')
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.badges.href', 'Badge link.')
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:						description: nls.localize('vscode.extension.badges.description', 'Badge description.')
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.markdown', "Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.qna', "Controls the Q&A link in the Marketplace. Set to marketplace to enable the default Marketplace Q & A site. Set to a string to provide the URL of a custom Q & A site. Set to false to disable Q & A altogether."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.extensionDependencies', 'Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.contributes.extensionPack', "A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('extensionKind', "Define the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions run on the remote."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('extensionKind.ui', "Define an extension which can run only on the local machine when connected to remote window.")
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('extensionKind.workspace', "Define an extension which can run only on the remote machine when connected remote window.")
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('extensionKind.ui-workspace', "Define an extension which can run on either side, with a preference towards running on the local machine.")
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('extensionKind.workspace-ui', "Define an extension which can run on either side, with a preference towards running on the remote machine.")
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('extensionKind.empty', "Define an extension which cannot run in a remote context, neither on the local, nor on the remote machine.")
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.capabilities', "Declare the set of supported capabilities by the extension."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.capabilities.virtualWorkspaces', "Declares whether the extension should be enabled in virtual workspaces. A virtual workspace is a workspace which is not backed by any on-disk resources. When false, this extension will be automatically disabled in virtual workspaces. Default is true."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:							markdownDescription: nls.localize('vscode.extension.capabilities.virtualWorkspaces.supported', "Declares the level of support for virtual workspaces by the extension."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:								nls.localize('vscode.extension.capabilities.virtualWorkspaces.supported.limited', "The extension will be enabled in virtual workspaces with some functionality disabled."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:								nls.localize('vscode.extension.capabilities.virtualWorkspaces.supported.true', "The extension will be enabled in virtual workspaces with all functionality enabled."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:								nls.localize('vscode.extension.capabilities.virtualWorkspaces.supported.false', "The extension will not be enabled in virtual workspaces."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:							markdownDescription: nls.localize('vscode.extension.capabilities.virtualWorkspaces.description', "A description of how virtual workspaces affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.capabilities.untrustedWorkspaces', 'Declares how the extension should be handled in untrusted workspaces.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:							markdownDescription: nls.localize('vscode.extension.capabilities.untrustedWorkspaces.supported', "Declares the level of support for untrusted workspaces by the extension."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:								nls.localize('vscode.extension.capabilities.untrustedWorkspaces.supported.limited', "The extension will be enabled in untrusted workspaces with some functionality disabled."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:								nls.localize('vscode.extension.capabilities.untrustedWorkspaces.supported.true', "The extension will be enabled in untrusted workspaces with all functionality enabled."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:								nls.localize('vscode.extension.capabilities.untrustedWorkspaces.supported.false', "The extension will not be enabled in untrusted workspaces."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:							description: nls.localize('vscode.extension.capabilities.untrustedWorkspaces.restrictedConfigurations', "A list of configuration keys contributed by the extension that should not use workspace values in untrusted workspaces."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:							markdownDescription: nls.localize('vscode.extension.capabilities.untrustedWorkspaces.description', "A description of how workspace trust affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.contributes.sponsor', "Specify the location from where users can sponsor your extension."),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.contributes.sponsor.url', "URL from where users can sponsor your extension. It must be a valid URL with a HTTP or HTTPS protocol. Example value: https://github.com/sponsors/nvaccess"),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.scripts.prepublish', 'Script executed before the package is published as a VS Code extension.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:					description: nls.localize('vscode.extension.scripts.uninstall', 'Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.'),
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('vscode.extension.icon', 'The path to a 128x128 pixel icon.')
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize({
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize('product.extensionEnabledApiProposals', "API proposals that the respective extensions can freely use."),
src/vs/workbench/services/integrity/electron-sandbox/integrityService.ts:		const message = localize('integrity.prompt', "Your {0} installation appears to be corrupt. Please reinstall.", this.productService.nameShort);
src/vs/workbench/services/integrity/electron-sandbox/integrityService.ts:						label: localize('integrity.moreInformation', "More Information"),
src/vs/workbench/services/integrity/electron-sandbox/integrityService.ts:						label: localize('integrity.dontShowAgain', "Don't Show Again"),
src/vs/workbench/services/host/browser/browserHostService.ts:			const showResult = await this.dialogService.show(Severity.Warning, localize('unableToOpenExternal', "The browser interrupted the opening of a new tab or window. Press 'Open' to open it anyway."), [localize('open', "Open"), localize('cancel', "Cancel")], { cancelId: 1 });
src/vs/workbench/services/extensions/common/extensionHostManager.ts:				value: nls.localize('measureExtHostLatency', "Measure Extension Host Latency"),
src/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts:			throw new Error(localize('not a web extension', "Cannot add '{0}' because this extension is not a web extension.", manifest.displayName || manifest.name));
src/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts:				title: { value: localize('openInstalledWebExtensionsResource', "Open Installed Web Extensions Resource"), original: 'Open Installed Web Extensions Resource' },
src/vs/workbench/services/extensions/common/abstractExtensionService.ts:				message: nls.localize('looping', "The following extensions contain dependency loops and have been disabled: {0}", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', '))
src/vs/workbench/services/extensions/common/abstractExtensionService.ts:			const msg = nls.localize('extensionTestError', "No extension host found that can launch the test runner at {0}.", this._environmentService.extensionTestsLocationURI.toString());
src/vs/workbench/services/extensions/common/abstractExtensionService.ts:				this._notificationService.status(nls.localize('extensionService.autoRestart', "The remote extension host terminated unexpectedly. Restarting..."), { hideAfter: 5000 });
src/vs/workbench/services/extensions/common/abstractExtensionService.ts:				this._notificationService.prompt(Severity.Error, nls.localize('extensionService.crash', "Remote Extension host terminated unexpectedly 3 times within the last 5 minutes."),
src/vs/workbench/services/extensions/common/abstractExtensionService.ts:						label: nls.localize('restart', "Restart Remote Extension Host"),
src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts:					? nls.localize('extensionHost.startupFailDebug', "Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.")
src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts:					: nls.localize('extensionHost.startupFail', "Extension host did not start in 10 seconds, that might be a problem.");
src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts:						label: nls.localize('reloadWindow', "Reload Window"),
src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts:					Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id: localExtHostLog, label: nls.localize('extension host Log', "Extension Host"), file: this._extensionHostLogFile, log: true });
src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts:		this._notificationService.error(nls.localize('extensionHost.error', "Error from the extension host: {0}", errorMessage));
src/vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts:			event.join(timeout(100 /* wait a bit for IPC to get delivered */), { id: 'join.extensionDevelopment', label: nls.localize('join.extensionDevelopment', "Terminating extension debug session") });
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				message: localize('confirmUrl', "Allow an extension to open this URI?", extensionId),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:					label: localize('rememberConfirmUrl', "Don't ask again for this extension."),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				primaryButton: localize('open', "&&Open"),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				message: localize('installAndHandle', "Extension '{0}' is not installed. Would you like to install the extension and open this URL?", galleryExtension.displayName || galleryExtension.name),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				primaryButton: localize('install and open', "&&Install and Open"),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:					title: localize('Installing', "Installing Extension '{0}'...", galleryExtension.displayName || galleryExtension.name)
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				message: localize('enableAndHandle', "Extension '{0}' is disabled. Would you like to enable the extension and open the URL?", extension.manifest.displayName || extension.manifest.name),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				primaryButton: localize('enableAndReload', "&&Enable and Open"),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				message: localize('reloadAndHandle', "Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?", extension.manifest.displayName || extension.manifest.name),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:				primaryButton: localize('reloadAndOpen', "&&Reload Window and Open"),
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:			title: { value: localize('manage', "Manage Authorized Extension URIs..."), original: 'Manage Authorized Extension URIs...' },
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:			category: { value: localize('extensions', "Extensions"), original: 'Extensions' },
src/vs/workbench/services/extensions/browser/extensionUrlHandler.ts:			await quickInputService.pick([{ label: localize('no', 'There are currently no authorized extension URIs.') }]);
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:				this.notificationService.prompt(Severity.Info, localize('extensionsDisabled', "All installed extensions are temporarily disabled."), [{
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:					label: localize('Reload', "Reload and Enable Extensions"),
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:			throw new Error(localize('cannot disable language pack extension', "Cannot change enablement of {0} extension because it contributes language packs.", extension.manifest.displayName || extension.identifier.id));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:			throw new Error(localize('cannot disable auth extension', "Cannot change enablement {0} extension because Settings Sync depends on it.", extension.manifest.displayName || extension.identifier.id));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:			throw new Error(localize('cannot change enablement environment', "Cannot change enablement of {0} extension because it is enabled in environment", extension.manifest.displayName || extension.identifier.id));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:				throw new Error(localize('cannot change disablement environment', "Cannot change enablement of {0} extension because it is disabled in environment", extension.manifest.displayName || extension.identifier.id));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:				throw new Error(localize('cannot change enablement virtual workspace', "Cannot change enablement of {0} extension because it does not support virtual workspaces", extension.manifest.displayName || extension.identifier.id));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:				throw new Error(localize('cannot change enablement extension kind', "Cannot change enablement of {0} extension because of its extension kind", extension.manifest.displayName || extension.identifier.id));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:						throw new Error(localize('cannot change enablement dependency', "Cannot enable '{0}' extension because it depends on '{1}' extension that cannot be enabled", extension.manifest.displayName || extension.identifier.id, dependency.manifest.displayName || dependency.identifier.id));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:			throw new Error(localize('noWorkspace', "No workspace."));
src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts:			throw new Error(localize('cannot disable auth extension in workspace', "Cannot change enablement of {0} extension in workspace because it contributes authentication providers", extension.manifest.displayName || extension.identifier.id));
src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts:		Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id: webWorkerExtHostLog, label: localize('name', "Worker Extension Host"), file: this._extensionHostLogFile, log: true });
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			? localize('bisect.singular', "Extension Bisect is active and has disabled 1 extension. Check if you can still reproduce the problem and proceed by selecting from these options.")
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			: localize('bisect.plural', "Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.", this._extensionBisectService.disabledCount);
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			title: { value: localize('title.start', "Start Extension Bisect"), original: 'Start Extension Bisect' },
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			message: localize('msg.start', "Extension Bisect"),
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			detail: localize('detail.start', "Extension Bisect will use binary search to find an extension that causes a problem. During the process the window reloads repeatedly (~{0} times). Each time you must confirm if you are still seeing problems.", 2 + Math.log2(extensions.length) | 0),
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			primaryButton: localize('msg2', "Start Extension Bisect")
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			title: { value: localize('title.isBad', "Continue Extension Bisect"), original: 'Continue Extension Bisect' },
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			await dialogService.show(Severity.Info, localize('done.msg', "Extension Bisect"), undefined, {
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:				detail: localize('done.detail2', "Extension Bisect is done but no extension has been identified. This might be a problem with {0}.", productService.nameShort)
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			const res = await dialogService.show(Severity.Info, localize('done.msg', "Extension Bisect"),
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:				[localize('report', "Report Issue & Continue"), localize('done', "Continue")],
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:					detail: localize('done.detail', "Extension Bisect is done and has identified {0} as the extension causing the problem.", done.id),
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:					checkbox: { label: localize('done.disbale', "Keep this extension disabled"), checked: true },
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			detail: localize('bisect', "Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.", bisectService.disabledCount),
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			localize('msg.next', "Extension Bisect"),
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			[localize('next.good', "Good now"), localize('next.bad', "This is bad"), localize('next.stop', "Stop Bisect"), localize('next.cancel', "Cancel")],
src/vs/workbench/services/extensionManagement/browser/extensionBisect.ts:			title: { value: localize('title.stop', "Stop Extension Bisect"), original: 'Stop Extension Bisect' },
src/vs/workbench/services/extensions/browser/extensionService.ts:				message: nls.localize('looping', "The following extensions contain dependency loops and have been disabled: {0}", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', '))
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:					nls.localize('extensionService.versionMismatchCrash', "Extension host cannot start: version mismatch."),
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:						label: nls.localize('relaunch', "Relaunch VS Code"),
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:				this._notificationService.status(nls.localize('extensionService.autoRestart', "The extension host terminated unexpectedly. Restarting..."), { hideAfter: 5000 });
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:				this._notificationService.prompt(Severity.Error, nls.localize('extensionService.crash', "Extension host terminated unexpectedly 3 times within the last 5 minutes."),
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:						label: nls.localize('devTools', "Open Developer Tools"),
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:						label: nls.localize('restart', "Restart Extension Host"),
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:				this._notificationService.notify({ severity: Severity.Error, message: nls.localize('getEnvironmentFailure', "Could not fetch remote environment") });
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:				message: nls.localize('looping', "The following extensions contain dependency loops and have been disabled: {0}", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', '))
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:				const message = nls.localize('enableResolver', "Extension '{0}' is required to open the remote window.\nOK to enable?", recommendation.friendlyName);
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:						label: nls.localize('enable', 'Enable and Reload'),
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:			const message = nls.localize('installResolver', "Extension '{0}' is required to open the remote window.\nDo you want to install the extension?", recommendation.friendlyName);
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:					label: nls.localize('install', 'Install and Reload'),
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:							this._notificationService.error(nls.localize('resolverExtensionNotFound', "`{0}` not found on marketplace"));
src/vs/workbench/services/extensions/electron-sandbox/electronExtensionService.ts:			title: { value: nls.localize('restartExtensionHost', "Restart Extension Host"), original: 'Restart Extension Host' },
src/vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner.ts:					localize('extensionCache.invalid', "Extensions have been modified on disk. Please reload the window."),
src/vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner.ts:						label: localize('reloadWindow', "Reload Window"),
src/vs/workbench/services/textfile/common/textFileSaveParticipant.ts:			title: localize('saveParticipants', "Saving '{0}'", model.name),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			throw new Error(localize('no authentication providers', "Settings sync cannot be turned on because there are no authentication providers available."));
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			throw new Error(localize('no account', "No account available"));
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			throw new Error(localize('no account', "No account available"));
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				message: localize('sync in progress', "Settings Sync is being turned on. Would you like to cancel it?"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				title: localize('settings sync', "Settings Sync"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				primaryButton: localize({ key: 'yes', comment: ['&& denotes a mnemonic'] }, "&&Yes"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				secondaryButton: localize({ key: 'no', comment: ['&& denotes a mnemonic'] }, "&&No"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:		this.notificationService.info(localize('sync turned on', "{0} is turned on", SYNC_TITLE));
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				progress.report({ message: localize('turning on', "Turning on...") });
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:						progress.report({ message: localize('resolving conflicts', "Resolving conflicts...") });
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:						progress.report({ message: localize('syncing...', "Turning on...") });
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			localize('conflicts detected', "Conflicts Detected"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				localize('show conflicts', "Show Conflicts"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				localize('replace local', "Replace Local"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				localize('replace remote', "Replace Remote"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				localize('cancel', "Cancel"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				detail: localize('resolve', "Please resolve conflicts to turn on..."),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			message: localize('reset', "This will clear your data in the cloud and stop sync on all your devices."),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			title: localize('reset title', "Clear"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			primaryButton: localize({ key: 'resetButton', comment: ['&& denotes a mnemonic'] }, "&&Reset"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			quickPick.placeholder = localize('choose account placeholder', "Select an account to sign in");
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			quickPickItems.push({ type: 'separator', label: localize('signed in', "Signed in") });
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:						description: account.sessionId === this.current?.sessionId ? localize('last used', "Last Used with Sync") : undefined,
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:			quickPickItems.push({ type: 'separator', label: localize('others', "Others") });
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				quickPickItems.push({ label: localize('sign in using account', "Sign in with {0}", providerName), authenticationProvider });
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:				message: localize('successive auth failures', "Settings sync is suspended because of successive authorization failures. Please sign in again to continue synchronizing"),
src/vs/workbench/services/userDataSync/browser/userDataSyncWorkbenchService.ts:					primary: [new Action('sign in', localize('sign in', "Sign in"), undefined, true, () => this.signIn())]
src/vs/workbench/services/textfile/common/textFileEditorModel.ts:	private static readonly TEXTFILE_SAVE_ENCODING_SOURCE = SaveSourceRegistry.registerSource('textFileEncoding.source', localize('textFileCreate.source', "File Encoding Changed"));
src/vs/workbench/services/userDataSync/common/userDataSync.ts:		case SyncResource.Settings: return localize('settings', "Settings");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:		case SyncResource.Keybindings: return localize('keybindings', "Keyboard Shortcuts");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:		case SyncResource.Snippets: return localize('snippets', "User Snippets");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:		case SyncResource.Tasks: return localize('tasks', "User Tasks");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:		case SyncResource.Extensions: return localize('extensions', "Extensions");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:		case SyncResource.GlobalState: return localize('ui state label', "UI State");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:		case SyncResource.Profiles: return localize('profiles', "Profiles");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:export const SYNC_TITLE = localize('sync category', "Settings Sync");
src/vs/workbench/services/userDataSync/common/userDataSync.ts:export const SYNC_VIEW_ICON = registerIcon('settings-sync-view-icon', Codicon.sync, localize('syncViewIcon', 'View icon of the Settings Sync view.'));
src/vs/workbench/services/textfile/browser/textFileService.ts:	private static readonly TEXTFILE_SAVE_CREATE_SOURCE = SaveSourceRegistry.registerSource('textFileCreate.source', localize('textFileCreate.source', "File Created"));
src/vs/workbench/services/textfile/browser/textFileService.ts:	private static readonly TEXTFILE_SAVE_REPLACE_SOURCE = SaveSourceRegistry.registerSource('textFileOverwrite.source', localize('textFileOverwrite.source', "File Replaced"));
src/vs/workbench/services/textfile/browser/textFileService.ts:			readonly label = localize('textFileModelDecorations', "Text File Model Decorations");
src/vs/workbench/services/textfile/browser/textFileService.ts:						tooltip: localize('readonlyAndDeleted', "Deleted, Read Only"),
src/vs/workbench/services/textfile/browser/textFileService.ts:						tooltip: localize('readonly', "Read Only"),
src/vs/workbench/services/textfile/browser/textFileService.ts:						tooltip: localize('deleted', "Deleted"),
src/vs/workbench/services/textfile/browser/textFileService.ts:				throw new TextFileOperationError(localize('fileBinaryError', "File seems to be binary and cannot be opened as text"), TextFileOperationResult.FILE_IS_BINARY, options);
src/vs/workbench/services/textfile/browser/textFileService.ts:			message: localize('confirmOverwrite', "'{0}' already exists. Do you want to replace it?", basename(resource)),
src/vs/workbench/services/textfile/browser/textFileService.ts:			detail: localize('irreversible', "A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.", basename(resource), basename(dirname(resource))),
src/vs/workbench/services/textfile/browser/textFileService.ts:			primaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"),
src/vs/workbench/services/textfile/common/textFileEditorModelManager.ts:				notificationService.error(localize({ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", model.name, toErrorMessage(error, false)));
src/vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts:			{ label: mnemonicButtonLabel(localize('save', "Save")), result: ConfirmResult.SAVE },
src/vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts:			{ label: mnemonicButtonLabel(localize('doNotSave', "Don't Save")), result: ConfirmResult.DONT_SAVE },
src/vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts:			{ label: localize('cancel', "Cancel"), result: ConfirmResult.CANCEL }
src/vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts:		const message = localize('saveWorkspaceMessage', "Do you want to save your workspace configuration as a file?");
src/vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts:		const detail = localize('saveWorkspaceDetail', "Save your workspace if you plan to open it again.");
src/vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts:				localize('workspaceOpenedMessage', "Unable to save workspace '{0}'", basename(workspaceUri)),
src/vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts:					detail: localize('workspaceOpenedDetail', "The workspace is already opened in another window. Please close that window first and then try again.")
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopySaveParticipant.ts:			title: localize('saveParticipants', "Saving '{0}'", workingCopy.name),
src/vs/workbench/services/workingCopy/common/workingCopyHistoryTracker.ts:	private static readonly UNDO_REDO_SAVE_SOURCE = SaveSourceRegistry.registerSource('undoRedo.source', localize('undoRedo.source', "Undo / Redo"));
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopyManager.ts:			this.lifecycleService.onWillShutdown(event => event.join(this.onWillShutdownDesktop(), { id: 'join.fileWorkingCopyManager', label: localize('join.fileWorkingCopyManager', "Saving working copies") }));
src/vs/workbench/services/workingCopy/common/workingCopyHistoryService.ts:	private static readonly FILE_SAVED_SOURCE = SaveSourceRegistry.registerSource('default.source', localize('default.source', "File Saved"));
src/vs/workbench/services/workingCopy/common/workingCopyHistoryService.ts:	private static readonly FILE_MOVED_SOURCE = SaveSourceRegistry.registerSource('moved.source', localize('moved.source', "File Moved"));
src/vs/workbench/services/workingCopy/common/workingCopyHistoryService.ts:	private static readonly FILE_RENAMED_SOURCE = SaveSourceRegistry.registerSource('renamed.source', localize('renamed.source', "File Renamed"));
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyHistoryService.ts:		e.join(this.storeAll(e.token), { id: 'join.workingCopyHistory', label: localize('join.workingCopyHistory', "Saving local history") });
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:			message = localize('staleSaveError', "Failed to save '{0}': The content of the file is newer. Do you want to overwrite the file with your changes?", this.name);
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:			primaryActions.push(toAction({ id: 'fileWorkingCopy.overwrite', label: localize('overwrite', "Overwrite"), run: () => this.save({ ignoreModifiedSince: true }) }));
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:			primaryActions.push(toAction({ id: 'fileWorkingCopy.revert', label: localize('discard', "Discard"), run: () => this.revert() }));
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:						isWindows ? localize('overwriteElevated', "Overwrite as Admin...") : localize('overwriteElevatedSudo', "Overwrite as Sudo...") :
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:						isWindows ? localize('saveElevated', "Retry as Admin...") : localize('saveElevatedSudo', "Retry as Sudo..."),
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:				primaryActions.push(toAction({ id: 'fileWorkingCopy.unlock', label: localize('overwrite', "Overwrite"), run: () => this.save({ writeUnlock: true, reason: SaveReason.EXPLICIT }) }));
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:				primaryActions.push(toAction({ id: 'fileWorkingCopy.retry', label: localize('retry', "Retry"), run: () => this.save({ reason: SaveReason.EXPLICIT }) }));
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:				label: localize('saveAs', "Save As..."),
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:			primaryActions.push(toAction({ id: 'fileWorkingCopy.revert', label: localize('discard', "Discard"), run: () => this.revert() }));
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:						localize('readonlySaveErrorAdmin', "Failed to save '{0}': File is read-only. Select 'Overwrite as Admin' to retry as administrator.", this.name) :
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:						localize('readonlySaveErrorSudo', "Failed to save '{0}': File is read-only. Select 'Overwrite as Sudo' to retry as superuser.", this.name);
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:					message = localize('readonlySaveError', "Failed to save '{0}': File is read-only. Select 'Overwrite' to attempt to make it writeable.", this.name);
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:					localize('permissionDeniedSaveError', "Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.", this.name) :
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:					localize('permissionDeniedSaveErrorSudo', "Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.", this.name);
src/vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts:				message = localize({ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", this.name, toErrorMessage(error, false));
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService.ts:		this.lifecycleService.onWillShutdown(event => event.join(this.joinBackups(), { id: 'join.workingCopyBackups', label: localize('join.workingCopyBackups', "Backup working copies") }));
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:			this.showErrorDialog(localize('backupTrackerBackupFailed', "The following editors with unsaved changes could not be saved to the back up location."), remainingDirtyWorkingCopies, backupError);
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:			this.showErrorDialog(localize('backupTrackerConfirmFailed', "The following editors with unsaved changes could not be saved or reverted."), remainingDirtyWorkingCopies, error);
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:		const advice = localize('backupErrorDetails', "Try saving or reverting the editors with unsaved changes first and then try again.");
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:			localize('backupBeforeShutdownMessage', "Backing up editors with unsaved changes is taking a bit longer..."),
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:			localize('backupBeforeShutdownDetail', "Click 'Cancel' to stop waiting and to save or revert editors with unsaved changes.")
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:		}, localize('saveBeforeShutdown', "Saving editors with unsaved changes is taking a bit longer..."));
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:		}, localize('revertBeforeShutdown', "Reverting editors with unsaved changes is taking a bit longer..."));
src/vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts:		}, localize('discardBackupsBeforeShutdown', "Discarding backups is taking a bit longer..."));
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:	private static readonly FILE_WORKING_COPY_SAVE_CREATE_SOURCE = SaveSourceRegistry.registerSource('fileWorkingCopyCreate.source', localize('fileWorkingCopyCreate.source', "File Created"));
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:	private static readonly FILE_WORKING_COPY_SAVE_REPLACE_SOURCE = SaveSourceRegistry.registerSource('fileWorkingCopyReplace.source', localize('fileWorkingCopyReplace.source', "File Replaced"));
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:			readonly label = localize('fileWorkingCopyDecorations', "File Working Copy Decorations");
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:						tooltip: localize('readonlyAndDeleted', "Deleted, Read Only"),
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:						tooltip: localize('readonly', "Read Only"),
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:						tooltip: localize('deleted', "Deleted"),
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:			message: localize('confirmOverwrite', "'{0}' already exists. Do you want to replace it?", basename(resource)),
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:			detail: localize('irreversible', "A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.", basename(resource), basename(dirname(resource))),
src/vs/workbench/services/workingCopy/common/fileWorkingCopyManager.ts:			primaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"),
src/vs/workbench/services/workspaces/browser/workspaceTrustEditorInput.ts:		return localize('workspaceTrustEditorInputName', "Workspace Trust");
src/vs/workbench/services/textfile/electron-sandbox/nativeTextFileService.ts:		this.lifecycleService.onWillShutdown(event => event.join(this.onWillShutdown(), { id: 'join.textFiles', label: localize('join.textFiles', "Saving text files") }));
src/vs/workbench/services/views/common/viewContainerModel.ts:		Registry.as<IOutputChannelRegistry>(OutputExtensions.OutputChannels).registerChannel({ id: 'viewsLog', label: localize('views log', "Views"), file: getViewsLogFile(environmentService), log: true });
src/vs/workbench/services/views/common/viewContainerModel.ts:				description: localize('globalViewsStateStorageId', "Views visibility customizations in {0} view container", viewContainerName),
src/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts:			this.enterProfile(this.userDataProfilesService.defaultProfile, false, localize('reload message when removed', "The current profile has been removed. Please reload to switch back to default profile"));
src/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts:			this.enterProfile(this.userDataProfilesService.defaultProfile, false, localize('reload message when removed', "The current profile has been removed. Please reload to switch back to default profile"));
src/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts:			throw new Error(localize('cannotRenameDefaultProfile', "Cannot rename the default profile"));
src/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts:			throw new Error(localize('cannotDeleteDefaultProfile', "Cannot delete the default profile"));
src/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts:				message: reloadMessage ?? localize('reload message', "Switching a profile requires reloading VS Code."),
src/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts:				primaryButton: localize('reload button', "&&Reload"),
src/vs/workbench/services/views/browser/viewDescriptorService.ts:				description: localize('views customizations', "Views Customizations"),
src/vs/workbench/services/views/browser/viewDescriptorService.ts:							title: localize('hideView', "Hide '{0}'", viewDescriptor.name),
src/vs/workbench/services/views/browser/viewDescriptorService.ts:						value: localize('resetViewLocation', "Reset Location")
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.folderExpanded', 'The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.folder', 'The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.file', 'The default file icon, shown for all files that don\'t match any extension, filename or language id.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.folderNames', 'Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:				description: nls.localize('schema.folderName', 'The ID of the icon definition for the association.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.folderNamesExpanded', 'Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:				description: nls.localize('schema.folderNameExpanded', 'The ID of the icon definition for the association.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.fileExtensions', 'Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:				description: nls.localize('schema.fileExtension', 'The ID of the icon definition for the association.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.fileNames', 'Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:				description: nls.localize('schema.fileName', 'The ID of the icon definition for the association.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.languageIds', 'Associates languages to icons. The object key is the language id as defined in the language contribution point.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:				description: nls.localize('schema.languageId', 'The ID of the icon definition for the association.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.fonts', 'Fonts that are used in the icon definitions.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.id', 'The ID of the font.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						patternErrorMessage: nls.localize('schema.id.formatError', 'The ID must only contain letter, numbers, underscore and minus.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.src', 'The location of the font.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:									description: nls.localize('schema.font-path', 'The font path, relative to the current file icon theme file.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:									description: nls.localize('schema.font-format', 'The format of the font.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.font-weight', 'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.font-style', 'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.font-size', 'The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.iconDefinitions', 'Description of all icons that can be used when associating files to icons.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:				description: nls.localize('schema.iconDefinition', 'An icon definition. The object key is the ID of the definition.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.iconPath', 'When using a SVG or PNG: The path to the image. The path is relative to the icon set file.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.fontCharacter', 'When using a glyph font: The character in the font to use.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.fontColor', 'When using a glyph font: The color to use.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.fontSize', 'When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.'),
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:						description: nls.localize('schema.fontId', 'When using a font: The id of the font. If not set, defaults to the first font definition.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.light', 'Optional associations for file icons in light color themes.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.highContrast', 'Optional associations for file icons in high contrast color themes.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.hidesExplorerArrows', 'Configures whether the file explorer\'s arrows should be hidden when this theme is active.')
src/vs/workbench/services/themes/common/fileIconThemeSchema.ts:			description: nls.localize('schema.showLanguageModeIcons', 'Configures whether the default language icons should be used if the theme does not define an icon for a language.')
src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts:			saveLabel: mnemonicButtonLabel(localize('save', "Save")),
src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts:			title: localize('saveWorkspace', "Save Workspace"),
src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts:		const message = localize('errorInvalidTaskConfiguration', "Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.");
src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts:		const message = localize('errorWorkspaceConfigurationFileDirty', "Unable to write into workspace configuration file because the file has unsaved changes. Please save it and try again.");
src/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.ts:				label: localize('openWorkspaceConfigurationFile', "Open Workspace Configuration"),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:		description: nls.localize('contributes.semanticTokenTypes', 'Contributes semantic token types.'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					description: nls.localize('contributes.semanticTokenTypes.id', 'The identifier of the semantic token type'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					patternErrorMessage: nls.localize('contributes.semanticTokenTypes.id.format', 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					description: nls.localize('contributes.semanticTokenTypes.superType', 'The super type of the semantic token type'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					patternErrorMessage: nls.localize('contributes.semanticTokenTypes.superType.format', 'Super types should be in the form letterOrDigit[_-letterOrDigit]*'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					description: nls.localize('contributes.color.description', 'The description of the semantic token type'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:		description: nls.localize('contributes.semanticTokenModifiers', 'Contributes semantic token modifiers.'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					description: nls.localize('contributes.semanticTokenModifiers.id', 'The identifier of the semantic token modifier'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					patternErrorMessage: nls.localize('contributes.semanticTokenModifiers.id.format', 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*')
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					description: nls.localize('contributes.semanticTokenModifiers.description', 'The description of the semantic token modifier')
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:		description: nls.localize('contributes.semanticTokenScopes', 'Contributes semantic token scope maps.'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					description: nls.localize('contributes.semanticTokenScopes.languages', 'Lists the languge for which the defaults are.'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					description: nls.localize('contributes.semanticTokenScopes.scopes', 'Maps a semantic token (described by semantic token selector) to one or more textMate scopes used to represent that token.'),
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:				collector.error(nls.localize('invalid.id', "'configuration.{0}.id' must be defined and can not be empty", extensionPoint));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:				collector.error(nls.localize('invalid.id.format', "'configuration.{0}.id' must follow the pattern letterOrDigit[-_letterOrDigit]*", extensionPoint));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:				collector.error(nls.localize('invalid.superType.format', "'configuration.{0}.superType' must follow the pattern letterOrDigit[-_letterOrDigit]*", extensionPoint));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:				collector.error(nls.localize('invalid.description', "'configuration.{0}.description' must be defined and can not be empty", extensionPoint));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					collector.error(nls.localize('invalid.semanticTokenTypeConfiguration', "'configuration.semanticTokenType' must be an array"));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					collector.error(nls.localize('invalid.semanticTokenModifierConfiguration', "'configuration.semanticTokenModifier' must be an array"));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:					collector.error(nls.localize('invalid.semanticTokenScopes.configuration', "'configuration.semanticTokenScopes' must be an array"));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:						collector.error(nls.localize('invalid.semanticTokenScopes.language', "'configuration.semanticTokenScopes.language' must be a string"));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:						collector.error(nls.localize('invalid.semanticTokenScopes.scopes', "'configuration.semanticTokenScopes.scopes' must be defined as an object"));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:							collector.error(nls.localize('invalid.semanticTokenScopes.scopes.value', "'configuration.semanticTokenScopes.scopes' values must be an array of strings"));
src/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.ts:							collector.error(nls.localize('invalid.semanticTokenScopes.scopes.selector', "configuration.semanticTokenScopes.scopes': Problems parsing selector {0}.", selectorString));
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:						description: nls.localize('schema.id', 'The ID of the font.'),
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:						patternErrorMessage: nls.localize('schema.id.formatError', 'The ID must only contain letters, numbers, underscore and minus.')
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:						description: nls.localize('schema.src', 'The location of the font.'),
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:									description: nls.localize('schema.font-path', 'The font path, relative to the current product icon theme file.'),
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:									description: nls.localize('schema.font-format', 'The format of the font.'),
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:						description: nls.localize('schema.font-weight', 'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'),
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:						description: nls.localize('schema.font-style', 'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'),
src/vs/workbench/services/themes/common/productIconThemeSchema.ts:			description: nls.localize('schema.iconDefinitions', 'Association of icon name to a font character.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:		description: nls.localize('vscode.extension.contributes.grammars', 'Contributes textmate tokenizers.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.language', 'Language identifier for which this syntax is contributed to.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.scopeName', 'Textmate scope name used by the tmLanguage file.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.path', 'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \'./syntaxes/\'.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.embeddedLanguages', 'A map of scope name to language id if this grammar contains embedded languages.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.tokenTypes', 'A map of scope name to token types.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.injectTo', 'List of language scope names to which this grammar is injected to.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.balancedBracketScopes', 'Defines which scope names contain balanced brackets.'),
src/vs/workbench/services/textMate/common/TMGrammars.ts:					description: nls.localize('vscode.extension.contributes.grammars.unbalancedBracketScopes', 'Defines which scope names do not contain balanced brackets.'),
src/vs/workbench/services/userDataProfile/common/userDataProfileService.ts:const defaultUserDataProfileIcon = registerIcon('defaultProfile-icon', Codicon.settings, localize('defaultProfileIcon', 'Icon for Default Profile.'));
src/vs/workbench/services/userDataProfile/common/userDataProfileImportExportService.ts:			placeHolder: localize('name', "Profile name"),
src/vs/workbench/services/userDataProfile/common/userDataProfileImportExportService.ts:			title: localize('save profile as', "Create from Current Profile..."),
src/vs/workbench/services/userDataProfile/common/userDataProfileImportExportService.ts:			title: localize('profiles.importing', "{0}: Importing...", PROFILES_CATEGORY.value),
src/vs/workbench/services/userDataProfile/common/userDataProfileImportExportService.ts:		this.notificationService.info(localize('imported profile', "{0}: Imported successfully.", PROFILES_CATEGORY.value));
src/vs/workbench/services/userDataProfile/common/userDataProfileImportExportService.ts:			title: localize('profiles.applying', "{0}: Applying...", PROFILES_CATEGORY.value),
src/vs/workbench/services/userDataProfile/common/userDataProfileImportExportService.ts:		this.notificationService.info(localize('applied profile', "{0}: Applied successfully.", PROFILES_CATEGORY.value));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:		description: nls.localize('contributes.color', 'Contributes extension defined themable colors'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:					description: nls.localize('contributes.color.id', 'The identifier of the themable color'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:					patternErrorMessage: nls.localize('contributes.color.id.format', 'Identifiers must only contain letters, digits and dots and can not start with a dot'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:					description: nls.localize('contributes.color.description', 'The description of the themable color'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:							description: nls.localize('contributes.defaults.light', 'The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:							description: nls.localize('contributes.defaults.dark', 'The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:							description: nls.localize('contributes.defaults.highContrast', 'The default color for high contrast dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `dark` color is used as default for high contrast dark themes.'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:							description: nls.localize('contributes.defaults.highContrastLight', 'The default color for high contrast light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `light` color is used as default for high contrast light themes.'),
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:					collector.error(nls.localize('invalid.colorConfiguration', "'configuration.colors' must be a array"));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:					collector.error(nls.localize('invalid.default.colorType', "{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.", name));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:						collector.error(nls.localize('invalid.id', "'configuration.colors.id' must be defined and can not be empty"));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:						collector.error(nls.localize('invalid.id.format', "'configuration.colors.id' must only contain letters, digits and dots and can not start with a dot"));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:						collector.error(nls.localize('invalid.description', "'configuration.colors.description' must be defined and can not be empty"));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:						collector.error(nls.localize('invalid.defaults', "'configuration.colors.defaults' must be defined and must contain 'light' and 'dark'"));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:						collector.error(nls.localize('invalid.defaults.highContrast', "If defined, 'configuration.colors.defaults.highContrast' must be a string."));
src/vs/workbench/services/themes/common/colorExtensionPoint.ts:						collector.error(nls.localize('invalid.defaults.highContrastLight', "If defined, 'configuration.colors.defaults.highContrastLight' must be a string."));
src/vs/workbench/services/themes/common/themeConfiguration.ts:	description: nls.localize('colorTheme', "Specifies the color theme used in the workbench."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	errorMessage: nls.localize('colorThemeError', "Theme is unknown or not installed."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	markdownDescription: nls.localize({ key: 'preferredDarkColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme for dark OS appearance when `#{0}#` is enabled.', ThemeSettings.DETECT_COLOR_SCHEME),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	errorMessage: nls.localize('colorThemeError', "Theme is unknown or not installed."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	markdownDescription: nls.localize({ key: 'preferredLightColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme for light OS appearance when `#{0}#` is enabled.', ThemeSettings.DETECT_COLOR_SCHEME),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	errorMessage: nls.localize('colorThemeError', "Theme is unknown or not installed."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	markdownDescription: nls.localize({ key: 'preferredHCDarkColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme used in high contrast dark mode when `#{0}#` is enabled.', ThemeSettings.DETECT_HC),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	errorMessage: nls.localize('colorThemeError', "Theme is unknown or not installed."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	markdownDescription: nls.localize({ key: 'preferredHCLightColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme used in high contrast light mode when `#{0}#` is enabled.', ThemeSettings.DETECT_HC),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	errorMessage: nls.localize('colorThemeError', "Theme is unknown or not installed."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	markdownDescription: nls.localize('detectColorScheme', 'If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `#{0}#` is used, for light `#{1}#`.', ThemeSettings.PREFERRED_DARK_THEME, ThemeSettings.PREFERRED_LIGHT_THEME),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	description: nls.localize('workbenchColors', "Overrides colors from the currently selected color theme."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	description: nls.localize('iconTheme', "Specifies the file icon theme used in the workbench or 'null' to not show any file icons."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	enumItemLabels: [nls.localize('noIconThemeLabel', 'None')],
src/vs/workbench/services/themes/common/themeConfiguration.ts:	enumDescriptions: [nls.localize('noIconThemeDesc', 'No file icons')],
src/vs/workbench/services/themes/common/themeConfiguration.ts:	errorMessage: nls.localize('iconThemeError', "File icon theme is unknown or not installed.")
src/vs/workbench/services/themes/common/themeConfiguration.ts:	description: nls.localize('productIconTheme', "Specifies the product icon theme used."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	enumItemLabels: [nls.localize('defaultProductIconThemeLabel', 'Default')],
src/vs/workbench/services/themes/common/themeConfiguration.ts:	enumDescriptions: [nls.localize('defaultProductIconThemeDesc', 'Default')],
src/vs/workbench/services/themes/common/themeConfiguration.ts:	errorMessage: nls.localize('productIconThemeError', "Product icon theme is unknown or not installed.")
src/vs/workbench/services/themes/common/themeConfiguration.ts:	markdownDescription: nls.localize('autoDetectHighContrast', "If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `#{0}#` and `#{1}#`", ThemeSettings.PREFERRED_HC_DARK_THEME, ThemeSettings.PREFERRED_HC_LIGHT_THEME),
src/vs/workbench/services/themes/common/themeConfiguration.ts:		comments: tokenGroupSettings(nls.localize('editorColors.comments', "Sets the colors and styles for comments")),
src/vs/workbench/services/themes/common/themeConfiguration.ts:		strings: tokenGroupSettings(nls.localize('editorColors.strings', "Sets the colors and styles for strings literals.")),
src/vs/workbench/services/themes/common/themeConfiguration.ts:		keywords: tokenGroupSettings(nls.localize('editorColors.keywords', "Sets the colors and styles for keywords.")),
src/vs/workbench/services/themes/common/themeConfiguration.ts:		numbers: tokenGroupSettings(nls.localize('editorColors.numbers', "Sets the colors and styles for number literals.")),
src/vs/workbench/services/themes/common/themeConfiguration.ts:		types: tokenGroupSettings(nls.localize('editorColors.types', "Sets the colors and styles for type declarations and references.")),
src/vs/workbench/services/themes/common/themeConfiguration.ts:		functions: tokenGroupSettings(nls.localize('editorColors.functions', "Sets the colors and styles for functions declarations and references.")),
src/vs/workbench/services/themes/common/themeConfiguration.ts:		variables: tokenGroupSettings(nls.localize('editorColors.variables', "Sets the colors and styles for variables declarations and references.")),
src/vs/workbench/services/themes/common/themeConfiguration.ts:			description: nls.localize('editorColors.textMateRules', 'Sets colors and styles using textmate theming rules (advanced).'),
src/vs/workbench/services/themes/common/themeConfiguration.ts:			description: nls.localize('editorColors.semanticHighlighting', 'Whether semantic highlighting should be enabled for this theme.'),
src/vs/workbench/services/themes/common/themeConfiguration.ts:			deprecationMessage: nls.localize('editorColors.semanticHighlighting.deprecationMessage', 'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'),
src/vs/workbench/services/themes/common/themeConfiguration.ts:			markdownDeprecationMessage: nls.localize('editorColors.semanticHighlighting.deprecationMessageMarkdown', 'Use `enabled` in `#editor.semanticTokenColorCustomizations#` setting instead.'),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	description: nls.localize('editorColors', "Overrides editor syntax colors and font style from the currently selected color theme."),
src/vs/workbench/services/themes/common/themeConfiguration.ts:			description: nls.localize('editorColors.semanticHighlighting.enabled', 'Whether semantic highlighting is enabled or disabled for this theme'),
src/vs/workbench/services/themes/common/themeConfiguration.ts:			description: nls.localize('editorColors.semanticHighlighting.rules', 'Semantic token styling rules for this theme.'),
src/vs/workbench/services/themes/common/themeConfiguration.ts:	description: nls.localize('semanticTokenColors', "Overrides editor semantic token color and styles from the currently selected color theme."),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:			description: nls.localize('schema.token.settings', 'Colors and styles for the token.'),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:					description: nls.localize('schema.token.foreground', 'Foreground color for the token.'),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:					deprecationMessage: nls.localize('schema.token.background.warning', 'Token background colors are currently not supported.')
src/vs/workbench/services/themes/common/colorThemeSchema.ts:					description: nls.localize('schema.token.fontStyle', 'Font style of the rule: \'italic\', \'bold\', \'underline\', \'strikethrough\' or a combination. The empty string unsets inherited settings.'),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:					patternErrorMessage: nls.localize('schema.fontStyle.error', 'Font style must be \'italic\', \'bold\', \'underline\', \'strikethrough\' or a combination or the empty string.'),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:						{ label: nls.localize('schema.token.fontStyle.none', 'None (clear inherited style)'), bodyText: '""' },
src/vs/workbench/services/themes/common/colorThemeSchema.ts:				description: nls.localize('schema.properties.name', 'Description of the rule.')
src/vs/workbench/services/themes/common/colorThemeSchema.ts:				description: nls.localize('schema.properties.scope', 'Scope selector against which this rule matches.'),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:			description: nls.localize('schema.workbenchColors', 'Colors in the workbench'),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:				description: nls.localize('schema.tokenColors.path', 'Path to a tmTheme file (relative to the current file).')
src/vs/workbench/services/themes/common/colorThemeSchema.ts:				description: nls.localize('schema.colors', 'Colors for syntax highlighting'),
src/vs/workbench/services/themes/common/colorThemeSchema.ts:			description: nls.localize('schema.supportsSemanticHighlighting', 'Whether semantic highlighting should be enabled for this theme.')
src/vs/workbench/services/themes/common/colorThemeSchema.ts:			description: nls.localize('schema.semanticTokenColors', 'Colors for semantic tokens'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:		description: nls.localize('contributes.icons', 'Contributes extension defined themable icons'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:			description: nls.localize('contributes.icon.id', 'The identifier of the themable icon'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:			patternErrorMessage: nls.localize('contributes.icon.id.format', 'Identifiers can only contain letters, digits and minuses and need to consist of at least two segments in the form `component-iconname`.'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:					description: nls.localize('contributes.icon.description', 'The description of the themable icon'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:									description: nls.localize('contributes.icon.default.fontPath', 'The path of the icon font that defines the icon.'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:									description: nls.localize('contributes.icon.default.fontCharacter', 'The character for the icon in the icon font.'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:					description: nls.localize('contributes.icon.default', 'The default of the icon. Either a reference to an extisting ThemeIcon or an icon in an icon font.'),
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:					collector.error(nls.localize('invalid.icons.configuration', "'configuration.icons' must be an object with the icon names as properties."));
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:						collector.error(nls.localize('invalid.icons.id.format', "'configuration.icons' keys represent the icon id and can only contain letter, digits and minuses. They need to consist of at least two segments in the form `component-iconname`."));
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:						collector.error(nls.localize('invalid.icons.description', "'configuration.icons.description' must be defined and can not be empty"));
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:							collector.warn(nls.localize('invalid.icons.default.fontPath.extension', "Expected `contributes.icons.default.fontPath` to have file extension 'woff', woff2' or 'ttf', is '{0}'.", format));
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:							collector.warn(nls.localize('invalid.icons.default.fontPath.path', "Expected `contributes.icons.default.fontPath` ({0}) to be included inside extension's folder ({0}).", iconFontLocation.path, extensionLocation.path));
src/vs/workbench/services/themes/common/iconExtensionPoint.ts:						collector.error(nls.localize('invalid.icons.default', "'configuration.icons.default' must be either a reference to the id of an other theme icon (string) or a icon definition (object) with properties `fontPath` and `fontCharacter`."));
src/vs/workbench/services/themes/browser/fileIconThemeData.ts:				return Promise.reject(new Error(nls.localize('error.cannotparseicontheme', "Problems parsing file icons file: {0}", errors.map(e => getParseErrorMessage(e.error)).join(', '))));
src/vs/workbench/services/themes/browser/fileIconThemeData.ts:				return Promise.reject(new Error(nls.localize('error.invalidformat', "Invalid format for file icons theme file: Object expected.")));
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:			description: nls.localize('vscode.extension.contributes.themes', 'Contributes textmate color themes.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.themes.id', 'Id of the color theme as used in the user settings.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.themes.label', 'Label of the color theme as shown in the UI.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.themes.uiTheme', 'Base theme defining the colors around the editor: \'vs\' is the light color theme, \'vs-dark\' is the dark color theme. \'hc-black\' is the dark high contrast theme, \'hc-light\' is the light high contrast theme.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.themes.path', 'Path of the tmTheme file. The path is relative to the extension folder and is typically \'./colorthemes/awesome-color-theme.json\'.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:			description: nls.localize('vscode.extension.contributes.iconThemes', 'Contributes file icon themes.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.iconThemes.id', 'Id of the file icon theme as used in the user settings.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.iconThemes.label', 'Label of the file icon theme as shown in the UI.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.iconThemes.path', 'Path of the file icon theme definition file. The path is relative to the extension folder and is typically \'./fileicons/awesome-icon-theme.json\'.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:			description: nls.localize('vscode.extension.contributes.productIconThemes', 'Contributes product icon themes.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.productIconThemes.id', 'Id of the product icon theme as used in the user settings.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.productIconThemes.label', 'Label of the product icon theme as shown in the UI.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:						description: nls.localize('vscode.extension.contributes.productIconThemes.path', 'Path of the product icon theme definition file. The path is relative to the extension folder and is typically \'./producticons/awesome-product-icon-theme.json\'.'),
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:			log?.error(nls.localize(
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:				log?.error(nls.localize(
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:				log?.error(nls.localize(
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:				log?.warn(nls.localize('invalid.path.1', "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.", this.themesExtPoint.name, themeLocation.path, extensionLocation.path));
src/vs/workbench/services/userDataProfile/common/userDataProfile.ts:export const PROFILES_TTILE = { value: localize('profiles', "Profiles"), original: 'Profiles' };
src/vs/workbench/services/userDataProfile/common/userDataProfile.ts:export const PROFILE_FILTER = [{ name: localize('profile', "Profile"), extensions: [PROFILE_EXTENSION] }];
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			this._notificationService.error(nls.localize('alreadyDebugging', "Already Logging."));
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:					buttons: [nls.localize('stop', "Stop")]
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:						message: nls.localize('progress1', "Preparing to log TM Grammar parsing. Press Stop when finished.")
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:							message: nls.localize('progress2', "Now logging TM Grammar parsing. Press Stop when finished.")
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			collector.error(nls.localize('invalid.language', "Unknown language in `contributes.{0}.language`. Provided value: {1}", grammarsExtPoint.name, String(syntax.language)));
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			collector.error(nls.localize('invalid.scopeName', "Expected string in `contributes.{0}.scopeName`. Provided value: {1}", grammarsExtPoint.name, String(syntax.scopeName)));
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			collector.error(nls.localize('invalid.path.0', "Expected string in `contributes.{0}.path`. Provided value: {1}", grammarsExtPoint.name, String(syntax.path)));
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			collector.error(nls.localize('invalid.injectTo', "Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}", grammarsExtPoint.name, JSON.stringify(syntax.injectTo)));
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			collector.error(nls.localize('invalid.embeddedLanguages', "Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}", grammarsExtPoint.name, JSON.stringify(syntax.embeddedLanguages)));
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			collector.error(nls.localize('invalid.tokenTypes', "Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}", grammarsExtPoint.name, JSON.stringify(syntax.tokenTypes)));
src/vs/workbench/services/textMate/browser/abstractTextMateService.ts:			collector.warn(nls.localize('invalid.path.1', "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.", grammarsExtPoint.name, grammarLocation.path, extensionLocation.path));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:			logService.error(nls.localize('error.parseicondefs', "Problems processing product icons definitions in {0}:\n{1}", location.toString(), warnings.join('\n')));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:			themeData = ProductIconThemeData._defaultProductIconTheme = new ProductIconThemeData(DEFAULT_PRODUCT_ICON_THEME_ID, nls.localize('defaultTheme', 'Default'), DEFAULT_PRODUCT_ICON_THEME_SETTING_VALUE);
src/vs/workbench/services/themes/browser/productIconThemeData.ts:			return Promise.reject(new Error(nls.localize('error.cannotparseicontheme', "Problems parsing product icons file: {0}", parseErrors.map(e => getParseErrorMessage(e.error)).join(', '))));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:			return Promise.reject(new Error(nls.localize('error.invalidformat', "Invalid format for product icons theme file: Object expected.")));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:			return Promise.reject(new Error(nls.localize('error.missingProperties', "Invalid format for product icons theme file: Must contain iconDefinitions and fonts.")));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:					warnings.push(nls.localize('error.fontWeight', 'Invalid font weight in font \'{0}\'. Ignoring setting.', font.id));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:					warnings.push(nls.localize('error.fontStyle', 'Invalid font style in font \'{0}\'. Ignoring setting.', font.id));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:							warnings.push(nls.localize('error.fontSrc', 'Invalid font source in font \'{0}\'. Ignoring source.', font.id));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:					warnings.push(nls.localize('error.noFontSrc', 'No valid font source in font \'{0}\'. Ignoring font definition.', font.id));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:				warnings.push(nls.localize('error.fontId', 'Missing or invalid font id \'{0}\'. Skipping font definition.', font.id));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:					warnings.push(nls.localize('error.icon.font', 'Skipping icon definition \'{0}\'. Unknown font.', iconId));
src/vs/workbench/services/themes/browser/productIconThemeData.ts:				warnings.push(nls.localize('error.icon.fontCharacter', 'Skipping icon definition \'{0}\'. Unknown fontCharacter.', iconId));
src/vs/workbench/services/themes/browser/workbenchThemeService.ts:			throw new Error(nls.localize('error.cannotloadtheme', "Unable to load {0}: {1}", themeData.location?.toString(), error.message));
src/vs/workbench/services/label/common/labelService.ts:		description: localize('vscode.extension.contributes.resourceLabelFormatters', 'Contributes resource label formatting rules.'),
src/vs/workbench/services/label/common/labelService.ts:					description: localize('vscode.extension.contributes.resourceLabelFormatters.scheme', 'URI scheme on which to match the formatter on. For example "file". Simple glob patterns are supported.'),
src/vs/workbench/services/label/common/labelService.ts:					description: localize('vscode.extension.contributes.resourceLabelFormatters.authority', 'URI authority on which to match the formatter on. Simple glob patterns are supported.'),
src/vs/workbench/services/label/common/labelService.ts:					description: localize('vscode.extension.contributes.resourceLabelFormatters.formatting', "Rules for formatting uri resource labels."),
src/vs/workbench/services/label/common/labelService.ts:							description: localize('vscode.extension.contributes.resourceLabelFormatters.label', "Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme}, ${authority} and ${authoritySuffix} are supported as variables.")
src/vs/workbench/services/label/common/labelService.ts:							description: localize('vscode.extension.contributes.resourceLabelFormatters.separator', "Separator to be used in the uri label display. '/' or '\' as an example.")
src/vs/workbench/services/label/common/labelService.ts:							description: localize('vscode.extension.contributes.resourceLabelFormatters.stripPathStartingSeparator', "Controls whether `${path}` substitutions should have starting separator characters stripped.")
src/vs/workbench/services/label/common/labelService.ts:							description: localize('vscode.extension.contributes.resourceLabelFormatters.tildify', "Controls if the start of the uri label should be tildified when possible.")
src/vs/workbench/services/label/common/labelService.ts:							description: localize('vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix', "Suffix appended to the workspace label.")
src/vs/workbench/services/label/common/labelService.ts:			return localize('untitledWorkspace', "Untitled (Workspace)");
src/vs/workbench/services/label/common/labelService.ts:			return localize('temporaryWorkspace', "Workspace");
src/vs/workbench/services/label/common/labelService.ts:			label = localize('workspaceNameVerbose', "{0} (Workspace)", this.getUriLabel(joinPath(dirname(workspaceUri), filename)));
src/vs/workbench/services/label/common/labelService.ts:			label = localize('workspaceName', "{0} (Workspace)", filename);
src/vs/workbench/services/search/browser/searchService.ts:					text: localize('errorSearchText', "Unable to search with Web Worker text searcher"), type: TextSearchCompleteMessageType.Warning
src/vs/workbench/services/search/browser/searchService.ts:					text: localize('errorSearchFile', "Unable to search with Web Worker file searcher"), type: TextSearchCompleteMessageType.Warning
src/vs/workbench/services/themes/common/colorThemeData.ts:			return Promise.reject(new Error(nls.localize('error.cannotparsejson', "Problems parsing JSON theme file: {0}", errors.map(e => getParseErrorMessage(e.error)).join(', '))));
src/vs/workbench/services/themes/common/colorThemeData.ts:			return Promise.reject(new Error(nls.localize('error.invalidformat', "Invalid format for JSON theme file: Object expected.")));
src/vs/workbench/services/themes/common/colorThemeData.ts:				return Promise.reject(new Error(nls.localize({ key: 'error.invalidformat.colors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, "Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.", themeLocation.toString())));
src/vs/workbench/services/themes/common/colorThemeData.ts:				return Promise.reject(new Error(nls.localize({ key: 'error.invalidformat.tokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, "Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file", themeLocation.toString())));
src/vs/workbench/services/themes/common/colorThemeData.ts:					return Promise.reject(new Error(nls.localize({ key: 'error.invalidformat.semanticTokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, "Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector", themeLocation.toString())));
src/vs/workbench/services/themes/common/colorThemeData.ts:				return Promise.reject(new Error(nls.localize('error.plist.invalidformat', "Problem parsing tmTheme file: {0}. 'settings' is not array.")));
src/vs/workbench/services/themes/common/colorThemeData.ts:			return Promise.reject(new Error(nls.localize('error.cannotparse', "Problems parsing tmTheme file: {0}", e.message)));
src/vs/workbench/services/themes/common/colorThemeData.ts:		return Promise.reject(new Error(nls.localize('error.cannotload', "Problems loading tmTheme file {0}: {1}", themeLocation.toString(), error.message)));
src/vs/workbench/services/remote/common/remoteExplorerService.ts:	description: nls.localize('tunnel.source.user', "User Forwarded")
src/vs/workbench/services/remote/common/remoteExplorerService.ts:	description: nls.localize('tunnel.source.auto', "Auto Forwarded")
src/vs/workbench/services/remote/common/remoteExplorerService.ts:		const mismatchString = nls.localize('remote.localPortMismatch.single', "Local port {0} could not be used for forwarding to remote port {1}.\n\nThis usually happens when there is already another process using local port {0}.\n\nPort number {2} has been used instead.",
src/vs/workbench/services/remote/common/remoteExplorerService.ts:						description: nls.localize('tunnel.staticallyForwarded', "Statically Forwarded")
src/vs/workbench/services/search/common/queryBuilder.ts:				const searchPathNotFoundError = nls.localize('search.noWorkspaceWithName', "Workspace folder does not exist: {0}", probableWorkspaceFolderName);
src/vs/workbench/services/progress/browser/progressService.ts:				text = localize('progress.text2', "{0}: {1}", progressTitle, progressMessage);
src/vs/workbench/services/progress/browser/progressService.ts:				title = source ? localize('progress.title3', "[{0}] {1}: {2}", source, progressTitle, progressMessage) : text;
src/vs/workbench/services/progress/browser/progressService.ts:				title = source ? localize('progress.title2', "[{0}]: {1}", source, progressTitle) : text;
src/vs/workbench/services/progress/browser/progressService.ts:				title = source ? localize('progress.title2', "[{0}]: {1}", source, progressMessage) : text;
src/vs/workbench/services/progress/browser/progressService.ts:				name: localize('status.progress', "Progress Message"),
src/vs/workbench/services/progress/browser/progressService.ts:						super('progress.cancel', localize('cancel', "Cancel"), undefined, true);
src/vs/workbench/services/progress/browser/progressService.ts:				buttons.push(options.cancellable ? localize('cancel', "Cancel") : localize('dismiss', "Dismiss"));
src/vs/workbench/services/remote/electron-sandbox/remoteAgentService.ts:							label: nls.localize('devTools', "Open Developer Tools"),
src/vs/workbench/services/remote/electron-sandbox/remoteAgentService.ts:							label: nls.localize('directUrl', "Open in browser"),
src/vs/workbench/services/remote/electron-sandbox/remoteAgentService.ts:						nls.localize('connectionError', "Failed to connect to the remote extension host server (Error: {0})", err ? err.message : ''),
src/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts:const SOURCE_DEFAULT = localize('default', "Default");
src/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts:const SOURCE_EXTENSION = localize('extension', "Extension");
src/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts:const SOURCE_USER = localize('user', "User");
src/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts:				return category ? localize('cat.title', "{0}: {1}", category, title) : title;
src/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts:			return category ? localize('cat.title', "{0}: {1}", category, title) : title;
src/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts:		if (strings.equalsIgnoreCase(localize('option', "option"), word)) {
src/vs/workbench/services/preferences/browser/keybindingsEditorModel.ts:		if (strings.equalsIgnoreCase(localize('meta', "meta"), word)) {
src/vs/workbench/services/preferences/common/preferencesModels.ts:			title: nls.localize('commonlyUsed', "Commonly Used"),
src/vs/workbench/services/preferences/common/preferencesModels.ts:	const defaultsHeader = '// ' + nls.localize('defaultKeybindingsHeader', "Override key bindings by placing them into your key bindings file.");
src/vs/workbench/services/preferences/browser/preferencesService.ts:			this.notificationService.info(nls.localize('openFolderFirst', "Open a folder or workspace first to create workspace or folder settings."));
src/vs/workbench/services/preferences/browser/preferencesService.ts:			const emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', "Place your key bindings in this file to override the defaults") + '\n[\n]';
src/vs/workbench/services/preferences/browser/preferencesService.ts:					this.editorService.openEditor({ resource: this.defaultKeybindingsResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true, override: DEFAULT_EDITOR_ASSOCIATION.id }, label: nls.localize('defaultKeybindings', "Default Keybindings"), description: '' }),
src/vs/workbench/services/preferences/browser/preferencesService.ts:		return this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: nls.localize('defaultKeybindings', "Default Keybindings") });
src/vs/workbench/services/preferences/browser/preferencesService.ts:					throw new Error(nls.localize('fail.createSettings', "Unable to create '{0}' ({1}).", this.labelService.getUriLabel(resource, { relative: true }), getErrorMessage(error2)));
src/vs/workbench/services/remote/browser/remoteAgentService.ts:			nls.localize('connectionError', "An unexpected error occurred that requires a reload of this page."),
src/vs/workbench/services/remote/browser/remoteAgentService.ts:				nls.localize('reload', "Reload")
src/vs/workbench/services/remote/browser/remoteAgentService.ts:				detail: nls.localize('connectionErrorDetail', "The workbench failed to connect to the server (Error: {0})", err ? err.message : '')
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			errors.push(nls.localize('validations.booleanIncorrectType', 'Incorrect type. Expected "boolean".'));
src/vs/workbench/services/preferences/common/preferencesValidation.ts:				errors.push(nls.localize('validations.expectedNumeric', "Value must be a number."));
src/vs/workbench/services/preferences/common/preferencesValidation.ts:				errors.push(nls.localize('validations.stringIncorrectEnumOptions', 'The enum options should be strings, but there is a non-string option. Please file an issue with the extension author.'));
src/vs/workbench/services/preferences/common/preferencesValidation.ts:				errors.push(nls.localize('validations.stringIncorrectType', 'Incorrect type. Expected "string".'));
src/vs/workbench/services/preferences/common/preferencesValidation.ts:		return nls.localize('invalidTypeError', "Setting has an invalid type, expected {0}. Fix in JSON.", JSON.stringify(type));
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.maxLength', "Value must be {0} or fewer characters long.", prop.maxLength)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.minLength', "Value must be {0} or more characters long.", prop.minLength)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: prop.patternErrorMessage || nls.localize('validations.regex', "Value must match regex `{0}`.", prop.pattern)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.colorFormat', "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA.")
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.uriEmpty', "URI expected.")
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.uriMissing', "URI is expected.")
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.uriSchemeMissing', "URI with a scheme is expected.")
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.invalidStringEnumValue', "Value is not accepted. Valid values: {0}.",
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.exclusiveMax', "Value must be strictly less than {0}.", exclusiveMax)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.exclusiveMin', "Value must be strictly greater than {0}.", exclusiveMin)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.max', "Value must be less than or equal to {0}.", prop.maximum)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.min', "Value must be greater than or equal to {0}.", prop.minimum)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.multipleOf', "Value must be a multiple of {0}.", prop.multipleOf)
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.expectedInteger', "Value must be an integer.")
src/vs/workbench/services/preferences/common/preferencesValidation.ts:					message += nls.localize('validations.arrayIncorrectType', 'Incorrect type. Expected an array.');
src/vs/workbench/services/preferences/common/preferencesValidation.ts:						message += nls.localize('validations.stringArrayUniqueItems', 'Array has duplicate items');
src/vs/workbench/services/preferences/common/preferencesValidation.ts:					message += nls.localize('validations.stringArrayMinItem', 'Array must have at least {0} items', prop.minItems);
src/vs/workbench/services/preferences/common/preferencesValidation.ts:					message += nls.localize('validations.stringArrayMaxItem', 'Array must have at most {0} items', prop.maxItems);
src/vs/workbench/services/preferences/common/preferencesValidation.ts:						message += nls.localize('validations.stringArrayIncorrectType', 'Incorrect type. Expected a string array.');
src/vs/workbench/services/preferences/common/preferencesValidation.ts:									nls.localize(
src/vs/workbench/services/preferences/common/preferencesValidation.ts:								message += nls.localize(
src/vs/workbench/services/preferences/common/preferencesValidation.ts:				errors.push(nls.localize('validations.objectIncorrectType', 'Incorrect type. Expected an object.'));
src/vs/workbench/services/preferences/common/preferencesValidation.ts:						errors.push(nls.localize('validations.objectPattern', 'Property {0} is not allowed.\n', key));
src/vs/workbench/services/preferences/browser/keybindingsEditorInput.ts:		return nls.localize('keybindingsInputName', "Keyboard Shortcuts");
src/vs/workbench/services/preferences/common/preferencesEditorInput.ts:		return nls.localize('settingsEditor2InputName', "Settings");
src/vs/workbench/services/notification/common/notificationService.ts:				localize('neverShowAgain', "Don't Show Again"),
src/vs/workbench/services/notification/common/notificationService.ts:				label: localize('neverShowAgain', "Don't Show Again"),
src/vs/workbench/services/lifecycle/browser/lifecycleService.ts:		event.returnValue = localize('lifecycleVeto', "Changes that you made may not be saved. Please check press 'Cancel' and try again.");
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateBackContextKey = (new RawContextKey<boolean>('canNavigateBack', false, localize('canNavigateBack', "Whether it is possible to navigate back in editor history"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateForwardContextKey = (new RawContextKey<boolean>('canNavigateForward', false, localize('canNavigateForward', "Whether it is possible to navigate forward in editor history"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateBackInNavigationsContextKey = (new RawContextKey<boolean>('canNavigateBackInNavigationLocations', false, localize('canNavigateBackInNavigationLocations', "Whether it is possible to navigate back in editor navigation locations history"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateForwardInNavigationsContextKey = (new RawContextKey<boolean>('canNavigateForwardInNavigationLocations', false, localize('canNavigateForwardInNavigationLocations', "Whether it is possible to navigate forward in editor navigation locations history"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateToLastNavigationLocationContextKey = (new RawContextKey<boolean>('canNavigateToLastNavigationLocation', false, localize('canNavigateToLastNavigationLocation', "Whether it is possible to navigate to the last editor navigation location"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateBackInEditsContextKey = (new RawContextKey<boolean>('canNavigateBackInEditLocations', false, localize('canNavigateBackInEditLocations', "Whether it is possible to navigate back in editor edit locations history"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateForwardInEditsContextKey = (new RawContextKey<boolean>('canNavigateForwardInEditLocations', false, localize('canNavigateForwardInEditLocations', "Whether it is possible to navigate forward in editor edit locations history"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canNavigateToLastEditLocationContextKey = (new RawContextKey<boolean>('canNavigateToLastEditLocation', false, localize('canNavigateToLastEditLocation', "Whether it is possible to navigate to the last editor edit location"))).bindTo(this.contextKeyService);
src/vs/workbench/services/history/browser/historyService.ts:	private readonly canReopenClosedEditorContextKey = (new RawContextKey<boolean>('canReopenClosedEditor', false, localize('canReopenClosedEditor', "Whether it is possible to reopen the last closed editor"))).bindTo(this.contextKeyService);
src/vs/workbench/services/language/common/languageService.ts:		description: localize('vscode.extension.contributes.languages', 'Contributes language declarations.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.id', 'ID of the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.filenames', 'File names associated to the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'),
src/vs/workbench/services/language/common/languageService.ts:					description: localize('vscode.extension.contributes.languages.icon', 'A icon to use as file icon, if no icon theme provides one for the language.'),
src/vs/workbench/services/language/common/languageService.ts:							description: localize('vscode.extension.contributes.languages.icon.light', 'Icon path when a light theme is used'),
src/vs/workbench/services/language/common/languageService.ts:							description: localize('vscode.extension.contributes.languages.icon.dark', 'Icon path when a dark theme is used'),
src/vs/workbench/services/language/common/languageService.ts:					extension.collector.error(localize('invalid', "Invalid `contributes.{0}`. Expected an array.", languagesExtPoint.name));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('invalid.empty', "Empty value for `contributes.{0}`", languagesExtPoint.name));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('require.id', "property `{0}` is mandatory and must be of type `string`", 'id'));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('opt.extensions', "property `{0}` can be omitted and must be of type `string[]`", 'extensions'));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('opt.filenames', "property `{0}` can be omitted and must be of type `string[]`", 'filenames'));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('opt.firstLine', "property `{0}` can be omitted and must be of type `string`", 'firstLine'));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('opt.configuration', "property `{0}` can be omitted and must be of type `string`", 'configuration'));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('opt.aliases', "property `{0}` can be omitted and must be of type `string[]`", 'aliases'));
src/vs/workbench/services/language/common/languageService.ts:		collector.error(localize('opt.mimetypes', "property `{0}` can be omitted and must be of type `string[]`", 'mimetypes'));
src/vs/workbench/services/language/common/languageService.ts:			collector.error(localize('opt.icon', "property `{0}` can be omitted and must be of type `object` with properties `{1}` and `{2}` of type `string`", 'icon', 'light', 'dark'));
src/vs/workbench/services/keybinding/browser/keyboardLayoutService.ts:			// 	nls.localize('missing.keyboardlayout', 'Fail to find matching keyboard layout'),
src/vs/workbench/services/keybinding/browser/keyboardLayoutService.ts:			// 		label: nls.localize('keyboardLayoutMissing.configure', "Configure"),
src/vs/workbench/services/keybinding/browser/keyboardLayoutService.ts:			// 		label: nls.localize('neverAgain', "Don't Show Again"),
src/vs/workbench/services/keybinding/browser/keyboardLayoutService.ts:	'title': nls.localize('keyboardConfigurationTitle', "Keyboard"),
src/vs/workbench/services/keybinding/browser/keyboardLayoutService.ts:			'description': nls.localize('keyboard.layout.config', "Control the keyboard layout used in web.")
src/vs/workbench/services/keybinding/common/keybindingEditing.ts:			return Promise.reject(new Error(localize('errorKeybindingsFileDirty', "Unable to write because the keybindings configuration file has unsaved changes. Please save it first and then try again.")));
src/vs/workbench/services/keybinding/common/keybindingEditing.ts:						return Promise.reject<any>(new Error(localize('parseErrors', "Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.")));
src/vs/workbench/services/keybinding/common/keybindingEditing.ts:							return Promise.reject<any>(new Error(localize('errorInvalidConfiguration', "Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.")));
src/vs/workbench/services/keybinding/common/keybindingEditing.ts:		return '// ' + localize('emptyKeybindingsHeader', "Place your key bindings in this file to override the defaults") + EOL + '[]';
src/vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService.ts:				throw new ExtensionManagementError(localize('notFoundCompatiblePrereleaseDependency', "Can't install pre-release version of '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.IncompatiblePreRelease);
src/vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService.ts:				throw new ExtensionManagementError(localize('notFoundReleaseExtension', "Can't install release version of '{0}' extension because it has no release version.", extension.identifier.id), ExtensionManagementErrorCode.ReleaseVersionNotFound);
src/vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService.ts:			throw new ExtensionManagementError(localize('notFoundCompatibleDependency', "Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.Incompatible);
src/vs/workbench/services/extensionManagement/electron-sandbox/extensionManagementServerService.ts:		this.localExtensionManagementServer = { extensionManagementService: localExtensionManagementService, id: 'local', label: localize('local', "Local") };
src/vs/workbench/services/extensionManagement/electron-sandbox/extensionManagementServerService.ts:				get label() { return labelService.getHostLabel(Schemas.vscodeRemote, remoteAgentConnection!.remoteAuthority) || localize('remote', "Remote"); },
src/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.ts:			? await this.pickWorkspaceOrFolders(recommendedWorksapceFolders, isWorkspaceRecommended ? workspace : undefined, localize('select for remove', "Remove extension recommendation from"))
src/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.ts:			: await this.pickWorkspaceOrFolders(workspace.folders, workspace.configuration ? workspace : undefined, localize('select for add', "Add extension recommendation to"));
src/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.ts:			? await this.pickWorkspaceOrFolders(unWantedWorksapceFolders, isWorkspaceUnwanted ? workspace : undefined, localize('select for remove', "Remove extension recommendation from"))
src/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.ts:			: await this.pickWorkspaceOrFolders(workspace.folders, workspace.configuration ? workspace : undefined, localize('select for add', "Add extension recommendation to"));
src/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.ts:				description: localize('workspace folder', "Workspace Folder"),
src/vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig.ts:				label: localize('workspace', "Workspace"),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		rejects.push(nls.localize('nonempty', "expected non-empty value."));
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		rejects.push(nls.localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'command'));
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'key'));
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'when'));
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'mac'));
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'linux'));
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		rejects.push(nls.localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'win'));
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			description: nls.localize('vscode.extension.contributes.keybindings.command', 'Identifier of the command to run when keybinding is triggered.'),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			description: nls.localize('vscode.extension.contributes.keybindings.args', "Arguments to pass to the command to execute.")
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			description: nls.localize('vscode.extension.contributes.keybindings.key', 'Key or key sequence (separate keys with plus-sign and sequences with space, e.g. Ctrl+O and Ctrl+L L for a chord).'),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			description: nls.localize('vscode.extension.contributes.keybindings.mac', 'Mac specific key or key sequence.'),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			description: nls.localize('vscode.extension.contributes.keybindings.linux', 'Linux specific key or key sequence.'),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			description: nls.localize('vscode.extension.contributes.keybindings.win', 'Windows specific key or key sequence.'),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			description: nls.localize('vscode.extension.contributes.keybindings.when', 'Condition when the key is active.'),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		description: nls.localize('vscode.extension.contributes.keybindings', "Contributes keybindings."),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			collector.error(nls.localize(
src/vs/workbench/services/keybinding/browser/keybindingService.ts:		return '// ' + nls.localize('unboundCommands', "Here are other available commands: ") + '\n// - ' + pretty;
src/vs/workbench/services/keybinding/browser/keybindingService.ts:	title: nls.localize('keybindings.json.title', "Keybindings configuration"),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:				'description': nls.localize('keybindings.json.key', "Key or key sequence (separated by space)"),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:						'description': nls.localize('keybindings.json.command', "Name of the command to execute"),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:				'description': nls.localize('keybindings.json.when', "Condition when the key is active.")
src/vs/workbench/services/keybinding/browser/keybindingService.ts:				'description': nls.localize('keybindings.json.args', "Arguments to pass to the command to execute.")
src/vs/workbench/services/keybinding/browser/keybindingService.ts:	'title': nls.localize('keyboardConfigurationTitle', "Keyboard"),
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			markdownDescription: nls.localize('dispatch', "Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`."),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.commandPalette', "The Command Palette"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.touchBar', "The touch bar (macOS only)"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.editorTitle', "The editor title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.editorTitleRun', "Run submenu inside the editor title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.editorContext', "The editor context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.editorContextCopyAs', "'Copy as' submenu in the editor context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.editorContextShare', "'Share' submenu in the editor context menu"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.explorerContext', "The file explorer context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.editorTabContext', "The editor tabs context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.debugCallstackContext', "The debug callstack view context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.debugVariablesContext', "The debug variables view context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.debugToolBar', "The debug toolbar menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.home', "The home indicator context menu (web only)"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.opy', "'Copy as' submenu in the top level Edit menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.scmTitle', "The Source Control title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.scmSourceControl', "The Source Control menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.resourceStateContext', "The Source Control resource state context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.resourceFolderContext', "The Source Control resource folder context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.resourceGroupContext', "The Source Control resource group context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.changeTitle', "The Source Control inline change menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.statusBarRemoteIndicator', "The remote indicator menu in the status bar"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('view.viewTitle', "The contributed view title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('view.itemContext', "The contributed view item context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('commentThread.title', "The contributed comment thread title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('commentThread.actions', "The contributed comment thread context menu, rendered as buttons below the comment editor"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('commentThread.titleContext', "The contributed comment thread title's peek context menu, rendered as a right click menu on the comment thread's peek title."),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('comment.title', "The contributed comment title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('comment.actions', "The contributed comment context menu, rendered as buttons below the comment editor"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('comment.commentContext', "The contributed comment context menu, rendered as a right click menu on the an individual comment in the comment thread's peek view."),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('notebook.toolbar', "The contributed notebook toolbar menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('notebook.kernelSource', "The contributed notebook kernel sources menu"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('notebook.cell.title', "The contributed notebook cell title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('notebook.cell.execute', "The contributed notebook cell execution menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('interactive.toolbar', "The contributed interactive toolbar menu"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('interactive.cell.title', "The contributed interactive cell title menu"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('testing.item.context', "The contributed test item menu"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('testing.item.gutter.title', "The menu for a gutter decoration for a test item"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.extensionContext', "The extension context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('view.timelineTitle', "The Timeline view title menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('view.timelineContext', "The Timeline view item context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('view.tunnelContext', "The Ports view item context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('view.tunnelOriginInline', "The Ports view item origin inline menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('view.tunnelPortInline', "The Ports view item port inline menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('file.newFile', "The 'New File...' quick pick, shown on welcome page and File menu."),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('webview.context', "The webview context menu")
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.share', "Share submenu shown in the top level File menu."),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('inlineCompletions.actions', "The actions shown when hovering on an inline completion"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('merge.toolbar', "The prominent button in an editor, overlays its content"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('menus.mergeEditorResult', "The result toolbar of the merge editor"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'command'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'alt'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'when'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'group'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'submenu'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'when'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'group'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirearray', "submenu items must be an array"));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('require', "submenu items must be an object"));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'id'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'label'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.menuItem.command', 'Identifier of the command to execute. The command must be declared in the \'commands\'-section'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.menuItem.alt', 'Identifier of an alternative command to execute. The command must be declared in the \'commands\'-section'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.menuItem.when', 'Condition which must be true to show this item'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.menuItem.group', 'Group into which this item belongs'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.menuItem.submenu', 'Identifier of the submenu to display in this item.'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.menuItem.when', 'Condition which must be true to show this item'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.menuItem.group', 'Group into which this item belongs'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.submenu.id', 'Identifier of the menu to display as a submenu.'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.submenu.label', 'The label of the menu item which leads to this submenu.'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize({ key: 'vscode.extension.contributes.submenu.icon', comment: ['do not translate or change `\\$(zap)`, \\ in front of $ is important.'] }, '(Optional) Icon which is used to represent the submenu in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\$(zap)`'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:							description: localize('vscode.extension.contributes.submenu.icon.light', 'Icon path when a light theme is used'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:							description: localize('vscode.extension.contributes.submenu.icon.dark', 'Icon path when a dark theme is used'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('vscode.extension.contributes.menus', "Contributes menu items to the editor"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			markdownDescription: menu.proposed ? localize('proposed', "Proposed API, requires `enabledApiProposal: [\"{0}\"]` - {1}", menu.proposed, menu.description) : menu.description,
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('vscode.extension.contributes.submenus', "Contributes submenu items to the editor"),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('nonempty', "expected non-empty value."));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'command'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'precondition'));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		collector.error(localize('opticon', "property `icon` can be omitted or must be either a string or a literal like `{dark, light}`"));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requireStringOrObject', "property `{0}` is mandatory and must be of type `string` or `object`", propertyName));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", propertyName));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			collector.error(localize('requirestrings', "properties `{0}` and `{1}` are mandatory and must be of type `string`", `${propertyName}.value`, `${propertyName}.original`));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.commandType.command', 'Identifier of the command to execute'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.commandType.title', 'Title by which the command is represented in the UI'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				markdownDescription: localize('vscode.extension.contributes.commandType.shortTitle', '(Optional) Short title by which the command is represented in the UI. Menus pick either `title` or `shortTitle` depending on the context in which they show commands.'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.commandType.category', '(Optional) Category string by which the command is grouped in the UI'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize('vscode.extension.contributes.commandType.precondition', '(Optional) Condition which must be true to enable the command in the UI (menu and keybindings). Does not prevent executing the command by other means, like the `executeCommand`-api.'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				description: localize({ key: 'vscode.extension.contributes.commandType.icon', comment: ['do not translate or change `\\$(zap)`, \\ in front of $ is important.'] }, '(Optional) Icon which is used to represent the command in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\$(zap)`'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:							description: localize('vscode.extension.contributes.commandType.icon.light', 'Icon path when a light theme is used'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:							description: localize('vscode.extension.contributes.commandType.icon.dark', 'Icon path when a dark theme is used'),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:		description: localize('vscode.extension.contributes.commands', "Contributes commands to the command palette."),
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:			extension.collector.info(localize('dup', "Command `{0}` appears multiple times in the `commands` section.", userFriendlyCommand.command));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				collector.warn(localize('submenuId.invalid.id', "`{0}` is not a valid submenu identifier", submenuInfo.id));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				collector.info(localize('submenuId.duplicate.id', "The `{0}` submenu was already previously registered.", submenuInfo.id));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				collector.warn(localize('submenuId.invalid.label', "`{0}` is not a valid submenu label", submenuInfo.label));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:				collector.error(localize('proposedAPI.invalid', "{0} is a proposed menu identifier. It requires 'package.json#enabledApiProposals: [\"{1}\"]' and is only available when running out of dev or with the following command line switch: --enable-proposed-api {2}", entry[0], menu.proposed, extension.description.identifier.value));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:						collector.error(localize('missing.command', "Menu item references a command `{0}` which is not defined in the 'commands' section.", menuItem.command));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:						collector.warn(localize('missing.altCommand', "Menu item references an alt-command `{0}` which is not defined in the 'commands' section.", menuItem.alt));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:						collector.info(localize('dupe.command', "Menu item references the same command as default and alt-command"));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:						collector.error(localize('unsupported.submenureference', "Menu item references a submenu for a menu which doesn't have submenu support."));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:						collector.error(localize('missing.submenu', "Menu item references a submenu `{0}` which is not defined in the 'submenus' section.", menuItem.submenu));
src/vs/workbench/services/actions/common/menusExtensionPoint.ts:						collector.warn(localize('submenuItem.duplicate', "The `{0}` submenu was already contributed to the `{1}` menu.", menuItem.submenu, entry[0]));
src/vs/workbench/services/editor/browser/editorResolverService.ts:			localize('editorResolver.conflictingDefaults', 'There are multiple default editors available for the resource.'),
src/vs/workbench/services/editor/browser/editorResolverService.ts:				label: localize('editorResolver.configureDefault', 'Configure Default'),
src/vs/workbench/services/editor/browser/editorResolverService.ts:				label: localize('editorResolver.keepDefault', 'Keep {0}', editorName),
src/vs/workbench/services/editor/browser/editorResolverService.ts:		const currentlyActiveLabel = localize('promptOpenWith.currentlyActive', "Active");
src/vs/workbench/services/editor/browser/editorResolverService.ts:		const currentDefaultLabel = localize('promptOpenWith.currentDefault', "Default");
src/vs/workbench/services/editor/browser/editorResolverService.ts:		const currentDefaultAndActiveLabel = localize('promptOpenWith.currentDefaultAndActive', "Active and Default");
src/vs/workbench/services/editor/browser/editorResolverService.ts:				label: localize('promptOpenWith.configureDefault', "Configure default editor for '{0}'...", `*${extname(resource)}`),
src/vs/workbench/services/editor/browser/editorResolverService.ts:			localize('promptOpenWith.updateDefaultPlaceHolder', "Select new default editor for '{0}'", `*${extname(resource)}`) :
src/vs/workbench/services/editor/browser/editorResolverService.ts:			localize('promptOpenWith.placeHolder', "Select editor for '{0}'", basename(resource));
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				value: localize('closeWindow', "Close Window"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miCloseWindow', comment: ['&& denotes a mnemonic'] }, "Clos&&e Window"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				value: localize('zoomIn', "Zoom In"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miZoomIn', comment: ['&& denotes a mnemonic'] }, "&&Zoom In"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				value: localize('zoomOut', "Zoom Out"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miZoomOut', comment: ['&& denotes a mnemonic'] }, "&&Zoom Out"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				value: localize('zoomReset', "Reset Zoom"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miZoomReset', comment: ['&& denotes a mnemonic'] }, "&&Reset Zoom"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:		tooltip: localize('close', "Close Window")
src/vs/workbench/electron-sandbox/actions/windowActions.ts:		tooltip: localize('close', "Close Window"),
src/vs/workbench/electron-sandbox/actions/windowActions.ts:		const placeHolder = localize('switchWindowPlaceHolder', "Select a window to switch to");
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				ariaLabel: window.dirty ? localize('windowDirtyAriaLabel', "{0}, window with unsaved changes", window.title) : window.title,
src/vs/workbench/electron-sandbox/actions/windowActions.ts:				description: (currentWindowId === window.id) ? localize('current', "Current Window") : undefined,
src/vs/workbench/electron-sandbox/actions/windowActions.ts:			title: { value: localize('switchWindow', "Switch Window..."), original: 'Switch Window...' },
src/vs/workbench/electron-sandbox/actions/windowActions.ts:			title: { value: localize('quickSwitchWindow', "Quick Switch Window..."), original: 'Quick Switch Window...' },
src/vs/workbench/services/editor/common/editorResolverService.ts:			markdownDescription: localize('editor.editorAssociations', "Configure glob patterns to editors (e.g. `\"*.hex\": \"hexEditor.hexEdit\"`). These have precedence over the default behavior."),
src/vs/workbench/services/dialogs/browser/fileDialogService.ts:		throw new Error(localize('pickFolderAndOpen', "Can't open folders, try adding a folder to the workspace instead."));
src/vs/workbench/services/dialogs/browser/fileDialogService.ts:		throw new Error(localize('pickFolderAndOpen', "Can't open folders, try adding a folder to the workspace instead."));
src/vs/workbench/services/dialogs/browser/fileDialogService.ts:		throw new Error(localize('pickWorkspaceAndOpen', "Can't open workspaces, try adding a folder to the workspace instead."));
src/vs/workbench/services/dialogs/browser/fileDialogService.ts:			[localize('openRemote', "Open Remote..."), localize('learnMore', "Learn More"), localize('openFiles', "Open Files...")] :
src/vs/workbench/services/dialogs/browser/fileDialogService.ts:			[localize('openRemote', "Open Remote..."), localize('learnMore', "Learn More")];
src/vs/workbench/services/dialogs/browser/fileDialogService.ts:			localize('unsupportedBrowserMessage', "Opening Local Folders is Unsupported"),
src/vs/workbench/services/dialogs/browser/fileDialogService.ts:				detail: localize('unsupportedBrowserDetail', "Your browser doesn't support opening local folders.\nYou can either open single files or open a remote repository."),
src/vs/workbench/electron-sandbox/actions/installActions.ts:const shellCommandCategory: ILocalizedString = { value: localize('shellCommand', "Shell Command"), original: 'Shell Command' };
src/vs/workbench/electron-sandbox/actions/installActions.ts:				value: localize('install', "Install '{0}' command in PATH", product.applicationName),
src/vs/workbench/electron-sandbox/actions/installActions.ts:			dialogService.show(Severity.Info, localize('successIn', "Shell command '{0}' successfully installed in PATH.", productService.applicationName));
src/vs/workbench/electron-sandbox/actions/installActions.ts:				value: localize('uninstall', "Uninstall '{0}' command from PATH", product.applicationName),
src/vs/workbench/electron-sandbox/actions/installActions.ts:			dialogService.show(Severity.Info, localize('successFrom', "Shell command '{0}' successfully uninstalled from PATH.", productService.applicationName));
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:		let detail = nls.localize('saveChangesDetail', "Your changes will be lost if you don't save them.");
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			message = nls.localize('saveChangesMessage', "Do you want to save the changes you made to {0}?", typeof fileNamesOrResources[0] === 'string' ? fileNamesOrResources[0] : resources.basename(fileNamesOrResources[0]));
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			message = nls.localize('saveChangesMessages', "Do you want to save the changes to the following {0} files?", fileNamesOrResources.length);
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			fileNamesOrResources.length > 1 ? nls.localize({ key: 'saveAll', comment: ['&& denotes a mnemonic'] }, "&&Save All") : nls.localize({ key: 'save', comment: ['&& denotes a mnemonic'] }, "&&Save"),
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			nls.localize({ key: 'dontSave', comment: ['&& denotes a mnemonic'] }, "Do&&n't Save"),
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			nls.localize('cancel', "Cancel")
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:		const title = nls.localize('openFileOrFolder.title', 'Open File or Folder');
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:		const title = nls.localize('openFile.title', 'Open File');
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:		const title = nls.localize('openFolder.title', 'Open Folder');
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:		const title = nls.localize('openWorkspace.title', 'Open Workspace from File');
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:		const filters: FileFilter[] = [{ name: nls.localize('filterName.workspace', 'Workspace'), extensions: [WORKSPACE_EXTENSION] }];
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:		options.title = nls.localize('saveFileAs.title', 'Save As');
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			title: nls.localize('saveAsTitle', "Save As"),
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			{ name: nls.localize('allFiles', "All Files"), extensions: ['*'] },
src/vs/workbench/services/dialogs/browser/abstractFileDialogService.ts:			{ name: nls.localize('noExt', "No Extension"), extensions: [''] }
src/vs/workbench/electron-sandbox/actions/developerActions.ts:			title: { value: localize('toggleDevTools', "Toggle Developer Tools"), original: 'Toggle Developer Tools' },
src/vs/workbench/electron-sandbox/actions/developerActions.ts:			title: { value: localize('configureRuntimeArguments', "Configure Runtime Arguments"), original: 'Configure Runtime Arguments' },
src/vs/workbench/electron-sandbox/actions/developerActions.ts:			title: { value: localize('toggleSharedProcess', "Toggle Shared Process"), original: 'Toggle Shared Process' },
src/vs/workbench/electron-sandbox/actions/developerActions.ts:			title: { value: localize('reloadWindowWithExtensionsDisabled', "Reload With Extensions Disabled"), original: 'Reload With Extensions Disabled' },
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:	export const LABEL = nls.localize('openLocalFile', "Open Local File...");
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:	export const LABEL = nls.localize('saveLocalFile', "Save Local File...");
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:	export const LABEL = nls.localize('openLocalFolder', "Open Local Folder...");
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:	export const LABEL = nls.localize('openLocalFileFolder', "Open Local...");
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:			this.notificationService.info(nls.localize('remoteFileDialog.notConnectedToRemote', 'File system provider for {0} is not available.', defaultUri.toString()));
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.customLabel = nls.localize('remoteFileDialog.local', 'Show Local');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.badPath', 'The path does not exist.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:		prompt.customLabel = nls.localize('remoteFileDialog.cancel', 'Cancel');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:			this.filePickBox.validationMessage = nls.localize('remoteFileDialog.invalidPath', 'Please enter a valid path.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.validateFolder', 'The folder already exists. Please use a new file name.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				const message = nls.localize('remoteFileDialog.validateExisting', '{0} already exists. Are you sure you want to overwrite it?', resources.basename(uri));
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.validateBadFilename', 'Please enter a valid file name.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				const message = nls.localize('remoteFileDialog.validateCreateDirectory', 'The folder {0} does not exist. Would you like to create it?', resources.basename(resources.dirname(uri)));
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.validateNonexistentDir', 'Please enter a path that exists.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.validateNonexistentDir', 'Please enter a path that exists.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.windowsDriveLetter', 'Please start the path with a drive letter.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.validateFileOnly', 'Please select a file.');
src/vs/workbench/services/dialogs/browser/simpleFileDialog.ts:				this.filePickBox.validationMessage = nls.localize('remoteFileDialog.validateFolderOnly', 'Please select a folder.');
src/vs/workbench/services/configuration/common/jsonEditingService.ts:				return nls.localize('errorInvalidFile', "Unable to write into the file. Please open the file to correct errors/warnings in the file and try again.");
src/vs/workbench/services/configuration/common/jsonEditingService.ts:				return nls.localize('errorFileDirty', "Unable to write into the file because the file has unsaved changes. Please save the file and try again.");
src/vs/workbench/services/configuration/browser/configurationService.ts:			description: localize('configurationDefaults.description', 'Contribute defaults for configurations'),
src/vs/workbench/services/configuration/browser/configurationService.ts:			this.configurationRegistry.registerDefaultConfigurations([{ overrides, source: localize('experimental', "Experiments") }]);
src/vs/workbench/services/decorations/browser/decorationsService.ts:			tooltip = localize('bubbleTitle', "Contains emphasized items");
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:			throw new VariableError(variableKind, (localize('canNotResolveFile', "Variable {0} can not be resolved. Please open an editor.", match)));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:			throw new VariableError(variableKind, localize('canNotResolveFolderForFile', "Variable {0}: can not find workspace folder of '{1}'.", match, paths.basename(filePath)));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:				throw new VariableError(variableKind, localize('canNotFindFolder', "Variable {0} can not be resolved. No such folder '{1}'.", match, argument));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:				throw new VariableError(variableKind, localize('canNotResolveWorkspaceFolderMultiRoot', "Variable {0} can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:			throw new VariableError(variableKind, localize('canNotResolveWorkspaceFolder', "Variable {0} can not be resolved. Please open a folder.", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:				throw new VariableError(VariableKind.Env, localize('missingEnvVarName', "Variable {0} can not be resolved because no environment variable name is given.", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:						throw new VariableError(VariableKind.Config, localize('configNotFound', "Variable {0} can not be resolved because setting '{1}' not found.", match, argument));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:						throw new VariableError(VariableKind.Config, localize('configNoString', "Variable {0} can not be resolved because '{1}' is a structured value.", match, argument));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:				throw new VariableError(VariableKind.Config, localize('missingConfigName', "Variable {0} can not be resolved because no settings name is given.", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:						throw new VariableError(VariableKind.ExtensionInstallFolder, localize('extensionNotInstalled', "Variable {0} can not be resolved because the extension {1} is not installed.", match, argument));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:				throw new VariableError(VariableKind.ExtensionInstallFolder, localize('missingExtensionName', "Variable {0} can not be resolved because no extension name is given.", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:						throw new VariableError(VariableKind.UserHome, localize('canNotResolveUserHome', "Variable {0} can not be resolved. UserHome path is not defined", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:						throw new VariableError(VariableKind.LineNumber, localize('canNotResolveLineNumber', "Variable {0} can not be resolved. Make sure to have a line selected in the active editor.", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:						throw new VariableError(VariableKind.SelectedText, localize('canNotResolveSelectedText', "Variable {0} can not be resolved. Make sure to have some text selected in the active editor.", match));
src/vs/workbench/services/configurationResolver/common/variableResolver.ts:			throw new VariableError(variableKind, localize('noValueForCommand', "Variable {0} can not be resolved because the command has no value.", match));
src/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts:						throw new Error(nls.localize('commandVariable.noStringType', "Cannot substitute command variable '{0}' because command did not return a result of type string.", commandId));
src/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts:			return Promise.reject(new Error(nls.localize('inputVariable.noInputSection', "Variable '{0}' must be defined in an '{1}' section of the debug or task configuration.", variable, 'input')));
src/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts:				throw new Error(nls.localize('inputVariable.missingAttribute', "Input variable '{0}' is of type '{1}' and must include '{2}'.", variable, info.type, attrName));
src/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts:							item.description = nls.localize('inputVariable.defaultInputValue', "(Default)");
src/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts:						throw new Error(nls.localize('inputVariable.command.noStringType', "Cannot substitute input variable '{0}' because command '{1}' did not return a result of type string.", variable, info.command));
src/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts:					throw new Error(nls.localize('inputVariable.unknownType', "Input variable '{0}' can only be of type 'promptString', 'pickString', or 'command'.", variable));
src/vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts:		return Promise.reject(new Error(nls.localize('inputVariable.undefinedVariable', "Undefined input variable '{0}' encountered. Remove or define '{0}' to continue.", variable)));
src/vs/workbench/services/configuration/common/configurationEditing.ts:		const openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', "Open Tasks Configuration")
src/vs/workbench/services/configuration/common/configurationEditing.ts:			: operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', "Open Launch Configuration")
src/vs/workbench/services/configuration/common/configurationEditing.ts:					label: nls.localize('open', "Open Settings"),
src/vs/workbench/services/configuration/common/configurationEditing.ts:		const openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', "Open Tasks Configuration")
src/vs/workbench/services/configuration/common/configurationEditing.ts:			: operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', "Open Launch Configuration")
src/vs/workbench/services/configuration/common/configurationEditing.ts:					label: nls.localize('saveAndRetry', "Save and Retry"),
src/vs/workbench/services/configuration/common/configurationEditing.ts:					label: nls.localize('saveAndRetry', "Save and Retry"),
src/vs/workbench/services/configuration/common/configurationEditing.ts:					label: nls.localize('open', "Open Settings"),
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_POLICY_CONFIGURATION: return nls.localize('errorPolicyConfiguration', "Unable to write {0} because it is configured in system policy.", operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY: return nls.localize('errorUnknownKey', "Unable to write to {0} because {1} is not a registered configuration.", this.stringifyTarget(target), operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION: return nls.localize('errorInvalidWorkspaceConfigurationApplication', "Unable to write {0} to Workspace Settings. This setting can be written only into User settings.", operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_MACHINE: return nls.localize('errorInvalidWorkspaceConfigurationMachine', "Unable to write {0} to Workspace Settings. This setting can be written only into User settings.", operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_CONFIGURATION: return nls.localize('errorInvalidFolderConfiguration', "Unable to write to Folder Settings because {0} does not support the folder resource scope.", operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INVALID_USER_TARGET: return nls.localize('errorInvalidUserTarget', "Unable to write to User Settings because {0} does not support for global scope.", operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_TARGET: return nls.localize('errorInvalidWorkspaceTarget', "Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.", operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET: return nls.localize('errorInvalidFolderTarget', "Unable to write to Folder Settings because no resource is provided.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INVALID_RESOURCE_LANGUAGE_CONFIGURATION: return nls.localize('errorInvalidResourceLanguageConfiguration', "Unable to write to Language Settings because {0} is not a resource language setting.", operation.key);
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED: return nls.localize('errorNoWorkspaceOpened', "Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.", this.stringifyTarget(target));
src/vs/workbench/services/configuration/common/configurationEditing.ts:					return nls.localize('errorInvalidTaskConfiguration', "Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:					return nls.localize('errorInvalidLaunchConfiguration', "Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorInvalidConfiguration', "Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorInvalidRemoteConfiguration', "Unable to write into remote user settings. Please open the remote user settings to correct errors/warnings in it and try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorInvalidConfigurationWorkspace', "Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorInvalidConfigurationFolder', "Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.", workspaceFolderName);
src/vs/workbench/services/configuration/common/configurationEditing.ts:					return nls.localize('errorTasksConfigurationFileDirty', "Unable to write into tasks configuration file because the file has unsaved changes. Please save it first and then try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:					return nls.localize('errorLaunchConfigurationFileDirty', "Unable to write into launch configuration file because the file has unsaved changes. Please save it first and then try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorConfigurationFileDirty', "Unable to write into user settings because the file has unsaved changes. Please save the user settings file first and then try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorRemoteConfigurationFileDirty', "Unable to write into remote user settings because the file has unsaved changes. Please save the remote user settings file first and then try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorConfigurationFileDirtyWorkspace', "Unable to write into workspace settings because the file has unsaved changes. Please save the workspace settings file first and then try again.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorConfigurationFileDirtyFolder', "Unable to write into folder settings because the file has unsaved changes. Please save the '{0}' folder settings file first and then try again.", workspaceFolderName);
src/vs/workbench/services/configuration/common/configurationEditing.ts:					return nls.localize('errorTasksConfigurationFileModifiedSince', "Unable to write into tasks configuration file because the content of the file is newer.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:					return nls.localize('errorLaunchConfigurationFileModifiedSince', "Unable to write into launch configuration file because the content of the file is newer.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorConfigurationFileModifiedSince', "Unable to write into user settings because the content of the file is newer.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorRemoteConfigurationFileModifiedSince', "Unable to write into remote user settings because the content of the file is newer.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorConfigurationFileModifiedSinceWorkspace', "Unable to write into workspace settings because the content of the file is newer.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:						return nls.localize('errorConfigurationFileModifiedSinceFolder', "Unable to write into folder settings because the content of the file is newer.");
src/vs/workbench/services/configuration/common/configurationEditing.ts:			case ConfigurationEditingErrorCode.ERROR_INTERNAL: return nls.localize('errorUnknown', "Unable to write to {0} because of an internal error.", this.stringifyTarget(target));
src/vs/workbench/services/configuration/common/configurationEditing.ts:				return nls.localize('userTarget', "User Settings");
src/vs/workbench/services/configuration/common/configurationEditing.ts:				return nls.localize('remoteUserTarget', "Remote User Settings");
src/vs/workbench/services/configuration/common/configurationEditing.ts:				return nls.localize('workspaceTarget', "Workspace Settings");
src/vs/workbench/services/configuration/common/configurationEditing.ts:				return nls.localize('folderTarget', "Folder Settings");
src/vs/workbench/services/clipboard/browser/clipboardService.ts:					localize('clipboardError', "Unable to read from the browser's clipboard. Please make sure you have granted access for this website to read from the clipboard."),
src/vs/workbench/services/clipboard/browser/clipboardService.ts:						label: localize('retry', "Retry"),
src/vs/workbench/services/clipboard/browser/clipboardService.ts:						label: localize('learnMore', "Learn More"),
src/vs/workbench/services/authentication/browser/authenticationService.ts:			description: nls.localize('authentication.id', 'The id of the authentication provider.')
src/vs/workbench/services/authentication/browser/authenticationService.ts:			description: nls.localize('authentication.label', 'The human readable name of the authentication provider.'),
src/vs/workbench/services/authentication/browser/authenticationService.ts:		description: nls.localize({ key: 'authenticationExtensionPoint', comment: [`'Contributes' means adds here`] }, 'Contributes authentication'),
src/vs/workbench/services/authentication/browser/authenticationService.ts:		title: nls.localize('authentication.Placeholder', "No accounts requested yet..."),
src/vs/workbench/services/authentication/browser/authenticationService.ts:						point.collector.error(nls.localize('authentication.missingId', 'An authentication contribution must specify an id.'));
src/vs/workbench/services/authentication/browser/authenticationService.ts:						point.collector.error(nls.localize('authentication.missingLabel', 'An authentication contribution must specify a label.'));
src/vs/workbench/services/authentication/browser/authenticationService.ts:						point.collector.error(nls.localize('authentication.idConflict', "This authentication id '{0}' has already been registered", provider.id));
src/vs/workbench/services/authentication/browser/authenticationService.ts:					title: nls.localize('loading', "Loading..."),
src/vs/workbench/services/authentication/browser/authenticationService.ts:			const badge = new NumberBadge(numberOfRequests, () => nls.localize('sign in', "Sign in requested"));
src/vs/workbench/services/authentication/browser/authenticationService.ts:			nls.localize('confirmAuthenticationAccess', "The extension '{0}' wants to access the {1} account '{2}'.", extensionName, providerName, accountName),
src/vs/workbench/services/authentication/browser/authenticationService.ts:			[nls.localize('allow', "Allow"), nls.localize('deny', "Deny"), nls.localize('cancel', "Cancel")],
src/vs/workbench/services/authentication/browser/authenticationService.ts:				label: nls.localize('useOtherAccount', "Sign in to another account")
src/vs/workbench/services/authentication/browser/authenticationService.ts:			quickPick.title = nls.localize(
src/vs/workbench/services/authentication/browser/authenticationService.ts:			quickPick.placeholder = nls.localize('getSessionPlateholder', "Select an account for '{0}' to use or Esc to cancel", extensionName);
src/vs/workbench/services/authentication/browser/authenticationService.ts:				title: nls.localize({
src/vs/workbench/services/authentication/browser/authenticationService.ts:				title: nls.localize({
src/vs/workbench/services/configurationResolver/common/configurationResolverUtils.ts:		nls.localize('deprecatedVariables', "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead.");
src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts:			buttons.push(localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, "&&Yes"));
src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts:			buttons.push(localize('cancelButton', "Cancel"));
src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts:			return localize({ key: 'aboutDetail', comment: ['Electron, Chromium, Node.js and V8 are product names that need no translation'] },
src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts:		const ok = localize('okButton', "OK");
src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts:		const copy = mnemonicButtonLabel(localize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, "&&Copy"));
src/vs/editor/browser/editorExtensions.ts:		title: nls.localize({ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, "&&Undo"),
src/vs/editor/browser/editorExtensions.ts:		title: nls.localize('undo', "Undo"),
src/vs/editor/browser/editorExtensions.ts:		title: nls.localize({ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, "&&Redo"),
src/vs/editor/browser/editorExtensions.ts:		title: nls.localize('redo', "Redo"),
src/vs/editor/browser/editorExtensions.ts:		title: nls.localize({ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, "&&Select All"),
src/vs/editor/browser/editorExtensions.ts:		title: nls.localize('selectAll', "Select All"),
src/vs/workbench/electron-sandbox/desktop.main.ts:		this._register(workbench.onWillShutdown(event => event.join(storageService.close(), { id: 'join.closeStorage', label: localize('join.closeStorage', "Saving UI state") })));
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:const idDescription = nls.localize('JsonSchema.input.id', "The input's id is used to associate an input with a variable of the form ${input:id}.");
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:const typeDescription = nls.localize('JsonSchema.input.type', "The type of user input prompt to use.");
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:const descriptionDescription = nls.localize('JsonSchema.input.description', "The description is shown when the user is prompted for input.");
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:const defaultDescription = nls.localize('JsonSchema.input.default', "The default value for the input.");
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:			description: nls.localize('JsonSchema.inputs', 'User inputs. Used for defining user input prompts, such as free string input or a choice from several options.'),
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:									nls.localize('JsonSchema.input.type.promptString', "The 'promptString' type opens an input box to ask the user for input."),
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:								description: nls.localize('JsonSchema.input.password', "Controls if a password input is shown. Password input hides the typed text."),
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:									nls.localize('JsonSchema.input.type.pickString', "The 'pickString' type shows a selection list."),
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:								description: nls.localize('JsonSchema.input.options', "An array of strings that defines the options for a quick pick."),
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:													description: nls.localize('JsonSchema.input.pickString.optionLabel', "Label for the option.")
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:													description: nls.localize('JsonSchema.input.pickString.optionValue', "Value for the option.")
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:									nls.localize('JsonSchema.input.type.command', "The 'command' type executes a command."),
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:								description: nls.localize('JsonSchema.input.command.command', "The command to execute for this input variable.")
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:										description: nls.localize('JsonSchema.input.command.args', "Optional arguments passed to the command.")
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:										description: nls.localize('JsonSchema.input.command.args', "Optional arguments passed to the command.")
src/vs/workbench/services/configurationResolver/common/configurationResolverSchema.ts:										description: nls.localize('JsonSchema.input.command.args', "Optional arguments passed to the command.")
src/vs/workbench/electron-sandbox/window.ts:					label: localize('learnMore', "Learn More"),
src/vs/workbench/electron-sandbox/window.ts:				localize('keychainWriteError', "Writing login information to the keychain failed with error '{0}'.", message),
src/vs/workbench/electron-sandbox/window.ts:					label: localize('troubleshooting', "Troubleshooting Guide"),
src/vs/workbench/electron-sandbox/window.ts:			const result = await this.dialogService.input(Severity.Warning, localize('proxyAuthRequired', "Proxy Authentication Required"),
src/vs/workbench/electron-sandbox/window.ts:					localize({ key: 'loginButton', comment: ['&& denotes a mnemonic'] }, "&&Log In"),
src/vs/workbench/electron-sandbox/window.ts:					localize({ key: 'cancelButton', comment: ['&& denotes a mnemonic'] }, "&&Cancel")
src/vs/workbench/electron-sandbox/window.ts:					{ placeholder: localize('username', "Username"), value: payload.username },
src/vs/workbench/electron-sandbox/window.ts:					{ placeholder: localize('password', "Password"), type: 'password', value: payload.password }
src/vs/workbench/electron-sandbox/window.ts:					detail: localize('proxyDetail', "The proxy {0} requires a username and password.", `${payload.authInfo.host}:${payload.authInfo.port}`),
src/vs/workbench/electron-sandbox/window.ts:						label: localize('rememberCredentials', "Remember my credentials"),
src/vs/workbench/electron-sandbox/window.ts:			(isMacintosh ? localize('quitMessageMac', "Are you sure you want to quit?") : localize('quitMessage', "Are you sure you want to exit?")) :
src/vs/workbench/electron-sandbox/window.ts:			localize('closeWindowMessage', "Are you sure you want to close the window?");
src/vs/workbench/electron-sandbox/window.ts:			(isMacintosh ? localize({ key: 'quitButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Quit") : localize({ key: 'exitButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Exit")) :
src/vs/workbench/electron-sandbox/window.ts:			localize({ key: 'closeWindowButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Close Window");
src/vs/workbench/electron-sandbox/window.ts:				label: localize('doNotAskAgain', "Do not ask me again")
src/vs/workbench/electron-sandbox/window.ts:			detail: localize('shutdownErrorDetail', "Error: {0}", toErrorMessage(error))
src/vs/workbench/electron-sandbox/window.ts:				detail: pendingJoiners.length > 0 ? localize('willShutdownDetail', "The following operations are still running: \n{0}", pendingJoiners.map(joiner => `- ${joiner.label}`).join('\n')) : undefined
src/vs/workbench/electron-sandbox/window.ts:					return localize('shutdownErrorClose', "An unexpected error prevented the window to close");
src/vs/workbench/electron-sandbox/window.ts:					return localize('shutdownErrorQuit', "An unexpected error prevented the application to quit");
src/vs/workbench/electron-sandbox/window.ts:					return localize('shutdownErrorReload', "An unexpected error prevented the window to reload");
src/vs/workbench/electron-sandbox/window.ts:					return localize('shutdownErrorLoad', "An unexpected error prevented to change the workspace");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownTitleClose', "Closing the window is taking a bit longer...");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownTitleQuit', "Quitting the application is taking a bit longer...");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownTitleReload', "Reloading the window is taking a bit longer...");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownTitleLoad', "Changing the workspace is taking a bit longer...");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownForceClose', "Close Anyway");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownForceQuit', "Quit Anyway");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownForceReload', "Reload Anyway");
src/vs/workbench/electron-sandbox/window.ts:				return localize('shutdownForceLoad', "Change Anyway");
src/vs/workbench/electron-sandbox/window.ts:				this.dialogService.show(Severity.Error, localize('loaderCycle', "There is a dependency cycle in the AMD modules that needs to be resolved!"));
src/vs/workbench/electron-sandbox/window.ts:				this.notificationService.warn(localize('runningAsRoot', "It is not recommended to run {0} as root user.", this.productService.nameShort));
src/vs/workbench/electron-sandbox/window.ts:						message: localize('appRootWarning.banner', "Files you store within the installation folder ('{0}') may be OVERWRITTEN or DELETED IRREVERSIBLY without warning at update time.", this.labelService.getUriLabel(installLocationUri)),
src/vs/workbench/electron-sandbox/window.ts:				const message = localize('windows 7 eol', "{0} on Windows 7 will no longer receive any further updates.", this.productService.nameLong);
src/vs/workbench/electron-sandbox/window.ts:						label: localize('learnMore', "Learn More"),
src/vs/workbench/contrib/remote/browser/tunnelView.ts:export const forwardedPortsViewEnabled = new RawContextKey<boolean>('forwardedPortsViewEnabled', false, nls.localize('tunnel.forwardedPortsViewEnabled', "Whether the Ports view is enabled."));
src/vs/workbench/contrib/remote/browser/tunnelView.ts:		label: nls.localize('remote.tunnelsView.addPort', "Add Port"),
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			label: nls.localize('tunnelPrivacy.private', "Private")
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly label: string = nls.localize('tunnel.portColumn.label', "Port");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly tooltip: string = nls.localize('tunnel.portColumn.tooltip', "The label and remote port number of the forwarded port.");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly label: string = nls.localize('tunnel.addressColumn.label', "Local Address");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly tooltip: string = nls.localize('tunnel.addressColumn.tooltip', "The address that the forwarded port is available at locally.");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					clickLabel = nls.localize('portsLink.followLinkAlt.mac', "option + click");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					clickLabel = nls.localize('portsLink.followLinkAlt', "alt + click");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					clickLabel = nls.localize('portsLink.followLinkCmd', "cmd + click");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					clickLabel = nls.localize('portsLink.followLinkCtrl', "ctrl + click");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly label: string = nls.localize('tunnel.processColumn.label', "Running Process");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly tooltip: string = nls.localize('tunnel.processColumn.tooltip', "The command line of the process that is using the port.");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly label: string = nls.localize('tunnel.originColumn.label', "Origin");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly tooltip: string = nls.localize('tunnel.originColumn.tooltip', "The source that a forwarded port originates from. Can be an extension, user forwarded, statically forwarded, or automatically forwarded.");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly label: string = nls.localize('tunnel.privacyColumn.label', "Visibility");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	readonly tooltip: string = nls.localize('tunnel.privacyColumn.tooltip', "The availability of the forwarded port.");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			ariaLabel: nls.localize('remote.tunnelsView.input', "Press Enter to confirm or Escape to cancel."),
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			description = nls.localize('tunnelView.runningProcess.inacessable', "Process information unavailable");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			information = nls.localize('remote.tunnel.tooltipForwarded', "Remote port {0}:{1} forwarded to local address {2}. ", this.remoteHost, this.remotePort, this.localAddress);
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			information = nls.localize('remote.tunnel.tooltipCandidate', "Remote port {0}:{1} not forwarded. ", this.remoteHost, this.remotePort);
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			return `${this.processDescription ? nls.localize('tunnel.iconColumn.running', "Port has running process.") :
src/vs/workbench/contrib/remote/browser/tunnelView.ts:				nls.localize('tunnel.iconColumn.notRunning', "No running process.")}`;
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			return `${this.name ? nls.localize('remote.tunnel.tooltipName', "Port labeled {0}. ", this.name) : ''}`;
src/vs/workbench/contrib/remote/browser/tunnelView.ts:				label: nls.localize('tunnelPrivacy.unknown', "Unknown")
src/vs/workbench/contrib/remote/browser/tunnelView.ts:				label: nls.localize('tunnelPrivacy.private', "Private")
src/vs/workbench/contrib/remote/browser/tunnelView.ts:const TunnelViewFocusContextKey = new RawContextKey<boolean>('tunnelViewFocus', false, nls.localize('tunnel.focusContext', "Whether the Ports view has focus."));
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	static readonly TITLE = nls.localize('remote.tunnel', "Ports");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					getWidgetAriaLabel: () => nls.localize('tunnelView', "Tunnel View")
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL = nls.localize('remote.tunnel.label', "Set Port Label");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:						placeholder: nls.localize('remote.tunnelsView.labelPlaceholder', "Port label"),
src/vs/workbench/contrib/remote/browser/tunnelView.ts:const invalidPortString: string = nls.localize('remote.tunnelsView.portNumberValid', "Forwarded port should be a number or a host:port.");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:const invalidPortNumberString: string = nls.localize('remote.tunnelsView.portNumberToHigh', "Port number must be \u2265 0 and < {0}.", maxPortNumber);
src/vs/workbench/contrib/remote/browser/tunnelView.ts:const requiresSudoString: string = nls.localize('remote.tunnelView.inlineElevationMessage', "May Require Sudo");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:const alreadyForwarded: string = nls.localize('remote.tunnelView.alreadyForwarded', "Port is already forwarded");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL: ILocalizedString = { value: nls.localize('remote.tunnel.forward', "Forward a Port"), original: 'Forward a Port' };
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const TREEITEM_LABEL = nls.localize('remote.tunnel.forwardItem', "Forward Port");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	const forwardPrompt = nls.localize('remote.tunnel.forwardPrompt', "Port number or address (eg. 3000 or 10.10.10.10:2000).");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			notificationService.warn(nls.localize('remote.tunnel.forwardError', "Unable to forward {0}:{1}. The host may not be available or that remote port may already be forwarded", host, port));
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			label: nls.localize('remote.tunnel.closeNoPorts', "No ports currently forwarded. Try running the {0} command", ForwardPortAction.LABEL.value)
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL: ILocalizedString = { value: nls.localize('remote.tunnel.close', "Stop Forwarding Port"), original: 'Stop Forwarding Port' };
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			const result = await quickInputService.pick(picks, { placeHolder: nls.localize('remote.tunnel.closePlaceholder', "Choose a port to stop forwarding") });
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL = nls.localize('remote.tunnel.open', "Open in Browser");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL = nls.localize('remote.tunnel.openPreview', "Preview in Editor");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL = nls.localize('remote.tunnel.openCommandPalette', "Open Port in Browser");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					label: nls.localize('remote.tunnel.openCommandPaletteNone', "No ports currently forwarded. Open the Ports view to get started.")
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					label: nls.localize('remote.tunnel.openCommandPaletteView', "Open the Ports view...")
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			const picked = await quickPickService.pick<QuickPickTunnel>(options, { placeHolder: nls.localize('remote.tunnel.openCommandPalettePick', "Choose the port to open") });
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const INLINE_LABEL = nls.localize('remote.tunnel.copyAddressInline', "Copy Local Address");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const COMMANDPALETTE_LABEL = nls.localize('remote.tunnel.copyAddressCommandPalette', "Copy Forwarded Port Address");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:			const result = await quickInputService.pick(makeTunnelPicks(tunnels, remoteExplorerService, tunnelService), { placeHolder: nls.localize('remote.tunnel.copyAddressPlaceholdter', "Choose a forwarded port") });
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL = nls.localize('remote.tunnel.changeLocalPort', "Change Local Address Port");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:								notificationService.warn(nls.localize('remote.tunnel.changeLocalPortNumber', "The local port {0} is not available. Port number {1} has been used instead", value, newForward.tunnelLocalPort ?? newForward.localAddress));
src/vs/workbench/contrib/remote/browser/tunnelView.ts:					placeholder: nls.localize('remote.tunnelsView.changePort', "New local port")
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL_HTTP = nls.localize('remote.tunnel.protocolHttp', "HTTP");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	export const LABEL_HTTPS = nls.localize('remote.tunnel.protocolHttps', "HTTPS");
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	title: nls.localize('tunnelContext.privacyMenu', "Port Visibility"),
src/vs/workbench/contrib/remote/browser/tunnelView.ts:	title: nls.localize('tunnelContext.protocolMenu', "Change Port Protocol"),
src/vs/workbench/contrib/remote/browser/tunnelView.ts:}, nls.localize('portWithRunningProcess.foreground', "The color of the icon for a port that has an associated running process."));
src/vs/workbench/contrib/remote/browser/tunnelFactory.ts:						label: nls.localize('tunnelPrivacy.private', "Private"),
src/vs/workbench/contrib/remote/browser/tunnelFactory.ts:						label: nls.localize('tunnelPrivacy.public', "Public"),
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:const timelineViewIcon = registerIcon('timeline-view-icon', Codicon.history, localize('timelineViewIcon', 'View icon of the timeline view.'));
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:const timelineOpenIcon = registerIcon('timeline-open', Codicon.history, localize('timelineOpenIcon', 'Icon for the open timeline action.'));
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:	title: localize('timelineConfigurationTitle', "Timeline"),
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:			markdownDescription: localize('timeline.pageSize', "The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view."),
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:			description: localize('timeline.pageOnScroll', "Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list."),
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:	export const LABEL = localize('files.openTimeline', "Open Timeline");
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:const timelineFilter = registerIcon('timeline-filter', Codicon.filter, localize('timelineFilter', 'Icon for the filter timeline action.'));
src/vs/workbench/contrib/timeline/browser/timeline.contribution.ts:	title: localize('filterTimeline', "Filter Timeline"),
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree.ts:		return localize('tree.aria', "Type Hierarchy");
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree.ts:			return localize('supertypes', "supertypes of {0}", element.item.name);
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyTree.ts:			return localize('subtypes', "subtypes of {0}", element.item.name);
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts:			? localize('supertypes', "Supertypes of '{0}'", element.model.root.name)
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts:			: localize('subtypes', "Subtypes of '{0}'", element.model.root.name);
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts:		this.setTitle(localize('title.loading', "Loading..."));
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts:				? localize('empt.supertypes', "No supertypes of '{0}'", model.root.name)
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchyPeek.ts:				: localize('empt.subtypes', "No subtypes of '{0}'", model.root.name));
src/vs/workbench/contrib/update/browser/releaseNotesEditor.ts:		const title = nls.localize('releaseNotesInputName', "Release Notes: {0}", version);
src/vs/workbench/contrib/update/browser/releaseNotesEditor.ts:		const unassigned = nls.localize('unassigned', "unassigned");
src/vs/workbench/contrib/update/browser/update.contribution.ts:				value: localize('showReleaseNotes', "Show Release Notes"),
src/vs/workbench/contrib/update/browser/update.contribution.ts:				mnemonicTitle: localize('mshowReleaseNotes', "Show &&Release Notes"),
src/vs/workbench/contrib/update/browser/update.contribution.ts:				throw new Error(localize('update.noReleaseNotesOnline', "This version of {0} does not have release notes online", productService.nameLong));
src/vs/workbench/contrib/update/browser/update.contribution.ts:			title: { value: localize('checkForUpdates', "Check for Updates..."), original: 'Check for Updates...' },
src/vs/workbench/contrib/update/browser/update.contribution.ts:			title: { value: localize('downloadUpdate', "Download Update"), original: 'Download Update' },
src/vs/workbench/contrib/update/browser/update.contribution.ts:			title: { value: localize('installUpdate', "Install Update"), original: 'Install Update' },
src/vs/workbench/contrib/update/browser/update.contribution.ts:			title: { value: localize('restartToUpdate', "Restart to Update"), original: 'Restart to Update' },
src/vs/workbench/contrib/update/browser/update.contribution.ts:				value: localize('openDownloadPage', "Download {0}", product.nameLong),
src/vs/workbench/contrib/update/browser/update.contribution.ts:				title: { value: localize('applyUpdate', "Apply Update..."), original: 'Apply Update...' },
src/vs/workbench/contrib/update/browser/update.contribution.ts:				title: localize('pickUpdate', "Apply Update"),
src/vs/workbench/contrib/update/browser/update.contribution.ts:				openLabel: mnemonicButtonLabel(localize({ key: 'updateButton', comment: ['&& denotes a mnemonic'] }, "&&Update"))
src/vs/workbench/contrib/update/browser/update.ts:		throw new Error(nls.localize('update.noReleaseNotesOnline', "This version of {0} does not have release notes online", productService.nameLong));
src/vs/workbench/contrib/update/browser/update.ts:							nls.localize('read the release notes', "Welcome to {0} v{1}! Would you like to read the Release Notes?", productService.nameLong, productService.version),
src/vs/workbench/contrib/update/browser/update.ts:								label: nls.localize('releaseNotes', "Release Notes"),
src/vs/workbench/contrib/update/browser/update.ts:			badge = new NumberBadge(1, () => nls.localize('updateIsReady', "New {0} update available.", this.productService.nameShort));
src/vs/workbench/contrib/update/browser/update.ts:			badge = new ProgressBadge(() => nls.localize('checkingForUpdates', "Checking for Updates..."));
src/vs/workbench/contrib/update/browser/update.ts:			badge = new ProgressBadge(() => nls.localize('downloading', "Downloading..."));
src/vs/workbench/contrib/update/browser/update.ts:			badge = new ProgressBadge(() => nls.localize('updating', "Updating..."));
src/vs/workbench/contrib/update/browser/update.ts:			source: nls.localize('update service', "Update Service"),
src/vs/workbench/contrib/update/browser/update.ts:			nls.localize('noUpdatesAvailable', "There are currently no updates available.")
src/vs/workbench/contrib/update/browser/update.ts:			nls.localize('thereIsUpdateAvailable', "There is an available update."),
src/vs/workbench/contrib/update/browser/update.ts:				label: nls.localize('download update', "Download Update"),
src/vs/workbench/contrib/update/browser/update.ts:				label: nls.localize('later', "Later"),
src/vs/workbench/contrib/update/browser/update.ts:				label: nls.localize('releaseNotes', "Release Notes"),
src/vs/workbench/contrib/update/browser/update.ts:			nls.localize('updateAvailable', "There's an update available: {0} {1}", this.productService.nameLong, update.productVersion),
src/vs/workbench/contrib/update/browser/update.ts:				label: nls.localize('installUpdate', "Install Update"),
src/vs/workbench/contrib/update/browser/update.ts:				label: nls.localize('later', "Later"),
src/vs/workbench/contrib/update/browser/update.ts:				label: nls.localize('releaseNotes', "Release Notes"),
src/vs/workbench/contrib/update/browser/update.ts:			label: nls.localize('updateNow', "Update Now"),
src/vs/workbench/contrib/update/browser/update.ts:			label: nls.localize('later', "Later"),
src/vs/workbench/contrib/update/browser/update.ts:				label: nls.localize('releaseNotes', "Release Notes"),
src/vs/workbench/contrib/update/browser/update.ts:			nls.localize('updateAvailableAfterRestart', "Restart {0} to apply the latest update.", this.productService.nameLong),
src/vs/workbench/contrib/update/browser/update.ts:				title: nls.localize('checkForUpdates', "Check for Updates...")
src/vs/workbench/contrib/update/browser/update.ts:				title: nls.localize('checkingForUpdates', "Checking for Updates..."),
src/vs/workbench/contrib/update/browser/update.ts:				title: nls.localize('download update_1', "Download Update (1)")
src/vs/workbench/contrib/update/browser/update.ts:				title: nls.localize('DownloadingUpdate', "Downloading Update..."),
src/vs/workbench/contrib/update/browser/update.ts:				title: nls.localize('installUpdate...', "Install Update... (1)")
src/vs/workbench/contrib/update/browser/update.ts:				title: nls.localize('installingUpdate', "Installing Update..."),
src/vs/workbench/contrib/update/browser/update.ts:				title: nls.localize('restartToUpdate', "Restart to Update (1)")
src/vs/workbench/contrib/update/browser/update.ts:						title: isSwitchingToInsiders ? nls.localize('switchToInsiders', "Switch to Insiders Version...") : nls.localize('switchToStable', "Switch to Stable Version..."),
src/vs/workbench/contrib/update/browser/update.ts:							message: nls.localize('relaunchMessage', "Changing the version requires a reload to take effect"),
src/vs/workbench/contrib/update/browser/update.ts:								nls.localize('relaunchDetailInsiders', "Press the reload button to switch to the Insiders version of VS Code.") :
src/vs/workbench/contrib/update/browser/update.ts:								nls.localize('relaunchDetailStable', "Press the reload button to switch to the Stable version of VS Code."),
src/vs/workbench/contrib/update/browser/update.ts:							primaryButton: nls.localize('reload', "&&Reload")
src/vs/workbench/contrib/update/browser/update.ts:						nls.localize('selectSyncService.message', "Choose the settings sync service to use after changing the version"),
src/vs/workbench/contrib/update/browser/update.ts:							nls.localize('use insiders', "Insiders"),
src/vs/workbench/contrib/update/browser/update.ts:							nls.localize('use stable', "Stable (current)"),
src/vs/workbench/contrib/update/browser/update.ts:							nls.localize('cancel', "Cancel"),
src/vs/workbench/contrib/update/browser/update.ts:							detail: nls.localize('selectSyncService.detail', "The Insiders version of VS Code will synchronize your settings, keybindings, extensions, snippets and UI State using separate insiders settings sync service by default."),
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:		return this.loading ? localize('timeline.loadingMore', "Loading...") : localize('timeline.loadMore', "Load more");
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:	static readonly TITLE = localize('timeline', "Timeline");
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:			this.message = localize('timeline.editorCannotProvideTimeline', "The active editor cannot provide timeline information.");
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:				this.message = localize('timeline.noTimelineInfo', "No timeline information was provided.");
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:		this.message = localize('timeline.editorCannotProvideTimeline', "The active editor cannot provide timeline information.");
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:					return element.accessibilityInformation ? element.accessibilityInformation.label : localize('timeline.aria.item', "{0}: {1}", element.relativeTimeFullWord ?? '', element.label);
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:					return localize('timeline', "Timeline");
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:		this.message = file ? localize('timeline.loading', "Loading timeline for {0}...", file) : '';
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:const timelineRefresh = registerIcon('timeline-refresh', Codicon.refresh, localize('timelineRefresh', 'Icon for the refresh timeline action.'));
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:const timelinePin = registerIcon('timeline-pin', Codicon.pin, localize('timelinePin', 'Icon for the pin timeline action.'));
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:const timelineUnpin = registerIcon('timeline-unpin', Codicon.pinned, localize('timelineUnpin', 'Icon for the unpin timeline action.'));
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:					title: { value: localize('refresh', "Refresh"), original: 'Refresh' },
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:					category: { value: localize('timeline', "Timeline"), original: 'Timeline' },
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:				title: { value: localize('timeline.toggleFollowActiveEditorCommand.follow', "Pin the Current Timeline"), original: 'Pin the Current Timeline' },
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:				category: { value: localize('timeline', "Timeline"), original: 'Timeline' },
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:				title: { value: localize('timeline.toggleFollowActiveEditorCommand.unfollow', "Unpin the Current Timeline"), original: 'Unpin the Current Timeline' },
src/vs/workbench/contrib/timeline/browser/timelinePane.ts:				category: { value: localize('timeline', "Timeline"), original: 'Timeline' },
src/vs/workbench/contrib/workspace/common/workspace.ts:	IsEnabled: new RawContextKey<boolean>('isWorkspaceTrustEnabled', false, localize('workspaceTrustEnabledCtx', "Whether the workspace trust feature is enabled.")),
src/vs/workbench/contrib/workspace/common/workspace.ts:	IsTrusted: new RawContextKey<boolean>('isWorkspaceTrusted', false, localize('workspaceTrustedCtx', "Whether the current workspace has been trusted by the user."))
src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts:			this.notificationService.prompt(Severity.Info, localize('workspaceFound', "This folder contains a workspace file '{0}'. Do you want to open it? [Learn more]({1}) about workspace files.", workspaceFile, 'https://go.microsoft.com/fwlink/?linkid=2025315'), [{
src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts:				label: localize('openWorkspace', "Open Workspace"),
src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts:			this.notificationService.prompt(Severity.Info, localize('workspacesFound', "This folder contains multiple workspace files. Do you want to open one? [Learn more]({0}) about workspace files.", 'https://go.microsoft.com/fwlink/?linkid=2025315'), [{
src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts:				label: localize('selectWorkspace', "Select Workspace"),
src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts:						{ placeHolder: localize('selectToOpen', "Select a workspace to open") }).then(pick => {
src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts:			title: { original: 'Open Workspace', value: localize('openWorkspace', "Open Workspace") },
src/vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts:				notificationService.info(localize('alreadyOpen', "This workspace is already open."));
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('openLooseFileWorkspaceDetails', "You are trying to open untrusted files in a workspace which is trusted.") :
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('openLooseFileWindowDetails', "You are trying to open untrusted files in a window which is trusted."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				localize('openLooseFileLearnMore', "If you don't trust the authors of these files, we recommend to open them in Restricted Mode in a new window as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.")
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				localize('openLooseFileMesssage', "Do you trust the authors of these files?"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				[localize('open', "Open"), localize('newWindow', "Open in Restricted Mode"), localize('cancel', "Cancel")],
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:						label: localize('openLooseFileWorkspaceCheckbox', "Remember my decision for all workspaces"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				localize('workspaceTrust', "Do you trust the authors of the files in this workspace?") :
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				localize('folderTrust', "Do you trust the authors of the files in this folder?");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:			const defaultMessage = localize('immediateTrustRequestMessage', "A feature you are trying to use may be a security risk if you do not trust the source of the files or folders you currently have open.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				{ label: this.useWorkspaceLanguage ? localize('grantWorkspaceTrustButton', "Trust Workspace & Continue") : localize('grantFolderTrustButton', "Trust Folder & Continue"), type: 'ContinueWithTrust' },
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				{ label: localize('manageWorkspaceTrustButton', "Manage"), type: 'Manage' }
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				buttons.push({ label: localize('cancelWorkspaceTrustButton', "Cancel"), type: 'Cancel' });
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:							{ markdown: new MarkdownString(localize('immediateTrustRequestLearnMore', "If you don't trust the authors of these files, we do not recommend continuing as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.")) }
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:							localize('addWorkspaceFolderMessage', "Do you trust the authors of the files in this folder?"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:							[localize('yes', 'Yes'), localize('no', 'No')],
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:								detail: localize('addWorkspaceFolderDetail', "You are adding files that are not currently trusted to a trusted workspace. Do you trust the authors of these new files?"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				localize('workspaceTrust', "Do you trust the authors of the files in this workspace?") :
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				localize('folderTrust', "Do you trust the authors of the files in this folder?");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				checkboxText = localize('checkboxString', "Trust the authors of all files in the parent folder '{0}'", name);
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				{ label: localize('trustOption', "Yes, I trust the authors"), sublabel: isSingleFolderWorkspace ? localize('trustFolderOptionDescription', "Trust folder and enable all features") : localize('trustWorkspaceOptionDescription', "Trust workspace and enable all features") },
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				{ label: localize('dontTrustOption', "No, I don't trust the authors"), sublabel: isSingleFolderWorkspace ? localize('dontTrustFolderOptionDescription', "Browse folder in restricted mode") : localize('dontTrustWorkspaceOptionDescription', "Browse workspace in restricted mode") },
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:						localize('workspaceStartupTrustDetails', "{0} provides features that may automatically execute files in this workspace.", this.productService.nameShort) :
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:						localize('folderStartupTrustDetails', "{0} provides features that may automatically execute files in this folder.", this.productService.nameShort),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('startupTrustRequestLearnMore', "If you don't trust the authors of these files, we recommend to continue in restricted mode as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					label: localize('restrictedModeBannerManage', "Manage"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					label: localize('restrictedModeBannerLearnMore', "Learn More"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				return localize('restrictedModeBannerAriaLabelWindow', "Restricted Mode is intended for safe code browsing. Trust this window to enable all features. Use navigation keys to access banner actions.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				return localize('restrictedModeBannerAriaLabelFolder', "Restricted Mode is intended for safe code browsing. Trust this folder to enable all features. Use navigation keys to access banner actions.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				return localize('restrictedModeBannerAriaLabelWorkspace', "Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features. Use navigation keys to access banner actions.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				return localize('restrictedModeBannerMessageWindow', "Restricted Mode is intended for safe code browsing. Trust this window to enable all features.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				return localize('restrictedModeBannerMessageFolder', "Restricted Mode is intended for safe code browsing. Trust this folder to enable all features.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				return localize('restrictedModeBannerMessageWorkspace', "Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				ariaLabel = trusted ? localize('status.ariaTrustedWindow', "This window is trusted.") :
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('status.ariaUntrustedWindow', "Restricted Mode: Some features are disabled because this window is not trusted.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					value: localize(
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				ariaLabel = trusted ? localize('status.ariaTrustedFolder', "This folder is trusted.") :
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('status.ariaUntrustedFolder', "Restricted Mode: Some features are disabled because this folder is not trusted.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					value: localize(
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				ariaLabel = trusted ? localize('status.ariaTrustedWorkspace', "This workspace is trusted.") :
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('status.ariaUntrustedWorkspace', "Restricted Mode: Some features are disabled because this workspace is not trusted.");
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					value: localize(
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:			name: localize('status.WorkspaceTrust', "Workspace Trust"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:		localize('workspaceTrustEditor', "Workspace Trust Editor")
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:const WORKSPACES_CATEGORY = { value: localize('workspacesCategory', "Workspaces"), original: 'Workspaces' };
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:			title: { original: 'Configure Workspace Trust', value: localize('configureWorkspaceTrust', "Configure Workspace Trust") },
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:			title: { original: 'Manage Workspace Trust', value: localize('manageWorkspaceTrust', "Manage Workspace Trust") },
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:		title: localize('securityConfigurationTitle', "Security"),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				description: localize('workspace.trust.description', "Controls whether or not workspace trust is enabled within VS Code."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				description: localize('workspace.trust.startupPrompt.description', "Controls when the startup prompt to trust a workspace is shown."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.startupPrompt.always', "Ask for trust every time an untrusted workspace is opened."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.startupPrompt.once', "Ask for trust the first time an untrusted workspace is opened."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.startupPrompt.never', "Do not ask for trust when an untrusted workspace is opened."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				description: localize('workspace.trust.banner.description', "Controls when the restricted mode banner is shown."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.banner.always', "Show the banner every time an untrusted workspace is open."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.banner.untilDismissed', "Show the banner when an untrusted workspace is opened until dismissed."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.banner.never', "Do not show the banner when an untrusted workspace is open."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				markdownDescription: localize('workspace.trust.untrustedFiles.description', "Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `#{0}#`.", WORKSPACE_TRUST_EMPTY_WINDOW),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.untrustedFiles.prompt', "Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.untrustedFiles.open', "Always allow untrusted files to be introduced to a trusted workspace without prompting."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					localize('workspace.trust.untrustedFiles.newWindow', "Always open untrusted files in a separate window in restricted mode without prompting."),
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:				markdownDescription: localize('workspace.trust.emptyWindow.description', "Controls whether or not the empty window is trusted by default within VS Code. When used with `#{0}#`, you can enable the full functionality of VS Code without prompting in an empty window.", WORKSPACE_TRUST_UNTRUSTED_FILES),
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarPart.ts:			toAction({ id: ToggleSidebarPositionAction.ID, label: currentPositionRight ? localize('move second side bar left', "Move Secondary Side Bar Left") : localize('move second side bar right', "Move Secondary Side Bar Right"), run: () => this.commandService.executeCommand(ToggleSidebarPositionAction.ID) }),
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarPart.ts:			toAction({ id: ToggleAuxiliaryBarAction.ID, label: localize('hide second side bar', "Hide Secondary Side Bar"), run: () => this.commandService.executeCommand(ToggleAuxiliaryBarAction.ID) })
src/vs/workbench/contrib/welcomeWalkthrough/browser/editor/editorWalkThrough.ts:	name: localize('editorWalkThrough.title', "Editor Playground"),
src/vs/workbench/contrib/welcomeWalkthrough/browser/editor/editorWalkThrough.ts:	public static readonly LABEL = { value: localize('editorWalkThrough', "Interactive Editor Playground"), original: 'Interactive Editor Playground' };
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:		const category = { value: nls.localize('remote.category', "Remote"), original: 'Remote' };
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					title: { value: nls.localize('remote.showMenu', "Show Remote Menu"), original: 'Show Remote Menu' },
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:						title: { value: nls.localize('remote.close', "Close Remote Connection"), original: 'Close Remote Connection' },
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:						title: nls.localize({ key: 'miCloseRemote', comment: ['&& denotes a mnemonic'] }, "Close Re&&mote Connection")
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:						title: { value: nls.localize('remote.install', "Install Remote Development Extensions"), original: 'Install Remote Development Extensions' },
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					this.renderRemoteStatusIndicator(nls.localize('host.open', "Opening Remote..."), nls.localize('host.open', "Opening Remote..."), undefined, true /* progress */);
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					this.renderRemoteStatusIndicator(`${nls.localize('host.reconnecting', "Reconnecting to {0}...", truncate(hostLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH))}`, undefined, undefined, true);
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					this.renderRemoteStatusIndicator(`$(alert) ${nls.localize('disconnectedFrom', "Disconnected from {0}", truncate(hostLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH))}`);
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:						tooltip.appendText(nls.localize({ key: 'host.tooltip', comment: ['{0} is a remote host name, e.g. Dev Container'] }, "Editing on {0}", hostLabel));
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					tooltip.appendText(nls.localize({ key: 'workspace.tooltip', comment: ['{0} is a remote workspace name, e.g. GitHub'] }, "Editing on {0}", workspaceLabel));
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					tooltip.appendMarkdown(nls.localize(
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:			this.renderRemoteStatusIndicator(`$(remote)`, nls.localize('noHost.tooltip', "Open a Remote Window"));
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:		const name = nls.localize('remoteHost', "Remote Host");
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:						label: nls.localize('closeRemoteConnection.title', 'Close Remote Connection')
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:							label: nls.localize('reloadWindow', 'Reload Window')
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:						label: nls.localize('closeVirtualWorkspace.title', 'Close Remote Workspace')
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					label: nls.localize('installRemotes', "Install Additional Remote Extensions..."),
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:		quickPick.placeholder = nls.localize('remoteActions', "Select an option to open a Remote Window");
src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThrough.contribution.ts:		localize('walkThrough.editor.label', "Playground"),
src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThrough.contribution.ts:		title: localize({ key: 'miPlayground', comment: ['&& denotes a mnemonic'] }, "Editor Playgrou&&nd")
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:			title: nls.localize('ports', "Ports"),
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:				badge: new NumberBadge(this.remoteExplorerService.tunnelModel.forwarded.size, n => n === 1 ? nls.localize('1forwardedPort', "1 forwarded port") : nls.localize('nForwardedPorts', "{0} forwarded ports", n))
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:			tooltip = nls.localize('remote.forwardedPorts.statusbarTextNone', "No Ports Forwarded");
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:			tooltip = nls.localize('remote.forwardedPorts.statusbarTooltip', "Forwarded Ports: {0}",
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:			name: nls.localize('status.forwardedPorts', "Forwarded Ports"),
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:		return nls.localize('remote.tunnelsView.automaticForward', "Your application running on port {0} is available.  ",
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:		return nls.localize(
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:			message += nls.localize('remote.tunnelsView.elevationMessage', "You'll need to run as superuser to use port {0} locally.  ", tunnel.tunnelRemotePort);
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:			label: nls.localize('remote.tunnelsView.elevationButton', "Use Port {0} as Sudo...", tunnel.tunnelRemotePort),
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:const _ctxHasTypeHierarchyProvider = new RawContextKey<boolean>('editorHasTypeHierarchyProvider', false, localize('editorHasTypeHierarchyProvider', 'Whether a type hierarchy provider is available'));
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:const _ctxTypeHierarchyVisible = new RawContextKey<boolean>('typeHierarchyVisible', false, localize('typeHierarchyVisible', 'Whether type hierarchy peek is currently showing'));
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:const _ctxTypeHierarchyDirection = new RawContextKey<string>('typeHierarchyDirection', undefined, { type: 'string', description: localize('typeHierarchyDirection', 'whether type hierarchy shows super types or subtypes') });
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:				this._widget!.showMessage(localize('no.item', "No results"));
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:			this._widget!.showMessage(localize('error', "Failed to show type hierarchy"));
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:			title: { value: localize('title', "Peek Type Hierarchy"), original: 'Peek Type Hierarchy' },
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:			title: { value: localize('title.supertypes', "Show Supertypes"), original: 'Show Supertypes' },
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:			title: { value: localize('title.subtypes', "Show Subtypes"), original: 'Show Subtypes' },
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:			title: { value: localize('title.refocusTypeHierarchy', "Refocus Type Hierarchy"), original: 'Refocus Type Hierarchy' },
src/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.ts:			title: localize('close', 'Close'),
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const getStartedIcon = registerIcon('remote-explorer-get-started', Codicon.star, nls.localize('getStartedIcon', 'Getting started icon in the remote explorer view.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const documentationIcon = registerIcon('remote-explorer-documentation', Codicon.book, nls.localize('documentationIcon', 'Documentation icon in the remote explorer view.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const feedbackIcon = registerIcon('remote-explorer-feedback', Codicon.twitter, nls.localize('feedbackIcon', 'Feedback icon in the remote explorer view.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const reviewIssuesIcon = registerIcon('remote-explorer-review-issues', Codicon.issues, nls.localize('reviewIssuesIcon', 'Review issue icon in the remote explorer view.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const reportIssuesIcon = registerIcon('remote-explorer-report-issues', Codicon.comment, nls.localize('reportIssuesIcon', 'Report issue icon in the remote explorer view.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const remoteExplorerViewIcon = registerIcon('remote-explorer-view-icon', Codicon.remoteExplorer, nls.localize('remoteExplorerViewIcon', 'View icon of the remote explorer view.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const portsViewIcon = registerIcon('ports-view-icon', Codicon.plug, nls.localize('portsViewIcon', 'View icon of the remote ports view.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const portIcon = registerIcon('ports-view-icon', Codicon.plug, nls.localize('portIcon', 'Icon representing a remote port.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const privatePortIcon = registerIcon('private-ports-view-icon', Codicon.lock, nls.localize('privatePortIcon', 'Icon representing a private remote port.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const forwardPortIcon = registerIcon('ports-forward-icon', Codicon.plus, nls.localize('forwardPortIcon', 'Icon for the forward action.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const stopForwardIcon = registerIcon('ports-stop-forward-icon', Codicon.x, nls.localize('stopForwardIcon', 'Icon for the stop forwarding action.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const openBrowserIcon = registerIcon('ports-open-browser-icon', Codicon.globe, nls.localize('openBrowserIcon', 'Icon for the open browser action.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const openPreviewIcon = registerIcon('ports-open-preview-icon', Codicon.openPreview, nls.localize('openPreviewIcon', 'Icon for the open preview action.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const copyAddressIcon = registerIcon('ports-copy-address-icon', Codicon.clippy, nls.localize('copyAddressIcon', 'Icon for the copy local address action.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const labelPortIcon = registerIcon('ports-label-icon', Codicon.tag, nls.localize('labelPortIcon', 'Icon for the label port action.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const forwardedPortWithoutProcessIcon = registerIcon('ports-forwarded-without-process-icon', Codicon.circleOutline, nls.localize('forwardedPortWithoutProcessIcon', 'Icon for forwarded ports that don\'t have a running process.'));
src/vs/workbench/contrib/remote/browser/remoteIcons.ts:export const forwardedPortWithProcessIcon = registerIcon('ports-forwarded-with-process-icon', Codicon.circleFilled, nls.localize('forwardedPortWithProcessIcon', 'Icon for forwarded ports that do have a running process.'));
src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart.ts:const UNBOUND_COMMAND = localize('walkThrough.unboundCommand', "unbound");
src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart.ts:			this.notificationService.info(localize('walkThrough.gitNotFound', "It looks like Git is not installed on your system."));
src/vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughPart.ts:const embeddedEditorBackground = registerColor('walkThrough.embeddedEditorBackground', { dark: null, light: null, hcDark: null, hcLight: null }, localize('walkThrough.embeddedEditorBackground', 'Background color for the embedded editors on the Interactive Playground.'));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:export const shieldIcon = registerIcon('workspace-trust-banner', Codicon.shield, localize('shieldIcon', 'Icon for workspace trust ion the banner.'));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:const checkListIcon = registerIcon('workspace-trust-editor-check', Codicon.check, localize('checkListIcon', 'Icon for the checkmark in the workspace trust editor.'));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:const xListIcon = registerIcon('workspace-trust-editor-cross', Codicon.x, localize('xListIcon', 'Icon for the cross in the workspace trust editor.'));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:const folderPickerIcon = registerIcon('workspace-trust-editor-folder-picker', Codicon.folder, localize('folderPickerIcon', 'Icon for the pick folder icon in the workspace trust editor.'));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:const editIcon = registerIcon('workspace-trust-editor-edit-folder', Codicon.edit, localize('editIcon', 'Icon for the edit folder icon in the workspace trust editor.'));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:const removeIcon = registerIcon('workspace-trust-editor-remove-folder', Codicon.close, localize('removeIcon', 'Icon for the remove folder icon in the workspace trust editor.'));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					label: localize('hostColumnLabel', "Host"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					label: localize('pathColumnLabel', "Path"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:							return localize('trustedFolderAriaLabel', "{0}, trusted", this.labelService.getUriLabel(item.uri));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:						return localize('trustedFolderWithHostAriaLabel', "{0} on {1}, trusted", this.labelService.getUriLabel(item.uri), hostLabel);
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					getWidgetAriaLabel: () => localize('trustedFoldersAndWorkspaces', "Trusted Folders & Workspaces")
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:		const addButton = this._register(buttonBar.addButton({ title: localize('addButton', "Add Folder") }));
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:		addButton.label = localize('addButton', "Add Folder");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				openLabel: localize('trustUri', "Trust Folder"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				title: localize('selectTrustedUri', "Select Folder To Trust")
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			localize('trustedFoldersDescription', "You trust the following folders, their subfolders, and workspace files.") :
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			localize('noTrustedFoldersDescriptions', "You haven't trusted any folders or workspace files yet.");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					content: localize('trustAll', "You will trust all repositories on {0}.", getHostLabel(this.labelService, item))
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					content: localize('trustOrg', "You will trust all repositories and forks under '{0}' on {1}.", segments[0], getHostLabel(this.labelService, item))
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					content: localize('invalidTrust', "You cannot trust individual folders within a repository.", path)
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				openLabel: localize('trustUri', "Trust Folder"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				title: localize('selectTrustedUri', "Select Folder To Trust")
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			tooltip: localize('editTrustedUri', "Edit Path"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			tooltip: localize('pickerTrustedUri', "Open File Picker"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			tooltip: localize('deleteTrustedUri', "Delete Path"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:	return item.uri.authority ? labelService.getHostLabel(item.uri.scheme, item.uri.authority) : localize('localAuthority', "Local");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				return localize('trustedUnsettableWindow', "This window is trusted");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					return localize('trustedHeaderWindow', "You trust this window");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					return localize('trustedHeaderFolder', "You trust this folder");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					return localize('trustedHeaderWorkspace', "You trust this workspace");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:		return localize('untrustedHeader', "You are in Restricted Mode");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				title = trusted ? localize('trustedWindow', "In a Trusted Window") : localize('untrustedWorkspace', "In Restricted Mode");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				subTitle = trusted ? localize('trustedWindowSubtitle', "You trust the authors of the files in the current window. All features are enabled:") :
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					localize('untrustedWindowSubtitle', "You do not trust the authors of the files in the current window. The following features are disabled:");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				title = trusted ? localize('trustedFolder', "In a Trusted Folder") : localize('untrustedWorkspace', "In Restricted Mode");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				subTitle = trusted ? localize('trustedFolderSubtitle', "You trust the authors of the files in the current folder. All features are enabled:") :
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					localize('untrustedFolderSubtitle', "You do not trust the authors of the files in the current folder. The following features are disabled:");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				title = trusted ? localize('trustedWorkspace', "In a Trusted Workspace") : localize('untrustedWorkspace', "In Restricted Mode");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				subTitle = trusted ? localize('trustedWorkspaceSubtitle', "You trust the authors of the files in the current workspace. All features are enabled:") :
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:					localize('untrustedWorkspaceSubtitle', "You do not trust the authors of the files in the current workspace. The following features are disabled:");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			localize('trustedDescription', "All features are enabled because trust has been granted to the workspace.") :
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			localize('untrustedDescription', "{0} is in a restricted mode intended for safe code browsing.", this.productService.nameShort);
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:		const headerDescriptionActionsText = localize({ key: 'workspaceTrustEditorHeaderActions', comment: ['Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)'] }, "[Configure your settings]({0}) or [learn more](https://aka.ms/vscode-workspace-trust).", `command:workbench.trust.configure`);
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:		this.rootElement.setAttribute('aria-label', `${localize('root element label', "Manage Workspace Trust")}:  ${this.headerContainer.innerText}`);
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:		configurationTitle.innerText = localize('trustedFoldersAndWorkspaces', "Trusted Folders & Workspaces");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('trustedTasks', "Tasks are allowed to run"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('trustedDebugging', "Debugging is enabled"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('trustedExtensions', "All extensions are enabled")
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('trustedTasks', "Tasks are allowed to run"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('trustedDebugging', "Debugging is enabled"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('trustedSettings', "All workspace settings are applied"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('trustedExtensions', "All extensions are enabled")
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('untrustedTasks', "Tasks are not allowed to run"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('untrustedDebugging', "Debugging is disabled"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				fixBadLocalizedLinks(localize({ key: 'untrustedExtensions', comment: ['Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)'] }, "[{0} extensions]({1}) are disabled or have limited functionality", numExtensions, `command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`))
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('untrustedTasks', "Tasks are not allowed to run"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				localize('untrustedDebugging', "Debugging is disabled"),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				fixBadLocalizedLinks(numSettings ? localize({ key: 'untrustedSettings', comment: ['Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)'] }, "[{0} workspace settings]({1}) are not applied", numSettings, 'command:settings.filterUntrusted') : localize('no untrustedSettings', "Workspace settings requiring trust are not applied")),
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:				fixBadLocalizedLinks(localize({ key: 'untrustedExtensions', comment: ['Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)'] }, "[{0} extensions]({1}) are disabled or have limited functionality", numExtensions, `command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`))
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			new Action('workspace.trust.button.action.grant', localize('trustButton', "Trust"), undefined, true, async () => {
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			trustMessageElement.innerText = localize('trustMessage', "Trust the authors of all files in the current folder or its parent '{0}'.", name);
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			trustActions.push(new Action('workspace.trust.button.action.grantParent', localize('trustParentButton', "Trust Parent"), undefined, true, async () => {
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:		this.createButtonRow(parent, new Action('workspace.trust.button.action.deny', localize('dontTrustButton', "Don't Trust"), undefined, true, async () => {
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			textElement.innerText = this.workspaceService.getWorkbenchState() === WorkbenchState.WORKSPACE ? localize('untrustedWorkspaceReason', "This workspace is trusted via the bolded entries in the trusted folders below.") : localize('untrustedFolderReason', "This folder is trusted via the bolded entries in the the trusted folders below.");
src/vs/workbench/contrib/workspace/browser/workspaceTrustEditor.ts:			textElement.innerText = localize('trustedForcedReason', "This window is trusted by nature of the workspace that is opened.");
src/vs/workbench/contrib/remote/browser/remote.ts:		description: nls.localize('RemoteHelpInformationExtPoint', 'Contributes help information for Remote'),
src/vs/workbench/contrib/remote/browser/remote.ts:				description: nls.localize('RemoteHelpInformationExtPoint.getStarted', "The url, or a command that returns the url, to your project's Getting Started page"),
src/vs/workbench/contrib/remote/browser/remote.ts:				description: nls.localize('RemoteHelpInformationExtPoint.documentation', "The url, or a command that returns the url, to your project's documentation page"),
src/vs/workbench/contrib/remote/browser/remote.ts:				description: nls.localize('RemoteHelpInformationExtPoint.feedback', "The url, or a command that returns the url, to your project's feedback reporter"),
src/vs/workbench/contrib/remote/browser/remote.ts:				description: nls.localize('RemoteHelpInformationExtPoint.issues', "The url, or a command that returns the url, to your project's issues list"),
src/vs/workbench/contrib/remote/browser/remote.ts:				nls.localize('remote.help.getStarted', "Get Started"),
src/vs/workbench/contrib/remote/browser/remote.ts:				nls.localize('remote.help.documentation', "Read Documentation"),
src/vs/workbench/contrib/remote/browser/remote.ts:				nls.localize('remote.help.feedback', "Provide Feedback"),
src/vs/workbench/contrib/remote/browser/remote.ts:				nls.localize('remote.help.issues', "Review Issues"),
src/vs/workbench/contrib/remote/browser/remote.ts:				nls.localize('remote.help.report', "Report Issue"),
src/vs/workbench/contrib/remote/browser/remote.ts:				const action = await this.quickInputService.pick(actions, { placeHolder: nls.localize('pickRemoteExtension', "Select url to open") });
src/vs/workbench/contrib/remote/browser/remote.ts:	static readonly TITLE = nls.localize('remote.help', "Help and feedback");
src/vs/workbench/contrib/remote/browser/remote.ts:					getWidgetAriaLabel: () => nls.localize('remotehelp', "Remote Help")
src/vs/workbench/contrib/remote/browser/remote.ts:		const title = nls.localize('remote.explorer', "Remote Explorer");
src/vs/workbench/contrib/remote/browser/remote.ts:		title: { value: nls.localize('remote.explorer', "Remote Explorer"), original: 'Remote Explorer' },
src/vs/workbench/contrib/remote/browser/remote.ts:			this._parent.report(nls.localize('reconnectionWaitOne', "Attempting to reconnect in {0} second...", remainingTime));
src/vs/workbench/contrib/remote/browser/remote.ts:			this._parent.report(nls.localize('reconnectionWaitMany', "Attempting to reconnect in {0} seconds...", remainingTime));
src/vs/workbench/contrib/remote/browser/remote.ts:				label: nls.localize('reconnectNow', "Reconnect Now"),
src/vs/workbench/contrib/remote/browser/remote.ts:				label: nls.localize('reloadWindow', "Reload Window"),
src/vs/workbench/contrib/remote/browser/remote.ts:							visibleProgress.report(nls.localize('connectionLost', "Connection Lost"));
src/vs/workbench/contrib/remote/browser/remote.ts:							visibleProgress.report(nls.localize('reconnectionRunning', "Disconnected. Attempting to reconnect..."));
src/vs/workbench/contrib/remote/browser/remote.ts:							dialogService.show(Severity.Error, nls.localize('reconnectionPermanentFailure', "Cannot reconnect. Please reload the window."), [nls.localize('reloadWindow', "Reload Window"), nls.localize('cancel', "Cancel")], { cancelId: 1, custom: true }).then(result => {
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeContribution.ts:			contribution.collector.warn(nls.localize('ViewsWelcomeExtensionPoint.proposedAPI', "The viewsWelcome contribution in '{0}' requires 'enabledApiProposals: [\"contribViewsWelcome\"]' in order to use the 'group' proposed property.", contribution.description.identifier.value));
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:	description: nls.localize('contributes.viewsWelcome', "Contributed views welcome content. Welcome content will be rendered in tree based views whenever they have no meaningful content to display, ie. the File Explorer when no folder is open. Such content is useful as in-product documentation to drive users to use certain features before they are available. A good example would be a `Clone Repository` button in the File Explorer welcome view."),
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:		description: nls.localize('contributes.viewsWelcome.view', "Contributed welcome content for a specific view."),
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:						description: nls.localize('contributes.viewsWelcome.view.view', "Target view identifier for this welcome content. Only tree based views are supported.")
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:						description: nls.localize('contributes.viewsWelcome.view.view', "Target view identifier for this welcome content. Only tree based views are supported."),
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:				description: nls.localize('contributes.viewsWelcome.view.contents', "Welcome content to be displayed. The format of the contents is a subset of Markdown, with support for links only."),
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:				description: nls.localize('contributes.viewsWelcome.view.when', "Condition when the welcome content should be displayed."),
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:				description: nls.localize('contributes.viewsWelcome.view.group', "Group to which this welcome content belongs. Proposed API."),
src/vs/workbench/contrib/welcomeViews/common/viewsWelcomeExtensionPoint.ts:				description: nls.localize('contributes.viewsWelcome.view.enablement', "Condition when the welcome content buttons and command links should be enabled."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				'aria-label': localize('welcomeAriaLabel', "Overview of how to get up to speed with your editor.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:			})), { canPickMany: false, matchOnDescription: true, matchOnDetail: true, title: localize('pickWalkthroughs', "Open Walkthrough...") });
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:		const prevButton = $('button.prev-button.button-link', { 'x-dispatch': 'scrollPrev' }, $('span.scroll-button.codicon.codicon-chevron-left'), $('span.moreText', {}, localize('getStarted', "Get Started")));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:			title: localize('checkboxTitle', "When checked, this page will be shown on startup."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:		const showOnStartupLabel = $('label.caption', { for: 'showOnStartup' }, localize('welcomePage.showOnStartup', "Show welcome page on startup"));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:			$('p.subtitle.description', {}, localize({ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Editing evolved"))
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:			link.setAttribute('aria-label', localize('welcomePage.openFolderWithPath', "Open folder {0} with path {1}", name, parentPath));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				title: localize('recent', "Recent"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:					localize('noRecents', "You have no recent folders,"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:					$('button.button-link', { 'x-dispatch': 'openFolder' }, localize('openFolder', "open a folder")),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:					localize('toStart', "to start.")),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:							title: localize('show more recents', "Show All Recent Folders {0}", this.getKeybindingLabel(OpenRecentAction.ID))
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:						}, localize('showAll', "More..."))),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				title: localize('start', "Start"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				reset(newBadge, $('.new-category', {}, localize('new', "New")));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				reset(newBadge, $('.new-items', {}, localize({ key: 'newItems', comment: ['Shown when a list of items has changed based on an update from a remote source'] }, "Updated")));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:						'title': localize('close', "Hide"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:						'aria-label': localize('closeAriaLabel', "Hide"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				title: localize('walkthroughs', "Walkthroughs"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				footer: $('span.button-link.see-all-walkthroughs', { 'x-dispatch': 'seeAllWalkthroughs', 'tabindex': 0 }, localize('showAll', "More...")),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				bar.title = localize('gettingStarted.allStepsComplete', "All {0} steps complete!", stats.stepsComplete);
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				bar.title = localize('gettingStarted.someStepsComplete', "{0} of {1} steps complete", stats.stepsComplete, stats.stepsTotal);
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:						container.appendChild($('span.shortcut-message', {}, localize('gettingStarted.keyboardTip', 'Tip: Use keyboard shortcut '), $('span.keybinding', {}, keybindingLabel)));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:							$('.image-description', { 'aria-label': localize('imageShowing', "Image showing {0}", step.media.altText) }),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:				$('button.button-link.all-done', { 'x-dispatch': 'allDone' }, $('span.codicon.codicon-check-all'), localize('allDone', "Mark Done")),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:					? [$('button.button-link.next', { 'x-dispatch': 'nextSection' }, localize('nextOne', "Next Section"), $('span.codicon.codicon-arrow-small-right'))]
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:		const privacyStatementCopy = localize('privacy statement', "privacy statement");
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:		const optOutCopy = localize('optOut', "opt out");
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:		const text = localize({ key: 'footer', comment: ['fist substitution is "vs code", second is "privacy statement", third is "opt out".'] },
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:const builtInSource = localize('Built-In', "Built-In");
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:const category: ILocalizedString = { value: localize('Create', "Create"), original: 'Create' };
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:			title: { value: localize('welcome.newFile', "New File..."), original: 'New File...' },
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:		qp.title = localize('newFileTitle', "New File...");
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:		qp.placeholder = localize('newFilePlaceholder', "Select File Type or Enter File Name...");
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:			'file': localize('file', "File"),
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:			'notebook': localize('notebook', "Notebook"),
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:								tooltip: localize('change keybinding', "Configure Keybinding")
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:				title: localize('miNewFileWithName', "Create New File ({0})", val),
src/vs/workbench/contrib/welcomeViews/common/newFile.contribution.ts:		title: localize('miNewFile2', "Text File")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedInput.ts:		return localize('getStarted', "Get Started");
src/vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker.ts:		${escape(localize('light', "Light"))}
src/vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker.ts:		${escape(localize('dark', "Dark"))}
src/vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker.ts:		${escape(localize('HighContrast', "Dark High Contrast"))}
src/vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker.ts:		${escape(localize('HighContrastLight', "Light High Contrast"))}
src/vs/workbench/contrib/welcomeGettingStarted/common/media/theme_picker.ts:	${escape(localize('seeMore', "See More Themes..."))}
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts:const BUILT_IN_SOURCE = localize('builtin', "Built-In");
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts:			category: { original: 'Developer', value: localize('developer', "Developer") },
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService.ts:			title: { original: 'Reset Welcome Page Walkthrough Progress', value: localize('resetWelcomePageWalkthroughProgress', "Reset Welcome Page Walkthrough Progress") },
src/vs/workbench/contrib/welcomeGettingStarted/common/media/notebookProfile.ts:		${escape(localize('default', "Default"))}
src/vs/workbench/contrib/welcomeGettingStarted/common/media/notebookProfile.ts:		${escape(localize('jupyter', "Jupyter"))}
src/vs/workbench/contrib/welcomeGettingStarted/common/media/notebookProfile.ts:		${escape(localize('colab', "Colab"))}
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:const setupIcon = registerIcon('getting-started-setup', Codicon.zap, localize('getting-started-setup-icon', "Icon used for the setup category of welcome page"));
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:const beginnerIcon = registerIcon('getting-started-beginner', Codicon.lightbulb, localize('getting-started-beginner-icon', "Icon used for the beginner category of welcome page"));
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:const intermediateIcon = registerIcon('getting-started-intermediate', Codicon.mortarBoard, localize('getting-started-intermediate-icon', "Icon used for the intermediate category of welcome page"));
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.newFile.title', "New File..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.newFile.description', "Open a new untitled file, notebook, or custom editor."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:	// 	title: localize('gettingStarted.newFolder.title', "New Folder..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:	// 	description: localize('gettingStarted.newFolder.description', "Create a folder from a Git repo or an extension contributed template folder"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.openMac.title', "Open..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.openMac.description', "Open a file or folder to start working"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.openFile.title', "Open File..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.openFile.description', "Open a file to start working"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.openFolder.title', "Open Folder..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.openFolder.description', "Open a folder to start working"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.openFolder.title', "Open Folder..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.openFolder.description', "Open a folder to start working"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.topLevelGitClone.title', "Clone Git Repository..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.topLevelGitClone.description', "Clone a remote repository to a local folder"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.topLevelGitOpen.title', "Open Repository..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.topLevelGitOpen.description', "Connect to a remote repository or pull request to browse, search, edit, and commit"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.topLevelShowWalkthroughs.title', "Open a Walkthrough..."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.topLevelShowWalkthroughs.description', "View a walkthrough on the editor or an extension"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.topLevelVideoTutorials.title', "Watch Video Tutorials"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.topLevelVideoTutorials.description', "Watch our series of short & practical video tutorials for VS Code's key features."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.topLevelVideoTutorials.title', "Watch Video Tutorials"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.topLevelVideoTutorials.description', "Watch our series of short & practical video tutorials for VS Code's key features."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.setup.title', "Get Started with VS Code"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.setup.description', "Discover the best customizations to make VS Code yours."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.pickColor.title', "Choose the look you want"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.pickColor.description.interpolated', "The right color palette helps you focus on your code, is easy on your eyes, and is simply more fun to use.\n{0}", Button(localize('titleID', "Browse Color Themes"), 'command:workbench.action.selectTheme')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.settingsSync.title', "Sync to and from other devices"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.settingsSync.description.interpolated', "Keep your essential VS Code customizations backed up and updated across all your devices.\n{0}", Button(localize('enableSync', "Enable Settings Sync"), 'command:workbench.userDataSync.actions.turnOn')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.commandPalette.title', "One shortcut to access everything"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.commandPalette.description.interpolated', "Commands are the keyboard way to accomplish any task in VS Code. **Practice** by looking up your frequent ones to save time.\n{0}\n__Try searching for 'view toggle'.__", Button(localize('commandPalette', "Open Command Palette"), 'command:workbench.action.showCommands')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.extensions.title', "Limitless extensibility"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.extensionsWeb.description.interpolated', "Extensions are VS Code's power-ups. A growing number are becoming available in the web.\n{0}", Button(localize('browsePopular', "Browse Popular Web Extensions"), 'command:workbench.extensions.action.showPopularExtensions')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.findLanguageExts.title', "Rich support for all your languages"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.findLanguageExts.description.interpolated', "Code smarter with syntax highlighting, code completion, linting and debugging. While many languages are built-in, many more can be added as extensions.\n{0}", Button(localize('browseLangExts', "Browse Language Extensions"), 'command:workbench.extensions.action.showLanguageExtensions')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.setup.OpenFolder.title', "Open up your code"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.setup.OpenFolder.description.interpolated', "You're all set to start coding. Open a project folder to get your files into VS Code.\n{0}", Button(localize('pickFolder', "Pick a Folder"), 'command:workbench.action.files.openFileFolder')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.setup.OpenFolder.title', "Open up your code"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.setup.OpenFolder.description.interpolated', "You're all set to start coding. Open a project folder to get your files into VS Code.\n{0}", Button(localize('pickFolder', "Pick a Folder"), 'command:workbench.action.files.openFolder')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.quickOpen.title', "Quickly navigate between your files"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.quickOpen.description.interpolated', "Navigate between files in an instant with one keystroke. Tip: Open multiple files by pressing the right arrow key.\n{0}", Button(localize('quickOpen', "Quick Open a File"), 'command:toSide:workbench.action.quickOpen')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.setupWeb.title', "Get Started with VS Code in the Web"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.setupWeb.description', "Discover the best customizations to make VS Code in the Web yours."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.pickColor.title', "Choose the look you want"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.pickColor.description.interpolated', "The right color palette helps you focus on your code, is easy on your eyes, and is simply more fun to use.\n{0}", Button(localize('titleID', "Browse Color Themes"), 'command:workbench.action.selectTheme')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.settingsSync.title', "Sync to and from other devices"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.settingsSync.description.interpolated', "Keep your essential VS Code customizations backed up and updated across all your devices.\n{0}", Button(localize('enableSync', "Enable Settings Sync"), 'command:workbench.userDataSync.actions.turnOn')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.commandPalette.title', "One shortcut to access everything"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.commandPalette.description.interpolated', "Commands are the keyboard way to accomplish any task in VS Code. **Practice** by looking up your frequent ones to save time.\n{0}\n__Try searching for 'view toggle'.__", Button(localize('commandPalette', "Open Command Palette"), 'command:workbench.action.showCommands')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.menuBar.title', "Just the right amount of UI"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.menuBar.description.interpolated', "The full menu bar is available in the dropdown menu to make room for your code. Toggle its apperance for faster access. \n{0}", Button(localize('toggleMenuBar', "Toggle Menu Bar"), 'command:workbench.action.toggleMenuBar')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.extensions.title', "Limitless extensibility"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.extensionsWeb.description.interpolated', "Extensions are VS Code's power-ups. A growing number are becoming available in the web.\n{0}", Button(localize('browsePopular', "Browse Popular Web Extensions"), 'command:workbench.extensions.action.showPopularExtensions')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.findLanguageExts.title', "Rich support for all your languages"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.findLanguageExts.description.interpolated', "Code smarter with syntax highlighting, code completion, linting and debugging. While many languages are built-in, many more can be added as extensions.\n{0}", Button(localize('browseLangExts', "Browse Language Extensions"), 'command:workbench.extensions.action.showLanguageExtensions')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.setup.OpenFolder.title', "Open up your code"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.setup.OpenFolderWeb.description.interpolated', "You're all set to start coding. You can open a local project or a remote repository to get your files into VS Code.\n{0}\n{1}", Button(localize('openFolder', "Open Folder"), 'command:workbench.action.addRootFolder'), Button(localize('openRepository', "Open Repository"), 'command:remoteHub.openRepository')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.quickOpen.title', "Quickly navigate between your files"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.quickOpen.description.interpolated', "Navigate between files in an instant with one keystroke. Tip: Open multiple files by pressing the right arrow key.\n{0}", Button(localize('quickOpen', "Quick Open a File"), 'command:toSide:workbench.action.quickOpen')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.beginner.title', "Learn the Fundamentals"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.beginner.description', "Jump right into VS Code and get an overview of the must-have features."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.playground.title', "Redefine your editing skills"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.playground.description.interpolated', "Want to code faster and smarter? Practice powerful code editing features in the interactive playground.\n{0}", Button(localize('openEditorPlayground', "Open Editor Playground"), 'command:toSide:workbench.action.showInteractivePlayground')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.terminal.title', "Convenient built-in terminal"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.terminal.description.interpolated', "Quickly run shell commands and monitor build output, right next to your code.\n{0}", Button(localize('showTerminal', "Show Terminal Panel"), 'command:workbench.action.terminal.toggleTerminal')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.extensions.title', "Limitless extensibility"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.extensions.description.interpolated', "Extensions are VS Code's power-ups. They range from handy productivity hacks, expanding out-of-the-box features, to adding completely new capabilities.\n{0}", Button(localize('browseRecommended', "Browse Recommended Extensions"), 'command:workbench.extensions.action.showRecommendedExtensions')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.settings.title', "Tune your settings"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.settings.description.interpolated', "Tweak every aspect of VS Code and your extensions to your liking. Commonly used settings are listed first to get you started.\n{0}", Button(localize('tweakSettings', "Tweak my Settings"), 'command:toSide:workbench.action.openSettings')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.workspaceTrust.title', "Safely browse and edit code"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.workspaceTrust.description.interpolated', "{0} lets you decide whether your project folders should **allow or restrict** automatic code execution __(required for extensions, debugging, etc)__.\nOpening a file/folder will prompt to grant trust. You can always {1} later.", Button(localize('workspaceTrust', "Workspace Trust"), 'https://github.com/microsoft/vscode-docs/blob/workspaceTrust/docs/editor/workspace-trust.md'), Button(localize('enableTrust', "enable trust"), 'command:toSide:workbench.action.manageTrustedDomain')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.videoTutorial.title', "Lean back and learn"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.videoTutorial.description.interpolated', "Watch the first in a series of short & practical video tutorials for VS Code's key features.\n{0}", Button(localize('watch', "Watch Tutorial"), 'https://aka.ms/vscode-getting-started-video')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.intermediate.title', "Boost your Productivity"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		description: localize('gettingStarted.intermediate.description', "Optimize your development workflow with these tips & tricks."),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.splitview.title', "Side by side editing"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.splitview.description.interpolated', "Make the most of your screen estate by opening files side by side, vertically and horizontally.\n{0}", Button(localize('splitEditor', "Split Editor"), 'command:workbench.action.splitEditor')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.debug.title', "Watch your code in action"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.debug.description.interpolated', "Accelerate your edit, build, test, and debug loop by setting up a launch configuration.\n{0}", Button(localize('runProject', "Run your Project"), 'command:workbench.action.debug.selectandstart')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.scm.title', "Track your code with Git"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.scmClone.description.interpolated', "Set up the built-in version control for your project to track your changes and collaborate with others.\n{0}", Button(localize('cloneRepo', "Clone Repository"), 'command:git.clone')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.scm.title', "Track your code with Git"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.scmSetup.description.interpolated', "Set up the built-in version control for your project to track your changes and collaborate with others.\n{0}", Button(localize('initRepo', "Initialize Git Repository"), 'command:git.init')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.scm.title', "Track your code with Git"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.scm.description.interpolated', "No more looking up Git commands! Git and GitHub workflows are seamlessly integrated.\n{0}", Button(localize('openSCM', "Open Source Control"), 'command:workbench.view.scm')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.installGit.title', "Install Git"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.installGit.description.interpolated', "Install Git to track changes in your projects.\n{0}", Button(localize('installGit', "Install Git"), 'https://aka.ms/vscode-install-git')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.tasks.title', "Automate your project tasks"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.tasks.description.interpolated', "Create tasks for your common workflows and enjoy the integrated experience of running scripts and automatically checking results.\n{0}", Button(localize('runTasks', "Run Auto-detected Tasks"), 'command:workbench.action.tasks.runTask')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.shortcuts.title', "Customize your shortcuts"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.shortcuts.description.interpolated', "Once you have discovered your favorite commands, create custom keyboard shortcuts for instant access.\n{0}", Button(localize('keyboardShortcuts', "Keyboard Shortcuts"), 'command:toSide:workbench.action.openGlobalKeybindings')),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:		title: localize('gettingStarted.notebook.title', "Customize Notebooks"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					title: localize('gettingStarted.notebookProfile.title', "Select the layout for your notebooks"),
src/vs/workbench/contrib/welcomeGettingStarted/common/gettingStartedContent.ts:					description: localize('gettingStarted.notebookProfile.description', "Get notebooks to feel just the way you prefer"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedIcons.ts:export const gettingStartedUncheckedCodicon = registerIcon('getting-started-step-unchecked', Codicon.circleLargeOutline, localize('gettingStartedUnchecked', "Used to represent walkthrough steps which have not been completed"));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedIcons.ts:export const gettingStartedCheckedCodicon = registerIcon('getting-started-step-checked', Codicon.passFilled, localize('gettingStartedChecked', "Used to represent walkthrough steps which have been completed"));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:const titleTranslated = localize('title', "Title");
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:		description: localize('walkthroughs', "Contribute walkthroughs to help users getting started with your extension."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:					description: localize('walkthroughs.id', "Unique identifier for this walkthrough."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:					description: localize('walkthroughs.title', "Title of walkthrough.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:					description: localize('walkthroughs.icon', "Relative path to the icon of the walkthrough. The path is relative to the extension location. If not specified, the icon defaults to the extension icon if available."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:					description: localize('walkthroughs.description', "Description of walkthrough.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:					description: localize('walkthroughs.featuredFor', "Walkthroughs that match one of these glob patterns appear as 'featured' in workspaces with the specified files. For example, a walkthrough for TypeScript projects might specify `tsconfig.json` here."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:					description: localize('walkthroughs.when', "Context key expression to control the visibility of this walkthrough.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:					description: localize('walkthroughs.steps', "Steps to complete as part of this walkthrough."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								description: localize('walkthroughs.steps.id', "Unique identifier for this step. This is used to keep track of which steps have been completed."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								description: localize('walkthroughs.steps.title', "Title of step.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								description: localize('walkthroughs.steps.description.interpolated', "Description of step. Supports ``preformatted``, __italic__, and **bold** text. Use markdown-style links for commands or external links: {0}, {1}, or {2}. Links on their own line will be rendered as buttons.", `[${titleTranslated}](command:myext.command)`, `[${titleTranslated}](command:toSide:myext.command)`, `[${titleTranslated}](https://aka.ms)`)
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								deprecationMessage: localize('walkthroughs.steps.button.deprecated.interpolated', "Deprecated. Use markdown links in the description instead, i.e. {0}, {1}, or {2}", `[${titleTranslated}](command:myext.command)`, `[${titleTranslated}](command:toSide:myext.command)`, `[${titleTranslated}](https://aka.ms)`),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								description: localize('walkthroughs.steps.media', "Media to show alongside this step, either an image or markdown content."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:												deprecationMessage: localize('pathDeprecated', "Deprecated. Please use `image` or `markdown` instead")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:												description: localize('walkthroughs.steps.media.image.path.string', "Path to an image - or object consisting of paths to light, dark, and hc images - relative to extension directory. Depending on context, the image will be displayed from 400px to 800px wide, with similar bounds on height. To support HIDPI displays, the image will be rendered at 1.5x scaling, for example a 900 physical pixels wide image will be displayed as 600 logical pixels wide."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:																description: localize('walkthroughs.steps.media.image.path.dark.string', "Path to the image for dark themes, relative to extension directory."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:																description: localize('walkthroughs.steps.media.image.path.light.string', "Path to the image for light themes, relative to extension directory."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:																description: localize('walkthroughs.steps.media.image.path.hc.string', "Path to the image for hc themes, relative to extension directory."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:																description: localize('walkthroughs.steps.media.image.path.hcLight.string', "Path to the image for hc light themes, relative to extension directory."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:												description: localize('walkthroughs.steps.media.altText', "Alternate text to display when the image cannot be loaded or in screen readers.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:												description: localize('walkthroughs.steps.media.image.path.svg', "Path to an svg, color tokens are supported in variables to support theming to match the workbench."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:												description: localize('walkthroughs.steps.media.altText', "Alternate text to display when the image cannot be loaded or in screen readers.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:												deprecationMessage: localize('pathDeprecated', "Deprecated. Please use `image` or `markdown` instead")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:												description: localize('walkthroughs.steps.media.markdown.path', "Path to the markdown document, relative to extension directory."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								description: localize('walkthroughs.steps.completionEvents', "Events that should trigger this step to become checked off. If empty or not defined, the step will check off when any of the step's buttons or links are clicked; if the step has no buttons or links it will check on when it is selected."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:											description: localize('walkthroughs.steps.completionEvents.onCommand', 'Check off step when a given command is executed anywhere in VS Code.'),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:											description: localize('walkthroughs.steps.completionEvents.onLink', 'Check off step when a given link is opened via a walkthrough step.'),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:											description: localize('walkthroughs.steps.completionEvents.onView', 'Check off step when a given view is opened'),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:											description: localize('walkthroughs.steps.completionEvents.onSettingChanged', 'Check off step when a given setting is changed'),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:											description: localize('walkthroughs.steps.completionEvents.onContext', 'Check off step when a context key expression is true.'),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:											description: localize('walkthroughs.steps.completionEvents.extensionInstalled', 'Check off step when an extension with the given id is installed. If the extension is already installed, the step will start off checked.'),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:											description: localize('walkthroughs.steps.completionEvents.stepSelected', 'Check off step as soon as it is selected.'),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								description: localize('walkthroughs.steps.doneOn', "Signal to mark step as complete."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								deprecationMessage: localize('walkthroughs.steps.doneOn.deprecation', "doneOn is deprecated. By default steps will be checked off when their buttons are clicked, to configure further use completionEvents"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:										description: localize('walkthroughs.steps.oneOn.command', "Mark step done when the specified command is executed."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedExtensionPoint.ts:								description: localize('walkthroughs.steps.when', "Context key expression to control the visibility of this step.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors.ts:export const welcomePageBackground = registerColor('welcomePage.background', { light: null, dark: null, hcDark: null, hcLight: null }, localize('welcomePage.background', 'Background color for the Welcome page.'));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors.ts:export const welcomePageTileBackground = registerColor('welcomePage.tileBackground', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: '#000', hcLight: editorWidgetBackground }, localize('welcomePage.tileBackground', 'Background color for the tiles on the Get Started page.'));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors.ts:export const welcomePageTileHoverBackground = registerColor('welcomePage.tileHoverBackground', { dark: lighten(editorWidgetBackground, .2), light: darken(editorWidgetBackground, .1), hcDark: null, hcLight: null }, localize('welcomePage.tileHoverBackground', 'Hover background color for the tiles on the Get Started.'));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors.ts:export const welcomePageTileShadow = registerColor('welcomePage.tileShadow', { light: widgetShadow, dark: widgetShadow, hcDark: null, hcLight: null }, localize('welcomePage.tileShadow', 'Shadow color for the Welcome page walkthrough category buttons.'));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors.ts:export const welcomePageProgressBackground = registerColor('welcomePage.progress.background', { light: inputBackground, dark: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, localize('welcomePage.progress.background', 'Foreground color for the Welcome page progress bars.'));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedColors.ts:export const welcomePageProgressForeground = registerColor('welcomePage.progress.foreground', { light: textLinkForeground, dark: textLinkForeground, hcDark: textLinkForeground, hcLight: textLinkForeground }, localize('welcomePage.progress.foreground', 'Background color for the Welcome page progress bars.'));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			title: { value: localize('miGetStarted', "Get Started"), original: 'Get Started' },
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:		localize('getStarted', "Get Started")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:const category = { value: localize('getStarted', "Get Started"), original: 'Get Started' };
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			title: { value: localize('welcome.goBack', "Go Back"), original: 'Go Back' },
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			title: localize('welcome.markStepComplete', "Mark Step Complete"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			title: localize('welcome.markStepInomplete', "Mark Step Incomplete"),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			title: { value: localize('welcome.showAllWalkthroughs', "Open Walkthrough..."), original: 'Open Walkthrough...' },
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:		quickPick.placeholder = localize('pickWalkthroughs', 'Select a walkthrough to open');
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:export const WorkspacePlatform = new RawContextKey<'mac' | 'linux' | 'windows' | 'webworker' | undefined>('workspacePlatform', undefined, localize('workspacePlatform', "The platform of the current workspace, which in remote or serverless contexts may be different from the platform of the UI"));
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			description: localize('workbench.welcomePage.walkthroughs.openOnInstall', "When enabled, an extension's walkthrough will open upon install of the extension.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			description: localize('workbench.welcomePage.videoTutorials', "When enabled, the get started page has additional links to video tutorials.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:				localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.none' }, "Start without an editor."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:				localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.welcomePage' }, "Open the Welcome page, with content to aid in getting started with VS Code and extensions."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:				localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.readme' }, "Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:				localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.newUntitledFile' }, "Open a new untitled file (only applies when opening an empty window)."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:				localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.welcomePageInEmptyWorkbench' }, "Open the Welcome page when opening an empty workbench."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			'description': localize('workbench.startupEditor', "Controls which editor is shown at startup, if none are restored from the previous session.")
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			deprecationMessage: localize('deprecationMessage', "Deprecated, use the global `workbench.reduceMotion`."),
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts:			description: localize('workbench.welcomePage.preferReducedMotion', "When enabled, reduce motion in welcome page.")
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.explorer', "File explorer"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.search', "Search across files"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.git', "Source code management"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.debug', "Launch and debug"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.extensions', "Manage extensions"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:	// 	label: localize('welcomeOverlay.watermark', "Command Hints"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.problems', "View errors and warnings"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.terminal', "Toggle integrated terminal"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:	// 	label: localize('welcomeOverlay.openfile', "File Properties"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.commandPalette', "Find and run all commands"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:		label: localize('welcomeOverlay.notifications', "Show notifications"),
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:	public static readonly LABEL = { value: localize('welcomeOverlay', "User Interface Overview"), original: 'User Interface Overview' };
src/vs/workbench/contrib/welcomeOverlay/browser/welcomeOverlay.ts:	public static readonly LABEL = { value: localize('hideWelcomeOverlay', "Hide Interface Overview"), original: 'Hide Interface Overview' };
src/vs/workbench/contrib/webview/electron-sandbox/webviewCommands.ts:			title: { value: nls.localize('openToolsLabel', "Open Webview Developer Tools"), original: 'Open Webview Developer Tools' },
src/vs/workbench/contrib/webview/electron-sandbox/webviewCommands.ts:			console.info(nls.localize('iframeWebviewAlert', "Using standard dev tools to debug iframe based webview"));
src/vs/workbench/contrib/webviewPanel/browser/webviewCommands.ts:	public static readonly LABEL = nls.localize('editor.action.webvieweditor.showFind', "Show find");
src/vs/workbench/contrib/webviewPanel/browser/webviewCommands.ts:	public static readonly LABEL = nls.localize('editor.action.webvieweditor.hideFind', "Stop find");
src/vs/workbench/contrib/webviewPanel/browser/webviewCommands.ts:	public static readonly LABEL = nls.localize('editor.action.webvieweditor.findNext', 'Find next');
src/vs/workbench/contrib/webviewPanel/browser/webviewCommands.ts:	public static readonly LABEL = nls.localize('editor.action.webvieweditor.findPrevious', 'Find previous');
src/vs/workbench/contrib/webviewPanel/browser/webviewCommands.ts:	static readonly LABEL = nls.localize('refreshWebviewLabel', "Reload Webviews");
src/vs/workbench/contrib/webview/browser/webviewElement.ts:			notificationService.error(localize('fatalErrorMessage', "Error loading webview: {0}", e.message));
src/vs/workbench/contrib/webviewPanel/browser/webviewPanel.contribution.ts:	localize('webview.editor.label', "webview editor")),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:		value: localize('save profile as', "Create from Current Profile..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:			placeHolder: localize('name', "Profile name"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:			title: localize('save profile as', "Create from Current Profile..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:					return localize('profileExists', "Profile with name {0} already exists.", value);
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:		value: localize('create empty profile', "Create an Empty Profile..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:			placeHolder: localize('name', "Profile name"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:			title: localize('create and enter empty profile', "Create an Empty Profile..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:					return localize('profileExists', "Profile with name {0} already exists.", value);
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				value: localize('create profile', "Create..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:			}], { hideInput: true, canPickMany: false, title: localize('create profile title', "{0}: Create...", PROFILES_CATEGORY.value) });
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:		value: localize('create temporary profile', "Create a Temporary Profile"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				value: localize('rename profile', "Rename..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:			title: localize('select profile to rename', 'Rename {0}', profile.name),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:					return localize('profileExists', "Profile with name {0} already exists.", value);
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				description: profile.id === userDataProfileService.currentProfile.id ? localize('current', "Current") : undefined,
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				title: localize('rename specific profile', "Rename Profile..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				placeHolder: localize('pick profile to rename', "Select Profile to Rename"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				value: localize('delete profile', "Delete..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:					description: profile.id === userDataProfileService.currentProfile.id ? localize('current', "Current") : undefined,
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:					title: localize('delete specific profile', "Delete Profile..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:					placeHolder: localize('pick profile to delete', "Select Profiles to Delete"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				value: localize('mange', "Manage..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				value: localize('switch profile', "Switch..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:			const pick = await quickInputService.pick(picks, { placeHolder: localize('pick profile', "Select Profile") });
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				value: localize('cleanup profile', "Cleanup Profiles"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts:				value: localize('reset workspaces', "Reset Workspace Profiles Associations"),
src/vs/workbench/contrib/remote/browser/explorerViewItems.ts:		super(null, action, optionsItems, 0, contextViewService, { ariaLabel: nls.localize('remotes', 'Switch Remote') });
src/vs/workbench/contrib/remote/browser/explorerViewItems.ts:	public static readonly LABEL = nls.localize('remote.explorer.switch', "Switch Remote");
src/vs/workbench/contrib/watermark/browser/watermark.ts:const showCommands: WatermarkEntry = { text: nls.localize('watermark.showCommands', "Show All Commands"), id: ShowAllCommandsAction.ID };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const quickAccess: WatermarkEntry = { text: nls.localize('watermark.quickAccess', "Go to File"), id: 'workbench.action.quickOpen' };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const openFileNonMacOnly: WatermarkEntry = { text: nls.localize('watermark.openFile', "Open File"), id: OpenFileAction.ID, mac: false };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const openFolderNonMacOnly: WatermarkEntry = { text: nls.localize('watermark.openFolder', "Open Folder"), id: OpenFolderAction.ID, mac: false };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const openFileOrFolderMacOnly: WatermarkEntry = { text: nls.localize('watermark.openFileFolder', "Open File or Folder"), id: OpenFileFolderAction.ID, mac: true };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const openRecent: WatermarkEntry = { text: nls.localize('watermark.openRecent', "Open Recent"), id: OpenRecentAction.ID };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const newUntitledFile: WatermarkEntry = { text: nls.localize('watermark.newUntitledFile', "New Untitled File"), id: NEW_UNTITLED_FILE_COMMAND_ID };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const findInFiles: WatermarkEntry = { text: nls.localize('watermark.findInFiles', "Find in Files"), id: FindInFilesActionId };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const toggleTerminal: WatermarkEntry = { text: nls.localize({ key: 'watermark.toggleTerminal', comment: ['toggle is a verb here'] }, "Toggle Terminal"), id: TerminalCommandId.Toggle, when: TerminalContextKeys.processSupported };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const startDebugging: WatermarkEntry = { text: nls.localize('watermark.startDebugging', "Start Debugging"), id: DEBUG_START_COMMAND_ID, when: TerminalContextKeys.processSupported };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const toggleFullscreen: WatermarkEntry = { text: nls.localize({ key: 'watermark.toggleFullscreen', comment: ['toggle is a verb here'] }, "Toggle Full Screen"), id: 'workbench.action.toggleFullScreen', when: TerminalContextKeys.processSupported.toNegated() };
src/vs/workbench/contrib/watermark/browser/watermark.ts:const showSettings: WatermarkEntry = { text: nls.localize('watermark.showSettings', "Show Settings"), id: 'workbench.action.openSettings', when: TerminalContextKeys.processSupported.toNegated() };
src/vs/workbench/contrib/watermark/browser/watermark.ts:				'description': nls.localize('tips.enabled', "When enabled, will show the watermark tips when no editor is open.")
src/vs/workbench/contrib/userDataSync/electron-sandbox/userDataSync.contribution.ts:			title: { value: localize('Open Backup folder', "Open Local Backups Folder"), original: 'Open Local Backups Folder' },
src/vs/workbench/contrib/userDataSync/electron-sandbox/userDataSync.contribution.ts:			notificationService.info(localize('no backups', "Local backups folder does not exist"));
src/vs/workbench/contrib/webview/browser/webview.contribution.ts:			title: nls.localize('cut', "Cut"),
src/vs/workbench/contrib/webview/browser/webview.contribution.ts:			title: nls.localize('copy', "Copy"),
src/vs/workbench/contrib/webview/browser/webview.contribution.ts:			title: nls.localize('paste', "Paste"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:		const viewName = localize('conflicts', "Conflicts");
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:		const name = localize('synced machines', "Synced Machines");
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					title: localize('workbench.actions.sync.editMachineName', "Edit Name"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					title: localize('workbench.actions.sync.turnOffSyncOnMachine', "Turn off Settings Sync"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:		const name = remote ? localize('remote sync activity title', "Sync Activity (Remote)") : localize('local sync activity title', "Sync Activity (Local)");
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					title: localize('workbench.actions.sync.resolveResourceRef', "Show raw JSON sync data"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					title: localize('workbench.actions.sync.compareWithLocal', "Compare with Local"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					localize('remoteToLocalDiff', "{0} ↔ {1}", localize({ key: 'leftResourceName', comment: ['remote as in file in cloud'] }, "{0} (Remote)", basename(remoteResource)), localize({ key: 'rightResourceName', comment: ['local as in file in disk'] }, "{0} (Local)", basename(localResource))),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					title: localize('workbench.actions.sync.replaceCurrent', "Restore"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					message: localize({ key: 'confirm replace', comment: ['A confirmation message to replace current user data (settings, extensions, keybindings, snippets) with selected version'] }, "Would you like to replace your current {0} with selected?", getSyncAreaLabel(syncResource)),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:		const name = localize('troubleshoot', "Troubleshoot");
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:							new Action('reset', localize('reset', "Reset Synced Data"), undefined, true, () => this.userDataSyncWorkbenchService.resetSyncedData()),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:						localize('sideBySideLabels', "{0} ↔ {1}", `${basename(resource)} (${fromNow(syncResourceHandle.previous!.created, true)})`, `${basename(resource)} (${fromNow(syncResourceHandle.created, true)})`),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:				children[0].description = machine?.isCurrent ? localize({ key: 'current', comment: ['Represents current machine'] }, "Current") : machine?.name;
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:			this.treeView.message = machines.length ? undefined : localize('no machines', "No Machines");
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:				description: isCurrent ? localize({ key: 'current', comment: ['Current machine'] }, "Current") : undefined,
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:			throw new Error(localize('not found', "machine not found with id: {0}", machineIds.join(',')));
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:			message: machinesToDisable.length > 1 ? localize('turn off sync on multiple machines', "Are you sure you want to turn off sync on selected machines?")
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:				: localize('turn off sync on machine', "Are you sure you want to turn off sync on {0}?", machinesToDisable[0].name),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:			primaryButton: localize({ key: 'turn off', comment: ['&& denotes a mnemonic'] }, "&&Turn off"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:		inputBox.placeholder = localize('placeholder', "Enter the name of the machine");
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:			throw new Error(localize('not found', "machine not found with id: {0}", machineId));
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:			inputBox.validationMessage = validateMachineName(inputBox.value) ? '' : localize('valid message', "Machine name should be unique and not empty")));
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:				label: { label: localize('sync logs', "Logs") },
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:				label: { label: localize('last sync states', "Last Synced Remotes") },
src/vs/workbench/contrib/userDataSync/browser/userDataSyncViews.ts:					description: this.uriIdentityService.extUri.isEqual(syncLogResource, this.environmentService.userDataSyncLogResource) ? localize({ key: 'current', comment: ['Represents current log file'] }, "Current") : undefined,
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:				const message = isWeb ? localize({ key: 'local too many requests - reload', comment: ['Settings Sync is the name of the feature'] }, "Settings sync is suspended temporarily because the current device is making too many requests. Please reload {0} to resume.", this.productService.nameLong)
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:					: localize({ key: 'local too many requests - restart', comment: ['Settings Sync is the name of the feature'] }, "Settings sync is suspended temporarily because the current device is making too many requests. Please restart {0} to resume.", this.productService.nameLong);
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:							new Action('Show Sync Logs', localize('show sync logs', "Show Log"), undefined, true, () => this.commandService.executeCommand(SHOW_SYNC_LOG_COMMAND_ID)),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:							new Action('Restart', isWeb ? localize('reload', "Reload") : localize('restart', "Restart"), undefined, true, () => this.hostService.restart())
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:				const operationId = error.operationId ? localize('operationId', "Operation Id: {0}", error.operationId) : undefined;
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:				const message = localize({ key: 'server too many requests', comment: ['Settings Sync is the name of the feature'] }, "Settings sync is disabled because the current device is making too many requests. Please wait for 10 minutes and turn on sync.");
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:					source: error.operationId ? localize('settings sync', "Settings Sync. Operation Id: {0}", error.operationId) : undefined,
src/vs/workbench/contrib/userDataSync/browser/userDataSync.contribution.ts:							new Action('Show Sync Logs', localize('show sync logs', "Show Log"), undefined, true, () => this.commandService.executeCommand(SHOW_SYNC_LOG_COMMAND_ID)),
src/vs/workbench/contrib/url/browser/trustedDomainsValidator.ts:				localize(
src/vs/workbench/contrib/url/browser/trustedDomainsValidator.ts:					localize('open', 'Open'),
src/vs/workbench/contrib/url/browser/trustedDomainsValidator.ts:					localize('copy', 'Copy'),
src/vs/workbench/contrib/url/browser/trustedDomainsValidator.ts:					localize('cancel', 'Cancel'),
src/vs/workbench/contrib/url/browser/trustedDomainsValidator.ts:					localize('configureTrustedDomains', 'Configure Trusted Domains')
src/vs/workbench/contrib/url/browser/trustedDomains.ts:		description: localize('trustedDomain.manageTrustedDomain', 'Manage Trusted Domains'),
src/vs/workbench/contrib/url/browser/trustedDomains.ts:		label: localize('trustedDomain.trustDomain', 'Trust {0}', domainToConfigure),
src/vs/workbench/contrib/url/browser/trustedDomains.ts:				label: localize('trustedDomain.trustAllPorts', 'Trust {0} on all ports', base),
src/vs/workbench/contrib/url/browser/trustedDomains.ts:			label: localize('trustedDomain.trustSubDomain', 'Trust {0} and all its subdomains', domainEnd),
src/vs/workbench/contrib/url/browser/trustedDomains.ts:		label: localize('trustedDomain.trustAllDomains', 'Trust all domains (disables link protection)'),
src/vs/workbench/contrib/url/browser/trustedDomains.ts:		label: localize('trustedDomain.manageTrustedDomains', 'Manage Trusted Domains'),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:const turnOnSyncCommand = { id: 'workbench.userDataSync.actions.turnOn', title: localize('turn on sync with category', "{0}: Turn On...", SYNC_TITLE) };
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:const turnOffSyncCommand = { id: 'workbench.userDataSync.actions.turnOff', title: localize('stop sync', "{0}: Turn Off", SYNC_TITLE) };
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:const configureSyncCommand = { id: CONFIGURE_SYNC_COMMAND_ID, title: localize('configure sync', "{0}: Configure...", SYNC_TITLE) };
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:const showConflictsCommand = { id: 'workbench.userDataSync.actions.showConflicts', title: localize('showConflicts', "{0}: Show Conflicts", SYNC_TITLE) };
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:	title: localize('sync now', "{0}: Sync Now", SYNC_TITLE),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			return localize('syncing', "syncing");
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			return localize('synced with time', "synced {0}", fromNow(userDataSyncService.lastSyncTime, true));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:const showSyncSettingsCommand = { id: 'workbench.userDataSync.actions.settings', title: localize('sync settings', "{0}: Show Settings", SYNC_TITLE), };
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:const showSyncedDataCommand = { id: 'workbench.userDataSync.actions.showSyncedData', title: localize('show synced data', "{0}: Show Synced Data", SYNC_TITLE), };
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					const handle = this.notificationService.prompt(Severity.Warning, localize('conflicts detected', "Unable to sync due to conflicts in {0}. Please resolve them to continue.", conflictsArea.toLowerCase()),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:								label: localize('replace remote', "Replace Remote"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:								label: localize('replace local', "Replace Local"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:								label: localize('show conflicts', "Show Conflicts"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			this.notificationService.error(localize('accept failed', "Error while accepting changes. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			this.notificationService.error(localize('accept failed', "Error while accepting changes. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					message: localize('session expired', "Settings sync was turned off because current session is expired, please sign in again to turn on sync."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						primary: [new Action('turn on sync', localize('turn on sync', "Turn on Settings Sync..."), undefined, true, () => this.turnOn())]
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					message: localize('turned off', "Settings sync was turned off from another device, please turn on sync again."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						primary: [new Action('turn on sync', localize('turn on sync', "Turn on Settings Sync..."), undefined, true, () => this.turnOn())]
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					this.handleTooLargeError(error.resource, localize('too large', "Disabled syncing {0} because size of the {1} file to sync is larger than {2}. Please open the file and reduce the size and enable sync", sourceArea.toLowerCase(), sourceArea.toLowerCase(), '100kb'), error);
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				const message = localize('error upgrade required', "Settings sync is disabled because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.", this.productService.version, this.productService.commit);
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				const operationId = error.operationId ? localize('operationId', "Operation Id: {0}", error.operationId) : undefined;
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					message: localize('error reset required', "Settings sync is disabled because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:							new Action('reset', localize('reset', "Clear Data in Cloud..."), undefined, true, () => this.userDataSyncWorkbenchService.resetSyncedData()),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:							new Action('show synced data', localize('show synced data action', "Show Synced Data"), undefined, true, () => this.userDataSyncWorkbenchService.showSyncActivity())
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						localize('service switched to insiders', "Settings Sync has been switched to insiders service") :
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						localize('service switched to stable', "Settings Sync has been switched to stable service"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						message: localize('using separate service', "Settings sync now uses a separate service, more information is available in the [Settings Sync Documentation](https://aka.ms/vscode-settings-sync-help#_syncing-stable-versus-insiders)."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						message: localize('service changed and turned off', "Settings sync was turned off because {0} now uses a separate service. Please turn on sync again.", this.productService.nameLong),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:							primary: [new Action('turn on sync', localize('turn on sync', "Turn on Settings Sync..."), undefined, true, () => this.turnOn())]
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:		const operationId = error.operationId ? localize('operationId', "Operation Id: {0}", error.operationId) : undefined;
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				primary: [new Action('open sync file', localize('open file', "Open {0} File", getSyncAreaLabel(resource)), undefined, true,
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			message: localize('errorInvalidConfiguration', "Unable to sync {0} because the content in the file is not valid. Please open the file and correct it.", errorArea.toLowerCase()),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				primary: [new Action('open sync file', localize('open file', "Open {0} File", errorArea), undefined, true,
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			badge = new NumberBadge(this.getConflictsCount(), () => localize('has conflicts', "{0}: Conflicts Detected", SYNC_TITLE));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			badge = new ProgressBadge(() => localize('turning on syncing', "Turning on Settings Sync..."));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			badge = new NumberBadge(1, () => localize('sign in to sync', "Sign in to Sync Settings"));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				throw new Error(localize('no authentication providers', "No authentication providers are available."));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:							this.handleTooLargeError(e.resource, localize('too large while starting sync', "Settings sync cannot be turned on because size of the {0} file to sync is larger than {1}. Please open the file and reduce the size and turn on sync", getSyncAreaLabel(e.resource).toLowerCase(), '100kb'), e);
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						const message = localize('error upgrade required while starting sync', "Settings sync cannot be turned on because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.", this.productService.version, this.productService.commit);
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						const operationId = e.operationId ? localize('operationId', "Operation Id: {0}", e.operationId) : undefined;
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:							message: localize('error reset required while starting sync', "Settings sync cannot be turned on because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:									new Action('reset', localize('reset', "Clear Data in Cloud..."), undefined, true, () => this.userDataSyncWorkbenchService.resetSyncedData()),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:									new Action('show synced data', localize('show synced data action', "Show Synced Data"), undefined, true, () => this.userDataSyncWorkbenchService.showSyncActivity())
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						this.notificationService.error(localize('auth failed', "Error while turning on Settings Sync: Authentication failed."));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				this.notificationService.error(localize('turn on failed with user data sync error', "Error while turning on Settings Sync. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				this.notificationService.error(localize({ key: 'turn on failed', comment: ['Substitution is for error reason'] }, "Error while turning on Settings Sync. {0}", getErrorMessage(e)));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			quickPick.customLabel = localize('sign in and turn on', "Sign in & Turn on");
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			quickPick.description = localize('configure and turn on sync detail', "Please sign in to synchronize your data across devices.");
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			description: this.configurationService.getValue('settingsSync.keybindingsPerPlatform') ? localize('per platform', "for each platform") : undefined
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			quickPick.title = localize('configure sync', "{0}: Configure...", SYNC_TITLE);
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			quickPick.placeholder = localize('configure sync placeholder', "Choose what to sync");
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			message: localize('turn off sync confirmation', "Do you want to turn off sync?"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			detail: localize('turn off sync detail', "Your settings, keybindings, extensions, snippets and UI State will no longer be synced."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			primaryButton: localize({ key: 'turn off', comment: ['&& denotes a mnemonic'] }, "&&Turn off"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				label: localize('turn off sync everywhere', "Turn off sync on all your devices and clear the data from the cloud.")
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			quickPick.title = localize('switchSyncService.title', "{0}: Select Service", SYNC_TITLE);
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:			quickPick.description = localize('switchSyncService.description', "Ensure you are using the same settings sync service when syncing with multiple environments");
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					return localize('default', "Default");
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					label: localize('insiders', "Insiders"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					label: localize('stable', "Stable"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				title: localize('global activity turn on sync', "Turn on Settings Sync...")
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				title: localize('global activity turn on sync', "Turn on Settings Sync...")
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				title: localize('global activity turn on sync', "Turn on Settings Sync...")
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: localize('turnin on sync', "Turning on Settings Sync..."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: localize('cancel turning on sync', "Cancel"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: localize('sign in global', "Sign in to Sync Settings"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:				title: localize('sign in accounts', "Sign in to Sync Settings (1)"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:		const getTitle = () => localize('resolveConflicts_global', "{0}: Show Conflicts ({1})", SYNC_TITLE, this.getConflictsCount());
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: localize('sync is on', "Settings Sync is On"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: { value: localize('workbench.action.showSyncRemoteBackup', "Show Synced Data"), original: `Show Synced Data` },
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:						that.notificationService.error(localize('turn off failed', "Error while turning off Settings Sync. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`));
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					tooltip: localize('configure', "Configure..."),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: localize('show sync log title', "{0}: Show Log", SYNC_TITLE),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					tooltip: localize('show sync log toolrip', "Show Log"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: localize('complete merges title', "Complete Merge"),
src/vs/workbench/contrib/userDataSync/browser/userDataSync.ts:					title: localize('workbench.actions.syncData.reset', "Clear Data in Cloud..."),
src/vs/workbench/contrib/url/browser/url.contribution.ts:			title: { value: localize('openUrl', "Open URL"), original: 'Open URL' },
src/vs/workbench/contrib/url/browser/url.contribution.ts:		return quickInputService.input({ prompt: localize('urlToOpen', "URL to open") }).then(input => {
src/vs/workbench/contrib/url/browser/url.contribution.ts:			description: localize('workbench.trustedDomains.promptInTrustedWorkspace', "When enabled, trusted domain prompts will appear when opening links in trusted workspaces.")
src/vs/workbench/browser/parts/views/viewsService.ts:								return { value: localize('show view', "Show {0}", localizedTitle), original: `Show ${originalTitle}` };
src/vs/workbench/browser/parts/views/viewsService.ts:								return { value: localize('toggle view', "Toggle {0}", localizedTitle), original: `Toggle ${originalTitle}` };
src/vs/workbench/browser/parts/views/viewsService.ts:								return { value: localize('show view', "Show {0}", localizedTitle), original: `Show ${originalTitle}` };
src/vs/workbench/browser/parts/views/viewsService.ts:								return { value: localize('toggle view', "Toggle {0}", localizedTitle), original: `Toggle ${originalTitle}` };
src/vs/workbench/browser/parts/views/viewsService.ts:				const title = localize({ key: 'focus view', comment: ['{0} indicates the name of the view to be focused.'] }, "Focus on {0} View", viewDescriptor.name);
src/vs/workbench/browser/parts/views/viewsService.ts:						value: localize('resetViewLocation', "Reset Location")
src/vs/workbench/browser/parts/views/viewPane.ts:const viewPaneContainerExpandedIcon = registerIcon('view-pane-container-expanded', Codicon.chevronDown, nls.localize('viewPaneContainerExpandedIcon', 'Icon for an expanded view pane container.'));
src/vs/workbench/browser/parts/views/viewPane.ts:const viewPaneContainerCollapsedIcon = registerIcon('view-pane-container-collapsed', Codicon.chevronRight, nls.localize('viewPaneContainerCollapsedIcon', 'Icon for a collapsed view pane container.'));
src/vs/workbench/browser/parts/views/viewPane.ts:			ariaLabel: nls.localize('viewToolbarAriaLabel', "{0} actions", this.title),
src/vs/workbench/contrib/webviewPanel/browser/webviewEditor.ts:	description: nls.localize('context.activeWebviewId', "The viewType of the currently active webview panel."),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:		this.treeView.message = localize('explanation', "Please go through each entry and merge to resolve conflicts.");
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:					title: localize({ key: 'workbench.actions.sync.openConflicts', comment: ['This is an action title to show the conflicts between local and remote version of resources'] }, "Show Conflicts"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:					title: localize('workbench.actions.sync.acceptRemote', "Accept Remote"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:					title: localize('workbench.actions.sync.acceptLocal', "Accept Local"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:			const remoteResourceName = localize({ key: 'remoteResourceName', comment: ['remote as in file in cloud'] }, "{0} (Remote)", basename(conflictToOpen.remoteResource));
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:			const localResourceName = localize('localResourceName', "{0} (Local)", basename(conflictToOpen.remoteResource));
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:				input1: { resource: conflictToOpen.remoteResource, label: localize('Theirs', 'Theirs'), description: remoteResourceName },
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:				input2: { resource: conflictToOpen.localResource, label: localize('Yours', 'Yours'), description: localResourceName },
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:			const leftResourceName = localize({ key: 'leftResourceName', comment: ['remote as in file in cloud'] }, "{0} (Remote)", basename(leftResource));
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:			const rightResourceName = localize({ key: 'rightResourceName', comment: ['local as in file in disk'] }, "{0} (Local)", basename(rightResource));
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:				label: localize('sideBySideLabels', "{0} ↔ {1}", leftResourceName, rightResourceName),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:				description: localize('sideBySideDescription', "Settings Sync"),
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:			const label = isRemoteResource ? localize('accept remote', "Accept Remote")
src/vs/workbench/contrib/userDataSync/browser/userDataSyncConflictsView.ts:				: localize('accept local', "Accept Local");
src/vs/workbench/browser/parts/views/checkbox.ts:			checkbox.isChecked ? localize('checked', 'Checked') : localize('unchecked', 'Unchecked');
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:						'description': localize('workbench.experimental.profiles.enabled', "Controls whether to enable the Profiles preview feature."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:			get title() { return localize('manageProfiles', "{0} ({1})", PROFILES_TTILE.value, that.userDataProfileService.currentProfile.name); },
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:			get title() { return localize('manageProfiles', "{0} ({1})", PROFILES_TTILE.value, that.userDataProfileService.currentProfile.name); },
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:						value: localize('change short name profile', "Change Short Name ({0})...", themeIcon?.id ?? shortName),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:					title: localize('change short name', "Change Short Name..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:							return localize('invalid codicon', "Invalid codicon. Please use a valid codicon id.");
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:							return localize('invalid short name', "Short name should be at most 2 characters long.");
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:						value: localize('rename profile', "Rename ({0})...", that.userDataProfileService.currentProfile.name),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:						value: localize('export profile', "Export ({0})...", that.userDataProfileService.currentProfile.name),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:					title: localize('export profile dialog', "Save Profile"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:				notificationService.info(localize('export success', "{0}: Exported successfully.", PROFILES_CATEGORY.value));
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:					value: localize('export profile in share', "Export Profile ({0})...", that.userDataProfileService.currentProfile.name),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:						value: localize('import profile', "Import..."),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:						title: localize('import profile title', "Import Settings from a Profile"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:						message: localize('confiirmation message', "This will replace your current settings. Are you sure you want to continue?"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:					const selectFromFileItem: IQuickPickItem = { label: isSettingProfilesEnabled ? localize('select from file', "Select Profile template file") : localize('import from file', "Import from profile file") };
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:					quickPick.items = value ? [{ label: isSettingProfilesEnabled ? localize('select from url', "Create from template URL") : localize('import from url', "Import from URL"), description: quickPick.value }, selectFromFileItem] : [selectFromFileItem];
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:				quickPick.title = isSettingProfilesEnabled ? localize('create from profile template quick pick title', "Create from Profile Template") : localize('import profile quick pick title', "Import Settings from a Profile");
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:				quickPick.placeholder = isSettingProfilesEnabled ? localize('create from profile template placeholder', "Provide a template URL or Select a template file") : localize('import profile placeholder', "Provide profile URL or select profile file to import");
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:					title: localize('import profile dialog', "Import Profile"),
src/vs/workbench/contrib/userDataProfile/browser/userDataProfile.ts:					value: localize('import profile share', "Import Profile...",),
src/vs/workbench/browser/parts/views/viewFilter.ts:	title: localize('more filters', "More Filters..."),
src/vs/workbench/browser/parts/views/treeView.ts:const noDataProviderMessage = localize('no-dataprovider', "There is no data provider registered that can provide view data.");
src/vs/workbench/browser/parts/views/treeView.ts:			this.collapseAllContextKey = new RawContextKey<boolean>(`treeView.${this.id}.enableCollapseAll`, startingValue, localize('treeView.enableCollapseAll', "Whether the the tree view with id {0} enables collapse all.", this.id));
src/vs/workbench/browser/parts/views/treeView.ts:			this.refreshContextKey = new RawContextKey<boolean>(`treeView.${this.id}.enableRefresh`, startingValue, localize('treeView.enableRefresh', "Whether the tree view with id {0} enables refresh.", this.id));
src/vs/workbench/browser/parts/views/treeView.ts:					title: localize('refresh', "Refresh"),
src/vs/workbench/browser/parts/views/treeView.ts:					title: localize('collapseAll', "Collapse All"),
src/vs/workbench/browser/parts/views/treeView.ts:			this.collapseAllToggleContextKey = new RawContextKey<boolean>(`treeView.${this.id}.toggleCollapseAll`, false, localize('treeView.toggleCollapseAll', "Whether collapse all is toggled for the tree view with id {0}.", this.id));
src/vs/workbench/browser/parts/views/treeView.ts:				notificationService.error(localize('command-error', 'Error running command {1}: {0}. This is likely caused by the extension that contributes {1}.', e.error.message, e.action.id));
src/vs/workbench/browser/parts/statusbar/statusbarActions.ts:		super(id, localize('hide', "Hide '{0}'", name), undefined, true);
src/vs/workbench/browser/parts/statusbar/statusbarActions.ts:			title: { value: localize('focusStatusBar', "Focus Status Bar"), original: 'Focus Status Bar' },
src/vs/workbench/browser/parts/titlebar/windowTitle.ts:	private static readonly NLS_USER_IS_ADMIN = isWindows ? localize('userIsAdmin', "[Administrator]") : localize('userIsSudo', "[Superuser]");
src/vs/workbench/browser/parts/titlebar/windowTitle.ts:	private static readonly NLS_EXTENSION_HOST = localize('devExtensionWindowTitlePrefix', "[Extension Development Host]");
src/vs/workbench/browser/parts/titlebar/titlebarPart.ts:					title: { value: localize('focusTitleBar', "Focus Title Bar"), original: 'Focus Title Bar' },
src/vs/workbench/browser/parts/titlebar/titlebarPart.ts:		super('window.commandCenter', localize('toggle.commandCenter', 'Command Center'), 1);
src/vs/workbench/browser/parts/titlebar/titlebarPart.ts:		super('workbench.layoutControl.enabled', localize('toggle.layout', 'Layout Controls'), 2);
src/vs/workbench/browser/parts/statusbar/statusbarPart.ts:		actions.push(toAction({ id: ToggleStatusbarVisibilityAction.ID, label: localize('hideStatusBar', "Hide Status Bar"), run: () => this.instantiationService.invokeFunction(accessor => new ToggleStatusbarVisibilityAction().run(accessor)) }));
src/vs/workbench/browser/parts/statusbar/statusbarModel.ts:				description: localize('statusbar.hidden', "Status bar entries visibility customizations"),
src/vs/workbench/contrib/testing/common/configuration.ts:	title: localize('testConfigurationTitle', "Testing"),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.autoRun.mode', "Controls which tests are automatically run."),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.autoRun.mode.allInWorkspace', "Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed."),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.autoRun.mode.onlyPreviouslyRun', "Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.")
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.autoRun.delay', "How long to wait, in milliseconds, after a test is marked as outdated and starting a new run."),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.automaticallyOpenPeekView', "Configures when the error peek view is automatically opened."),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.automaticallyOpenPeekView.failureAnywhere', "Open automatically no matter where the failure is."),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.automaticallyOpenPeekView.failureInVisibleDocument', "Open automatically when a test fails in a visible document."),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.automaticallyOpenPeekView.never', "Never automatically open."),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.automaticallyOpenPeekViewDuringAutoRun', "Controls whether to automatically open the peek view during auto-run mode."),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.followRunningTest', 'Controls whether the running test should be followed in the test explorer view'),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.defaultGutterClickAction', 'Controls the action to take when left-clicking on a test decoration in the gutter.'),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.defaultGutterClickAction.run', 'Run the test.'),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.defaultGutterClickAction.debug', 'Debug the test.'),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.defaultGutterClickAction.contextMenu', 'Open the context menu for more options.'),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.gutterEnabled', 'Controls whether test decorations are shown in the editor gutter.'),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.saveBeforeTest', 'Control whether save all dirty editors before running a test.'),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.openTesting.neverOpen', 'Never automatically open the testing view'),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.openTesting.openOnTestStart', 'Open the testing view when tests start'),
src/vs/workbench/contrib/testing/common/configuration.ts:				localize('testing.openTesting.openOnTestFailure', 'Open the testing view on any test failure'),
src/vs/workbench/contrib/testing/common/configuration.ts:			description: localize('testing.openTesting', "Controls when the testing view should open.")
src/vs/workbench/contrib/testing/common/configuration.ts:			markdownDescription: localize('testing.alwaysRevealTestOnStateChange', "Always reveal the executed test when `#testing.followRunningTest#` is on. If this setting is turned off, only failed tests will be revealed."),
src/vs/workbench/contrib/testing/common/testServiceImpl.ts:			message: localize('testTrust', "Running tests may execute code in your workspace."),
src/vs/workbench/contrib/testing/common/testServiceImpl.ts:						this.notificationService.error(localize('testError', 'An error occurred attempting to run tests: {0}', errs.join(' ')));
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:	export const canRefreshTests = new RawContextKey('testing.canRefresh', false, { type: 'boolean', description: localize('testing.canRefresh', 'Indicates whether any test controller has an attached refresh handler.') });
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:	export const isRefreshingTests = new RawContextKey('testing.isRefreshing', false, { type: 'boolean', description: localize('testing.isRefreshing', 'Indicates whether any test controller is currently refreshing tests.') });
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:	export const hasDebuggableTests = new RawContextKey('testing.hasDebuggableTests', false, { type: 'boolean', description: localize('testing.hasDebuggableTests', 'Indicates whether any test controller has registered a debug configuration') });
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:	export const hasRunnableTests = new RawContextKey('testing.hasRunnableTests', false, { type: 'boolean', description: localize('testing.hasRunnableTests', 'Indicates whether any test controller has registered a run configuration') });
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:	export const hasCoverableTests = new RawContextKey('testing.hasCoverableTests', false, { type: 'boolean', description: localize('testing.hasCoverableTests', 'Indicates whether any test controller has registered a coverage configuration') });
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:	export const hasNonDefaultProfile = new RawContextKey('testing.hasNonDefaultProfile', false, { type: 'boolean', description: localize('testing.hasNonDefaultConfig', 'Indicates whether any test controller has registered a non-default configuration') });
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:	export const hasConfigurableProfile = new RawContextKey('testing.hasConfigurableProfile', false, { type: 'boolean', description: localize('testing.hasConfigurableConfig', 'Indicates whether any test configuration can be configured') });
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:		description: localize('testing.peekItemType', 'Type of the item in the output peek view. Either a "test", "message", "task", or "result".'),
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:		description: localize('testing.controllerId', 'Controller ID of the current test item')
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:		description: localize('testing.testId', 'ID of the current test item, set when creating or opening menus on test items')
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:		description: localize('testing.testItemHasUri', 'Boolean indicating whether the test item has a URI defined')
src/vs/workbench/contrib/testing/common/testingContextKeys.ts:		description: localize('testing.testItemIsHidden', 'Boolean indicating whether the test item is hidden')
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize({ key: 'mFile', comment: ['&& denotes a mnemonic'] }, "&&File"),
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize({ key: 'mEdit', comment: ['&& denotes a mnemonic'] }, "&&Edit")
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize({ key: 'mSelection', comment: ['&& denotes a mnemonic'] }, "&&Selection")
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize({ key: 'mView', comment: ['&& denotes a mnemonic'] }, "&&View")
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize({ key: 'mGoto', comment: ['&& denotes a mnemonic'] }, "&&Go")
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize({ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, "&&Terminal")
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize({ key: 'mHelp', comment: ['&& denotes a mnemonic'] }, "&&Help")
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		mnemonicTitle: localize('mPreferences', "Preferences")
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:		const message = localize('menubar.customTitlebarAccessibilityNotification', "Accessibility support is enabled for you. For the most accessible experience, we recommend the custom title bar style.");
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				label: localize('goToSetting', "Open Settings"),
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:						title: { value: localize('focusMenu', "Focus Application Menu"), original: 'Focus Application Menu' },
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				return new Action('update.check', localize({ key: 'checkForUpdates', comment: ['&& denotes a mnemonic'] }, "Check for &&Updates..."), undefined, true, () =>
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				return new Action('update.checking', localize('checkingForUpdates', "Checking for Updates..."), undefined, false);
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				return new Action('update.downloadNow', localize({ key: 'download now', comment: ['&& denotes a mnemonic'] }, "D&&ownload Update"), undefined, true, () =>
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				return new Action('update.downloading', localize('DownloadingUpdate', "Downloading Update..."), undefined, false);
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				return new Action('update.install', localize({ key: 'installUpdate...', comment: ['&& denotes a mnemonic'] }, "Install &&Update..."), undefined, true, () =>
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				return new Action('update.updating', localize('installingUpdate', "Installing Update..."), undefined, false);
src/vs/workbench/browser/parts/titlebar/menubarControl.ts:				return new Action('update.restart', localize({ key: 'restartToUpdate', comment: ['&& denotes a mnemonic'] }, "Restart to &&Update"), undefined, true, () =>
src/vs/workbench/browser/parts/views/viewPaneContainer.ts:	title: nls.localize('views', "Views"),
src/vs/workbench/browser/parts/views/viewPaneContainer.ts:				title: nls.localize('viewMoveUp', "Move View Up"),
src/vs/workbench/browser/parts/views/viewPaneContainer.ts:				title: nls.localize('viewMoveLeft', "Move View Left"),
src/vs/workbench/browser/parts/views/viewPaneContainer.ts:				title: nls.localize('viewMoveDown', "Move View Down"),
src/vs/workbench/browser/parts/views/viewPaneContainer.ts:				title: nls.localize('viewMoveRight', "Move View Right"),
src/vs/workbench/browser/parts/views/viewPaneContainer.ts:			title: nls.localize('viewsMove', "Move Views"),
src/vs/workbench/contrib/testing/common/testResult.ts:	public readonly name = localize('runFinished', 'Test run at {0}', new Date().toLocaleString());
src/vs/workbench/contrib/testing/common/constants.ts:	[TestResultState.Errored]: localize('testState.errored', 'Errored'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestResultState.Failed]: localize('testState.failed', 'Failed'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestResultState.Passed]: localize('testState.passed', 'Passed'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestResultState.Queued]: localize('testState.queued', 'Queued'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestResultState.Running]: localize('testState.running', 'Running'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestResultState.Skipped]: localize('testState.skipped', 'Skipped'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestResultState.Unset]: localize('testState.unset', 'Not yet run'),
src/vs/workbench/contrib/testing/common/constants.ts:export const labelForTestInState = (label: string, state: TestResultState) => localize({
src/vs/workbench/contrib/testing/common/constants.ts:	[TestRunProfileBitset.Debug]: localize('testGroup.debug', 'Debug'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestRunProfileBitset.Run]: localize('testGroup.run', 'Run'),
src/vs/workbench/contrib/testing/common/constants.ts:	[TestRunProfileBitset.Coverage]: localize('testGroup.coverage', 'Coverage'),
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:export const manageExtensionIcon = registerIcon('theme-selection-manage-extension', Codicon.gear, localize('manageExtensionIcon', 'Icon for the \'Manage\' action in the theme selection quick pick.'));
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			quickpick.placeholder = localize('themes.selectMarketplaceTheme', "Type to Search More. Select to Install. Up/Down Keys to Preview");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:				title: localize('installing extensions', "Installing Extension {0}...", galleryExtension.displayName)
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			title: { value: localize('selectTheme.label', "Color Theme"), original: 'Color Theme' },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const installMessage = localize('installColorThemes', "Install Additional Color Themes...");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const browseMessage = '$(plus) ' + localize('browseColorThemes', "Browse Additional Color Themes...");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const placeholderMessage = localize('themes.selectTheme', "Select Color Theme (Up/Down Keys to Preview)");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			...toEntries(themes.filter(t => t.type === ColorScheme.LIGHT), localize('themes.category.light', "light themes")),
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			...toEntries(themes.filter(t => t.type === ColorScheme.DARK), localize('themes.category.dark', "dark themes")),
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			...toEntries(themes.filter(t => isHighContrast(t.type)), localize('themes.category.hc', "high contrast themes")),
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			title: { value: localize('selectIconTheme.label', "File Icon Theme"), original: 'File Icon Theme' },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const installMessage = localize('installIconThemes', "Install Additional File Icon Themes...");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const placeholderMessage = localize('themes.selectIconTheme', "Select File Icon Theme (Up/Down Keys to Preview)");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			{ type: 'separator', label: localize('fileIconThemeCategory', 'file icon themes') },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			{ id: '', theme: FileIconThemeData.noIconTheme, label: localize('noIconThemeLabel', 'None'), description: localize('noIconThemeDesc', 'Disable File Icons') },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			title: { value: localize('selectProductIconTheme.label', "Product Icon Theme"), original: 'Product Icon Theme' },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const installMessage = localize('installProductIconThemes', "Install Additional Product Icon Themes...");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const browseMessage = '$(plus) ' + localize('browseProductIconThemes', "Browse Additional Product Icon Themes...");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		const placeholderMessage = localize('themes.selectProductIconTheme', "Select Product Icon Theme (Up/Down Keys to Preview)");
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			{ type: 'separator', label: localize('productIconThemeCategory', 'product icon themes') },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			{ id: DEFAULT_PRODUCT_ICON_THEME_ID, theme: ProductIconThemeData.defaultTheme, label: localize('defaultProductIconThemeLabel', 'Default') },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:	tooltip: localize('manage extension', "Manage Extension"),
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			title: { value: localize('generateColorTheme.label', "Generate Color Theme From Current Settings"), original: 'Generate Color Theme From Current Settings' },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:			title: { value: localize('toggleLightDarkThemes.label', "Toggle between Light/Dark Themes"), original: 'Toggle between Light/Dark Themes' },
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		title: localize({ key: 'miSelectColorTheme', comment: ['&& denotes a mnemonic'] }, "&&Color Theme")
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		title: localize({ key: 'miSelectIconTheme', comment: ['&& denotes a mnemonic'] }, "File &&Icon Theme")
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		title: localize({ key: 'miSelectProductIconTheme', comment: ['&& denotes a mnemonic'] }, "&&Product Icon Theme")
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		title: localize('selectTheme.label', "Color Theme")
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		title: localize('themes.selectIconTheme.label', "File Icon Theme")
src/vs/workbench/contrib/themes/browser/themes.contribution.ts:		title: localize('themes.selectProductIconTheme.label', "Product Icon Theme")
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:								label = localize('label.dfl', "Search");
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:								label = localize('label1', "{0} {1}", prefix, label);
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:								label = localize('label2', "{0} {1}", label, suffix);
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:								? localize('title', "Search {0} ({1}) \u2014 {2}", windowTitle.workspaceName, kb, windowTitle.value)
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:								: localize('title2', "Search {0} \u2014 {1}", windowTitle.workspaceName, windowTitle.value);
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-foreground', "Foreground color of the command center"),
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-activeForeground', "Active foreground color of the command center"),
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-inactiveForeground', "Foreground color of the command center when the window is inactive"),
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-background', "Background color of the command center"),
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-activeBackground', "Active background color of the command center"),
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-border', "Border color of the command center"),
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-activeBorder', "Active border color of the command center"),
src/vs/workbench/browser/parts/titlebar/commandCenterControl.ts:	localize('commandCenter-inactiveBorder', "Border color of the command center when the window is inactive"),
src/vs/workbench/contrib/terminal/electron-sandbox/terminalRemote.ts:				title: { value: localize('workbench.action.terminal.newLocal', "Create New Integrated Terminal (Local)"), original: 'Create New Integrated Terminal (Local)' },
src/vs/workbench/contrib/testing/browser/testingProgressUiService.ts:			return localize('testProgress.runningInitial', 'Running tests...');
src/vs/workbench/contrib/testing/browser/testingProgressUiService.ts:			return localize('testProgress.running', 'Running tests, {0}/{1} passed ({2}%)', passed, totalWillBeRun, percent.toPrecision(3));
src/vs/workbench/contrib/testing/browser/testingProgressUiService.ts:			return localize('testProgressWithSkip.running', 'Running tests, {0}/{1} tests passed ({2}%, {3} skipped)', passed, totalWillBeRun, percent.toPrecision(3), skipped);
src/vs/workbench/contrib/testing/browser/testingProgressUiService.ts:			return localize('testProgress.completed', '{0}/{1} tests passed ({2}%)', passed, runSoFar, percent.toPrecision(3));
src/vs/workbench/contrib/testing/browser/testingProgressUiService.ts:			return localize('testProgressWithSkip.completed', '{0}/{1} tests passed ({2}%, {3} skipped)', passed, runSoFar, percent.toPrecision(3), skipped);
src/vs/workbench/contrib/testing/browser/testingOutputTerminalService.ts:		? localize('testOutputTerminalTitleWithDate', 'Test Output at {0}', friendlyDate(result.completedAt ?? Date.now()))
src/vs/workbench/contrib/testing/browser/testingOutputTerminalService.ts:const genericTitle = localize('testOutputTerminalTitle', 'Test Output');
src/vs/workbench/contrib/testing/browser/testingOutputTerminalService.ts:			setTimeout(() => output.pushData(localize('testNoRunYet', '\r\nNo tests have been run, yet.\r\n')));
src/vs/workbench/contrib/testing/browser/testingOutputTerminalService.ts:					output.pushData(`\x1b[2m${localize('runNoOutout', 'The test run did not record any output.')}\x1b[0m`);
src/vs/workbench/contrib/testing/browser/testingOutputTerminalService.ts:				const text = localize('runFinished', 'Test run finished at {0}', completedAt.toLocaleString());
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:	terminal: localize('terminal', "Terminal"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:	new: localize('terminal.new', "New Terminal"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:	doNotShowAgain: localize('doNotShowAgain', 'Do Not Show Again'),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:	currentSessionCategory: localize('currentSessionCategory', 'current session'),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:	previousSessionCategory: localize('previousSessionCategory', 'previous session'),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('workbench.action.terminal.focus', "Focus Terminal"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('killTerminal', "Kill Terminal"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		short: localize('killTerminal.short', "Kill"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('moveToEditor', "Move Terminal into Editor Area"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('workbench.action.terminal.moveToTerminalPanel', "Move Terminal into Panel"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('workbench.action.terminal.changeIcon', "Change Icon..."),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('workbench.action.terminal.changeColor', "Change Color..."),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('splitTerminal', "Split Terminal"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		short: localize('splitTerminal.short', "Split"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('unsplitTerminal', "Unsplit Terminal"),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('workbench.action.terminal.rename', "Rename..."),
src/vs/workbench/contrib/terminal/common/terminalStrings.ts:		value: localize('workbench.action.terminal.sizeToContentWidthInstance', "Toggle Size to Content Width"),
src/vs/workbench/contrib/testing/browser/testingConfigurationUi.ts:	placeholder = localize('testConfigurationUi.pick', 'Pick a test profile to use'),
src/vs/workbench/contrib/testing/browser/testingConfigurationUi.ts:							tooltip: localize('updateTestConfiguration', 'Update Test Configuration')
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:		Terminal.strings.promptLabel = nls.localize('terminal.integrated.a11yPromptLabel', 'Terminal input');
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:		Terminal.strings.tooMuchOutput = nls.localize('terminal.integrated.a11yTooMuchOutput', 'Too much output to announce, navigate to rows manually to read');
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				return nls.localize('terminalTypeTask', "Task");
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			return nls.localize('terminalTypeLocal', "Local");
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:						tooltip: nls.localize('bellStatus', "Bell")
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:						nls.localize('keybindingHandling', "Some keybindings don't go to the terminal by default and are handled by {0} instead.", this._productService.nameLong),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:								label: nls.localize('configureTerminalSettings', "Configure Terminal Settings"),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			this._notificationService.warn(nls.localize('terminal.integrated.copySelection.noSelection', 'The terminal has no selection to copy'));
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:		let detail = nls.localize('preview', "Preview:");
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			message: nls.localize('confirmMoveTrashMessageFilesAndDirectories', "Are you sure you want to paste {0} lines of text into the terminal?", textForLines.length),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			primaryButton: nls.localize({ key: 'multiLinePasteButton', comment: ['&& denotes a mnemonic'] }, "&&Paste"),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				label: nls.localize('doNotAskAgain', "Do not ask me again")
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				tooltip: nls.localize('disconnectStatus', "Lost connection to process")
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				this._onProcessExit({ message: nls.localize('workspaceNotTrustedCreateTerminal', "Cannot launch a terminal process in an untrusted workspace") });
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				message: nls.localize('workspaceNotTrustedCreateTerminalCwd', "Cannot launch a terminal process in an untrusted workspace with cwd {0} and userHome {1}", this._cwd, this._userHome)
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			tooltip: (`${exitMessage} ` ?? '') + nls.localize('launchFailed.exitCodeOnlyShellIntegration', 'Disabling shell integration in user settings might help.'),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				label: nls.localize('shellIntegration.learnMore', "Learn more about shell integration"),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				label: nls.localize('shellIntegration.openSettings', "Open user settings"),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				message: nls.localize('terminal.requestTrust', "Creating a terminal process requires executing code")
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				label = nls.localize('terminalTextBoxAriaLabelNumberAndTitle', "Terminal {0}, {1}", terminalId, title);
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				label = nls.localize('terminalTextBoxAriaLabel', "Terminal {0}", terminalId);
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:				label += `\n${nls.localize('terminalNavigationMode', "Use {0} and {1} to navigate the terminal buffer", navigateUpKeybinding, navigateDownKeybinding)}`;
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			title: nls.localize('setTerminalDimensionsColumn', "Set Fixed Dimensions: Column"),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			title: nls.localize('setTerminalDimensionsRow', "Set Fixed Dimensions: Row"),
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			this.xterm?.raw.textarea?.setAttribute('aria-label', nls.localize('terminalStaleTextBoxAriaLabel', "Terminal {0} environment is stale, run the 'Show Environment Information' command for more information", this._instanceId));
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:					message = nls.localize('launchFailed.exitCodeAndCommandLine', "The terminal process \"{0}\" failed to launch (exit code: {1}).", commandLine, code);
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:					message = nls.localize('launchFailed.exitCodeOnly', "The terminal process failed to launch (exit code: {0}).", code);
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:					message = nls.localize('terminated.exitCodeAndCommandLine', "The terminal process \"{0}\" terminated with exit code: {1}.", commandLine, code);
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:					message = nls.localize('terminated.exitCodeOnly', "The terminal process terminated with exit code: {0}.", code);
src/vs/workbench/contrib/terminal/browser/terminalInstance.ts:			message = nls.localize('launchFailed.errorMessage', "The terminal process failed to launch: {0}.", innerMessage);
src/vs/workbench/contrib/testing/browser/testingViewPaneContainer.ts:		return localize('testing', "Testing");
src/vs/workbench/contrib/terminal/browser/terminalView.ts:						label: nls.localize('terminal.useMonospace', "Use 'monospace'"),
src/vs/workbench/contrib/terminal/browser/terminalView.ts:					this._notificationService.prompt(Severity.Warning, nls.localize('terminal.monospaceOnly', "The terminal only supports monospace fonts. Be sure to restart VS Code if this is a newly installed font."), choices);
src/vs/workbench/contrib/terminal/browser/terminalView.ts:		super(null, action, getTerminalSelectOpenItems(_terminalService, _terminalGroupService), _terminalGroupService.activeGroupIndex, contextViewService, { ariaLabel: nls.localize('terminals', 'Open Terminals.'), optionsAsChildren: true });
src/vs/workbench/contrib/terminal/browser/terminalView.ts:		items = [{ text: nls.localize('terminalConnectingLabel', "Starting...") }];
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const terminalViewIcon = registerIcon('terminal-view-icon', Codicon.terminal, localize('terminalViewIcon', 'View icon of the terminal view.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const renameTerminalIcon = registerIcon('terminal-rename', Codicon.gear, localize('renameTerminalIcon', 'Icon for rename in the terminal quick menu.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const killTerminalIcon = registerIcon('terminal-kill', Codicon.trash, localize('killTerminalIcon', 'Icon for killing a terminal instance.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const newTerminalIcon = registerIcon('terminal-new', Codicon.add, localize('newTerminalIcon', 'Icon for creating a new terminal instance.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const configureTerminalProfileIcon = registerIcon('terminal-configure-profile', Codicon.gear, localize('configureTerminalProfileIcon', 'Icon for creating a new terminal profile.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const terminalDecorationMark = registerIcon('terminal-decoration-mark', Codicon.circleSmallFilled, localize('terminalDecorationMark', 'Icon for a terminal decoration mark.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const terminalDecorationIncomplete = registerIcon('terminal-decoration-incomplete', Codicon.circle, localize('terminalDecorationIncomplete', 'Icon for a terminal decoration of a command that was incomplete.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const terminalDecorationError = registerIcon('terminal-decoration-error', Codicon.errorSmall, localize('terminalDecorationError', 'Icon for a terminal decoration of a command that errored.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const terminalDecorationSuccess = registerIcon('terminal-decoration-success', Codicon.circleFilled, localize('terminalDecorationSuccess', 'Icon for a terminal decoration of a command that was successful.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const commandHistoryRemoveIcon = registerIcon('terminal-command-history-remove', Codicon.close, localize('terminalCommandHistoryRemove', 'Icon for removing a terminal command from command history.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const commandHistoryOutputIcon = registerIcon('terminal-command-history-output', Codicon.output, localize('terminalCommandHistoryOutput', 'Icon for viewing output of a terminal command.'));
src/vs/workbench/contrib/terminal/browser/terminalIcons.ts:export const commandHistoryFuzzySearchIcon = registerIcon('terminal-command-history-fuzzy-search', Codicon.searchFuzzy, localize('terminalCommandHistoryFuzzySearch', 'Icon for toggling fuzzy search of command history.'));
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:			const labelRun = localize("terminal.rerunCommand", 'Rerun Command');
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:			const labelCopy = localize("terminal.copyCommand", 'Copy Command');
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:			const labelText = localize("terminal.copyOutput", 'Copy Output');
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:			const labelHtml = localize("terminal.copyOutputAsHtml", 'Copy Output as HTML');
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:		const labelConfigure = localize("terminal.configureCommandDecorations", 'Configure Command Decorations');
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:		const labelAbout = localize("terminal.learnShellIntegration", 'Learn About Shell Integration');
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:			{ id: 'a', label: localize('toggleVisibility', 'Toggle visibility') },
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:		quickPick.title = localize('toggleVisibility', 'Toggle visibility');
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:			label: localize('gutter', 'Gutter command decorations'),
src/vs/workbench/contrib/terminal/browser/xterm/decorationAddon.ts:			label: localize('overviewRuler', 'Overview ruler command decorations'),
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:						building.appendMarkdown(`[${localize('peekTestOutout', 'Peek Test Output')}](command:vscode.peekTestError?${args})`);
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:		return localize('expected.title', 'Expected');
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:		return localize('actual.title', 'Actual');
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:				return localize('testing.gutterMsg.contextMenu', 'Click for test options');
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:				return localize('testing.gutterMsg.debug', 'Click to debug tests, right click for more options');
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:				return localize('testing.gutterMsg.run', 'Click to run tests, right click for more options');
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:			testActions.push(new Action('testing.gutter.run', localize('run test', 'Run Test'), undefined, undefined, () => this.testService.runTests({
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:			testActions.push(new Action('testing.gutter.debug', localize('debug test', 'Debug Test'), undefined, undefined, () => this.testService.runTests({
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:			testActions.push(new Action('testing.runUsing', localize('testing.runUsing', 'Execute Using Profile...'), undefined, undefined, async () => {
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:			testActions.push(new Action('testing.gutter.peekFailure', localize('peek failure', 'Peek Error'), undefined, undefined,
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:		testActions.push(new Action('testing.gutter.reveal', localize('reveal test', 'Reveal in Test Explorer'), undefined, undefined,
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:			allActions.push(new Action('testing.gutter.runAll', localize('run all test', 'Run All Tests'), undefined, undefined, () => this.defaultRun()));
src/vs/workbench/contrib/testing/browser/testingDecorations.ts:			allActions.push(new Action('testing.gutter.debugAll', localize('debug all test', 'Debug All Tests'), undefined, undefined, () => this.defaultDebug()));
src/vs/workbench/contrib/terminal/browser/terminalTabsList.ts:			ariaLabel: localize('terminalInputAriaLabel', "Type terminal name. Press Enter to confirm or Escape to cancel.")
src/vs/workbench/contrib/terminal/browser/terminalTabsList.ts:		return localize('terminal.tabs', "Terminal tabs");
src/vs/workbench/contrib/terminal/browser/terminalTabsList.ts:			ariaLabel = localize({
src/vs/workbench/contrib/terminal/browser/terminalTabsList.ts:			ariaLabel = localize({
src/vs/workbench/contrib/terminal/browser/terminalService.ts:			message = nls.localize('terminalService.terminalCloseConfirmationSingular', "Do you want to terminate the active terminal session?");
src/vs/workbench/contrib/terminal/browser/terminalService.ts:			message = nls.localize('terminalService.terminalCloseConfirmationPlural', "Do you want to terminate the {0} active terminal sessions?", this.instances.length);
src/vs/workbench/contrib/terminal/browser/terminalService.ts:			primaryButton: nls.localize('terminate', "Terminate"),
src/vs/workbench/contrib/terminal/browser/terminalService.ts:				shellLaunchConfig.initialText = formatMessageForTerminal(nls.localize('localTerminalVirtualWorkspace', "This shell is open to a {0}local{1} folder, NOT to the virtual folder", '\x1b[3m', '\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true });
src/vs/workbench/contrib/terminal/browser/terminalService.ts:				shellLaunchConfig.initialText = formatMessageForTerminal(nls.localize('localTerminalRemote', "This shell is running on your {0}local{1} machine, NOT on the connected remote machine", '\x1b[3m', '\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true });
src/vs/workbench/contrib/terminal/browser/xterm/quickFixAddon.ts:		const hoverLabel = kb ? localize('terminalQuickFixWithKb', "Show Quick Fixes ({0})", kb.getLabel()) : '';
src/vs/workbench/contrib/terminal/browser/xterm/quickFixAddon.ts:								const label = localize('quickFix.command', 'Run: {0}', quickFix.command);
src/vs/workbench/contrib/terminal/browser/xterm/quickFixAddon.ts:								const label = localize('quickFix.opener', 'Open: {0}', quickFix.uri.toString());
src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts:							label: localize('yes', "Yes"),
src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts:							label: localize('no', "No"),
src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts:							label: localize('dontShowAgain', "Don't Show Again"),
src/vs/workbench/contrib/terminal/browser/xterm/xtermTerminal.ts:						localize('terminal.slowRendering', 'Terminal GPU acceleration appears to be slow on your computer. Would you like to switch to disable it which may improve performance? [Read more about terminal settings](https://code.visualstudio.com/docs/editor/integrated-terminal#_changing-how-the-terminal-is-rendered).'),
src/vs/workbench/contrib/terminal/browser/terminalQuickAccess.ts:		const createTerminalLabel = localize("workbench.action.terminal.newplus", "Create New Terminal");
src/vs/workbench/contrib/terminal/browser/terminalQuickAccess.ts:		const createWithProfileLabel = localize("workbench.action.terminal.newWithProfilePlus", "Create New Terminal With Profile");
src/vs/workbench/contrib/terminal/browser/terminalQuickAccess.ts:						tooltip: localize('renameTerminal', "Rename Terminal")
src/vs/workbench/contrib/terminal/browser/terminalTabbedView.ts:				new Action('moveRight', localize('moveTabsRight', "Move Tabs Right"), undefined, undefined, async () => {
src/vs/workbench/contrib/terminal/browser/terminalTabbedView.ts:				new Action('moveLeft', localize('moveTabsLeft', "Move Tabs Left"), undefined, undefined, async () => {
src/vs/workbench/contrib/terminal/browser/terminalTabbedView.ts:			new Action('hideTabs', localize('hideTabs', "Hide Tabs"), undefined, undefined, async () => {
src/vs/workbench/contrib/terminal/browser/terminalTooltip.ts:		shellIntegrationString += `${markdown ? '\n\n---\n\n' : '\n\n'} ${localize('shellIntegration.enabled', "Shell integration activated")}`;
src/vs/workbench/contrib/terminal/browser/terminalTooltip.ts:			shellIntegrationString += `${markdown ? '\n\n---\n\n' : '\n\n'} ${localize('launchFailed.exitCodeOnlyShellIntegration', "The terminal process failed to launch. Disabling shell integration with terminal.integrated.shellIntegration.enabled might help.")}`;
src/vs/workbench/contrib/terminal/browser/terminalTooltip.ts:				shellIntegrationString += `${markdown ? '\n\n---\n\n' : '\n\n'} ${localize('shellIntegration.activationFailed', "Shell integration failed to activate")}`;
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.iconFailed', "Color for the 'failed' icon in the test explorer."));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.iconErrored', "Color for the 'Errored' icon in the test explorer."));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.iconPassed', "Color for the 'passed' icon in the test explorer."));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.runAction', "Color for 'run' icons in the editor."));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.iconQueued', "Color for the 'Queued' icon in the test explorer."));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.iconUnset', "Color for the 'Unset' icon in the test explorer."));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.iconSkipped', "Color for the 'Skipped' icon in the test explorer."));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.peekBorder', 'Color of the peek view borders and arrow.'));
src/vs/workbench/contrib/testing/browser/theme.ts:}, localize('testing.peekBorder', 'Color of the peek view borders and arrow.'));
src/vs/workbench/contrib/testing/browser/theme.ts:			localize('testing.message.error.decorationForeground', 'Text color of test error messages shown inline in the editor.')
src/vs/workbench/contrib/testing/browser/theme.ts:			localize('testing.message.error.marginBackground', 'Margin color beside error messages shown inline in the editor.')
src/vs/workbench/contrib/testing/browser/theme.ts:			localize('testing.message.info.decorationForeground', 'Text color of test info messages shown inline in the editor.')
src/vs/workbench/contrib/testing/browser/theme.ts:			localize('testing.message.info.marginBackground', 'Margin color beside info messages shown inline in the editor.')
src/vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts:		tooltip: localize('removeCommand', "Remove from Command History")
src/vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts:		tooltip: localize('viewCommandOutput', "View Command Output"),
src/vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts:		placeholder = isMacintosh ? localize('selectRecentCommandMac', 'Select a command to run (hold Option-key to edit the command)') : localize('selectRecentCommand', 'Select a command to run (hold Alt-key to edit the command)');
src/vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts:				{ type: 'separator', label: localize('shellFileHistoryCategory', '{0} history', instance.shellType) },
src/vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts:			? localize('selectRecentDirectoryMac', 'Select a directory to go to (hold Option-key to edit the command)')
src/vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts:			: localize('selectRecentDirectory', 'Select a directory to go to (hold Alt-key to edit the command)');
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize({ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, "&&New Terminal")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, "&&Split Terminal"),
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize({ key: 'miRunActiveFile', comment: ['&& denotes a mnemonic'] }, "Run &&Active File")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize({ key: 'miRunSelectedText', comment: ['&& denotes a mnemonic'] }, "Run &&Selected Text")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.copySelection.short', "Copy")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.copySelectionAsHtml', "Copy as HTML")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.paste.short', "Paste")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.clear', "Clear")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.showsTabs', "Show Tabs")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.selectAll', "Select All"),
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.copySelection.short', "Copy")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.copySelectionAsHtml', "Copy as HTML")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.paste.short', "Paste")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.clear', "Clear")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.selectAll', "Select All"),
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.newWithProfile.short', "New Terminal With Profile")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: { value: localize('workbench.action.terminal.selectDefaultProfile', "Select Default Profile"), original: 'Select Default Profile' },
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.openSettings', "Configure Terminal Settings")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.tasks.runTask', "Run Task...")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.tasks.configureTaskRunner', "Configure Tasks...")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: { value: localize('workbench.action.terminal.switchTerminal', "Switch Terminal"), original: 'Switch Terminal' }
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.sizeToContentWidthInstance', "Toggle Size to Content Width")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.renameInstance', "Rename...")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.changeIcon', "Change Icon...")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.changeColor', "Change Color...")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.sizeToContentWidthInstance', "Toggle Size to Content Width")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:						title: localize('workbench.action.terminal.joinInstance', "Join Terminals")
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:		dropdownActions.push(new Action(TerminalCommandId.NewWithProfile, isDefault ? localize('defaultTerminalProfile', "{0} (Default)", sanitizedProfileName) : sanitizedProfileName, undefined, true, async () => {
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:		submenuActions.push(new Action(TerminalCommandId.Split, isDefault ? localize('defaultTerminalProfile', "{0} (Default)", sanitizedProfileName) : sanitizedProfileName, undefined, true, async () => {
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:		const title = isDefault ? localize('defaultTerminalProfile', "{0} (Default)", contributed.title.replace(/[\n\r\t]/g, '')) : contributed.title.replace(/[\n\r\t]/g, '');
src/vs/workbench/contrib/terminal/browser/terminalMenus.ts:		dropdownActions.push(new SubmenuAction('split.profile', localize('splitTerminal', 'Split Terminal'), submenuActions));
src/vs/workbench/contrib/terminal/browser/xterm/decorationStyles.ts:					let hoverContent = `${localize('terminalPromptContextMenu', "Show Command Actions")}`;
src/vs/workbench/contrib/terminal/browser/xterm/decorationStyles.ts:							hoverContent += localize('terminalPromptCommandFailed', 'Command executed {0} and failed', fromNow(command.timestamp, true));
src/vs/workbench/contrib/terminal/browser/xterm/decorationStyles.ts:							hoverContent += localize('terminalPromptCommandFailedWithExitCode', 'Command executed {0} and failed (Exit Code {1})', fromNow(command.timestamp, true), command.exitCode);
src/vs/workbench/contrib/terminal/browser/xterm/decorationStyles.ts:						hoverContent += localize('terminalPromptCommandSuccess', 'Command executed {0}', fromNow(command.timestamp, true));
src/vs/workbench/contrib/terminal/browser/terminalProfileResolverService.ts:				localize('terminalProfileMigration', "The terminal is using deprecated shell/shellArgs settings, do you want to migrate it to a profile?"),
src/vs/workbench/contrib/terminal/browser/terminalProfileResolverService.ts:						label: localize('migrateToProfile', "Migrate"),
src/vs/workbench/contrib/terminal/browser/terminalEditorInput.ts:			localize('confirmDirtyTerminal.message', "Do you want to terminate running processes?"),
src/vs/workbench/contrib/terminal/browser/terminalEditorInput.ts:				localize({ key: 'confirmDirtyTerminal.button', comment: ['&& denotes a mnemonic'] }, "&&Terminate"),
src/vs/workbench/contrib/terminal/browser/terminalEditorInput.ts:				localize('cancel', "Cancel")
src/vs/workbench/contrib/terminal/browser/terminalEditorInput.ts:					terminals.map(terminal => terminal.editor.getName()).join('\n') + '\n\n' + localize('confirmDirtyTerminals.detail', "Closing will terminate the running processes in the terminals.") :
src/vs/workbench/contrib/terminal/browser/terminalEditorInput.ts:					localize('confirmDirtyTerminal.detail', "Closing will terminate the running processes in this terminal.")
src/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts:			placeHolder: type === 'createInstance' ? nls.localize('terminal.integrated.selectProfileToCreate', "Select the terminal profile to create") : nls.localize('terminal.integrated.chooseDefaultProfile', "Select your default terminal profile"),
src/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts:					prompt: nls.localize('enterTerminalProfileName', "Enter terminal profile name"),
src/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts:							return nls.localize('terminalProfileAlreadyExists', "A terminal profile already exists with that name");
src/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts:			quickPickItems.push({ type: 'separator', label: nls.localize('terminalProfiles', "profiles") });
src/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts:		quickPickItems.push({ type: 'separator', label: nls.localize('ICreateContributedTerminalProfileOptions', "contributed") });
src/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts:			quickPickItems.push({ type: 'separator', label: nls.localize('terminalProfiles.detected', "detected") });
src/vs/workbench/contrib/terminal/browser/terminalProfileQuickpick.ts:			tooltip: nls.localize('createQuickLaunchProfile', "Configure Terminal Profile")
src/vs/workbench/contrib/terminal/browser/terminalConfigHelper.ts:					nls.localize(
src/vs/workbench/contrib/terminal/browser/terminalConfigHelper.ts:							label: nls.localize('install', 'Install'),
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const focus = new RawContextKey<boolean>(TerminalContextKeyStrings.Focus, false, localize('terminalFocusContextKey', "Whether the terminal is focused."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const editorFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.EditorFocus, false, localize('terminalEditorFocusContextKey', "Whether a terminal in the editor area is focused."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const count = new RawContextKey<number>(TerminalContextKeyStrings.Count, 0, localize('terminalCountContextKey', "The current number of terminals."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const tabsFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsFocus, false, localize('terminalTabsFocusContextKey', "Whether the terminal tabs widget is focused."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const shellType = new RawContextKey<string>(TerminalContextKeyStrings.ShellType, undefined, { type: 'string', description: localize('terminalShellTypeContextKey', "The shell type of the active terminal, this is set to the last known value when no terminals exist.") });
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const altBufferActive = new RawContextKey<boolean>(TerminalContextKeyStrings.AltBufferActive, false, localize('terminalAltBufferActive', "Whether the terminal's alt buffer is active."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const viewShowing = new RawContextKey<boolean>(TerminalContextKeyStrings.ViewShowing, false, localize('terminalViewShowing', "Whether the terminal view is showing"));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const textSelected = new RawContextKey<boolean>(TerminalContextKeyStrings.TextSelected, false, localize('terminalTextSelectedContextKey', "Whether text is selected in the active terminal."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const processSupported = new RawContextKey<boolean>(TerminalContextKeyStrings.ProcessSupported, false, localize('terminalProcessSupportedContextKey', "Whether terminal processes can be launched in the current workspace."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const tabsSingularSelection = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsSingularSelection, false, localize('terminalTabsSingularSelectedContextKey', "Whether one terminal is selected in the terminal tabs list."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const splitTerminal = new RawContextKey<boolean>(TerminalContextKeyStrings.SplitTerminal, false, localize('isSplitTerminalContextKey', "Whether the focused tab's terminal is a split terminal."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const inTerminalRunCommandPicker = new RawContextKey<boolean>(TerminalContextKeyStrings.InTerminalRunCommandPicker, false, localize('inTerminalRunCommandPickerContextKey', "Whether the terminal run command picker is currently open."));
src/vs/workbench/contrib/terminal/common/terminalContextKey.ts:	export const terminalShellIntegrationEnabled = new RawContextKey<boolean>(TerminalContextKeyStrings.TerminalShellIntegrationEnabled, false, localize('terminalShellIntegrationEnabled', "Whether shell integration is enabled in the active terminal"));
src/vs/workbench/contrib/terminal/browser/terminal.contribution.ts:	placeholder: nls.localize('tasksQuickAccessPlaceholder', "Type the name of a terminal to open."),
src/vs/workbench/contrib/terminal/browser/terminal.contribution.ts:	helpEntries: [{ description: nls.localize('tasksQuickAccessHelp', "Show All Opened Terminals"), commandId: TerminalCommandId.QuickOpenTerm }]
src/vs/workbench/contrib/terminal/browser/terminal.contribution.ts:	title: nls.localize('terminal', "Terminal"),
src/vs/workbench/contrib/terminal/browser/terminal.contribution.ts:	name: nls.localize('terminal', "Terminal"),
src/vs/workbench/contrib/terminal/browser/terminal.contribution.ts:		mnemonicTitle: nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, "&&Terminal"),
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:export const switchTerminalShowTabsTitle = localize('showTerminalTabs', "Show Tabs");
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:						placeHolder: localize('workbench.action.terminal.newWorkspacePlaceholder', "Select current working directory for new terminal")
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:		super('workbench.action.terminal.launchHelp', localize('terminalLaunchHelp', "Open Help"));
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.newInActiveWorkspace', "Create New Terminal (In Active Workspace)"), original: 'Create New Terminal (In Active Workspace)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.quickFix', "Quick Fix"), original: 'Quick Fix' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.createTerminalEditor', "Create New Terminal in Editor Area"), original: 'Create New Terminal in Editor Area' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.createTerminalEditorSide', "Create New Terminal in Editor Area to the Side"), original: 'Create New Terminal in Editor Area to the Side' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.showTabs', "Show Tabs"), original: 'Show Tabs' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.focusPreviousPane', "Focus Previous Terminal in Terminal Group"), original: 'Focus Previous Terminal in Terminal Group' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.focusNextPane', "Focus Next Terminal in Terminal Group"), original: 'Focus Next Terminal in Terminal Group' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.runRecentCommand', "Run Recent Command..."), original: 'Run Recent Command...' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.copyLastCommand', 'Copy Last Command'), original: 'Copy Last Command' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.goToRecentDirectory', "Go to Recent Directory..."), original: 'Go to Recent Directory...' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.resizePaneLeft', "Resize Terminal Left"), original: 'Resize Terminal Left' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.resizePaneRight', "Resize Terminal Right"), original: 'Resize Terminal Right' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.resizePaneUp', "Resize Terminal Up"), original: 'Resize Terminal Up' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.resizePaneDown', "Resize Terminal Down"), original: 'Resize Terminal Down' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.focus.tabsView', "Focus Terminal Tabs View"), original: 'Focus Terminal Tabs View' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.focusNext', "Focus Next Terminal Group"), original: 'Focus Next Terminal Group' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.focusPrevious', "Focus Previous Terminal Group"), original: 'Focus Previous Terminal Group' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.runSelectedText', "Run Selected Text In Active Terminal"), original: 'Run Selected Text In Active Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.runActiveFile', "Run Active File In Active Terminal"), original: 'Run Active File In Active Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				notificationService.warn(localize('workbench.action.terminal.runActiveFile.noFile', 'Only files on disk can be run in the terminal'));
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollDown', "Scroll Down (Line)"), original: 'Scroll Down (Line)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollDownPage', "Scroll Down (Page)"), original: 'Scroll Down (Page)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollToBottom', "Scroll to Bottom"), original: 'Scroll to Bottom' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollUp', "Scroll Up (Line)"), original: 'Scroll Up (Line)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollUpPage', "Scroll Up (Page)"), original: 'Scroll Up (Page)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollToTop', "Scroll to Top"), original: 'Scroll to Top' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.navigationModeExit', "Exit Navigation Mode"), original: 'Exit Navigation Mode' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.navigationModeFocusPrevious', "Focus Previous Line (Navigation Mode)"), original: 'Focus Previous Line (Navigation Mode)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.navigationModeFocusPreviousPage', "Focus Previous Page (Navigation Mode)"), original: 'Focus Previous Page (Navigation Mode)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.navigationModeFocusNext', "Focus Next Line (Navigation Mode)"), original: 'Focus Next Line (Navigation Mode)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.navigationModeFocusNextPage', "Focus Next Page (Navigation Mode)"), original: 'Focus Next Page (Navigation Mode)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.clearSelection', "Clear Selection"), original: 'Clear Selection' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				prompt: localize('workbench.action.terminal.rename.prompt', "Enter terminal name"),
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.focusFind', "Focus Find"), original: 'Focus Find' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.hideFind', "Hide Find"), original: 'Hide Find' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.detachSession', "Detach Session"), original: 'Detach Session' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.attachToSession', "Attach to Session"), original: 'Attach to Session' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				notificationService.info(localize('noUnattachedTerminals', 'There are no unattached terminals to attach to'));
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('quickAccessTerminal', "Switch Active Terminal"), original: 'Switch Active Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollToPreviousCommand', "Scroll To Previous Command"), original: 'Scroll To Previous Command' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.scrollToNextCommand', "Scroll To Next Command"), original: 'Scroll To Next Command' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.selectToPreviousCommand', "Select To Previous Command"), original: 'Select To Previous Command' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.selectToNextCommand', "Select To Next Command"), original: 'Select To Next Command' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.selectToPreviousLine', "Select To Previous Line"), original: 'Select To Previous Line' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.selectToNextLine', "Select To Next Line"), original: 'Select To Next Line' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.toggleEscapeSequenceLogging', "Toggle Escape Sequence Logging"), original: 'Toggle Escape Sequence Logging' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:			const title = localize('workbench.action.terminal.sendSequence', "Send Custom Sequence To Terminal");
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:			const title = localize('workbench.action.terminal.newWithCwd', "Create New Terminal Starting in a Custom Working Directory");
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:									description: localize('workbench.action.terminal.newWithCwd.cwd', "The directory to start the terminal at"),
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:			const title = localize('workbench.action.terminal.renameWithArg', "Rename the Currently Active Terminal");
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:									description: localize('workbench.action.terminal.renameWithArg.name', "The new name for the terminal"),
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				notificationService.warn(localize('workbench.action.terminal.renameWithArg.noName', "No name argument provided"));
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.toggleFindRegex', "Toggle Find Using Regex"), original: 'Toggle Find Using Regex' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.toggleFindWholeWord', "Toggle Find Using Whole Word"), original: 'Toggle Find Using Whole Word' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.toggleFindCaseSensitive', "Toggle Find Using Case Sensitive"), original: 'Toggle Find Using Case Sensitive' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.findNext', "Find Next"), original: 'Find Next' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.findPrevious', "Find Previous"), original: 'Find Previous' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.searchWorkspace', "Search Workspace"), original: 'Search Workspace' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.relaunch', "Relaunch Active Terminal"), original: 'Relaunch Active Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.showEnvironmentInformation', "Show Environment Information"), original: 'Show Environment Information' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.joinInstance', "Join Terminals"), original: 'Join Terminals' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.join', "Join Terminals"), original: 'Join Terminals' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				notificationService.warn(localize('workbench.action.terminal.join.insufficientTerminals', 'Insufficient terminals for the join action'));
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				notificationService.warn(localize('workbench.action.terminal.join.onlySplits', 'All terminals are joined already'));
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.splitInActiveWorkspace', "Split Terminal (In Active Workspace)"), original: 'Split Terminal (In Active Workspace)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.selectAll', "Select All"), original: 'Select All' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.new', "Create New Terminal"), original: 'Create New Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.kill', "Kill the Active Terminal Instance"), original: 'Kill the Active Terminal Instance' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.killAll', "Kill All Terminals"), original: 'Kill All Terminals' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.killEditor', "Kill the Active Terminal in Editor Area"), original: 'Kill the Active Terminal in Editor Area' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.clear', "Clear"), original: 'Clear' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.openDetectedLink', "Open Detected Link..."), original: 'Open Detected Link...' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.openLastUrlLink', "Open Last Url Link"), original: 'Open Last Url Link' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.openLastLocalFileLink', "Open Last Local File Link"), original: 'Open Last Local File Link' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.selectDefaultShell', "Select Default Profile"), original: 'Select Default Profile' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.openSettings', "Configure Terminal Settings"), original: 'Configure Terminal Settings' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.setFixedDimensions', "Set Fixed Dimensions"), original: 'Set Fixed Dimensions' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.sizeToContentWidth', "Toggle Size to Content Width"), original: 'Toggle Size to Content Width' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.clearCommandHistory', "Clear Command History"), original: 'Clear Command History' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.showTextureAtlas', "Show Terminal Texture Atlas"), original: 'Show Terminal Texture Atlas' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.writeDataToTerminal', "Write Data to Terminal"), original: 'Write Data to Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				prompt: localize('workbench.action.terminal.writeDataToTerminal.prompt', "Enter data to write directly to the terminal, bypassing the pty"),
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:					title: { value: localize('workbench.action.terminal.copySelection', "Copy Selection"), original: 'Copy Selection' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:					title: { value: localize('workbench.action.terminal.copySelectionAsHtml', "Copy Selection as HTML"), original: 'Copy Selection as HTML' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:					title: { value: localize('workbench.action.terminal.paste', "Paste into Active Terminal"), original: 'Paste into Active Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:					title: { value: localize('workbench.action.terminal.pasteSelection', "Paste Selection into Active Terminal"), original: 'Paste Selection into Active Terminal' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:	const switchTerminalTitle: ICommandActionTitle = { value: localize('workbench.action.terminal.switchTerminal', "Switch Terminal"), original: 'Switch Terminal' };
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:			content: localize('emptyTerminalNameInfo', "Providing no name will reset it to the default value"),
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:				title: { value: localize('workbench.action.terminal.newWithProfile', "Create New Terminal (With Profile)"), original: 'Create New Terminal (With Profile)' },
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:									description: localize('workbench.action.terminal.newWithProfile.profileName', "The name of the profile to create"),
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:					placeHolder: localize('workbench.action.terminal.newWorkspacePlaceholder', "Select current working directory for new terminal")
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:			? localize('workbench.action.terminal.overriddenCwdDescription', "(Overriden) {0}", labelService.getUriLabel(pair.cwd, { relative: !pair.isAbsolute }))
src/vs/workbench/contrib/terminal/browser/terminalActions.ts:		placeHolder: localize('workbench.action.terminal.newWorkspacePlaceholder', "Select current working directory for new terminal"),
src/vs/workbench/contrib/terminal/browser/terminalDecorationsProvider.ts:	readonly label: string = localize('label', "Terminal");
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${cwd}`: ' + localize("cwd", "the terminal's current working directory"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${cwdFolder}`: ' + localize('cwdFolder', "the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${workspaceFolder}`: ' + localize('workspaceFolder', "the workspace in which the terminal was launched"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${local}`: ' + localize('local', "indicates a local terminal in a remote workspace"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${process}`: ' + localize('process', "the name of the terminal process"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${separator}`: ' + localize('separator', "a conditional separator (\" - \") that only shows when surrounded by variables with values or static text."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${sequence}`: ' + localize('sequence', "the name provided to the terminal by the process"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	'`\${task}`: ' + localize('task', "indicates this terminal is associated with a task"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:let terminalTitle = localize('terminalTitle', "Controls the terminal title. Variables are substituted based on the context:");
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:let terminalDescription = localize('terminalDescription', "Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:");
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:	title: localize('terminalIntegratedConfigurationTitle', "Integrated Terminal"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.sendKeybindingsToShell', "Dispatches most keybindings to the terminal instead of the workbench, overriding {0}, which can be used alternatively for fine tuning.", '`#terminal.integrated.commandsToSkipShell#`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.defaultColor', "A theme color ID to associate with terminal icons by default."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.defaultIcon', "A codicon ID to associate with terminal icons by default."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.enabled', 'Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.enableAnimation', 'Controls whether terminal tab statuses support animation (eg. in progress tasks).'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.hideCondition', 'Controls whether the terminal tabs view will hide under certain conditions.'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.hideCondition.never', "Never hide the terminal tabs view"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.hideCondition.singleTerminal', "Hide the terminal tabs view when there is only a single terminal opened"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.hideCondition.singleGroup', "Hide the terminal tabs view when there is only a single terminal group opened"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.showActiveTerminal', 'Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren\'t visible.'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActiveTerminal.always', "Always show the active terminal"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActiveTerminal.singleTerminal', "Show the active terminal when it is the only terminal opened"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActiveTerminal.singleTerminalOrNarrow', "Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActiveTerminal.never', "Never show the active terminal"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.showActions', 'Controls whether terminal split and kill buttons are displays next to the new terminal button.'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActions.always', "Always show the actions"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActions.singleTerminal', "Show the actions when it is the only terminal opened"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActions.singleTerminalOrNarrow', "Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.showActions.never', "Never show the actions"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.location.left', "Show the terminal tabs view to the left of the terminal"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.location.right', "Show the terminal tabs view to the right of the terminal")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.location', "Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.defaultLocation.editor', "Create terminals in the editor"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.defaultLocation.view', "Create terminals in the terminal view")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.defaultLocation', "Controls where newly created terminals will appear.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.focusMode.singleClick', "Focus the terminal when clicking a terminal tab"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.tabs.focusMode.doubleClick', "Focus the terminal when double clicking a terminal tab")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.tabs.focusMode', "Controls whether focusing the terminal of a tab happens on double or single click.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.macOptionIsMeta', "Controls whether to treat the option key as the meta key in the terminal on macOS."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.macOptionClickForcesSelection', "Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.altClickMovesCursor', "If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when {0} is set to {1} (the default value). This may not work reliably depending on your shell.", '`#editor.multiCursorModifier#`', '`\'alt\'`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.copyOnSelection', "Controls whether text selected in the terminal will be copied to the clipboard."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.enableMultiLinePasteWarning', "Show a warning dialog when pasting multiple lines into the terminal. The dialog does not show when:\n\n- Bracketed paste mode is enabled (the shell supports multi-line paste natively)\n- The paste is handled by the shell's readline (in the case of pwsh)"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.drawBoldTextInBrightColors', "Controls whether bold text in the terminal will always use the \"bright\" ANSI color variant."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.fontFamily', "Controls the font family of the terminal. Defaults to {0}'s value.", '`#editor.fontFamily#`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:		// 	'description': localize('terminal.integrated.fontLigatures', "Controls whether font ligatures are enabled in the terminal."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.fontSize', "Controls the font size in pixels of the terminal."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.letterSpacing', "Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.lineHeight', "Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.minimumContrastRatio', "When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:\n\n- 1: Do nothing and use the standard theme colors.\n- 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).\n- 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).\n- 21: White on black or black on white."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.fastScrollSensitivity', "Scrolling speed multiplier when pressing `Alt`."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.mouseWheelScrollSensitivity', "A multiplier to be used on the `deltaY` of mouse wheel scroll events."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.bellDuration', "The number of milliseconds to show the bell within a terminal tab when triggered."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:					errorMessage: localize('terminal.integrated.fontWeightError', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.fontWeight', "The font weight to use within the terminal for non-bold text. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:					errorMessage: localize('terminal.integrated.fontWeightError', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.fontWeightBold', "The font weight to use within the terminal for bold text. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.cursorBlinking', "Controls whether the terminal cursor blinks."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.cursorStyle', "Controls the style of terminal cursor."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.cursorWidth', "Controls the width of the cursor when {0} is set to {1}.", '`#terminal.integrated.cursorStyle#`', '`line`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.scrollback', "Controls the maximum number of lines the terminal keeps in its buffer."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.detectLocale', "Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.detectLocale.auto', "Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.detectLocale.off', "Do not set the `$LANG` environment variable."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.detectLocale.on', "Always set the `$LANG` environment variable.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.gpuAcceleration.auto', "Let VS Code detect which renderer will give the best experience."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.gpuAcceleration.on', "Enable GPU acceleration within the terminal."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.gpuAcceleration.off', "Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.gpuAcceleration.canvas', "Use the terminal's fallback canvas renderer which uses a 2d context instead of webgl which may perform better on some systems. Note that some features are limited in the canvas renderer like opaque selection.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.gpuAcceleration', "Controls whether the terminal will leverage the GPU to do its rendering.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			'markdownDescription': localize("terminal.integrated.tabs.separator", "Separator used by {0} and {0}.", `\`${TerminalSettingId.TerminalTitle}\``, `\`${TerminalSettingId.TerminalDescription}\``)
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.rightClickBehavior.default', "Show the context menu."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.rightClickBehavior.copyPaste', "Copy when there is a selection, otherwise paste."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.rightClickBehavior.paste', "Paste on right click."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.rightClickBehavior.selectWord', "Select the word under the cursor and show the context menu."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.rightClickBehavior.nothing', "Do nothing and pass event to terminal.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.rightClickBehavior', "Controls how terminal reacts to right click.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.cwd', "An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.confirmOnExit', "Controls whether to confirm when the window closes if there are active terminal sessions."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.confirmOnExit.never', "Never confirm."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.confirmOnExit.always', "Always confirm if there are terminals."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.confirmOnExit.hasChildProcesses', "Confirm if there are any terminals that have child processes."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.confirmOnKill', "Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.confirmOnKill.never', "Never confirm."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.confirmOnKill.editor', "Confirm if the terminal is in the editor."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.confirmOnKill.panel', "Confirm if the terminal is in the panel."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.confirmOnKill.always', "Confirm if the terminal is either in the editor or panel."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.enableBell', "Controls whether the terminal bell is enabled. This shows up as a visual bell next to the terminal's name."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize(
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				`[${localize('openDefaultSettingsJson', "open the default settings JSON")}](command:workbench.action.openRawDefaultSettings '${localize('openDefaultSettingsJson.capitalized', "Open Default Settings (JSON)")}')`,
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.allowChords', "Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass {0}, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).", '`#terminal.integrated.commandsToSkipShell#`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.allowMnemonics', "Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.env.osx', "Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.env.linux', "Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.env.windows', "Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.environmentChangesIndicator', "Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.environmentChangesIndicator.off', "Disable the indicator."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.environmentChangesIndicator.on', "Enable the indicator."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.environmentChangesIndicator.warnonly', "Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.environmentChangesRelaunch', "Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.showExitAlert', "Controls whether to show the alert \"The terminal process terminated with exit code\" when exit code is non-zero."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.splitCwd', "Controls the working directory a split terminal starts with."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.splitCwd.workspaceRoot', "A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.splitCwd.initial', "A new split terminal will use the working directory that the parent terminal started with."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.splitCwd.inherited', "On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.windowsEnableConpty', "Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.wordSeparators', "A string containing all characters to be considered word separators by the double click to select word feature."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.enableFileLinks', "Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.unicodeVersion.six', "Version 6 of unicode; this is an older version which should work better on older systems."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.unicodeVersion.eleven', "Version 11 of unicode; this version provides better support on modern systems that use modern versions of unicode.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.unicodeVersion', "Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.localEchoLatencyThreshold', "Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.localEchoEnabled', "When local echo should be enabled. This will override {0}", '`#terminal.integrated.localEchoLatencyThreshold#`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.localEchoEnabled.on', "Always enabled"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.localEchoEnabled.off', "Always disabled"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.localEchoEnabled.auto', "Enabled only for remote workspaces")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.localEchoExcludePrograms', "Local echo will be disabled when any of these program names are found in the terminal title."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.localEchoStyle', "Terminal style of locally echoed text; either a font style or an RGB color."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.enablePersistentSessions', "Persist terminal sessions/history for the workspace across window reloads."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.persistentSessionReviveProcess', "When the terminal process must be shut down (eg. on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.\n\nCaveats:\n\n- Restoring of the process current working directory depends on whether it is supported by the shell.\n- Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.persistentSessionReviveProcess.onExit', "Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu)."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.persistentSessionReviveProcess.onExitAndWindowClose', "Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.persistentSessionReviveProcess.never', "Never restore the terminal buffers or recreate the process.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			description: localize('terminal.integrated.customGlyphs', "Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.autoReplies', "A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.\n\nRemarks:\n\n- Use {0} to automatically respond to the terminate batch job prompt on Windows.\n- The message includes escape sequences so the reply might not happen with styled text.\n- Each reply can only happen once every second.\n- Use {1} in the reply to mean the enter key.\n- To unset a default key, set the value to null.\n- Restart VS Code if new don't apply.", '`"Terminate batch job (Y/N)": "Y\\r"`', '`"\\r"`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:					description: localize('terminal.integrated.autoReplies.reply', "The reply to send to the process.")
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.shellIntegration.enabled', "Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. \n\nShell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.\n\nSupported shells:\n\n- Linux/macOS: bash, pwsh, zsh\n - Windows: pwsh\n\nThis setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.\n\n Note that the script injection may not work if you have custom arguments defined in the terminal profile, a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see {0}", '`#terminal.integrated.shellIntegrations.decorationsEnabled#`'),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.shellIntegration.decorationsEnabled', "When shell integration is enabled, adds a decoration for each command."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.shellIntegration.decorationsEnabled.both', "Show decorations in the gutter (left) and overview ruler (right)"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.shellIntegration.decorationsEnabled.gutter', "Show gutter decorations to the left of the terminal"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.shellIntegration.decorationsEnabled.overviewRuler', "Show overview ruler decorations to the right of the terminal"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:				localize('terminal.integrated.shellIntegration.decorationsEnabled.never', "Do not show decorations"),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.shellIntegration.history', "Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history."),
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize('terminal.integrated.smoothScrolling', "Controls whether the terminal will scroll using an animation."),
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:export const TERMINAL_BACKGROUND_COLOR = registerColor('terminal.background', null, nls.localize('terminal.background', 'The background color of the terminal, this allows coloring the terminal differently to the panel.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.foreground', 'The foreground color of the terminal.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:export const TERMINAL_CURSOR_FOREGROUND_COLOR = registerColor('terminalCursor.foreground', null, nls.localize('terminalCursor.foreground', 'The foreground color of the terminal cursor.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:export const TERMINAL_CURSOR_BACKGROUND_COLOR = registerColor('terminalCursor.background', null, nls.localize('terminalCursor.background', 'The background color of the terminal cursor. Allows customizing the color of a character overlapped by a block cursor.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.selectionBackground', 'The selection background color of the terminal.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.inactiveSelectionBackground', 'The selection background color of the terminal when it does not have focus.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.selectionForeground', 'The selection foreground color of the terminal. When this is null the selection foreground will be retained and have the minimum contrast ratio feature applied.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminalCommandDecoration.defaultBackground', 'The default terminal command decoration background color.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminalCommandDecoration.successBackground', 'The terminal command decoration background color for successful commands.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminalCommandDecoration.errorBackground', 'The terminal command decoration background color for error commands.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminalOverviewRuler.cursorForeground', 'The overview ruler cursor color.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.border', 'The color of the border that separates split panes within the terminal. This defaults to panel.border.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.findMatchBackground', 'Color of the current search match in the terminal. The color must not be opaque so as not to hide underlying terminal content.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.findMatchBorder', 'Border color of the current search match in the terminal.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.findMatchHighlightBackground', 'Color of the other search matches in the terminal. The color must not be opaque so as not to hide underlying terminal content.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.findMatchHighlightBorder', 'Border color of the other search matches in the terminal.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminalOverviewRuler.findMatchHighlightForeground', 'Overview ruler marker color for find matches in the terminal.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.dragAndDropBackground', "Background color when dragging on top of terminals. The color should have transparency so that the terminal contents can still shine through."));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:}, nls.localize('terminal.tab.activeBorder', 'Border on the side of the terminal tab in the panel. This defaults to tab.activeBorder.'));
src/vs/workbench/contrib/terminal/common/terminalColorRegistry.ts:		ansiColorIdentifiers[entry.index] = registerColor(id, entry.defaults, nls.localize('terminal.ansiColor', '\'{0}\' ANSI color in the terminal.', colorName));
src/vs/workbench/contrib/terminal/common/terminal.ts:export const TERMINAL_ACTION_CATEGORY = nls.localize('terminalCategory', "Terminal");
src/vs/workbench/contrib/terminal/common/terminal.ts:		description: nls.localize('vscode.extension.contributes.terminal', 'Contributes terminal functionality.'),
src/vs/workbench/contrib/terminal/common/terminal.ts:				description: nls.localize('vscode.extension.contributes.terminal.quickFixes', "Defines quick fixes for terminals with shell integration enabled."),
src/vs/workbench/contrib/terminal/common/terminal.ts:							description: nls.localize('vscode.extension.contributes.terminal.quickFixes.id', "The ID of the quick fix."),
src/vs/workbench/contrib/terminal/common/terminal.ts:							description: nls.localize('vscode.extension.contributes.terminal.quickFixes.commandLineMatcher', "The command line to match."),
src/vs/workbench/contrib/terminal/common/terminal.ts:							description: nls.localize('vscode.extension.contributes.terminal.quickFixes.outputMatcher', "The output to match, which provides groups of the form <group_name> to be referenced via ${group:group_name} in commandToRun and linkToOpen."),
src/vs/workbench/contrib/terminal/common/terminal.ts:				description: nls.localize('vscode.extension.contributes.terminal.profiles', "Defines additional terminal profiles that the user can create."),
src/vs/workbench/contrib/terminal/common/terminal.ts:							description: nls.localize('vscode.extension.contributes.terminal.profiles.id', "The ID of the terminal profile provider."),
src/vs/workbench/contrib/terminal/common/terminal.ts:							description: nls.localize('vscode.extension.contributes.terminal.profiles.title', "Title for this terminal profile."),
src/vs/workbench/contrib/terminal/common/terminal.ts:							description: nls.localize('vscode.extension.contributes.terminal.types.icon', "A codicon, URI, or light and dark URIs to associate with this terminal type."),
src/vs/workbench/contrib/terminal/common/terminal.ts:										description: nls.localize('vscode.extension.contributes.terminal.types.icon.light', 'Icon path when a light theme is used'),
src/vs/workbench/contrib/terminal/common/terminal.ts:										description: nls.localize('vscode.extension.contributes.terminal.types.icon.dark', 'Icon path when a dark theme is used'),
src/vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts:				clickLabel = nls.localize('terminalLinkHandler.followLinkAlt.mac', "option + click");
src/vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts:				clickLabel = nls.localize('terminalLinkHandler.followLinkAlt', "alt + click");
src/vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts:				clickLabel = nls.localize('terminalLinkHandler.followLinkCmd', "cmd + click");
src/vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts:				clickLabel = nls.localize('terminalLinkHandler.followLinkCtrl', "ctrl + click");
src/vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts:		let fallbackLabel = nls.localize('followLink', "Follow link");
src/vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts:				fallbackLabel = nls.localize('followForwardedLink', "Follow link using forwarded port");
src/vs/workbench/contrib/terminal/browser/links/terminalLinkManager.ts:			uri = nls.localize('followLinkUrl', 'Link');
src/vs/workbench/contrib/terminal/browser/terminalQuickFixBuiltinActions.ts:			const label = localize("terminal.freePort", "Free port {0}", port);
src/vs/workbench/contrib/terminal/browser/terminalMainContribution.ts:		this._registerLogChannel('ptyHostLog', localize('ptyHost', "Pty Host"), URI.file(join(environmentService.logsPath, `${TerminalLogConstants.FileName}.log`)));
src/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts:			this._notificationService.notify({ message: localize('killportfailure', 'Could not kill process listening on port {0}, command exited with error {1}', port, e), severity: Severity.Warning });
src/vs/workbench/contrib/terminal/browser/terminalProcessManager.ts:					const message = localize('ptyHostRelaunch', "Restarting the terminal because the connection to the shell process was lost...");
src/vs/workbench/contrib/terminal/browser/baseTerminalBackend.ts:					label: localize('restartPtyHost', "Restart pty host"),
src/vs/workbench/contrib/terminal/browser/baseTerminalBackend.ts:				unresponsiveNotification = notificationService.prompt(Severity.Error, localize('nonResponsivePtyHost', "The connection to the terminal's pty host process is unresponsive, the terminals may stop working."), choices);
src/vs/workbench/contrib/terminal/browser/links/terminalLinkQuickpick.ts:			placeHolder: localize('terminal.integrated.openDetectedLink', "Select the link to open"),
src/vs/workbench/contrib/terminal/browser/links/terminalLinkQuickpick.ts:			picks.push({ type: 'separator', label: localize('terminal.integrated.urlLinks', "Url") });
src/vs/workbench/contrib/terminal/browser/links/terminalLinkQuickpick.ts:			picks.push({ type: 'separator', label: localize('terminal.integrated.localFileLinks', "Local File") });
src/vs/workbench/contrib/terminal/browser/links/terminalLinkQuickpick.ts:			picks.push({ type: 'separator', label: localize('terminal.integrated.searchLinks', "Workspace Search") });
src/vs/workbench/contrib/terminal/browser/links/terminalLinkQuickpick.ts:			const showMoreItem = { label: localize('terminal.integrated.showMoreLinks', "Show more links") };
src/vs/workbench/contrib/terminal/browser/links/terminalLink.ts:export const OPEN_FILE_LABEL = localize('openFile', 'Open file in editor');
src/vs/workbench/contrib/terminal/browser/links/terminalLink.ts:export const FOLDER_IN_WORKSPACE_LABEL = localize('focusFolder', 'Focus folder in explorer');
src/vs/workbench/contrib/terminal/browser/links/terminalLink.ts:export const FOLDER_NOT_IN_WORKSPACE_LABEL = localize('openFolder', 'Open folder in new window');
src/vs/workbench/contrib/terminal/browser/links/terminalLinkDetectorAdapter.ts:			case TerminalBuiltinLinkType.Search: return localize('searchWorkspace', 'Search workspace');
src/vs/workbench/contrib/terminal/browser/links/terminalLinkDetectorAdapter.ts:			case TerminalBuiltinLinkType.LocalFile: return localize('openFile', 'Open file in editor');
src/vs/workbench/contrib/terminal/browser/links/terminalLinkDetectorAdapter.ts:			case TerminalBuiltinLinkType.LocalFolderInWorkspace: return localize('focusFolder', 'Focus folder in explorer');
src/vs/workbench/contrib/terminal/browser/links/terminalLinkDetectorAdapter.ts:			case TerminalBuiltinLinkType.LocalFolderOutsideWorkspace: return localize('openFolder', 'Open folder in new window');
src/vs/workbench/contrib/terminal/browser/links/terminalLinkDetectorAdapter.ts:				return localize('followLink', 'Follow link');
src/vs/workbench/contrib/terminal/browser/environmentVariableInfo.ts:			info = localize('extensionEnvironmentContributionChanges', "Extensions want to make the following changes to the terminal's environment:");
src/vs/workbench/contrib/terminal/browser/environmentVariableInfo.ts:			info += localize('extensionEnvironmentContributionRemoval', "Extensions want to remove these existing changes from the terminal's environment:");
src/vs/workbench/contrib/terminal/browser/environmentVariableInfo.ts:			label: localize('relaunchTerminalLabel', "Relaunch terminal"),
src/vs/workbench/contrib/terminal/browser/environmentVariableInfo.ts:		const message = localize('extensionEnvironmentContributionInfo', "Extensions have made changes to this terminal's environment");
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:	[TestFilterTerm.Failed]: localize('testing.filters.showOnlyFailed', "Show Only Failed Tests"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:	[TestFilterTerm.Executed]: localize('testing.filters.showOnlyExecuted', "Show Only Executed Tests"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:	[TestFilterTerm.CurrentDoc]: localize('testing.filters.currentFile', "Show in Active File Only"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:	[TestFilterTerm.Hidden]: localize('testing.filters.showExcludedTests', "Show Hidden Tests"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:	private readonly filtersAction = new Action('markersFiltersAction', localize('testing.filters.menu', "More Filters..."), 'testing-filter-button ' + ThemeIcon.asClassName(testingFilterIcon));
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:			ariaLabel: localize('testExplorerFilterLabel', "Filter text for tests in the explorer"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:				placeholderText: localize('testExplorerFilter', "Filter (e.g. text, !exclude, @tag)"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:				label: localize('testing.filters.fuzzyMatch', "Fuzzy Match"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:				label: localize('testing.filters.showExcludedTests', "Show Hidden Tests"),
src/vs/workbench/contrib/testing/browser/testingExplorerFilter.ts:				label: localize('testing.filters.removeTestExclusions', "Unhide All Tests"),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:	originalAriaLabel: localize('testingOutputExpected', 'Expected result'),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:	modifiedAriaLabel: localize('testingOutputActual', 'Actual result'),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:			title: localize('close', 'Close'),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:		this.label = this.task.name ?? localize('testUnnamedTask', 'Unnamed Task');
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:				? localize('messageMoreLinesN', '+ {0} more lines', lines)
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:				: localize('messageMoreLines1', '+ 1 more line');
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:						return localize('testingPeekLabel', 'Test Result Messages');
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:					localize('testing.showResultOutput', "Show Result Output"),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:					localize('testing.reRunLastRun', "Rerun Test Run"),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:						localize('testing.debugLastRun', "Debug Test Run"),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:					localize('testing.goToFile', "Go to File"),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:					localize('testing.revealInExplorer', "Reveal in Test Explorer"),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:						localize('run test', 'Run Test'),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:						localize('debug test', 'Debug Test'),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:						localize('testing.showMessageInTerminal', "Show Output in Terminal"),
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:			title: { value: localize('testing.goToNextMessage', "Go to Next Test Failure"), original: 'Go to Next Test Failure' },
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:			title: { value: localize('testing.goToPreviousMessage', "Go to Previous Test Failure"), original: 'Go to Previous Test Failure' },
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:			title: { value: localize('testing.openMessageInEditor', "Open in Editor"), original: 'Open in Editor' },
src/vs/workbench/contrib/testing/browser/testingOutputPeek.ts:			title: { value: localize('testing.toggleTestingPeekHistory', "Toggle Test History in Peek"), original: 'Toggle Test History in Peek' },
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:const auxiliaryBarRightIcon = registerIcon('auxiliarybar-right-layout-icon', Codicon.layoutSidebarRight, localize('toggleAuxiliaryIconRight', 'Icon to toggle the auxiliary bar off in its right position.'));
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:const auxiliaryBarRightOffIcon = registerIcon('auxiliarybar-right-off-layout-icon', Codicon.layoutSidebarRightOff, localize('toggleAuxiliaryIconRightOn', 'Icon to toggle the auxiliary bar on in its right position.'));
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:const auxiliaryBarLeftIcon = registerIcon('auxiliarybar-left-layout-icon', Codicon.layoutSidebarLeft, localize('toggleAuxiliaryIconLeft', 'Icon to toggle the auxiliary bar in its left position.'));
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:const auxiliaryBarLeftOffIcon = registerIcon('auxiliarybar-left-off-layout-icon', Codicon.layoutSidebarLeftOff, localize('toggleAuxiliaryIconLeftOn', 'Icon to toggle the auxiliary bar on in its left position.'));
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:	static readonly LABEL = localize('toggleAuxiliaryBar', "Toggle Secondary Side Bar Visibility");
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:	static readonly LABEL = localize('focusAuxiliaryBar', "Focus into Secondary Side Bar");
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:				title: localize('miAuxiliaryBarNoMnemonic', "Secondary Side Bar"),
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:				title: localize('toggleSecondarySideBar', "Toggle Secondary Side Bar"),
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:				title: localize('toggleSecondarySideBar', "Toggle Secondary Side Bar"),
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:				title: localize({ key: 'miAuxiliaryBar', comment: ['&& denotes a mnemonic'] }, "Secondary Si&&de Bar"),
src/vs/workbench/browser/parts/auxiliarybar/auxiliaryBarActions.ts:				title: { value: localize('hideAuxiliaryBar', "Hide Secondary Side Bar"), original: 'Hide Secondary Side Bar' },
src/vs/workbench/contrib/testing/browser/testing.contribution.ts:	title: localize('test', "Testing"),
src/vs/workbench/contrib/testing/browser/testing.contribution.ts:		mnemonicTitle: localize({ key: 'miViewTesting', comment: ['&& denotes a mnemonic'] }, "T&&esting"),
src/vs/workbench/contrib/testing/browser/testing.contribution.ts:	content: localize('noTestProvidersRegistered', "No tests have been found in this workspace yet."),
src/vs/workbench/contrib/testing/browser/testing.contribution.ts:	content: '[' + localize('searchForAdditionalTestExtensions', "Install Additional Test Extensions...") + `](command:${TestCommandId.SearchForTestExtension})`,
src/vs/workbench/contrib/testing/browser/testing.contribution.ts:	name: localize('testExplorer', "Test Explorer"),
src/vs/workbench/contrib/remote/electron-sandbox/remote.contribution.ts:		const hasWSLFeatureContext = new RawContextKey<boolean>(contextKeyId, !!defaultValue, nls.localize('wslFeatureInstalled', "Whether the platform has the WSL feature installed"));
src/vs/workbench/contrib/remote/electron-sandbox/remote.contribution.ts:		title: nls.localize('remote', "Remote"),
src/vs/workbench/contrib/remote/electron-sandbox/remote.contribution.ts:				markdownDescription: nls.localize('remote.downloadExtensionsLocally', "When enabled extensions are downloaded locally and installed on remote."),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('hideTest', 'Hide Test'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('unhideTest', 'Unhide Test'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('unhideAllTests', 'Unhide All Tests'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('debug test', 'Debug Test'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('testing.runUsing', 'Execute Using Profile...'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('run test', 'Run Test'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('testing.selectDefaultTestProfiles', 'Select Default Profile'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.configureProfile', 'Configure Test Profiles'), original: 'Configure Test Profiles' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			placeholder: localize('configureProfile', 'Select a profile to update'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('runSelectedTests', 'Run Tests'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('debugSelectedTests', 'Debug Tests'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: localize('discoveringTests', 'Discovering Tests'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:				title: localize('runAllTests', 'Run All Tests'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			localize('noTestProvider', 'No tests found in this workspace. You may need to install a test provider extension'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:				title: localize('debugAllTests', 'Debug All Tests'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			localize('noDebugTestProvider', 'No debuggable tests found in this workspace. You may need to install a test provider extension'),
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.cancelRun', "Cancel Test Run"), original: 'Cancel Test Run' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.viewAsList', "View as List"), original: 'View as List' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.viewAsTree', "View as Tree"), original: 'View as Tree' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.sortByStatus', "Sort by Status"), original: 'Sort by Status' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.sortByLocation', "Sort by Location"), original: 'Sort by Location' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.sortByDuration', "Sort by Duration"), original: 'Sort by Duration' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.showMostRecentOutput', "Show Output"), original: 'Show Output' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.collapseAll', "Collapse All Tests"), original: 'Collapse All Tests' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.clearResults', "Clear All Results"), original: 'Clear All Results' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.editFocusedTest', "Go to Test"), original: 'Go to Test' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.runAtCursor', "Run Test at Cursor"), original: 'Run Test at Cursor' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.debugAtCursor', "Debug Test at Cursor"), original: 'Debug Test at Cursor' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.runCurrentFile', "Run Tests in Current File"), original: 'Run Tests in Current File' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.debugCurrentFile', "Debug Tests in Current File"), original: 'Debug Tests in Current File' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.reRunFailTests', "Rerun Failed Tests"), original: 'Rerun Failed Tests' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.debugFailTests', "Debug Failed Tests"), original: 'Debug Failed Tests' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.reRunLastRun', "Rerun Last Run"), original: 'Rerun Last Run' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.debugLastRun', "Debug Last Run"), original: 'Debug Last Run' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.searchForTestExtension', "Search for Test Extension"), original: 'Search for Test Extension' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.openOutputPeek', "Peek Output"), original: 'Peek Output' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.toggleInlineTestOutput', "Toggle Inline Test Output"), original: 'Toggle Inline Test Output' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.refreshTests', "Refresh Tests"), original: 'Refresh Tests' },
src/vs/workbench/contrib/testing/browser/testExplorerActions.ts:			title: { value: localize('testing.cancelTestRefresh', "Cancel Test Refresh"), original: 'Cancel Test Refresh' },
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingViewIcon = registerIcon('test-view-icon', Codicon.beaker, localize('testViewIcon', 'View icon of the test view.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingRunIcon = registerIcon('testing-run-icon', Codicon.run, localize('testingRunIcon', 'Icon of the "run test" action.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingRunAllIcon = registerIcon('testing-run-all-icon', Codicon.runAll, localize('testingRunAllIcon', 'Icon of the "run all tests" action.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingDebugAllIcon = registerIcon('testing-debug-all-icon', Codicon.debugAltSmall, localize('testingDebugAllIcon', 'Icon of the "debug all tests" action.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingDebugIcon = registerIcon('testing-debug-icon', Codicon.debugAltSmall, localize('testingDebugIcon', 'Icon of the "debug test" action.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingCancelIcon = registerIcon('testing-cancel-icon', Codicon.debugStop, localize('testingCancelIcon', 'Icon to cancel ongoing test runs.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingFilterIcon = registerIcon('testing-filter', Codicon.filter, localize('filterIcon', 'Icon for the \'Filter\' action in the testing view.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingHiddenIcon = registerIcon('testing-hidden', Codicon.eyeClosed, localize('hiddenIcon', 'Icon shown beside hidden tests, when they\'ve been shown.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingShowAsList = registerIcon('testing-show-as-list-icon', Codicon.listTree, localize('testingShowAsList', 'Icon shown when the test explorer is disabled as a tree.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingShowAsTree = registerIcon('testing-show-as-list-icon', Codicon.listFlat, localize('testingShowAsTree', 'Icon shown when the test explorer is disabled as a list.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingUpdateProfiles = registerIcon('testing-update-profiles', Codicon.gear, localize('testingUpdateProfiles', 'Icon shown to update test profiles.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingRefreshTests = registerIcon('testing-refresh-tests', Codicon.refresh, localize('testingRefreshTests', 'Icon on the button to refresh tests.'));
src/vs/workbench/contrib/testing/browser/icons.ts:export const testingCancelRefreshTests = registerIcon('testing-cancel-refresh-tests', Codicon.stop, localize('testingCancelRefreshTests', 'Icon on the button to cancel refreshing tests.'));
src/vs/workbench/contrib/testing/browser/icons.ts:	[TestResultState.Errored, registerIcon('testing-error-icon', Codicon.issues, localize('testingErrorIcon', 'Icon shown for tests that have an error.'))],
src/vs/workbench/contrib/testing/browser/icons.ts:	[TestResultState.Failed, registerIcon('testing-failed-icon', Codicon.error, localize('testingFailedIcon', 'Icon shown for tests that failed.'))],
src/vs/workbench/contrib/testing/browser/icons.ts:	[TestResultState.Passed, registerIcon('testing-passed-icon', Codicon.pass, localize('testingPassedIcon', 'Icon shown for tests that passed.'))],
src/vs/workbench/contrib/testing/browser/icons.ts:	[TestResultState.Queued, registerIcon('testing-queued-icon', Codicon.history, localize('testingQueuedIcon', 'Icon shown for tests that are queued.'))],
src/vs/workbench/contrib/testing/browser/icons.ts:	[TestResultState.Skipped, registerIcon('testing-skipped-icon', Codicon.debugStepOver, localize('testingSkippedIcon', 'Icon shown for tests that are skipped.'))],
src/vs/workbench/contrib/testing/browser/icons.ts:	[TestResultState.Unset, registerIcon('testing-unset-icon', Codicon.circleOutline, localize('testingUnsetIcon', 'Icon shown for tests that are in an unset state.'))],
src/vs/workbench/browser/parts/panel/panelPart.ts:				description: localize('pinned view containers', "Panel entries visibility customizations")
src/vs/workbench/browser/parts/panel/panelPart.ts:			result.push(toAction({ id: 'resetLocationAction', label: localize('resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewContainerToLocation(viewContainer, defaultLocation) }));
src/vs/workbench/browser/parts/panel/panelPart.ts:					result.push(toAction({ id: 'resetLocationAction', label: localize('resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewsToContainer([viewToReset], defaultContainer) }));
src/vs/workbench/browser/parts/panel/panelPart.ts:		messageElement.innerText = localize('panel.emptyMessage', "Drag a view here to display.");
src/vs/workbench/browser/parts/panel/panelPart.ts:			toggleMenuTitle: localize('moreActions', "More Actions...")
src/vs/workbench/browser/parts/panel/panelPart.ts:			toAction({ id: TogglePanelAction.ID, label: localize('hidePanel', "Hide Panel"), run: () => this.commandService.executeCommand(TogglePanelAction.ID) })
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:					defaults.includes(profile) ? localize('defaultTestProfile', '{0} (Default)', profile.label) : profile.label,
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:				localize('selectDefaultConfigs', 'Select Default Profile'),
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:				localize('configureTestProfiles', 'Configure Test Profiles'),
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:		emptyParagraph.innerText = localize('testingNoTest', 'No tests were found in this file.');
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:		const buttonLabel = localize('testingFindExtension', 'Show Workspace Tests');
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:			label = localize({
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:			label = localize({
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:		return localize('testExplorer', "Test Explorer");
src/vs/workbench/contrib/tasks/electron-sandbox/taskService.ts:				message: nls.localize('TaskSystem.runningTask', 'There is a task running. Do you want to terminate it?'),
src/vs/workbench/contrib/tasks/electron-sandbox/taskService.ts:				primaryButton: nls.localize({ key: 'TaskSystem.terminateTask', comment: ['&& denotes a mnemonic'] }, "&&Terminate Task"),
src/vs/workbench/contrib/tasks/electron-sandbox/taskService.ts:							message: nls.localize('TaskSystem.noProcess', 'The launched task doesn\'t exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.'),
src/vs/workbench/contrib/tasks/electron-sandbox/taskService.ts:							primaryButton: nls.localize({ key: 'TaskSystem.exitAnyways', comment: ['&& denotes a mnemonic'] }, "&&Exit Anyways"),
src/vs/workbench/browser/parts/notifications/notificationsAlerts.ts:			alertText = localize('alertErrorMessage', "Error: {0}", notification.message.linkedText.toString());
src/vs/workbench/browser/parts/notifications/notificationsAlerts.ts:			alertText = localize('alertWarningMessage', "Warning: {0}", notification.message.linkedText.toString());
src/vs/workbench/browser/parts/notifications/notificationsAlerts.ts:			alertText = localize('alertInfoMessage', "Info: {0}", notification.message.linkedText.toString());
src/vs/workbench/browser/parts/notifications/notificationsList.ts:							return localize('notificationAriaLabel', "{0}, notification", element.message.raw);
src/vs/workbench/browser/parts/notifications/notificationsList.ts:						return localize('notificationWithSourceAriaLabel', "{0}, source: {1}, notification", element.message.raw, element.source);
src/vs/workbench/browser/parts/notifications/notificationsList.ts:						return options.widgetAriaLabel ?? localize('notificationsList', "Notifications List");
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:export const ACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: spinningLoading, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.active', "Task is running") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:export const SUCCEEDED_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.check, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.succeeded', "Task succeeded") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:const SUCCEEDED_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.check, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.succeededInactive', "Task succeeded and waiting...") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:export const FAILED_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.error, severity: Severity.Error, tooltip: nls.localize('taskTerminalStatus.errors', "Task has errors") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:const FAILED_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.error, severity: Severity.Error, tooltip: nls.localize('taskTerminalStatus.errorsInactive', "Task has errors and is waiting...") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:const WARNING_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.warning, severity: Severity.Warning, tooltip: nls.localize('taskTerminalStatus.warnings', "Task has warnings") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:const WARNING_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.warning, severity: Severity.Warning, tooltip: nls.localize('taskTerminalStatus.warningsInactive', "Task has warnings and is waiting...") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:const INFO_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.info, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.infos', "Task has infos") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:const INFO_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.info, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.infosInactive', "Task has infos and is waiting...") };
src/vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts:				terminal.addBufferMarker({ marker: this._marker, hoverMessage: nls.localize('task.watchFirstError', "Beginning of detected errors for this run"), disableCommandStorage: true });
src/vs/workbench/browser/parts/sidebar/sidebarActions.ts:			title: { value: localize('focusSideBar', "Focus into Primary Side Bar"), original: 'Focus into Primary Side Bar' },
src/vs/workbench/contrib/tasks/browser/taskService.ts:	private static readonly ProcessTaskSystemSupportMessage = nls.localize('taskService.processTaskSystem', 'Process task system is not support in the web.');
src/vs/workbench/contrib/tasks/browser/tasksQuickAccess.ts:				label: localize('noTaskResults', "No matching tasks")
src/vs/workbench/contrib/tasks/browser/tasksQuickAccess.ts:					const showResult = await taskQuickPick.show(localize('TaskService.pickRunTask', 'Select the task to run'), undefined, task);
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				outputChannelRegistry.registerChannel({ id: remoteServerLog, label: localize('remoteExtensionLog', "Remote Server"), file: joinPath(remoteEnv.logsPath, `${RemoteExtensionLogFileName}.log`), log: true });
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				outputChannelRegistry.registerChannel({ id: remotePtyHostLog, label: localize('remotePtyHostLog', "Remote Pty Host"), file: joinPath(remoteEnv.logsPath, `${TerminalLogConstants.FileName}.log`), log: true });
src/vs/workbench/contrib/remote/common/remote.contribution.ts:			message: localize('invalidWorkspaceMessage', "Workspace does not exist"),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:			detail: localize('invalidWorkspaceDetail', "The workspace does not exist. Please select another workspace to open."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:			primaryButton: localize('invalidWorkspacePrimary', "&&Open Workspace..."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:			secondaryButton: localize('invalidWorkspaceCancel', "&&Cancel")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				title: { value: localize('triggerReconnect', "Connection: Trigger Reconnect"), original: 'Connection: Trigger Reconnect' },
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				title: { value: localize('pauseSocketWriting', "Connection: Pause socket writing"), original: 'Connection: Pause socket writing' },
src/vs/workbench/contrib/remote/common/remote.contribution.ts:		localize('ui', "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:		localize('workspace', "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote.")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:		title: localize('remote', "Remote"),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				markdownDescription: localize('remote.extensionKind', "Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				markdownDescription: localize('remote.restoreForwardedPorts', "Restores the ports you forwarded in a workspace."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				markdownDescription: localize('remote.autoForwardPorts', "When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				markdownDescription: localize('remote.autoForwardPortsSource', "Sets the source from which ports are automatically forwarded when {0} is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.", '`#remote.autoForwardPorts#`'),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:					localize('remote.autoForwardPortsSource.process', "Ports will be automatically forwarded when discovered by watching for processes that are started and include a port."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:					localize('remote.autoForwardPortsSource.output', "Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be \"un-forwarded\" until reload or until the port is closed by the user in the Ports view.")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:						description: localize('remote.portsAttributes.port', "A port, range of ports (ex. \"40000-55000\"), host and port (ex. \"db:1234\"), or regular expression (ex. \".+\\\\/server.js\").  For a port number or range, the attributes will apply to that port number or range of port numbers. Attributes which use a regular expression will apply to ports whose associated process command line matches the expression."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:									localize('remote.portsAttributes.notify', "Shows a notification when a port is automatically forwarded."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:									localize('remote.portsAttributes.openBrowser', "Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:									localize('remote.portsAttributes.openBrowserOnce', "Opens the browser when the port is automatically forwarded, but only the first time the port is forward during a session. Depending on your settings, this could open an embedded browser."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:									localize('remote.portsAttributes.openPreview', "Opens a preview in the same window when the port is automatically forwarded."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:									localize('remote.portsAttributes.silent', "Shows no notification and takes no action when this port is automatically forwarded."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:									localize('remote.portsAttributes.ignore', "This port will not be automatically forwarded.")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:								description: localize('remote.portsAttributes.onForward', "Defines the action that occurs when the port is discovered for automatic forwarding"),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:								description: localize('remote.portsAttributes.elevateIfNeeded', "Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:								description: localize('remote.portsAttributes.label', "Label that will be shown in the UI for this port."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:								default: localize('remote.portsAttributes.labelDefault', "Application")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:								markdownDescription: localize('remote.portsAttributes.requireLocalPort', "When true, a modal dialog will show if the chosen local port isn't used for forwarding."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:								description: localize('remote.portsAttributes.protocol', "The protocol to use when forwarding this port.")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:							'label': localize('remote.portsAttributes.labelDefault', "Application"),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				markdownDescription: localize('remote.portsAttributes', "Set properties that are applied when a specific port number is forwarded. For example:\n\n```\n\"3000\": {\n  \"label\": \"Application\"\n},\n\"40000-55000\": {\n  \"onAutoForward\": \"ignore\"\n},\n\".+\\\\/server.js\": {\n \"onAutoForward\": \"openPreview\"\n}\n```"),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				errorMessage: localize('remote.portsAttributes.patternError', "Must be a port number, range of port numbers, or regular expression."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:							localize('remote.portsAttributes.notify', "Shows a notification when a port is automatically forwarded."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:							localize('remote.portsAttributes.openBrowser', "Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:							localize('remote.portsAttributes.openPreview', "Opens a preview in the same window when the port is automatically forwarded."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:							localize('remote.portsAttributes.silent', "Shows no notification and takes no action when this port is automatically forwarded."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:							localize('remote.portsAttributes.ignore', "This port will not be automatically forwarded.")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:						description: localize('remote.portsAttributes.onForward', "Defines the action that occurs when the port is discovered for automatic forwarding"),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:						description: localize('remote.portsAttributes.elevateIfNeeded', "Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:						description: localize('remote.portsAttributes.label', "Label that will be shown in the UI for this port."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:						default: localize('remote.portsAttributes.labelDefault', "Application")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:						markdownDescription: localize('remote.portsAttributes.requireLocalPort', "When true, a modal dialog will show if the chosen local port isn't used for forwarding."),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:						description: localize('remote.portsAttributes.protocol', "The protocol to use when forwarding this port.")
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				markdownDescription: localize('remote.portsAttributes.defaults', "Set default properties that are applied to all ports that don't get properties from the setting {0}. For example:\n\n```\n{\n  \"onAutoForward\": \"ignore\"\n}\n```", '`#remote.portsAttributes#`'),
src/vs/workbench/contrib/remote/common/remote.contribution.ts:				description: localize('remote.localPortHost', "Specifies the local host name that will be used for port forwarding.")
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				throw new TaskError(Severity.Error, nls.localize('TerminalTaskSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), TaskErrors.UnknownError);
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				nls.localize('TerminalTaskSystem.taskLoadReporting', "There are issues with task \"{0}\". See the output for more details.",
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:		this._log(nls.localize('dependencyCycle',
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					this._log(nls.localize('dependencyFailed',
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				this._appendOutput(nls.localize('TerminalTaskSystem.nonWatchingMatcher', 'Task {0} is a background task but uses a problem matcher without a background pattern', task._label));
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				initialText: task.command.presentation && task.command.presentation.echo ? formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				return [undefined, new TaskError(Severity.Error, nls.localize('TerminalTaskSystem', 'Can\'t execute a shell command on an UNC drive using cmd.exe.'), TaskErrors.UnknownError)];
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				this._appendOutput(nls.localize('unknownProblemMatcher', 'Problem matcher {0} can\'t be resolved. The matcher will be ignored'));
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				return taskShellIntegrationWaitOnExitSequence(nls.localize('closeTerminal', 'Press any key to close the terminal.'));
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				return taskShellIntegrationWaitOnExitSequence(nls.localize('reuseTerminal', 'Terminal will be reused by tasks, press any key to close it.'));
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('dotnetCore', 'Executes .NET Core build command'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('msbuild', 'Executes the build target'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('externalCommand', 'Example to run an arbitrary external command'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('Maven', 'Executes common maven commands'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('tsc.config', 'Compiles a TypeScript project'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('tsc.watch', 'Compiles a TypeScript project in watch mode'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('dotnetCore', 'Executes .NET Core build command'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('msbuild', 'Executes the build target'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('externalCommand', 'Example to run an arbitrary external command'),
src/vs/workbench/contrib/tasks/common/taskTemplates.ts:	description: nls.localize('Maven', 'Executes common maven commands'),
src/vs/workbench/browser/parts/panel/panelActions.ts:const maximizeIcon = registerIcon('panel-maximize', Codicon.chevronUp, localize('maximizeIcon', 'Icon to maximize a panel.'));
src/vs/workbench/browser/parts/panel/panelActions.ts:const restoreIcon = registerIcon('panel-restore', Codicon.chevronDown, localize('restoreIcon', 'Icon to restore a panel.'));
src/vs/workbench/browser/parts/panel/panelActions.ts:const closeIcon = registerIcon('panel-close', Codicon.close, localize('closeIcon', 'Icon to close a panel.'));
src/vs/workbench/browser/parts/panel/panelActions.ts:const panelIcon = registerIcon('panel-layout-icon', Codicon.layoutPanel, localize('togglePanelOffIcon', 'Icon to toggle the panel off when it is on.'));
src/vs/workbench/browser/parts/panel/panelActions.ts:const panelOffIcon = registerIcon('panel-layout-icon-off', Codicon.layoutPanelOff, localize('togglePanelOnIcon', 'Icon to toggle the panel on when it is off.'));
src/vs/workbench/browser/parts/panel/panelActions.ts:	static readonly LABEL = localize('togglePanelVisibility', "Toggle Panel Visibility");
src/vs/workbench/browser/parts/panel/panelActions.ts:	static readonly LABEL = localize('focusPanel', "Focus into Panel");
src/vs/workbench/browser/parts/panel/panelActions.ts:			title: { value: localize('focusPanel', "Focus into Panel"), original: 'Focus into Panel' },
src/vs/workbench/browser/parts/panel/panelActions.ts:	createPositionPanelActionConfig(PositionPanelActionId.LEFT, { value: localize('positionPanelLeft', 'Move Panel Left'), original: 'Move Panel Left' }, localize('positionPanelLeftShort', "Left"), Position.LEFT),
src/vs/workbench/browser/parts/panel/panelActions.ts:	createPositionPanelActionConfig(PositionPanelActionId.RIGHT, { value: localize('positionPanelRight', 'Move Panel Right'), original: 'Move Panel Right' }, localize('positionPanelRightShort', "Right"), Position.RIGHT),
src/vs/workbench/browser/parts/panel/panelActions.ts:	createPositionPanelActionConfig(PositionPanelActionId.BOTTOM, { value: localize('positionPanelBottom', 'Move Panel To Bottom'), original: 'Move Panel To Bottom' }, localize('positionPanelBottomShort', "Bottom"), Position.BOTTOM),
src/vs/workbench/browser/parts/panel/panelActions.ts:	createAlignmentPanelActionConfig(AlignPanelActionId.LEFT, { value: localize('alignPanelLeft', 'Set Panel Alignment to Left'), original: 'Set Panel Alignment to Left' }, localize('alignPanelLeftShort', "Left"), 'left'),
src/vs/workbench/browser/parts/panel/panelActions.ts:	createAlignmentPanelActionConfig(AlignPanelActionId.RIGHT, { value: localize('alignPanelRight', 'Set Panel Alignment to Right'), original: 'Set Panel Alignment to Right' }, localize('alignPanelRightShort', "Right"), 'right'),
src/vs/workbench/browser/parts/panel/panelActions.ts:	createAlignmentPanelActionConfig(AlignPanelActionId.CENTER, { value: localize('alignPanelCenter', 'Set Panel Alignment to Center'), original: 'Set Panel Alignment to Center' }, localize('alignPanelCenterShort', "Center"), 'center'),
src/vs/workbench/browser/parts/panel/panelActions.ts:	createAlignmentPanelActionConfig(AlignPanelActionId.JUSTIFY, { value: localize('alignPanelJustify', 'Set Panel Alignment to Justify'), original: 'Set Panel Alignment to Justify' }, localize('alignPanelJustifyShort', "Justify"), 'justify'),
src/vs/workbench/browser/parts/panel/panelActions.ts:	title: localize('positionPanel', "Panel Position"),
src/vs/workbench/browser/parts/panel/panelActions.ts:	title: localize('alignPanel', "Align Panel"),
src/vs/workbench/browser/parts/panel/panelActions.ts:			value: localize('previousPanelView', 'Previous Panel View'),
src/vs/workbench/browser/parts/panel/panelActions.ts:			value: localize('nextPanelView', 'Next Panel View'),
src/vs/workbench/browser/parts/panel/panelActions.ts:			title: { value: localize('toggleMaximizedPanel', "Toggle Maximized Panel"), original: 'Toggle Maximized Panel' },
src/vs/workbench/browser/parts/panel/panelActions.ts:			tooltip: localize('maximizePanel', "Maximize Panel Size"),
src/vs/workbench/browser/parts/panel/panelActions.ts:			toggled: { condition: PanelMaximizedContext, icon: restoreIcon, tooltip: localize('minimizePanel', "Restore Panel Size") },
src/vs/workbench/browser/parts/panel/panelActions.ts:			notificationService.warn(localize('panelMaxNotSupported', "Maximizing the panel is only supported when it is center aligned."));
src/vs/workbench/browser/parts/panel/panelActions.ts:			title: { value: localize('closePanel', "Close Panel"), original: 'Close Panel' },
src/vs/workbench/browser/parts/panel/panelActions.ts:			title: { value: localize('closeSecondarySideBar', "Close Secondary Side Bar"), original: 'Close Secondary Side Bar' },
src/vs/workbench/browser/parts/panel/panelActions.ts:				title: localize({ key: 'miPanel', comment: ['&& denotes a mnemonic'] }, "&&Panel"),
src/vs/workbench/browser/parts/panel/panelActions.ts:				title: localize('miPanelNoMnemonic', "Panel"),
src/vs/workbench/browser/parts/panel/panelActions.ts:				title: localize('togglePanel', "Toggle Panel"),
src/vs/workbench/browser/parts/panel/panelActions.ts:				title: { value: localize('hidePanel', "Hide Panel"), original: 'Hide Panel' },
src/vs/workbench/browser/parts/panel/panelActions.ts:				value: localize('movePanelToSecondarySideBar', "Move Panel Views To Secondary Side Bar"),
src/vs/workbench/browser/parts/panel/panelActions.ts:				value: localize('movePanelToSecondarySideBar', "Move Panel Views To Secondary Side Bar"),
src/vs/workbench/browser/parts/panel/panelActions.ts:				value: localize('moveSidePanelToPanel', "Move Secondary Side Bar Views To Panel"),
src/vs/workbench/browser/parts/panel/panelActions.ts:				value: localize('moveSidePanelToPanel', "Move Secondary Side Bar Views To Panel"),
src/vs/workbench/contrib/tasks/browser/runAutomaticTasks.ts:	public static readonly LABEL = nls.localize('workbench.action.tasks.manageAutomaticRunning', "Manage Automatic Tasks");
src/vs/workbench/contrib/tasks/browser/runAutomaticTasks.ts:		const allowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.allowAutomaticTasks', "Allow Automatic Tasks") };
src/vs/workbench/contrib/tasks/browser/runAutomaticTasks.ts:		const disallowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.disallowAutomaticTasks', "Disallow Automatic Tasks") };
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:			name: localize('status.notifications', "Notifications"),
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:			ariaLabel: localize('status.notifications', "Notifications"),
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:				ariaLabel: localize('status.doNotDisturb', "Do Not Disturb"),
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:				tooltip: localize('status.doNotDisturbTooltip', "Do Not Disturb Mode is Enabled")
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:			return localize('hideNotifications', "Hide Notifications");
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:			return localize('zeroNotifications', "No Notifications");
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:				return localize('noNotifications', "No New Notifications");
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:				return localize('oneNotification', "1 New Notification");
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:			return localize({ key: 'notifications', comment: ['{0} will be replaced by a number'] }, "{0} New Notifications", this.newNotificationsCount);
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:			return localize({ key: 'noNotificationsWithProgress', comment: ['{0} will be replaced by a number'] }, "No New Notifications ({0} in progress)", notificationsInProgress);
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:			return localize({ key: 'oneNotificationWithProgress', comment: ['{0} will be replaced by a number'] }, "1 New Notification ({0} in progress)", notificationsInProgress);
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:		return localize({ key: 'notificationsWithProgress', comment: ['{0} and {1} will be replaced by a number'] }, "{0} New Notifications ({1} in progress)", this.newNotificationsCount, notificationsInProgress);
src/vs/workbench/browser/parts/notifications/notificationsStatus.ts:					name: localize('status.message', "Status Message"),
src/vs/workbench/contrib/tasks/common/tasks.ts:export const TASK_RUNNING_STATE = new RawContextKey<boolean>('taskRunning', false, nls.localize('tasks.taskRunningContext', "Whether a task is currently running."));
src/vs/workbench/contrib/tasks/common/tasks.ts:export const TASKS_CATEGORY = { value: nls.localize('tasksCategory', "Tasks"), original: 'Tasks' };
src/vs/workbench/contrib/tasks/common/tasks.ts:							reporter.error(nls.localize(
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:const SHOW_ALL: string = nls.localize('taskQuickPick.showAll', "Show All Tasks...");
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:export const configureTaskIcon = registerIcon('tasks-list-configure', Codicon.gear, nls.localize('configureTaskIcon', 'Configuration icon in the tasks selection list.'));
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:const removeTaskIcon = registerIcon('tasks-remove', Codicon.close, nls.localize('removeTaskIcon', 'Icon for remove in the tasks selection list.'));
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			{ iconClass: ThemeIcon.asClassName(configureTaskIcon), tooltip: nls.localize('configureTask', "Configure Task") },
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:		entries.push({ type: 'separator', label: nls.localize('contributedTasks', "contributed") });
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			entries.push({ label: `$(folder) ${type}`, task: type, ariaLabel: nls.localize('taskType', "All {0} tasks", type) });
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:				tooltip: nls.localize('removeRecent', 'Remove Recently Used Task')
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			this._createEntriesForGroup(this._topLevelEntries, recentTasks, nls.localize('recentlyUsed', 'recently used'), [removeRecentButton]);
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:				this._createEntriesForGroup(this._topLevelEntries, dedupedConfiguredTasks, nls.localize('configured', 'configured'));
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			this._topLevelEntries.push({ type: 'separator', label: nls.localize('configured', 'configured') });
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:		const noButton = nls.localize('TaskQuickPick.changeSettingNo', "No");
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:		const yesButton = nls.localize('TaskQuickPick.changeSettingYes', "Yes");
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			nls.localize('TaskQuickPick.changeSettingDetails',
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			return this.show(nls.localize('TaskService.pickRunTask', 'Select the task to run'), undefined, selectedType);
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:				label: nls.localize('TaskQuickPick.changeSettingsOptions', "$(gear) {0} task detection is turned off. Enable {1} task detection...",
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:				label: nls.localize('TaskQuickPick.goBack', 'Go back ↩'),
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:				label: nls.localize('TaskQuickPick.noTasksForType', 'No {0} tasks found. Go back ↩', type),
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			this._notificationService.error(nls.localize('noProviderForTask', "There is no task provider registered for tasks of type \"{0}\".", task.type));
src/vs/workbench/browser/parts/notifications/notificationsToasts.ts:					return localize('notificationAriaLabel', "{0}, notification", item.message.raw);
src/vs/workbench/browser/parts/notifications/notificationsToasts.ts:				return localize('notificationWithSourceAriaLabel', "{0}, source: {1}, notification", item.message.raw, item.source);
src/vs/workbench/contrib/tasks/common/taskService.ts:export const CustomExecutionSupportedContext = new RawContextKey<boolean>('customExecutionSupported', false, nls.localize('tasks.customExecutionSupported', "Whether CustomExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution."));
src/vs/workbench/contrib/tasks/common/taskService.ts:export const ShellExecutionSupportedContext = new RawContextKey<boolean>('shellExecutionSupported', false, nls.localize('tasks.shellExecutionSupported', "Whether ShellExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution."));
src/vs/workbench/contrib/tasks/common/taskService.ts:export const TaskCommandsRegistered = new RawContextKey<boolean>('taskCommandsRegistered', false, nls.localize('tasks.taskCommandsRegistered', "Whether the task commands have been registered yet"));
src/vs/workbench/contrib/tasks/common/taskService.ts:export const ProcessExecutionSupportedContext = new RawContextKey<boolean>('processExecutionSupported', false, nls.localize('tasks.processExecutionSupported', "Whether ProcessExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution."));
src/vs/workbench/contrib/tasks/common/taskService.ts:export const ServerlessWebContext = new RawContextKey<boolean>('serverlessWebContext', false, nls.localize('tasks.serverlessWebContext', "True when in the web with no remote authority."));
src/vs/workbench/browser/parts/notifications/notificationsCommands.ts:	const category = { value: localize('notifications', "Notifications"), original: 'Notifications' };
src/vs/workbench/browser/parts/notifications/notificationsCommands.ts:	MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: SHOW_NOTIFICATIONS_CENTER, title: { value: localize('showNotifications', "Show Notifications"), original: 'Show Notifications' }, category } });
src/vs/workbench/browser/parts/notifications/notificationsCommands.ts:	MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: HIDE_NOTIFICATIONS_CENTER, title: { value: localize('hideNotifications', "Hide Notifications"), original: 'Hide Notifications' }, category }, when: NotificationsCenterVisibleContext });
src/vs/workbench/browser/parts/notifications/notificationsCommands.ts:	MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLEAR_ALL_NOTIFICATIONS, title: { value: localize('clearAllNotifications', "Clear All Notifications"), original: 'Clear All Notifications' }, category } });
src/vs/workbench/browser/parts/notifications/notificationsCommands.ts:	MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: TOGGLE_DO_NOT_DISTURB_MODE, title: { value: localize('toggleDoNotDisturbMode', "Toggle Do Not Disturb Mode"), original: 'Toggle Do Not Disturb Mode' }, category } });
src/vs/workbench/browser/parts/notifications/notificationsCommands.ts:	MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: FOCUS_NOTIFICATION_TOAST, title: { value: localize('focusNotificationToasts', "Focus Notification Toast"), original: 'Focus Notification Toast' }, category }, when: NotificationsToastsVisibleContext });
src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts:			description: nls.localize('TaskDefinition.description', 'The actual task type. Please note that types starting with a \'$\' are reserved for internal usage.')
src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts:			description: nls.localize('TaskDefinition.properties', 'Additional properties of the task type'),
src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts:			markdownDescription: nls.localize('TaskDefinition.when', 'Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition. See the [API documentation](https://code.visualstudio.com/api/extension-guides/task-provider#when-clause) for more information.'),
src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts:			messageCollector.error(nls.localize('TaskTypeConfiguration.noType', 'The task type configuration is missing the required \'taskType\' property'));
src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts:		description: nls.localize('TaskDefinitionExtPoint', 'Contributes task kinds'),
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:const clearIcon = registerIcon('notifications-clear', Codicon.close, localize('clearIcon', 'Icon for the clear action in notifications.'));
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:const clearAllIcon = registerIcon('notifications-clear-all', Codicon.clearAll, localize('clearAllIcon', 'Icon for the clear all action in notifications.'));
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:const hideIcon = registerIcon('notifications-hide', Codicon.chevronDown, localize('hideIcon', 'Icon for the hide action in notifications.'));
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:const expandIcon = registerIcon('notifications-expand', Codicon.chevronUp, localize('expandIcon', 'Icon for the expand action in notifications.'));
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:const collapseIcon = registerIcon('notifications-collapse', Codicon.chevronDown, localize('collapseIcon', 'Icon for the collapse action in notifications.'));
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:const configureIcon = registerIcon('notifications-configure', Codicon.gear, localize('configureIcon', 'Icon for the configure action in notifications.'));
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:const doNotDisturbIcon = registerIcon('notifications-do-not-disturb', Codicon.bellSlash, localize('doNotDisturbIcon', 'Icon for the mute all action in notifications.'));
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('clearNotification', "Clear Notification");
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('clearNotifications', "Clear All Notifications");
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('toggleDoNotDisturbMode', "Toggle Do Not Disturb Mode");
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('hideNotificationsCenter', "Hide Notifications");
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('expandNotification', "Expand Notification");
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('collapseNotification', "Collapse Notification");
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('configureNotification', "Configure Notification");
src/vs/workbench/browser/parts/notifications/notificationsActions.ts:	static readonly LABEL = localize('copyNotification', "Copy Text");
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:				context.taskLoadIssues.push(nls.localize('ConfigurationParser.invalidCWD', 'Warning: options.cwd must be of type string. Ignoring value {0}\n', options.cwd));
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:						nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:					context.taskLoadIssues.push(nls.localize('ConfigurationParser.noShell', 'Warning: shell configuration is only supported when executing tasks in the terminal.'));
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:				context.problemReporter.error(nls.localize('ConfigurationParser.noName', 'Error: Problem Matcher in declare scope must have a name:\n{0}\n', JSON.stringify(value, undefined, 4)));
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			const error = nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			return { errors: [nls.localize('ConfigurationParser.invalidVariableReference', 'Error: Invalid problemMatcher reference: {0}\n', value)] };
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			context.problemReporter.error(nls.localize('ConfigurationParser.noTaskType', 'Error: tasks configuration must have a type property. The configuration will be ignored.\n{0}\n', JSON.stringify(external, null, 4)));
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			const message = nls.localize('ConfigurationParser.noTypeDefinition', 'Error: there is no registered task type \'{0}\'. Did you miss installing an extension that provides a corresponding task provider?', type);
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			context.problemReporter.error(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			context.problemReporter.error(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			context.problemReporter.error(nls.localize('ConfigurationParser.notCustom', 'Error: tasks is not declared as a custom task. The configuration will be ignored.\n{0}\n', JSON.stringify(external, null, 4)));
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			context.problemReporter.error(nls.localize('ConfigurationParser.noTaskName', 'Error: a task must provide a label property. The task will be ignored.\n{0}\n', JSON.stringify(external, null, 4)));
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:				context.problemReporter.info(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:							context.problemReporter.error(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:							context.problemReporter.warn(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:				nls.localize(
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemPatternParser.problemPattern.missingRegExp', 'The problem pattern is missing a regular expression.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:					this.error(localize('ProblemPatternParser.loopProperty.notLast', 'The loop property is only supported on the last line matcher.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				this.error(localize('ProblemPatternParser.problemPattern.kindProperty.notFirst', 'The problem pattern is invalid. The kind property must be provided only in the first element'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemPatternParser.problemPattern.missingProperty', 'The problem pattern is invalid. It must have at least have a file and a message.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemPatternParser.problemPattern.missingLocation', 'The problem pattern is invalid. It must either have kind: "file" or have a line or location match group.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemPatternParser.invalidRegexp', 'Error: The string {0} is not a valid regular expression.\n', value));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.regexp', 'The regular expression to find an error, warning or info in the output.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.kind', 'whether the pattern matches a location (file and line) or only a file.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.file', 'The match group index of the filename. If omitted 1 is used.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.location', 'The match group index of the problem\'s location. Valid location patterns are: (line), (line,column) and (startLine,startColumn,endLine,endColumn). If omitted (line,column) is assumed.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.line', 'The match group index of the problem\'s line. Defaults to 2')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.column', 'The match group index of the problem\'s line character. Defaults to 3')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.endLine', 'The match group index of the problem\'s end line. Defaults to undefined')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.endColumn', 'The match group index of the problem\'s end line character. Defaults to undefined')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.severity', 'The match group index of the problem\'s severity. Defaults to undefined')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.code', 'The match group index of the problem\'s code. Defaults to undefined')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.message', 'The match group index of the message. If omitted it defaults to 4 if location is specified. Otherwise it defaults to 5.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemPatternSchema.loop', 'In a multi line matcher loop indicated whether this pattern is executed in a loop as long as it matches. Can only specified on a last pattern in a multi line pattern.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('NamedProblemPatternSchema.name', 'The name of the problem pattern.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('NamedMultiLineProblemPatternSchema.name', 'The name of the problem multi line problem pattern.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('NamedMultiLineProblemPatternSchema.patterns', 'The actual patterns.'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('ProblemPatternExtPoint', 'Contributes problem patterns'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:									extension.collector.error(localize('ProblemPatternRegistry.error', 'Invalid problem pattern. The pattern will be ignored.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:									extension.collector.error(localize('ProblemPatternRegistry.error', 'Invalid problem pattern. The pattern will be ignored.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemMatcherParser.noProblemMatcher', 'Error: the description can\'t be converted into a problem matcher:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4)));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemMatcherParser.noProblemPattern', 'Error: the description doesn\'t define a valid problem pattern:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4)));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemMatcherParser.noOwner', 'Error: the description doesn\'t define an owner:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4)));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemMatcherParser.noFileLocation', 'Error: the description doesn\'t define a file location:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4)));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.info(localize('ProblemMatcherParser.unknownSeverity', 'Info: unknown severity {0}. Valid values are error, warning and info.\n', description.severity));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:					this.error(localize('ProblemMatcherParser.noDefinedPatter', 'Error: the pattern with the identifier {0} doesn\'t exist.', variableName));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:					this.error(localize('ProblemMatcherParser.noIdentifier', 'Error: the pattern property refers to an empty identifier.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:					this.error(localize('ProblemMatcherParser.noValidIdentifier', 'Error: the pattern property {0} is not a valid pattern variable name.', variableName));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemMatcherParser.problemPattern.watchingMatcher', 'A problem matcher must define both a begin pattern and an end pattern for watching.'));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			this.error(localize('ProblemMatcherParser.invalidRegexp', 'Error: The string {0} is not a valid regular expression.\n', value));
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('WatchingPatternSchema.regexp', 'The regular expression to detect the begin or end of a background task.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('WatchingPatternSchema.file', 'The match group index of the filename. Can be omitted.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('PatternTypeSchema.name', 'The name of a contributed or predefined pattern')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('PatternTypeSchema.description', 'A problem pattern or the name of a contributed or predefined problem pattern. Can be omitted if base is specified.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.base', 'The name of a base problem matcher to use.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.owner', 'The owner of the problem inside Code. Can be omitted if base is specified. Defaults to \'external\' if omitted and base is not specified.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.source', 'A human-readable string describing the source of this diagnostic, e.g. \'typescript\' or \'super lint\'.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.severity', 'The default severity for captures problems. Is used if the pattern doesn\'t define a match group for severity.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.applyTo', 'Controls if a problem reported on a text document is applied only to open, closed or all documents.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.fileLocation', 'Defines how file names reported in a problem pattern should be interpreted. A relative fileLocation may be an array, where the second element of the array is the path of the relative file location. The search fileLocation mode, performs a deep (and, possibly, heavy) file system search within the directories specified by the include/exclude properties of the second element (or the current workspace directory if not specified).')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.background', 'Patterns to track the begin and end of a matcher active on a background task.'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:						description: localize('ProblemMatcherSchema.background.activeOnStart', 'If set to true the background monitor is in active mode when the task starts. This is equals of issuing a line that matches the beginsPattern')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:						description: localize('ProblemMatcherSchema.background.beginsPattern', 'If matched in the output the start of a background task is signaled.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:						description: localize('ProblemMatcherSchema.background.endsPattern', 'If matched in the output the end of a background task is signaled.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				deprecationMessage: localize('ProblemMatcherSchema.watching.deprecated', 'The watching property is deprecated. Use background instead.'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:				description: localize('ProblemMatcherSchema.watching', 'Patterns to track the begin and end of a watching matcher.'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:						description: localize('ProblemMatcherSchema.watching.activeOnStart', 'If set to true the watcher is in active mode when the task starts. This is equals of issuing a line that matches the beginPattern')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:						description: localize('ProblemMatcherSchema.watching.beginsPattern', 'If matched in the output the start of a watching task is signaled.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:						description: localize('ProblemMatcherSchema.watching.endsPattern', 'If matched in the output the end of a watching task is signaled.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		deprecationMessage: localize('LegacyProblemMatcherSchema.watchedBegin.deprecated', 'This property is deprecated. Use the watching property instead.'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('LegacyProblemMatcherSchema.watchedBegin', 'A regular expression signaling that a watched tasks begins executing triggered through file watching.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		deprecationMessage: localize('LegacyProblemMatcherSchema.watchedEnd.deprecated', 'This property is deprecated. Use the watching property instead.'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('LegacyProblemMatcherSchema.watchedEnd', 'A regular expression signaling that a watched tasks ends executing.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('NamedProblemMatcherSchema.name', 'The name of the problem matcher used to refer to it.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('NamedProblemMatcherSchema.label', 'A human readable label of the problem matcher.')
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:		description: localize('ProblemMatcherExtPoint', 'Contributes problem matchers'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('msCompile', 'Microsoft compiler problems'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('lessCompile', 'Less problems'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('gulp-tsc', 'Gulp TSC Problems'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('jshint', 'JSHint problems'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('jshint-stylish', 'JSHint stylish problems'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('eslint-compact', 'ESLint compact problems'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('eslint-stylish', 'ESLint stylish problems'),
src/vs/workbench/contrib/tasks/common/problemMatcher.ts:			label: localize('go', 'Go problems'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	deprecationMessage: nls.localize('JsonSchema.tasks.isShellCommand.deprecated', 'The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.hide', 'Hide this task from the run task quick pick'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.dependsOn.identifier', 'The task identifier.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.dependsOn.string', 'Another task this task depends on.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.dependsOn.array', 'The other tasks this task depends on.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.dependsOn', 'Either a string representing another task or an array of other tasks that this task depends on.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:		nls.localize('JsonSchema.tasks.dependsOrder.parallel', 'Run all dependsOn tasks in parallel.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:		nls.localize('JsonSchema.tasks.dependsOrder.sequence', 'Run all dependsOn tasks in sequence.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.dependsOrder', 'Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.detail', 'An optional description of a task that shows in the Run Task quick pick as a detail.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.icon', 'An optional icon for the task'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.icon.id', 'An optional codicon ID to use'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.icon.color', 'An optional color of the icon'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.presentation', 'Configures the panel that is used to present the task\'s output and reads its input.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.echo', 'Controls whether the executed command is echoed to the panel. Default is true.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.focus', 'Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:				nls.localize('JsonSchema.tasks.presentation.revealProblems.always', 'Always reveals the problems panel when this task is executed.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:				nls.localize('JsonSchema.tasks.presentation.revealProblems.onProblem', 'Only reveals the problems panel if a problem is found.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:				nls.localize('JsonSchema.tasks.presentation.revealProblems.never', 'Never reveals the problems panel when this task is executed.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.revealProblems', 'Controls whether the problems panel is revealed when running this task or not. Takes precedence over option \"reveal\". Default is \"never\".')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:				nls.localize('JsonSchema.tasks.presentation.reveal.always', 'Always reveals the terminal when this task is executed.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:				nls.localize('JsonSchema.tasks.presentation.reveal.silent', 'Only reveals the terminal if the task exits with an error or the problem matcher finds an error.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:				nls.localize('JsonSchema.tasks.presentation.reveal.never', 'Never reveals the terminal when this task is executed.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.reveal', 'Controls whether the terminal running the task is revealed or not. May be overridden by option \"revealProblems\". Default is \"always\".')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.instance', 'Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.showReuseMessage', 'Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.clear', 'Controls whether the terminal is cleared before executing the task.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.group', 'Controls whether the task is executed in a specific terminal group using split panes.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.presentation.close', 'Controls whether the terminal the task runs in is closed when the task exits.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:terminal.deprecationMessage = nls.localize('JsonSchema.tasks.terminal', 'The terminal property is deprecated. Use presentation instead');
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:		nls.localize('JsonSchema.tasks.group.build', 'Marks the task as a build task accessible through the \'Run Build Task\' command.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:		nls.localize('JsonSchema.tasks.group.test', 'Marks the task as a test task accessible through the \'Run Test Task\' command.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:		nls.localize('JsonSchema.tasks.group.none', 'Assigns the task to no group')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.group.kind', 'The task\'s execution group.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:					description: nls.localize('JsonSchema.tasks.group.isDefault', 'Defines if this task is the default task in the group, or a glob to match the file which should trigger this task.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.group.defaultBuild', 'Marks the task as the default build task.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.group.defaultTest', 'Marks the task as the default test task.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.group', 'Defines to which execution group this task belongs to. It supports "build" to add it to the build group and "test" to add it to the test group.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:					description: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:							description: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:					description: nls.localize('JsonSchema.command.quotedString.value', 'The actual command value')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:						nls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\'s escape character (e.g. ` under PowerShell and \\ under bash).'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:						nls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\'s strong quote character (e.g. \' under PowerShell and bash).'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:						nls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\'s weak quote character (e.g. " under PowerShell and bash).'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:					description: nls.localize('JsonSchema.command.quotesString.quote', 'How the command value should be quoted.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:						description: nls.localize('JsonSchema.args.quotedString.value', 'The actual argument value')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:							nls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\'s escape character (e.g. ` under PowerShell and \\ under bash).'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:							nls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\'s strong quote character (e.g. \' under PowerShell and bash).'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:							nls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\'s weak quote character (e.g. " under PowerShell and bash).'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:						description: nls.localize('JsonSchema.args.quotesString.quote', 'How the argument value should be quoted.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.label', "The task's user interface label")
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.version', 'The config\'s version number.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.identifier', 'A user defined identifier to reference the task in launch.json or a dependsOn clause.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	deprecationMessage: nls.localize('JsonSchema.tasks.identifier.deprecated', 'User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.reevaluateOnRerun', 'Whether to reevaluate task variables on rerun.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.runOn', 'Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.instanceLimit', 'The number of instances of the task that are allowed to run simultaneously.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.runOptions', 'The task\'s run related options')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.taskLabel', "The task's label")
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.taskName', 'The task\'s name'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			deprecationMessage: nls.localize('JsonSchema.tasks.taskName.deprecated', 'The task\'s name property is deprecated. Use the label property instead.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:			description: nls.localize('JsonSchema.customizations.customizes.type', 'The task type to customize'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	deprecationMessage: nls.localize('JsonSchema.tasks.customize.deprecated', 'The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.taskName.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:definitions.showOutputType.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.echoCommand.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.suppressTaskName.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.isBuildCommand.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.isTestCommand.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:	description: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:definitionsTaskRunnerConfigurationProperties.suppressTaskName.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:definitionsTaskRunnerConfigurationProperties.taskSelector.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:							'description': nls.localize('JsonSchema.windows', 'Windows specific command configuration')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:							'description': nls.localize('JsonSchema.mac', 'Mac specific command configuration')
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:							'description': nls.localize('JsonSchema.linux', 'Linux specific command configuration')
src/vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts:			localize('helpUs', "Help us improve our support for {0}", languageService.getLanguageName(data.languageId) ?? data.languageId),
src/vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts:				label: localize('takeShortSurvey', "Take Short Survey"),
src/vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts:				label: localize('remindLater', "Remind Me later"),
src/vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts:				label: localize('neverAgain', "Don't Show Again"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:					progress.report({ message: nls.localize('building', 'Building...') });
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				name: nls.localize('status.runningTasks', "Running Tasks"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				ariaLabel: nls.localize('numberOfRunningTasks', "{0} running tasks", tasks.length),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				tooltip: nls.localize('runningTasks', "Show Running Tasks"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: nls.localize({ key: 'miRunTask', comment: ['&& denotes a mnemonic'] }, "&&Run Task...")
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: nls.localize({ key: 'miBuildTask', comment: ['&& denotes a mnemonic'] }, "Run &&Build Task...")
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: nls.localize({ key: 'miRunningTask', comment: ['&& denotes a mnemonic'] }, "Show Runnin&&g Tasks...")
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: nls.localize({ key: 'miRestartTask', comment: ['&& denotes a mnemonic'] }, "R&&estart Running Task...")
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: nls.localize({ key: 'miTerminateTask', comment: ['&& denotes a mnemonic'] }, "&&Terminate Task...")
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: nls.localize({ key: 'miConfigureTask', comment: ['&& denotes a mnemonic'] }, "&&Configure Tasks...")
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: nls.localize({ key: 'miConfigureBuildTask', comment: ['&& denotes a mnemonic'] }, "Configure De&&fault Build Task...")
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('workbench.action.tasks.openWorkspaceFileTasks', "Open Workspace Tasks"), original: 'Open Workspace Tasks' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('ShowLogAction.label', "Show Task Log"), original: 'Show Task Log' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('RunTaskAction.label', "Run Task"), original: 'Run Task' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('ReRunTaskAction.label', "Rerun Last Task"), original: 'Rerun Last Task' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('RestartTaskAction.label', "Restart Running Task"), original: 'Restart Running Task' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('ShowTasksAction.label', "Show Running Tasks"), original: 'Show Running Tasks' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('TerminateAction.label', "Terminate Task"), original: 'Terminate Task' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('BuildAction.label', "Run Build Task"), original: 'Run Build Task' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:		title: { value: nls.localize('TestAction.label', "Run Test Task"), original: 'Run Test Task' },
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			value: nls.localize('ConfigureDefaultBuildTask.label', "Configure Default Build Task"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			value: nls.localize('ConfigureDefaultTestTask.label', "Configure Default Test Task"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			value: nls.localize('workbench.action.tasks.openUserTasks', "Open User Tasks"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:// MenuRegistry.addCommand( { id: 'workbench.action.tasks.rebuild', title: nls.localize('RebuildAction.label', 'Run Rebuild Task'), category: tasksCategory });
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:// MenuRegistry.addCommand( { id: 'workbench.action.tasks.clean', title: nls.localize('CleanAction.label', 'Run Clean Task'), category: tasksCategory });
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:	placeholder: nls.localize('tasksQuickAccessPlaceholder', "Type the name of a task to run."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:	helpEntries: [{ description: nls.localize('tasksQuickAccessHelp', "Run Task") }]
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:	title: nls.localize('tasksConfigurationTitle', "Tasks"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize('task.problemMatchers.neverPrompt', "Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:					markdownDescription: nls.localize('task.problemMatchers.neverPrompt.boolean', 'Sets problem matcher prompting behavior for all tasks.')
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:					markdownDescription: nls.localize('task.problemMatchers.neverPrompt.array', 'An object containing task type-boolean pairs to never prompt for problem matchers on.'),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize('task.autoDetect', "Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize('task.slowProviderWarning', "Configures whether a warning is shown when a provider is slow"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:					markdownDescription: nls.localize('task.slowProviderWarning.boolean', 'Sets the slow provider warning for all tasks.')
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:						markdownDescription: nls.localize('task.slowProviderWarning.array', 'An array of task types to never show the slow provider warning.')
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize('task.quickOpen.history', "Controls the number of recent items tracked in task quick open dialog."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize('task.quickOpen.detail', "Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			description: nls.localize('task.quickOpen.skip', "Controls whether the task quick pick is skipped when there is only one task to pick from."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			description: nls.localize('task.quickOpen.showAll', "Causes the Tasks: Run Task command to use the slower \"show all\" behavior instead of the faster two level picker where tasks are grouped by provider."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				nls.localize('task.allowAutomaticTasks.on', "Always"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				nls.localize('task.allowAutomaticTasks.off', "Never"),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			description: nls.localize('task.allowAutomaticTasks', "Enable automatic tasks - note that tasks won't run in an untrusted workspace."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize('task.showDecorations', "Shows decorations at points of interest in the terminal buffer such as the first problem found via a watch task. Note that this will only take effect for future tasks. {0} will take precedence over this setting", '`#terminal.integrated.shellIntegration.decorationsEnabled#`'),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			description: nls.localize('task.reconnection', "On window reload, reconnect to tasks that have problem matchers."),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize(
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				nls.localize('task.saveBeforeRun.always', 'Always saves all editors before running.'),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				nls.localize('task.saveBeforeRun.never', 'Never saves editors before running.'),
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:				nls.localize('task.SaveBeforeRun.prompt', 'Prompts whether to save editors before running.'),
src/vs/workbench/browser/parts/notifications/notificationsCenter.ts:			notificationsCenterTitle.textContent = localize('notificationsEmpty', "No new notifications");
src/vs/workbench/browser/parts/notifications/notificationsCenter.ts:			notificationsCenterTitle.textContent = localize('notifications', "Notifications");
src/vs/workbench/browser/parts/notifications/notificationsCenter.ts:			ariaLabel: localize('notificationsToolbar', "Notification Center Actions"),
src/vs/workbench/browser/parts/notifications/notificationsCenter.ts:			widgetAriaLabel: localize('notificationsCenterWidgetAriaLabel', "Notifications Center")
src/vs/workbench/browser/parts/notifications/notificationsViewer.ts:					title = localize('executeCommand', "Click to execute command '{0}'", node.href.substr('command:'.length));
src/vs/workbench/browser/parts/notifications/notificationsViewer.ts:				ariaLabel: localize('notificationActions', "Notification Actions"),
src/vs/workbench/browser/parts/notifications/notificationsViewer.ts:			this.template.source.textContent = localize('notificationSource', "Source: {0}", notification.source);
src/vs/workbench/contrib/surveys/browser/nps.contribution.ts:			nls.localize('surveyQuestion', "Do you mind taking a quick feedback survey?"),
src/vs/workbench/contrib/surveys/browser/nps.contribution.ts:				label: nls.localize('takeSurvey', "Take Survey"),
src/vs/workbench/contrib/surveys/browser/nps.contribution.ts:				label: nls.localize('remindLater', "Remind Me later"),
src/vs/workbench/contrib/surveys/browser/nps.contribution.ts:				label: nls.localize('neverAgain', "Don't Show Again"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:	export const TEXT = nls.localize('ConfigureTaskRunnerAction.label', "Configure Task");
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:	public static OutputChannelLabel: string = nls.localize('tasks', "Tasks");
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				entry = await this._showQuickPick(tasks, nls.localize('TaskService.pickBuildTaskForLabel', 'Select the build task (there is no default build task defined)'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					description: nls.localize('runTask.arg', "Filters the tasks shown in the quickpick"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:								description: nls.localize('runTask.label', "The task's label or a term to filter by")
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:										description: nls.localize('runTask.type', "The contributed task type")
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:										description: nls.localize('runTask.task', "The task's label or a term to filter by")
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			this._notificationService.prompt(Severity.Warning, nls.localize('taskServiceOutputPrompt', 'There are task errors. See the output for details.'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					label: nls.localize('showOutput', "Show output"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			return Promise.reject(new Error(nls.localize('TaskServer.folderIgnored', 'The folder {0} is ignored since it uses task version 0.1.0', name)));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				this._outputChannel.append(nls.localize(
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					throw new TaskError(Severity.Info, nls.localize('TaskService.noTestTask1', 'No test task defined. Mark a task with \'isTestCommand\' in the tasks.json file.'), TaskErrors.NoTestTask);
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					throw new TaskError(Severity.Info, nls.localize('TaskService.noTestTask2', 'No test task defined. Mark a task with as a \'test\' group in the tasks.json file.'), TaskErrors.NoTestTask);
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					throw new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask1', 'No build task defined. Mark a task with \'isBuildCommand\' in the tasks.json file.'), TaskErrors.NoBuildTask);
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					throw new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask2', 'No build task defined. Mark a task with as a \'build\' group in the tasks.json file.'), TaskErrors.NoBuildTask);
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			throw new TaskError(Severity.Info, nls.localize('TaskServer.noTask', 'Task to execute is undefined'), TaskErrors.TaskNotFound);
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:		entries.unshift({ type: 'separator', label: nls.localize('TaskService.associate', 'associate') });
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			{ label: nls.localize('TaskService.attachProblemMatcher.continueWithout', 'Continue without scanning the task output'), matcher: undefined },
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			{ label: nls.localize('TaskService.attachProblemMatcher.never', 'Never scan the task output for this task'), matcher: undefined, never: true },
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			{ label: nls.localize('TaskService.attachProblemMatcher.neverType', 'Never scan the task output for {0} tasks', taskType), matcher: undefined, setting: taskType },
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			{ label: nls.localize('TaskService.attachProblemMatcher.learnMoreAbout', 'Learn more about scanning the task output'), matcher: undefined, learnMore: true }
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:		const problemMatcher = await this._quickInputService.pick(entries, { placeHolder: nls.localize('selectProblemMatcher', 'Select for which kind of errors and warnings to scan the task output') });
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			this._notificationService.warn(nls.localize('customizeParseErrors', 'The current task configuration has errors. Please fix the errors first before customizing a task.'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				nls.localize('tasksJsonComment', '\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \n\t// for the documentation about the tasks.json format'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				this._outputChannel.append(nls.localize('moreThanOneBuildTask', 'There are many build tasks defined in the tasks.json. Executing the first one.\n'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				nls.localize('TaskSystem.saveBeforeRun.prompt.title', 'Save all editors?'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				[nls.localize('saveBeforeRun.save', 'Save'), nls.localize('saveBeforeRun.dontSave', 'Don\'t save')],
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					detail: nls.localize('detail', "Do you want to save all editors before running the task?"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					const message = nls.localize('TaskSystem.activeSame.noBackground', 'The task \'{0}\' is already active.', executeResult.task.getQualifiedLabel());
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:							label: nls.localize('terminateTask', "Terminate Task"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:							label: nls.localize('restartTask', "Restart Task"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				throw new TaskError(Severity.Warning, nls.localize('TaskSystem.active', 'There is already a task running. Terminate it first before executing another task.'), TaskErrors.RunningTask);
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			this._notificationService.warn(nls.localize('TaskSystem.restartFailed', 'Failed to terminate and restart task {0}', Types.isString(task) ? task : task.configurationProperties.name));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:									this._outputChannel.append(nls.localize('unexpectedTaskType', "The task provider for \"{0}\" tasks unexpectedly provided a task of type \"{1}\".\n", this._providerTypes.get(handle), task.type));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:								this._outputChannel.append(nls.localize(
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:								this._outputChannel.append(nls.localize(
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			problemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\'t not be used. Please correct the errors first.'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				this._outputChannel.append(nls.localize({ key: 'TaskSystem.invalidTaskJsonOther', comment: ['Message notifies of an error in one of several places there is tasks related json, not necessarily in a file named tasks.json'] }, 'Error: The content of the tasks json in {0} has syntax errors. Please correct them before executing a task.\n', location));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:		const configuration = this._testParseExternalConfig(workspaceFileConfig.config, nls.localize('TasksSystem.locationWorkspaceConfig', 'workspace file'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			this._notificationService.warn(nls.localize('TaskSystem.versionWorkspaceFile', 'Only tasks version 2.0.0 permitted in workspace configuration files.'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:		const configuration = this._testParseExternalConfig(userTasksConfig.config, nls.localize('TasksSystem.locationUserConfig', 'user settings'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			this._notificationService.warn(nls.localize('TaskSystem.versionSettings', 'Only tasks version 2.0.0 permitted in user settings.'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			problemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\'t not be used. Please correct the errors first.'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					this._outputChannel.append(nls.localize(
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				this._outputChannel.append(nls.localize('TaskSystem.invalidTaskJson', 'Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.\n'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					label: needsConfig ? ConfigureTaskAction.TEXT : nls.localize('TerminateAction.label', "Terminate Task"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			this._notificationService.error(nls.localize('TaskSystem.unknownError', 'An error has occurred while running a task. See task log for details.'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				entry.buttons = [{ iconClass: ThemeIcon.asClassName(configureTaskIcon), tooltip: nls.localize('configureTask', "Configure Task") }];
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					fillEntries(entries, recent, nls.localize('recentlyUsed', 'recently used tasks'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				fillEntries(entries, configured, nls.localize('configured', 'configured tasks'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				fillEntries(entries, detected, nls.localize('detected', 'detected tasks'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			nls.localize('TaskService.ignoredFolder', 'The following workspace folders are ignored since they use task version 0.1.0: {0}', this.ignoredWorkspaceFolders.map(f => f.name).join(', ')),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				label: nls.localize('TaskService.notAgain', "Don't Show Again"),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					message: nls.localize('TaskService.requestTrust', "Listing and running tasks requires that some of the files in this workspace be executed as code.")
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:		const placeholder = nls.localize('TaskService.pickRunTask', 'Select the task to run');
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:						label: '$(plus) ' + nls.localize('TaskService.noEntryToRun', 'Configure a Task'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:						label: '$(plus) ' + nls.localize('TaskService.noEntryToRun', 'Configure a Task'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			fetching: nls.localize('TaskService.fetchingBuildTasks', 'Fetching build tasks...'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			select: nls.localize('TaskService.pickBuildTask', 'Select the build task to run'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			notFoundConfigure: nls.localize('TaskService.noBuildTask', 'No build task to run found. Configure Build Task...')
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			fetching: nls.localize('TaskService.fetchingTestTasks', 'Fetching test tasks...'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			select: nls.localize('TaskService.pickTestTask', 'Select the test task to run'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			notFoundConfigure: nls.localize('TaskService.noTestTaskTerminal', 'No test task to run found. Configure Tasks...')
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				nls.localize('TaskService.taskToTerminate', 'Select a task to terminate'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					label: nls.localize('TaskService.noTaskRunning', 'No task is currently running'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					label: nls.localize('TaskService.terminateAllRunningTasks', 'All Running Tasks'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:							this._notificationService.error(nls.localize('TerminateAction.noProcess', 'The launched process doesn\'t exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:							this._notificationService.error(nls.localize('TerminateAction.failed', 'Failed to terminate running task'));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				nls.localize('TaskService.taskToRestart', 'Select the task to restart'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					label: nls.localize('TaskService.noTaskToRestart', 'No task to restart'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				const pickTemplateResult = await this._quickInputService.pick(getTaskTemplates(), { placeHolder: nls.localize('TaskService.template', 'Select a Task Template') });
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			description = nls.localize('taskQuickPick.userSettings', 'User');
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:		const createLabel = nls.localize('TaskService.createJsonFile', 'Create tasks.json file from template');
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:		const openLabel = nls.localize('TaskService.openJsonFile', 'Open tasks.json file');
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:			{ placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }, cancellationToken).
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:							const label = nls.localize('TaskService.defaultBuildTaskExists', '{0} is already marked as the default build task', TaskQuickPick.getTaskLabelWithIcon(task, task.getQualifiedLabel()));
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:						{ placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }, cancellationToken).
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:						placeHolder: nls.localize('TaskService.pickDefaultBuildTask', 'Select the task to be used as the default build task')
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:						label: nls.localize('TaskService.defaultTestTaskExists', '{0} is already marked as the default test task.', selectedTask.getQualifiedLabel()),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:						nls.localize('TaskService.pickDefaultTestTask', 'Select the task to be used as the default test task'), undefined, true, false, selectedEntry).then((entry) => {
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				nls.localize('TaskService.pickShowTask', 'Select the task to show its output'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					label: nls.localize('TaskService.noTaskIsRunning', 'No task is running'),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				nls.localize('taskService.upgradeVersion', "The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diff to review the upgrade.")
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				: nls.localize('taskService.upgradeVersionPlural', "The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diffs to review the upgrade."),
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				label: fileDiffs.length === 1 ? nls.localize('taskService.openDiff', "Open diff") : nls.localize('taskService.openDiffs', "Open diffs"),
src/vs/workbench/contrib/surveys/browser/ces.contribution.ts:		const message = await this.tasExperimentService?.getTreatment<string>('CESSurveyMessage') ?? nls.localize('cesSurveyQuestion', 'Got a moment to help the VS Code team? Please tell us about your experience with VS Code so far.');
src/vs/workbench/contrib/surveys/browser/ces.contribution.ts:		const button = await this.tasExperimentService?.getTreatment<string>('CESSurveyButton') ?? nls.localize('giveFeedback', "Give Feedback");
src/vs/workbench/contrib/surveys/browser/ces.contribution.ts:				label: nls.localize('remindLater', "Remind Me later"),
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:							deprecationMessage: nls.localize('JsonSchema.version.deprecated', 'Task version 0.1.0 is deprecated. Please use 2.0.0'),
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:							description: nls.localize('JsonSchema.version', 'The config\'s version number')
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:							deprecationMessage: nls.localize('JsonSchema._runner', 'The runner has graduated. Use the official runner property')
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:							description: nls.localize('JsonSchema.runner', 'Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.')
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:							description: nls.localize('JsonSchema.windows', 'Windows specific command configuration')
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:							description: nls.localize('JsonSchema.mac', 'Mac specific command configuration')
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:							description: nls.localize('JsonSchema.linux', 'Linux specific command configuration')
src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts:	description: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')
src/vs/workbench/browser/parts/editor/binaryDiffEditor.ts:			return localize('metadataDiff', "{0} ↔ {1}", secondary.getMetadata(), primary.getMetadata());
src/vs/workbench/browser/parts/editor/editorConfiguration.ts:			label: localize('markdownPreview', "Markdown Preview"),
src/vs/workbench/browser/parts/editor/editorConfiguration.ts:					description: localize('workbench.editor.autoLockGroups', "If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor."),
src/vs/workbench/browser/parts/editor/editorConfiguration.ts:					description: localize('workbench.editor.defaultBinaryEditor', "The default editor for files detected as binary. If undefined the user will be presented with a picker."),
src/vs/workbench/browser/parts/editor/editorConfiguration.ts:					markdownDescription: localize('editor.editorAssociations', "Configure glob patterns to editors (e.g. `\"*.hex\": \"hexEditor.hexEdit\"`). These have precedence over the default behavior."),
src/vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts:					localize('relaunchSettingMessage', "A setting has changed that requires a restart to take effect.") :
src/vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts:					localize('relaunchSettingMessageWeb', "A setting has changed that requires a reload to take effect."),
src/vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts:					localize('relaunchSettingDetail', "Press the restart button to restart {0} and enable the setting.", this.productService.nameLong) :
src/vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts:					localize('relaunchSettingDetailWeb', "Press the reload button to reload {0} and enable the setting.", this.productService.nameLong),
src/vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts:					localize('restart', "&&Restart") :
src/vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts:					localize('restartWeb', "&&Reload"),
src/vs/workbench/browser/parts/editor/editorCommands.ts:			description: localize('editorCommand.activeEditorMove.description', "Move the active editor by tabs or groups"),
src/vs/workbench/browser/parts/editor/editorCommands.ts:					name: localize('editorCommand.activeEditorMove.arg.name', "Active editor move argument"),
src/vs/workbench/browser/parts/editor/editorCommands.ts:					description: localize('editorCommand.activeEditorMove.arg.description', "Argument Properties:\n\t* 'to': String value providing where to move.\n\t* 'by': String value providing the unit for move (by tab or by group).\n\t* 'value': Number value providing how many positions or an absolute position to move."),
src/vs/workbench/browser/parts/editor/editorCommands.ts:			description: localize('editorCommand.activeEditorCopy.description', "Copy the active editor by groups"),
src/vs/workbench/browser/parts/editor/editorCommands.ts:					name: localize('editorCommand.activeEditorCopy.arg.name', "Active editor copy argument"),
src/vs/workbench/browser/parts/editor/editorCommands.ts:					description: localize('editorCommand.activeEditorCopy.arg.description', "Argument Properties:\n\t* 'to': String value providing where to copy.\n\t* 'value': Number value providing how many positions or an absolute position to copy."),
src/vs/workbench/browser/parts/editor/editorCommands.ts:				value: localize('toggleInlineView', "Toggle Inline View"),
src/vs/workbench/browser/parts/editor/editorCommands.ts:			category: localize('compare', "Compare")
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('splitEditorInGroup', "Split Editor in Group"), original: 'Split Editor in Group' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('joinEditorInGroup', "Join Editor in Group"), original: 'Join Editor in Group' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('toggleJoinEditorInGroup', "Toggle Split Editor in Group"), original: 'Toggle Split Editor in Group' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('toggleSplitEditorInGroupLayout', "Toggle Layout of Split Editor in Group"), original: 'Toggle Layout of Split Editor in Group' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('focusLeftSideEditor', "Focus First Side in Active Editor"), original: 'Focus First Side in Active Editor' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('focusRightSideEditor', "Focus Second Side in Active Editor"), original: 'Focus Second Side in Active Editor' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('focusOtherSideEditor', "Focus Other Side in Active Editor"), original: 'Focus Other Side in Active Editor' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('toggleEditorGroupLock', "Toggle Editor Group Lock"), original: 'Toggle Editor Group Lock' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('lockEditorGroup', "Lock Editor Group"), original: 'Lock Editor Group' },
src/vs/workbench/browser/parts/editor/editorCommands.ts:				title: { value: localize('unlockEditorGroup', "Unlock Editor Group"), original: 'Unlock Editor Group' },
src/vs/workbench/browser/parts/editor/editorDropTarget.ts:			this.dropIntoPromptElement = renderFormattedText(localize('dropIntoEditorPrompt', "Hold __{0}__ to drop into editor", isMacintosh ? '⇧' : 'Shift'), {});
src/vs/workbench/browser/parts/editor/editorPanes.ts:				buttons.push(localize('ok', 'OK'));
src/vs/workbench/browser/parts/editor/editorPanes.ts:				buttons.push(localize('cancel', "Cancel"));
src/vs/workbench/browser/parts/editor/editorPanes.ts:				localize('editorOpenErrorDialog', "Unable to open '{0}'", editor.getName()),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:			description: nls.localize('JsonSchema.options', 'Additional command options'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.options.cwd', 'The current working directory of the executed program or script. If omitted Code\'s current workspace root is used.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.options.env', 'The environment of the executed program or shell. If omitted the parent process\' environment is used.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					errorMessage: nls.localize('JsonSchema.tasks.matcherError', 'Unrecognized problem matcher. Is the extension that contributes this problem matcher installed?')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:								errorMessage: nls.localize('JsonSchema.tasks.matcherError', 'Unrecognized problem matcher. Is the extension that contributes this problem matcher installed?')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:			description: nls.localize('JsonSchema.shellConfiguration', 'Configures the shell to be used.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.shell.executable', 'The shell to be used.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.shell.args', 'The shell arguments.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.taskName', "The task's name")
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:							description: nls.localize('JsonSchema.tasks.windows', 'Windows specific command configuration'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:									description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:							description: nls.localize('JsonSchema.tasks.mac', 'Mac specific command configuration')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:									description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:							description: nls.localize('JsonSchema.tasks.linux', 'Linux specific command configuration')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:									description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.suppressTaskName', 'Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.showOutput', 'Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					deprecationMessage: nls.localize('JsonSchema.tasks.watching.deprecation', 'Deprecated. Use isBackground instead.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.watching', 'Whether the executed task is kept alive and is watching the file system.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.build', 'Maps this task to Code\'s default build command.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.test', 'Maps this task to Code\'s default test command.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.args', 'Additional arguments passed to the command.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.showOutput', 'Controls whether the output of the running task is shown or not. If omitted \'always\' is used.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					deprecationMessage: nls.localize('JsonSchema.watching.deprecation', 'Deprecated. Use isBackground instead.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.watching', 'Whether the executed task is kept alive and is watching the file system.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.background', 'Whether the executed task is kept alive and is running in the background.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.promptOnClose', 'Whether the user is prompted when VS Code closes with a running background task.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.suppressTaskName', 'Controls whether the task name is added as an argument to the command. Default is false.'),
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.taskSelector', 'Prefix to indicate that an argument is task.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')
src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts:					description: nls.localize('JsonSchema.tasks', 'The task configurations. Usually these are enrichments of task already defined in the external task runner.'),
src/vs/workbench/browser/parts/editor/textDiffEditor.ts:		return localize('textDiffEditor', "Text Diff Editor");
src/vs/workbench/browser/parts/editor/textEditor.ts:		return this._input ? computeEditorAriaLabel(this._input, undefined, this.group, this.editorGroupService.count) : localize('editor', "Editor");
src/vs/workbench/browser/parts/editor/titleControl.ts:			ariaLabel: localize('ariaLabelEditorActions', "Editor actions"),
src/vs/workbench/browser/parts/editor/titleControl.ts:					label = localize('draggedEditorGroup', "{0} (+{1})", label, this.group.count - 1);
src/vs/workbench/browser/parts/editor/textCodeEditor.ts:		return localize('textEditor', "Text Editor");
src/vs/workbench/browser/parts/editor/editorQuickAccess.ts:					label: localize('noViewResults', "No matching editors"),
src/vs/workbench/browser/parts/editor/editorQuickAccess.ts:							localize('entryAriaLabelWithGroupDirty', "{0}, unsaved changes, {1}", nameAndDescription, mapGroupIdToGroupAriaLabel.get(groupId)) :
src/vs/workbench/browser/parts/editor/editorQuickAccess.ts:							localize('entryAriaLabelWithGroup', "{0}, {1}", nameAndDescription, mapGroupIdToGroupAriaLabel.get(groupId));
src/vs/workbench/browser/parts/editor/editorQuickAccess.ts:					return isDirty ? localize('entryAriaLabelDirty', "{0}, unsaved changes", nameAndDescription) : nameAndDescription;
src/vs/workbench/browser/parts/editor/editorQuickAccess.ts:							tooltip: localize('closeEditor', "Close Editor"),
src/vs/workbench/browser/parts/dialogs/dialogHandler.ts:			buttons.push(localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, "&&Yes"));
src/vs/workbench/browser/parts/dialogs/dialogHandler.ts:			buttons.push(localize('cancelButton', "Cancel"));
src/vs/workbench/browser/parts/dialogs/dialogHandler.ts:			return localize('aboutDetail',
src/vs/workbench/browser/parts/dialogs/dialogHandler.ts:		const { choice } = await this.show(Severity.Info, this.productService.nameLong, [localize('copy', "Copy"), localize('ok', "OK")], { detail, cancelId: 1 });
src/vs/workbench/browser/parts/editor/editorGroupView.ts:			ariaLabel: localize('ariaLabelGroupActions', "Empty editor group actions")
src/vs/workbench/browser/parts/editor/editorGroupView.ts:			this.element.setAttribute('aria-label', localize('emptyEditorGroup', "{0} (empty)", this.label));
src/vs/workbench/browser/parts/editor/editorGroupView.ts:		return localize('groupLabel', "Group {0}", this._index + 1);
src/vs/workbench/browser/parts/editor/editorGroupView.ts:		return localize('groupAriaLabel', "Editor Group {0}", this._index + 1);
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:	private static readonly LABEL = localize('trustRequiredEditor', "Workspace Trust Required");
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:				localize('requiresFolderTrustText', "The file is not displayed in the editor because trust has not been granted to the folder.") :
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:				localize('requiresWorkspaceTrustText', "The file is not displayed in the editor because trust has not been granted to the workspace."),
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:					label: localize('manageTrust', "Manage Workspace Trust"),
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:	private static readonly LABEL = localize('errorEditor', "Error Editor");
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:			label = localize('unavailableResourceErrorEditorText', "The editor could not be opened because the file was not found.");
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:			label = localize('unknownErrorEditorTextWithError', "The editor could not be opened due to an unexpected error: {0}", toErrorMessage(error));
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:			label = localize('unknownErrorEditorTextWithoutError', "The editor could not be opened due to an unexpected error.");
src/vs/workbench/browser/parts/editor/editorPlaceholder.ts:					label: localize('retry', "Try Again"),
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:		localize('searchEditor', "Search Editor")
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:				label: localize('promptOpenWith.searchEditor.displayName', "Search Editor"),
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:const category = { value: localize('search', "Search Editor"), original: 'Search Editor' };
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('searchEditor.deleteResultBlock', "Delete File Results"), original: 'Delete File Results' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.openNewSearchEditor', "New Search Editor"), original: 'New Search Editor' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.openSearchEditor', "Open Search Editor"), original: 'Open Search Editor' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.openNewEditorToSide', "Open new Search Editor to the Side"), original: 'Open new Search Editor to the Side' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.openResultsInEditor', "Open Results in Editor"), original: 'Open Results in Editor' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.rerunSearchInEditor', "Search Again"), original: 'Search Again' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.action.focusQueryEditorWidget', "Focus Search Editor Input"), original: 'Focus Search Editor Input' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.action.focusFilesToInclude', "Focus Search Editor Files to Include"), original: 'Focus Search Editor Files to Include' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('search.action.focusFilesToExclude', "Focus Search Editor Files to Exclude"), original: 'Focus Search Editor Files to Exclude' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('searchEditor.action.toggleSearchEditorCaseSensitive', "Toggle Match Case"), original: 'Toggle Match Case' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('searchEditor.action.toggleSearchEditorWholeWord', "Toggle Match Whole Word"), original: 'Toggle Match Whole Word' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('searchEditor.action.toggleSearchEditorRegex', "Toggle Use Regular Expression"), original: 'Toggle Use Regular Expression"' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { value: localize('searchEditor.action.toggleSearchEditorContextLines', "Toggle Context Lines"), original: 'Toggle Context Lines"' },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { original: 'Increase Context Lines', value: localize('searchEditor.action.increaseSearchEditorContextLines', "Increase Context Lines") },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { original: 'Decrease Context Lines', value: localize('searchEditor.action.decreaseSearchEditorContextLines', "Decrease Context Lines") },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: { original: 'Select All Matches', value: localize('searchEditor.action.selectAllSearchEditorMatches', "Select All Matches") },
src/vs/workbench/contrib/searchEditor/browser/searchEditor.contribution.ts:			title: localize('search.openNewEditor', "Open New Search Editor"),
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:		description: localize('vscode.extension.contributes.snippets', 'Contributes snippets.'),
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:					description: localize('vscode.extension.contributes.snippets-language', 'Language identifier for which this snippet is contributed to.'),
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:					description: localize('vscode.extension.contributes.snippets-path', 'Path of the snippets file. The path is relative to the extension folder and typically starts with \'./snippets/\'.'),
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:									extension.collector.warn(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:								extension.collector.warn(localize(
src/vs/workbench/browser/parts/editor/sideBySideEditor.ts:		return localize('sideBySideEditor', "Side by Side Editor");
src/vs/workbench/browser/parts/editor/editorStatus.ts:const nlsSingleSelectionRange = localize('singleSelectionRange', "Ln {0}, Col {1} ({2} selected)");
src/vs/workbench/browser/parts/editor/editorStatus.ts:const nlsSingleSelection = localize('singleSelection', "Ln {0}, Col {1}");
src/vs/workbench/browser/parts/editor/editorStatus.ts:const nlsMultiSelectionRange = localize('multiSelectionRange', "{0} selections ({1} characters selected)");
src/vs/workbench/browser/parts/editor/editorStatus.ts:const nlsMultiSelection = localize('multiSelection', "{0} selections");
src/vs/workbench/browser/parts/editor/editorStatus.ts:const nlsEOLLF = localize('endOfLineLineFeed', "LF");
src/vs/workbench/browser/parts/editor/editorStatus.ts:const nlsEOLCRLF = localize('endOfLineCarriageReturnLineFeed', "CRLF");
src/vs/workbench/browser/parts/editor/editorStatus.ts:				localize('screenReaderDetectedExplanation.question', "Are you using a screen reader to operate VS Code?"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:					label: localize('screenReaderDetectedExplanation.answerYes', "Yes"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:					label: localize('screenReaderDetectedExplanation.answerNo', "No"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			return this.quickInputService.pick([{ label: localize('noEditor', "No text editor active at this time") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:			return this.quickInputService.pick([{ label: localize('noWritableCodeEditor', "The active code editor is read-only.") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:		picks.splice(3, 0, { type: 'separator', label: localize('indentConvert', "convert file") });
src/vs/workbench/browser/parts/editor/editorStatus.ts:		picks.unshift({ type: 'separator', label: localize('indentView', "change view") });
src/vs/workbench/browser/parts/editor/editorStatus.ts:		const action = await this.quickInputService.pick(picks, { placeHolder: localize('pickAction', "Select Action"), matchOnDetail: true });
src/vs/workbench/browser/parts/editor/editorStatus.ts:				const text = localize('tabFocusModeEnabled', "Tab Moves Focus");
src/vs/workbench/browser/parts/editor/editorStatus.ts:					name: localize('status.editor.tabFocusMode', "Accessibility Mode"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:					tooltip: localize('disableTabMode', "Disable Accessibility Mode"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:				const text = localize('columnSelectionModeEnabled', "Column Selection");
src/vs/workbench/browser/parts/editor/editorStatus.ts:					name: localize('status.editor.columnSelectionMode', "Column Selection Mode"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:					tooltip: localize('disableColumnSelectionMode', "Disable Column Selection Mode"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:				const text = localize('screenReaderDetected', "Screen Reader Optimized");
src/vs/workbench/browser/parts/editor/editorStatus.ts:					name: localize('status.editor.screenReaderMode', "Screen Reader Mode"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			name: localize('status.editor.selection', "Editor Selection"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			tooltip: localize('gotoLine', "Go to Line/Column"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			name: localize('status.editor.indentation', "Editor Indentation"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			tooltip: localize('selectIndentation', "Select Indentation"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			name: localize('status.editor.encoding', "Editor Encoding"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			tooltip: localize('selectEncoding', "Select Encoding"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			name: localize('status.editor.eol', "Editor End of Line"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			tooltip: localize('selectEOL', "Select End of Line Sequence"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			name: localize('status.editor.mode', "Editor Language"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			tooltip: localize('selectLanguageMode', "Select Language Mode"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			name: localize('status.editor.info', "File Information"),
src/vs/workbench/browser/parts/editor/editorStatus.ts:			tooltip: localize('fileInfo', "File Information")
src/vs/workbench/browser/parts/editor/editorStatus.ts:						? localize('spacesSize', "Spaces: {0}", modelOpts.indentSize)
src/vs/workbench/browser/parts/editor/editorStatus.ts:						: localize({ key: 'tabSize', comment: ['Tab corresponds to the tab key'] }, "Tab Size: {0}", modelOpts.tabSize)
src/vs/workbench/browser/parts/editor/editorStatus.ts:					this.statusBarEntryAccessor.value = this.statusbarService.addEntry({ name: localize('currentProblem', "Current Problem"), text: '', ariaLabel: '' }, 'statusbar.currentProblem', StatusbarAlignment.LEFT);
src/vs/workbench/browser/parts/editor/editorStatus.ts:				this.statusBarEntryAccessor.value.update({ name: localize('currentProblem', "Current Problem"), text, ariaLabel: text });
src/vs/workbench/browser/parts/editor/editorStatus.ts:		super(ShowLanguageExtensionsAction.ID, localize('showLanguageExtensions', "Search Marketplace Extensions for '{0}'...", fileExtension));
src/vs/workbench/browser/parts/editor/editorStatus.ts:	static readonly LABEL = localize('changeMode', "Change Language Mode");
src/vs/workbench/browser/parts/editor/editorStatus.ts:			await this.quickInputService.pick([{ label: localize('noEditor', "No text editor active at this time") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:					description = localize('languageDescription', "({0}) - Configured Language", languageId);
src/vs/workbench/browser/parts/editor/editorStatus.ts:					description = localize('languageDescriptionConfigured', "({0})", languageId);
src/vs/workbench/browser/parts/editor/editorStatus.ts:		picks.unshift({ type: 'separator', label: localize('languagesPicks', "languages (identifier)") });
src/vs/workbench/browser/parts/editor/editorStatus.ts:			configureLanguageSettings = { label: localize('configureModeSettings', "Configure '{0}' language based settings...", currentLanguageName) };
src/vs/workbench/browser/parts/editor/editorStatus.ts:			configureLanguageAssociations = { label: localize('configureAssociationsExt', "Configure File Association for '{0}'...", ext) };
src/vs/workbench/browser/parts/editor/editorStatus.ts:			label: localize('autoDetect', "Auto Detect")
src/vs/workbench/browser/parts/editor/editorStatus.ts:		const pick = await this.quickInputService.pick(picks, { placeHolder: localize('pickLanguage', "Select Language Mode"), matchOnDescription: true });
src/vs/workbench/browser/parts/editor/editorStatus.ts:				description: (languageId === currentAssociation) ? localize('currentAssociation', "Current Association") : undefined
src/vs/workbench/browser/parts/editor/editorStatus.ts:			const language = await this.quickInputService.pick(picks, { placeHolder: localize('pickLanguageToConfigure', "Select Language Mode to Associate with '{0}'", extension || base) });
src/vs/workbench/browser/parts/editor/editorStatus.ts:	static readonly LABEL = localize('changeEndOfLine', "Change End of Line Sequence");
src/vs/workbench/browser/parts/editor/editorStatus.ts:			await this.quickInputService.pick([{ label: localize('noEditor', "No text editor active at this time") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:			await this.quickInputService.pick([{ label: localize('noWritableCodeEditor', "The active code editor is read-only.") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:		const eol = await this.quickInputService.pick(EOLOptions, { placeHolder: localize('pickEndOfLine', "Select End of Line Sequence"), activeItem: EOLOptions[selectedIndex] });
src/vs/workbench/browser/parts/editor/editorStatus.ts:	static readonly LABEL = localize('changeEncoding', "Change File Encoding");
src/vs/workbench/browser/parts/editor/editorStatus.ts:			await this.quickInputService.pick([{ label: localize('noEditor', "No text editor active at this time") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:			await this.quickInputService.pick([{ label: localize('noEditor', "No text editor active at this time") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:			await this.quickInputService.pick([{ label: localize('noFileEditor', "No file active at this time") }]);
src/vs/workbench/browser/parts/editor/editorStatus.ts:		const saveWithEncodingPick: IQuickPickItem = { label: localize('saveWithEncoding', "Save with Encoding") };
src/vs/workbench/browser/parts/editor/editorStatus.ts:		const reopenWithEncodingPick: IQuickPickItem = { label: localize('reopenWithEncoding', "Reopen with Encoding") };
src/vs/workbench/browser/parts/editor/editorStatus.ts:			action = await this.quickInputService.pick([reopenWithEncodingPick, saveWithEncodingPick], { placeHolder: localize('pickAction', "Select Action"), matchOnDetail: true });
src/vs/workbench/browser/parts/editor/editorStatus.ts:			picks.unshift({ id: guessedEncoding, label: SUPPORTED_ENCODINGS[guessedEncoding].labelLong, description: localize('guessedEncoding', "Guessed from content") });
src/vs/workbench/browser/parts/editor/editorStatus.ts:			placeHolder: isReopenWithEncoding ? localize('pickEncodingForReopen', "Select File Encoding to Reopen File") : localize('pickEncodingForSave', "Select File Encoding to Save with"),
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:		this.toggleQueryDetailsButton = DOM.append(this.includesExcludesContainer, DOM.$('.expand' + ThemeIcon.asCSSSelector(searchDetailsIcon), { tabindex: 0, role: 'button', title: localize('moreSearch', "Toggle Search Details") }));
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:		const filesToIncludeTitle = localize('searchScope.includes', "files to include");
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:			ariaLabel: localize('label.includes', 'Search Include Patterns'),
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:		const excludesTitle = localize('searchScope.excludes', "files to exclude");
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:			ariaLabel: localize('label.excludes', 'Search Exclude Patterns'),
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:			const runAgainLink = DOM.append(this.messageBox, DOM.$('a.pointer.prominent.message', {}, localize('runSearch', "Run Search")));
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:		alert(localize('searchResultItem', "Matched {0} at {1} in file {2}", matchText, matchLineText, file.slice(0, file.length - 1)));
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:		return this.getInput()?.getName() ?? localize('searchEditor', "Search");
src/vs/workbench/contrib/searchEditor/browser/searchEditor.ts:const searchEditorTextInputBorder = registerColor('searchEditor.textInputBorder', { dark: inputBorder, light: inputBorder, hcDark: inputBorder, hcLight: inputBorder }, localize('textInputBoxBorder', "Search editor text input box border."));
src/vs/workbench/contrib/searchEditor/browser/searchEditorInput.ts:			return localize('searchTitle.withQuery', "Search: {0}", basename((originalURI ?? this.backingUri).path, SEARCH_EDITOR_EXT));
src/vs/workbench/contrib/searchEditor/browser/searchEditorInput.ts:			return localize('searchTitle.withQuery', "Search: {0}", trimToMax(query));
src/vs/workbench/contrib/searchEditor/browser/searchEditorInput.ts:		return localize('searchTitle', "Search");
src/vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.ts:					throw Error(localize('invalidQueryStringError', "All backslashes in Query string must be escaped (\\\\)"));
src/vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.ts:		const filecount = searchResult.fileCount() > 1 ? localize('numFiles', "{0} files", searchResult.fileCount()) : localize('oneFile', "1 file");
src/vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.ts:		const resultcount = searchResult.count() > 1 ? localize('numResults', "{0} results", searchResult.count()) : localize('oneResult', "1 result");
src/vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.ts:				: localize('noResults', "No Results"),
src/vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.ts:			info.push(localize('searchMaxResultsWarning', "The result set only contains a subset of all matches. Be more specific in your search to narrow down the results."));
src/vs/workbench/browser/parts/editor/breadcrumbsPicker.ts:		return localize('breadcrumbs', "Breadcrumbs");
src/vs/workbench/contrib/snippets/browser/snippetsFile.ts:			source = localize('source.workspaceSnippetGlobal', "Workspace Snippet");
src/vs/workbench/contrib/snippets/browser/snippetsFile.ts:				source = localize('source.userSnippetGlobal', "Global User Snippet");
src/vs/workbench/contrib/snippets/browser/snippetsFile.ts:				source = localize('source.userSnippet', "User Snippet");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditor', "Split Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorOrthogonal', "Split Editor Orthogonal");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorGroupLeft', "Split Editor Left");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorGroupRight', "Split Editor Right");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorGroupUp', "Split Editor Up");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorGroupDown', "Split Editor Down");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('joinTwoGroups', "Join Editor Group with Next Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('joinAllGroups', "Join All Editor Groups");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateEditorGroups', "Navigate Between Editor Groups");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusActiveEditorGroup', "Focus Active Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusFirstEditorGroup', "Focus First Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusLastEditorGroup', "Focus Last Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusNextGroup', "Focus Next Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusPreviousGroup', "Focus Previous Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusLeftGroup', "Focus Left Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusRightGroup', "Focus Right Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusAboveGroup', "Focus Editor Group Above");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('focusBelowGroup', "Focus Editor Group Below");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('closeEditor', "Close Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('unpinEditor', "Unpin Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('closeOneEditor', "Close");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('revertAndCloseActiveEditor', "Revert and Close Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('closeEditorsToTheLeft', "Close Editors to the Left in Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('closeAllEditors', "Close All Editors");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('closeAllGroups', "Close All Editor Groups");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('closeEditorsInOtherGroups', "Close Editors in Other Groups");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('closeEditorInAllGroups', "Close Editor in All Groups");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveActiveGroupLeft', "Move Editor Group Left");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveActiveGroupRight', "Move Editor Group Right");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveActiveGroupUp', "Move Editor Group Up");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveActiveGroupDown', "Move Editor Group Down");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('duplicateActiveGroupLeft', "Duplicate Editor Group Left");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('duplicateActiveGroupRight', "Duplicate Editor Group Right");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('duplicateActiveGroupUp', "Duplicate Editor Group Up");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('duplicateActiveGroupDown', "Duplicate Editor Group Down");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('minimizeOtherEditorGroups', "Maximize Editor Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('evenEditorGroups', "Reset Editor Group Sizes");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('toggleEditorWidths', "Toggle Editor Group Sizes");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('maximizeEditor', "Maximize Editor Group and Hide Side Bars");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('openNextEditor', "Open Next Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('openPreviousEditor', "Open Previous Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('nextEditorInGroup', "Open Next Editor in Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('openPreviousEditorInGroup', "Open Previous Editor in Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('firstEditorInGroup', "Open First Editor in Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('lastEditorInGroup', "Open Last Editor in Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateForward', "Go Forward");
src/vs/workbench/browser/parts/editor/editorActions.ts:			title: { value: localize('navigateForward', "Go Forward"), original: 'Go Forward', mnemonicTitle: localize({ key: 'miForward', comment: ['&& denotes a mnemonic'] }, "&&Forward") },
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateBack', "Go Back");
src/vs/workbench/browser/parts/editor/editorActions.ts:			title: { value: localize('navigateBack', "Go Back"), original: 'Go Back', mnemonicTitle: localize({ key: 'miBack', comment: ['&& denotes a mnemonic'] }, "&&Back") },
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigatePrevious', "Go Previous");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateForwardInEdits', "Go Forward in Edit Locations");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateBackInEdits', "Go Back in Edit Locations");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigatePreviousInEdits', "Go Previous in Edit Locations");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateToLastEditLocation', "Go to Last Edit Location");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateForwardInNavigations', "Go Forward in Navigation Locations");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateBackInNavigations', "Go Back in Navigation Locations");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigatePreviousInNavigationLocations', "Go Previous in Navigation Locations");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateToLastNavigationLocation', "Go to Last Navigation Location");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('reopenClosedEditor', "Reopen Closed Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('clearRecentFiles', "Clear Recently Opened");
src/vs/workbench/browser/parts/editor/editorActions.ts:			message: localize('confirmClearRecentsMessage', "Do you want to clear all recently opened files and workspaces?"),
src/vs/workbench/browser/parts/editor/editorActions.ts:			detail: localize('confirmClearDetail', "This action is irreversible!"),
src/vs/workbench/browser/parts/editor/editorActions.ts:			primaryButton: localize({ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Clear"),
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('showEditorsInActiveGroup', "Show Editors in Active Group By Most Recently Used");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('showAllEditors', "Show All Editors By Appearance");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('showAllEditorsByMostRecentlyUsed', "Show All Editors By Most Recently Used");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('quickOpenPreviousRecentlyUsedEditor', "Quick Open Previous Recently Used Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('quickOpenLeastRecentlyUsedEditor', "Quick Open Least Recently Used Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('quickOpenPreviousRecentlyUsedEditorInGroup', "Quick Open Previous Recently Used Editor in Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('quickOpenLeastRecentlyUsedEditorInGroup', "Quick Open Least Recently Used Editor in Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('navigateEditorHistoryByInput', "Quick Open Previous Editor from History");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('openNextRecentlyUsedEditor', "Open Next Recently Used Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('openPreviousRecentlyUsedEditor', "Open Previous Recently Used Editor");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('openNextRecentlyUsedEditorInGroup', "Open Next Recently Used Editor In Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('openPreviousRecentlyUsedEditorInGroup', "Open Previous Recently Used Editor In Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('clearEditorHistory', "Clear Editor History");
src/vs/workbench/browser/parts/editor/editorActions.ts:			message: localize('confirmClearEditorHistoryMessage', "Do you want to clear the history of recently opened editors?"),
src/vs/workbench/browser/parts/editor/editorActions.ts:			detail: localize('confirmClearDetail', "This action is irreversible!"),
src/vs/workbench/browser/parts/editor/editorActions.ts:			primaryButton: localize({ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Clear"),
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorLeft', "Move Editor Left");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorRight', "Move Editor Right");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToPreviousGroup', "Move Editor into Previous Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToNextGroup', "Move Editor into Next Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToAboveGroup', "Move Editor into Group Above");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToBelowGroup', "Move Editor into Group Below");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToLeftGroup', "Move Editor into Left Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToRightGroup', "Move Editor into Right Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToFirstGroup', "Move Editor into First Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('moveEditorToLastGroup', "Move Editor into Last Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToPreviousGroup', "Split Editor into Previous Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToNextGroup', "Split Editor into Next Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToAboveGroup', "Split Editor into Group Above");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToBelowGroup', "Split Editor into Group Below");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToLeftGroup', "Split Editor into Left Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToRightGroup', "Split Editor into Right Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToFirstGroup', "Split Editor into First Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('splitEditorToLastGroup', "Split Editor into Last Group");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutSingle', "Single Column Editor Layout");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutTwoColumns', "Two Columns Editor Layout");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutThreeColumns', "Three Columns Editor Layout");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutTwoRows', "Two Rows Editor Layout");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutThreeRows', "Three Rows Editor Layout");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutTwoByTwoGrid', "Grid Editor Layout (2x2)");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutTwoColumnsBottom', "Two Columns Bottom Editor Layout");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('editorLayoutTwoRowsRight', "Two Rows Right Editor Layout");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('newEditorLeft', "New Editor Group to the Left");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('newEditorRight', "New Editor Group to the Right");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('newEditorAbove', "New Editor Group Above");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('newEditorBelow', "New Editor Group Below");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('workbench.action.toggleEditorType', "Toggle Editor Type");
src/vs/workbench/browser/parts/editor/editorActions.ts:	static readonly LABEL = localize('workbench.action.reopenTextEditor', "Reopen Editor With Text Editor");
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		localize('textEditor', "Text Editor"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		localize('textDiffEditor', "Text Diff Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		localize('binaryDiffEditor', "Binary Diff Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		localize('sideBySideEditor', "Side by Side Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	placeholder: localize('editorQuickAccessPlaceholder', "Type the name of an editor to open it."),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	helpEntries: [{ description: localize('activeGroupEditorsByMostRecentlyUsedQuickAccess', "Show Editors in Active Group by Most Recently Used"), commandId: ShowEditorsInActiveGroupByMostRecentlyUsedAction.ID }]
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	placeholder: localize('editorQuickAccessPlaceholder', "Type the name of an editor to open it."),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	helpEntries: [{ description: localize('allEditorsByAppearanceQuickAccess', "Show All Opened Editors By Appearance"), commandId: ShowAllEditorsByAppearanceAction.ID }]
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	placeholder: localize('editorQuickAccessPlaceholder', "Type the name of an editor to open it."),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	helpEntries: [{ description: localize('allEditorsByMostRecentlyUsedQuickAccess', "Show All Opened Editors By Most Recently Used"), commandId: ShowAllEditorsByMostRecentlyUsedAction.ID }]
src/vs/workbench/browser/parts/editor/editor.contribution.ts:registry.registerWorkbenchAction(SyncActionDescriptor.from(ClearRecentFilesAction), 'File: Clear Recently Opened', localize('file', "File"));
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroup, { command: { id: UNLOCK_GROUP_COMMAND_ID, title: localize('unlockGroupAction', "Unlock Group"), icon: Codicon.lock }, group: 'navigation', order: 10, when: ActiveEditorGroupLockedContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroup, { command: { id: CLOSE_EDITOR_GROUP_COMMAND_ID, title: localize('closeGroupAction', "Close Group"), icon: Codicon.close }, group: 'navigation', order: 20 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_UP, title: localize('splitUp', "Split Up") }, group: '2_split', order: 10 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_DOWN, title: localize('splitDown', "Split Down") }, group: '2_split', order: 20 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_LEFT, title: localize('splitLeft', "Split Left") }, group: '2_split', order: 30 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_RIGHT, title: localize('splitRight', "Split Right") }, group: '2_split', order: 40 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: TOGGLE_LOCK_GROUP_COMMAND_ID, title: localize('toggleLockGroup', "Lock Group"), toggled: ActiveEditorGroupLockedContext }, group: '3_lock', order: 10, when: MultipleEditorGroupsContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: CLOSE_EDITOR_GROUP_COMMAND_ID, title: localize('close', "Close") }, group: '4_close', order: 10, when: MultipleEditorGroupsContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_EDITOR_COMMAND_ID, title: localize('close', "Close") }, group: '1_close', order: 10 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID, title: localize('closeOthers', "Close Others"), precondition: EditorGroupEditorsCountContext.notEqualsTo('1') }, group: '1_close', order: 20 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID, title: localize('closeRight', "Close to the Right"), precondition: ActiveEditorLastInGroupContext.toNegated() }, group: '1_close', order: 30, when: EditorTabsVisibleContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_SAVED_EDITORS_COMMAND_ID, title: localize('closeAllSaved', "Close Saved") }, group: '1_close', order: 40 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID, title: localize('closeAll', "Close All") }, group: '1_close', order: 50 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: REOPEN_WITH_COMMAND_ID, title: localize('reopenWith', "Reopen Editor With...") }, group: '1_open', order: 10, when: ActiveEditorAvailableEditorIdsContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: KEEP_EDITOR_COMMAND_ID, title: localize('keepOpen', "Keep Open"), precondition: ActiveEditorPinnedContext.toNegated() }, group: '3_preview', order: 10, when: ContextKeyExpr.has('config.workbench.editor.enablePreview') });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: PIN_EDITOR_COMMAND_ID, title: localize('pin', "Pin") }, group: '3_preview', order: 20, when: ActiveEditorStickyContext.toNegated() });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: UNPIN_EDITOR_COMMAND_ID, title: localize('unpin', "Unpin") }, group: '3_preview', order: 20, when: ActiveEditorStickyContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_UP, title: localize('splitUp', "Split Up") }, group: '5_split', order: 10 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_DOWN, title: localize('splitDown', "Split Down") }, group: '5_split', order: 20 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_LEFT, title: localize('splitLeft', "Split Left") }, group: '5_split', order: 30 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_RIGHT, title: localize('splitRight', "Split Right") }, group: '5_split', order: 40 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_IN_GROUP, title: localize('splitInGroup', "Split in Group") }, group: '6_split_in_group', order: 10, when: ActiveEditorCanSplitInGroupContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: JOIN_EDITOR_IN_GROUP, title: localize('joinInGroup', "Join in Group") }, group: '6_split_in_group', order: 10, when: SideBySideEditorActiveContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: TOGGLE_DIFF_SIDE_BY_SIDE, title: localize('inlineView', "Inline View"), toggled: ContextKeyExpr.equals('config.diffEditor.renderSideBySide', false) }, group: '1_diff', order: 10, when: ContextKeyExpr.has('isInDiffEditor') });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: SHOW_EDITORS_IN_GROUP, title: localize('showOpenedEditors', "Show Opened Editors") }, group: '3_open', order: 10 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID, title: localize('closeAll', "Close All") }, group: '5_close', order: 10 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: CLOSE_SAVED_EDITORS_COMMAND_ID, title: localize('closeAllSaved', "Close Saved") }, group: '5_close', order: 20 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: TOGGLE_KEEP_EDITORS_COMMAND_ID, title: localize('togglePreviewMode', "Enable Preview Editors"), toggled: ContextKeyExpr.has('config.workbench.editor.enablePreview') }, group: '7_settings', order: 10 });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: TOGGLE_LOCK_GROUP_COMMAND_ID, title: localize('lockGroup', "Lock Group"), toggled: ActiveEditorGroupLockedContext }, group: '8_lock', order: 10, when: MultipleEditorGroupsContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('splitEditorRight', "Split Editor Right"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('splitEditorDown', "Split Editor Down"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('splitEditorDown', "Split Editor Down"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('splitEditorRight', "Split Editor Right"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('toggleSplitEditorInGroupLayout', "Toggle Layout"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('close', "Close"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('closeAll', "Close All"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('close', "Close"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('closeAll', "Close All"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('unpin', "Unpin"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('close', "Close"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('unpin', "Unpin"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('close', "Close"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('unlockEditorGroup', "Unlock Group"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:const previousChangeIcon = registerIcon('diff-editor-previous-change', Codicon.arrowUp, localize('previousChangeIcon', 'Icon for the previous change action in the diff editor.'));
src/vs/workbench/browser/parts/editor/editor.contribution.ts:const nextChangeIcon = registerIcon('diff-editor-next-change', Codicon.arrowDown, localize('nextChangeIcon', 'Icon for the next change action in the diff editor.'));
src/vs/workbench/browser/parts/editor/editor.contribution.ts:const toggleWhitespace = registerIcon('diff-editor-toggle-whitespace', Codicon.whitespace, localize('toggleWhitespace', 'Icon for the toggle whitespace action in the diff editor.'));
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('navigate.prev.label', "Previous Change"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('navigate.next.label', "Next Change"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('ignoreTrimWhitespace.label', "Ignore Leading/Trailing Whitespace Differences"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize('showTrimWhitespace.label', "Show Leading/Trailing Whitespace Differences"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: KEEP_EDITOR_COMMAND_ID, title: { value: localize('keepEditor', "Keep Editor"), original: 'Keep Editor' }, category: Categories.View }, when: ContextKeyExpr.has('config.workbench.editor.enablePreview') });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: PIN_EDITOR_COMMAND_ID, title: { value: localize('pinEditor', "Pin Editor"), original: 'Pin Editor' }, category: Categories.View } });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: UNPIN_EDITOR_COMMAND_ID, title: { value: localize('unpinEditor', "Unpin Editor"), original: 'Unpin Editor' }, category: Categories.View } });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITOR_COMMAND_ID, title: { value: localize('closeEditor', "Close Editor"), original: 'Close Editor' }, category: Categories.View } });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_PINNED_EDITOR_COMMAND_ID, title: { value: localize('closePinnedEditor', "Close Pinned Editor"), original: 'Close Pinned Editor' }, category: Categories.View } });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID, title: { value: localize('closeEditorsInGroup', "Close All Editors in Group"), original: 'Close All Editors in Group' }, category: Categories.View } });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_SAVED_EDITORS_COMMAND_ID, title: { value: localize('closeSavedEditors', "Close Saved Editors in Group"), original: 'Close Saved Editors in Group' }, category: Categories.View } });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID, title: { value: localize('closeOtherEditors', "Close Other Editors in Group"), original: 'Close Other Editors in Group' }, category: Categories.View } });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID, title: { value: localize('closeRightEditors', "Close Editors to the Right in Group"), original: 'Close Editors to the Right in Group' }, category: Categories.View }, when: ActiveEditorLastInGroupContext.toNegated() });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITORS_AND_GROUP_COMMAND_ID, title: { value: localize('closeEditorGroup', "Close Editor Group"), original: 'Close Editor Group' }, category: Categories.View }, when: MultipleEditorGroupsContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: REOPEN_WITH_COMMAND_ID, title: { value: localize('reopenWith', "Reopen Editor With..."), original: 'Reopen Editor With...' }, category: Categories.View }, when: ActiveEditorAvailableEditorIdsContext });
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miReopenClosedEditor', comment: ['&& denotes a mnemonic'] }, "&&Reopen Closed Editor"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miClearRecentOpen', comment: ['&& denotes a mnemonic'] }, "&&Clear Recently Opened")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	title: localize('miShare', "Share"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	title: localize({ key: 'miEditorLayout', comment: ['&& denotes a mnemonic'] }, "Editor &&Layout"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miSplitEditorUpWithoutMnemonic', "Split Up"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miSplitEditorUp', comment: ['&& denotes a mnemonic'] }, "Split &&Up"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miSplitEditorDownWithoutMnemonic', "Split Down"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miSplitEditorDown', comment: ['&& denotes a mnemonic'] }, "Split &&Down")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miSplitEditorLeftWithoutMnemonic', "Split Left"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miSplitEditorLeft', comment: ['&& denotes a mnemonic'] }, "Split &&Left")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miSplitEditorRightWithoutMnemonic', "Split Right"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miSplitEditorRight', comment: ['&& denotes a mnemonic'] }, "Split &&Right")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miSplitEditorInGroupWithoutMnemonic', "Split in Group"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miSplitEditorInGroup', comment: ['&& denotes a mnemonic'] }, "Split in &&Group")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miJoinEditorInGroupWithoutMnemonic', "Join in Group"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miJoinEditorInGroup', comment: ['&& denotes a mnemonic'] }, "Join in &&Group")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miSingleColumnEditorLayoutWithoutMnemonic', "Single"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miSingleColumnEditorLayout', comment: ['&& denotes a mnemonic'] }, "&&Single")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miTwoColumnsEditorLayoutWithoutMnemonic', "Two Columns"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miTwoColumnsEditorLayout', comment: ['&& denotes a mnemonic'] }, "&&Two Columns")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miThreeColumnsEditorLayoutWithoutMnemonic', "Three Columns"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miThreeColumnsEditorLayout', comment: ['&& denotes a mnemonic'] }, "T&&hree Columns")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miTwoRowsEditorLayoutWithoutMnemonic', "Two Rows"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miTwoRowsEditorLayout', comment: ['&& denotes a mnemonic'] }, "T&&wo Rows")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miThreeRowsEditorLayoutWithoutMnemonic', "Three Rows"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miThreeRowsEditorLayout', comment: ['&& denotes a mnemonic'] }, "Three &&Rows")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miTwoByTwoGridEditorLayoutWithoutMnemonic', "Grid (2x2)"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miTwoByTwoGridEditorLayout', comment: ['&& denotes a mnemonic'] }, "&&Grid (2x2)")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miTwoRowsRightEditorLayoutWithoutMnemonic', "Two Rows Right"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miTwoRowsRightEditorLayout', comment: ['&& denotes a mnemonic'] }, "Two R&&ows Right")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			value: localize('miTwoColumnsBottomEditorLayoutWithoutMnemonic', "Two Columns Bottom"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:			mnemonicTitle: localize({ key: 'miTwoColumnsBottomEditorLayout', comment: ['&& denotes a mnemonic'] }, "Two &&Columns Bottom")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miLastEditLocation', comment: ['&& denotes a mnemonic'] }, "&&Last Edit Location"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFirstSideEditor', comment: ['&& denotes a mnemonic'] }, "&&First Side in Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miSecondSideEditor', comment: ['&& denotes a mnemonic'] }, "&&Second Side in Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miNextEditor', comment: ['&& denotes a mnemonic'] }, "&&Next Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miPreviousEditor', comment: ['&& denotes a mnemonic'] }, "&&Previous Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miNextRecentlyUsedEditor', comment: ['&& denotes a mnemonic'] }, "&&Next Used Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miPreviousRecentlyUsedEditor', comment: ['&& denotes a mnemonic'] }, "&&Previous Used Editor")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miNextEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Next Editor in Group")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miPreviousEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Previous Editor in Group")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miNextUsedEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Next Used Editor in Group")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miPreviousUsedEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Previous Used Editor in Group")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	title: localize({ key: 'miSwitchEditor', comment: ['&& denotes a mnemonic'] }, "Switch &&Editor"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusFirstGroup', comment: ['&& denotes a mnemonic'] }, "Group &&1")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusSecondGroup', comment: ['&& denotes a mnemonic'] }, "Group &&2")
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusThirdGroup', comment: ['&& denotes a mnemonic'] }, "Group &&3"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusFourthGroup', comment: ['&& denotes a mnemonic'] }, "Group &&4"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusFifthGroup', comment: ['&& denotes a mnemonic'] }, "Group &&5"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miNextGroup', comment: ['&& denotes a mnemonic'] }, "&&Next Group"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miPreviousGroup', comment: ['&& denotes a mnemonic'] }, "&&Previous Group"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusLeftGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Left"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusRightGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Right"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusAboveGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Above"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:		title: localize({ key: 'miFocusBelowGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Below"),
src/vs/workbench/browser/parts/editor/editor.contribution.ts:	title: localize({ key: 'miSwitchGroup', comment: ['&& denotes a mnemonic'] }, "Switch &&Group"),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:				'description': nls.localize('editor.snippets.codeActions.enabled', 'Controls if surround-with-snippets or file template snippets show as code actions.'),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:		description: nls.localize('snippetSchema.json.prefix', 'The prefix to use when selecting the snippet in intellisense'),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:		description: nls.localize('snippetSchema.json.isFileTemplate', 'The snippet is meant to populate or replace a whole file'),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:		markdownDescription: nls.localize('snippetSchema.json.body', 'The snippet content. Use `$1`, `${1:defaultText}` to define cursor positions, use `$0` for the final cursor position. Insert variable values with `${varName}` and `${varName:defaultText}`, e.g. `This is file: $TM_FILENAME`.'),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:		description: nls.localize('snippetSchema.json.description', 'The snippet description.'),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:		label: nls.localize('snippetSchema.json.default', "Empty snippet"),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:	description: nls.localize('snippetSchema.json', 'User snippet configuration'),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:		label: nls.localize('snippetSchema.json.default', "Empty snippet"),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:	description: nls.localize('snippetSchema.json', 'User snippet configuration'),
src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts:				description: nls.localize('snippetSchema.json.scope', "A list of language names to which this snippet applies, e.g. 'typescript,javascript'."),
src/vs/workbench/contrib/snippets/browser/snippetPicker.ts:						label = nls.localize('sep.userSnippet', "User Snippets");
src/vs/workbench/contrib/snippets/browser/snippetPicker.ts:						label = nls.localize('sep.workspaceSnippet', "Workspace Snippets");
src/vs/workbench/contrib/snippets/browser/snippetPicker.ts:						tooltip: nls.localize('disableSnippet', 'Hide from IntelliSense')
src/vs/workbench/contrib/snippets/browser/snippetPicker.ts:					pick.description = nls.localize('isDisabled', "(hidden from IntelliSense)");
src/vs/workbench/contrib/snippets/browser/snippetPicker.ts:						tooltip: nls.localize('enable.snippet', 'Show in IntelliSense')
src/vs/workbench/contrib/snippets/browser/snippetPicker.ts:	picker.placeholder = nls.localize('pick.placeholder', "Select a snippet");
src/vs/workbench/contrib/snippets/browser/snippetPicker.ts:		picker.validationMessage = nls.localize('pick.noSnippetAvailable', "No snippet available");
src/vs/workbench/browser/parts/editor/binaryEditor.ts:		return this.input ? this.input.getName() : localize('binaryEditor', "Binary Viewer");
src/vs/workbench/browser/parts/editor/binaryEditor.ts:			label: localize('binaryError', "The file is not displayed in the editor because it is either binary or uses an unsupported text encoding."),
src/vs/workbench/browser/parts/editor/binaryEditor.ts:					label: localize('openAnyway', "Open Anyway"),
src/vs/workbench/browser/parts/editor/tabsTitleControl.ts:		const tabActionBar = new ActionBar(tabActionsContainer, { ariaLabel: localize('ariaLabelTabActions', "Tab actions"), actionRunner: tabActionRunner });
src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts:		this.detail = localize('detail.snippet', "{0} ({1})", snippet.description || snippet.name, snippet.source);
src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts:				suggestions[to].label.label = localize('snippetSuggest.longLabel', "{0}, {1}", suggestions[to].label.label, suggestions[to].snippet.name);
src/vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts:				suggestions[i].label.label = localize('snippetSuggest.longLabel', "{0}, {1}", suggestions[i].label.label, suggestions[i].snippet.name);
src/vs/workbench/contrib/snippets/browser/snippetCodeActionProvider.ts:				title: localize('codeAction', "Surround With: {0}", snippet.name),
src/vs/workbench/contrib/snippets/browser/snippetCodeActionProvider.ts:		title: localize('overflow.start.title', 'Start with Snippet'),
src/vs/workbench/contrib/snippets/browser/snippetCodeActionProvider.ts:				title: localize('title', 'Start with: {0}', snippet.name),
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:const separatorIcon = registerIcon('breadcrumb-separator', Codicon.chevronRight, localize('separatorIcon', 'Icon for the separator in the breadcrumbs.'));
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:	static readonly CK_BreadcrumbsPossible = new RawContextKey('breadcrumbsPossible', false, localize('breadcrumbsPossible', "Whether the editor can show breadcrumbs"));
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:	static readonly CK_BreadcrumbsVisible = new RawContextKey('breadcrumbsVisible', false, localize('breadcrumbsVisible', "Whether breadcrumbs are currently visible"));
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:	static readonly CK_BreadcrumbsActive = new RawContextKey('breadcrumbsActive', false, localize('breadcrumbsActive', "Whether breadcrumbs have focus"));
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:						container.innerText = localize('empty', "no elements");
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:				value: localize('cmd.toggle', "Toggle Breadcrumbs"),
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:				mnemonicTitle: localize('miBreadcrumbs', "Toggle &&Breadcrumbs"),
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:				title: localize('cmd.toggle2', "Breadcrumbs"),
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:				mnemonicTitle: localize('miBreadcrumbs2', "&&Breadcrumbs")
src/vs/workbench/browser/parts/editor/breadcrumbsControl.ts:				value: localize('cmd.focus', "Focus Breadcrumbs"),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:	title: localize('title', "Breadcrumb Navigation"),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			description: localize('enabled', "Enable/disable navigation breadcrumbs."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			description: localize('filepath', "Controls whether and how file paths are shown in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('filepath.on', "Show the file path in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('filepath.off', "Do not show the file path in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('filepath.last', "Only show the last element of the file path in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			description: localize('symbolpath', "Controls whether and how symbols are shown in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('symbolpath.on', "Show all symbols in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('symbolpath.off', "Do not show symbols in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('symbolpath.last', "Only show the current symbol in the breadcrumbs view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			description: localize('symbolSortOrder', "Controls how symbols are sorted in the breadcrumbs outline view."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('symbolSortOrder.position', "Show symbol outline in file position order."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('symbolSortOrder.name', "Show symbol outline in alphabetical order."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:				localize('symbolSortOrder.type', "Show symbol outline in symbol type order."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			description: localize('icons', "Render breadcrumb items with icons."),
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.file', "When enabled breadcrumbs show `file`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.module', "When enabled breadcrumbs show `module`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.namespace', "When enabled breadcrumbs show `namespace`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.package', "When enabled breadcrumbs show `package`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.class', "When enabled breadcrumbs show `class`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.method', "When enabled breadcrumbs show `method`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.property', "When enabled breadcrumbs show `property`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.field', "When enabled breadcrumbs show `field`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.constructor', "When enabled breadcrumbs show `constructor`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.enum', "When enabled breadcrumbs show `enum`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.interface', "When enabled breadcrumbs show `interface`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.function', "When enabled breadcrumbs show `function`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.variable', "When enabled breadcrumbs show `variable`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.constant', "When enabled breadcrumbs show `constant`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.string', "When enabled breadcrumbs show `string`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.number', "When enabled breadcrumbs show `number`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.boolean', "When enabled breadcrumbs show `boolean`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.array', "When enabled breadcrumbs show `array`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.object', "When enabled breadcrumbs show `object`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.key', "When enabled breadcrumbs show `key`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.null', "When enabled breadcrumbs show `null`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.enumMember', "When enabled breadcrumbs show `enumMember`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.struct', "When enabled breadcrumbs show `struct`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.event', "When enabled breadcrumbs show `event`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.operator', "When enabled breadcrumbs show `operator`-symbols.")
src/vs/workbench/browser/parts/editor/breadcrumbs.ts:			markdownDescription: localize('filteredTypes.typeParameter', "When enabled breadcrumbs show `typeParameter`-symbols.")
src/vs/workbench/contrib/snippets/browser/commands/surroundWithSnippet.ts:			value: localize('label', 'Surround With Snippet...'),
src/vs/workbench/contrib/search/browser/searchMessage.ts:							notificationService.error(nls.localize('unable to open trust', "Unable to open command link from untrusted source: {0}", href));
src/vs/workbench/contrib/search/browser/searchMessage.ts:							notificationService.error(nls.localize('unable to open', "Unable to open unknown link: {0}", href));
src/vs/workbench/contrib/snippets/browser/commands/insertSnippet.ts:				value: nls.localize('snippet.suggestions.label', "Insert Snippet"),
src/vs/workbench/contrib/search/browser/patternInputWidget.ts:				ariaLabel: nls.localize('defaultLabel', "input")
src/vs/workbench/contrib/search/browser/patternInputWidget.ts:			title: nls.localize('onlySearchInOpenEditors', "Search only in Open Editors"),
src/vs/workbench/contrib/search/browser/patternInputWidget.ts:			title: nls.localize('useExcludesAndIgnoreFilesDescription', "Use Exclude Settings and Ignore Files"),
src/vs/workbench/contrib/search/browser/replaceService.ts:	private static readonly REPLACE_SAVE_SOURCE = SaveSourceRegistry.registerSource('searchReplace.source', nls.localize('searchReplace.source', "Search and Replace"));
src/vs/workbench/contrib/search/browser/replaceService.ts:			label: nls.localize('fileReplaceChanges', "{0} ↔ {1} (Replace Preview)", fileMatch.name(), fileMatch.name()),
src/vs/workbench/contrib/search/browser/searchView.ts:const SEARCH_CANCELLED_MESSAGE = nls.localize('searchCanceled', "Search was canceled before any results could be found - ");
src/vs/workbench/contrib/search/browser/searchView.ts:			$('.more' + ThemeIcon.asCSSSelector(searchDetailsIcon), { tabindex: 0, role: 'button', title: nls.localize('moreSearch', "Toggle Search Details") }));
src/vs/workbench/contrib/search/browser/searchView.ts:		const filesToIncludeTitle = nls.localize('searchScope.includes', "files to include");
src/vs/workbench/contrib/search/browser/searchView.ts:			placeholder: nls.localize('placeholder.includes', "e.g. *.ts, src/**/include"),
src/vs/workbench/contrib/search/browser/searchView.ts:		const excludesTitle = nls.localize('searchScope.excludes', "files to exclude");
src/vs/workbench/contrib/search/browser/searchView.ts:			placeholder: nls.localize('placeholder.excludes', "e.g. *.ts, src/**/exclude"),
src/vs/workbench/contrib/search/browser/searchView.ts:			title: nls.localize('replaceAll.confirmation.title', "Replace All"),
src/vs/workbench/contrib/search/browser/searchView.ts:			primaryButton: nls.localize('replaceAll.confirm.button', "&&Replace"),
src/vs/workbench/contrib/search/browser/searchView.ts:					return nls.localize('replaceAll.occurrence.file.message', "Replaced {0} occurrence across {1} file with '{2}'.", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:				return nls.localize('removeAll.occurrence.file.message', "Replaced {0} occurrence across {1} file.", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:				return nls.localize('replaceAll.occurrence.files.message', "Replaced {0} occurrence across {1} files with '{2}'.", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('removeAll.occurrence.files.message', "Replaced {0} occurrence across {1} files.", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:				return nls.localize('replaceAll.occurrences.file.message', "Replaced {0} occurrences across {1} file with '{2}'.", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('removeAll.occurrences.file.message', "Replaced {0} occurrences across {1} file.", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('replaceAll.occurrences.files.message', "Replaced {0} occurrences across {1} files with '{2}'.", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:		return nls.localize('removeAll.occurrences.files.message', "Replaced {0} occurrences across {1} files.", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:					return nls.localize('removeAll.occurrence.file.confirmation.message', "Replace {0} occurrence across {1} file with '{2}'?", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:				return nls.localize('replaceAll.occurrence.file.confirmation.message', "Replace {0} occurrence across {1} file?", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:				return nls.localize('removeAll.occurrence.files.confirmation.message', "Replace {0} occurrence across {1} files with '{2}'?", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('replaceAll.occurrence.files.confirmation.message', "Replace {0} occurrence across {1} files?", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:				return nls.localize('removeAll.occurrences.file.confirmation.message', "Replace {0} occurrences across {1} file with '{2}'?", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('replaceAll.occurrences.file.confirmation.message', "Replace {0} occurrences across {1} file?", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('removeAll.occurrences.files.confirmation.message', "Replace {0} occurrences across {1} files with '{2}'?", occurrences, fileCount, replaceValue);
src/vs/workbench/contrib/search/browser/searchView.ts:		return nls.localize('replaceAll.occurrences.files.confirmation.message', "Replace {0} occurrences across {1} files?", occurrences, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:		this.tree.ariaLabel = nls.localize('emptySearch', "Empty Search");
src/vs/workbench/contrib/search/browser/searchView.ts:		aria.status(nls.localize('ariaSearchResultsClearStatus', "The search results have been cleared"));
src/vs/workbench/contrib/search/browser/searchView.ts:				const searchPathNotFoundError = nls.localize('searchPathNotFoundError', "Search path not found: {0}", nonExistantPath);
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noOpenEditorResultsIncludesExcludes', "No results found in open editors matching '{0}' excluding '{1}' - ", includePatternText, excludePatternText);
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noOpenEditorResultsIncludes', "No results found in open editors matching '{0}' - ", includePatternText);
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noOpenEditorResultsExcludes', "No results found in open editors excluding '{0}' - ", excludePatternText);
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noOpenEditorResultsFound', "No results found in open editors. Review your settings for configured exclusions and check your gitignore files - ");
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noResultsIncludesExcludes', "No results found in '{0}' excluding '{1}' - ", includePatternText, excludePatternText);
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noResultsIncludes', "No results found in '{0}' - ", includePatternText);
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noResultsExcludes', "No results found excluding '{0}' - ", excludePatternText);
src/vs/workbench/contrib/search/browser/searchView.ts:						message = nls.localize('noResultsFound', "No results found. Review your settings for configured exclusions and check your gitignore files - ");
src/vs/workbench/contrib/search/browser/searchView.ts:						nls.localize('rerunSearch.message', "Search again"),
src/vs/workbench/contrib/search/browser/searchView.ts:					const searchAgainButton = this.messageDisposables.add(new SearchLinkButton(nls.localize('rerunSearchInAll.message', "Search again in all files"), this.onSearchAgain.bind(this)));
src/vs/workbench/contrib/search/browser/searchView.ts:					const openSettingsButton = this.messageDisposables.add(new SearchLinkButton(nls.localize('openSettings.message', "Open Settings"), this.onOpenSettings.bind(this)));
src/vs/workbench/contrib/search/browser/searchView.ts:					const learnMoreButton = this.messageDisposables.add(new SearchLinkButton(nls.localize('openSettings.learnMore', "Learn More"), this.onLearnMore.bind(this)));
src/vs/workbench/contrib/search/browser/searchView.ts:				aria.status(nls.localize('ariaSearchResultsStatus', "Search returned {0} results in {1} files", this.viewModel.searchResult.count(), this.viewModel.searchResult.fileCount()));
src/vs/workbench/contrib/search/browser/searchView.ts:				completed.messages.push({ type: TextSearchCompleteMessageType.Warning, text: nls.localize('searchMaxResultsWarning', "The result set only contains a subset of all matches. Be more specific in your search to narrow down the results.") });
src/vs/workbench/contrib/search/browser/searchView.ts:		this.tree.ariaLabel = resultMsg + nls.localize('forTerm', " - Search: {0}", this.searchResult.query?.contentPattern.pattern ?? '');
src/vs/workbench/contrib/search/browser/searchView.ts:				const excludesDisabledMessage = ' - ' + nls.localize('useIgnoresAndExcludesDisabled', "exclude settings and ignore files are disabled") + ' ';
src/vs/workbench/contrib/search/browser/searchView.ts:				const enableExcludesButton = this.messageDisposables.add(new SearchLinkButton(nls.localize('excludes.enable', "enable"), this.onEnableExcludes.bind(this), nls.localize('useExcludesAndIgnoreFilesDescription', "Use Exclude Settings and Ignore Files")));
src/vs/workbench/contrib/search/browser/searchView.ts:				const searchingInOpenMessage = ' - ' + nls.localize('onlyOpenEditors', "searching only in open files") + ' ';
src/vs/workbench/contrib/search/browser/searchView.ts:				const disableOpenEditorsButton = this.messageDisposables.add(new SearchLinkButton(nls.localize('openEditors.disable', "disable"), this.onDisableSearchInOpenEditors.bind(this), nls.localize('disableOpenEditors', "Search in entire workspace")));
src/vs/workbench/contrib/search/browser/searchView.ts:				nls.localize('openInEditor.tooltip', "Copy current search results to an editor"),
src/vs/workbench/contrib/search/browser/searchView.ts:				nls.localize('openInEditor.message', "Open in editor"),
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('search.file.result', "{0} result in {1} file", resultCount, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('search.files.result', "{0} result in {1} files", resultCount, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('search.file.results', "{0} results in {1} file", resultCount, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:			return nls.localize('search.files.results', "{0} results in {1} files", resultCount, fileCount);
src/vs/workbench/contrib/search/browser/searchView.ts:			$('p', undefined, nls.localize('searchWithoutFolder', "You have not opened or specified a folder. Only open files are currently searched - ")));
src/vs/workbench/contrib/search/browser/searchView.ts:			nls.localize('openFolder', "Open Folder"),
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchDetailsIcon = registerIcon('search-details', Codicon.ellipsis, localize('searchDetailsIcon', 'Icon to make search details visible.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchShowContextIcon = registerIcon('search-show-context', Codicon.listSelection, localize('searchShowContextIcon', 'Icon for toggle the context in the search editor.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchHideReplaceIcon = registerIcon('search-hide-replace', Codicon.chevronRight, localize('searchHideReplaceIcon', 'Icon to collapse the replace section in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchShowReplaceIcon = registerIcon('search-show-replace', Codicon.chevronDown, localize('searchShowReplaceIcon', 'Icon to expand the replace section in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchReplaceAllIcon = registerIcon('search-replace-all', Codicon.replaceAll, localize('searchReplaceAllIcon', 'Icon for replace all in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchReplaceIcon = registerIcon('search-replace', Codicon.replace, localize('searchReplaceIcon', 'Icon for replace in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchRemoveIcon = registerIcon('search-remove', Codicon.close, localize('searchRemoveIcon', 'Icon to remove a search result.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchRefreshIcon = registerIcon('search-refresh', Codicon.refresh, localize('searchRefreshIcon', 'Icon for refresh in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchCollapseAllIcon = registerIcon('search-collapse-results', Codicon.collapseAll, localize('searchCollapseAllIcon', 'Icon for collapse results in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchExpandAllIcon = registerIcon('search-expand-results', Codicon.expandAll, localize('searchExpandAllIcon', 'Icon for expand results in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchShowAsTree = registerIcon('search-tree', Codicon.listTree, localize('searchShowAsTree', 'Icon for viewing results as a tree in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchShowAsList = registerIcon('search-list', Codicon.listFlat, localize('searchShowAsList', 'Icon for viewing results as a list in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchClearIcon = registerIcon('search-clear-results', Codicon.clearAll, localize('searchClearIcon', 'Icon for clear results in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchStopIcon = registerIcon('search-stop', Codicon.searchStop, localize('searchStopIcon', 'Icon for stop in the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchViewIcon = registerIcon('search-view-icon', Codicon.search, localize('searchViewIcon', 'View icon of the search view.'));
src/vs/workbench/contrib/search/browser/searchIcons.ts:export const searchNewEditorIcon = registerIcon('search-new-editor', Codicon.newFile, localize('searchNewEditorIcon', 'Icon for the action to open a new search editor.'));
src/vs/workbench/contrib/search/browser/symbolsQuickAccess.ts:				label: localize('noSymbolResults', "No matching workspace symbols")
src/vs/workbench/contrib/search/browser/symbolsQuickAccess.ts:						tooltip: openSideBySideDirection === 'right' ? localize('openToSide', "Open to the Side") : localize('openToBottom', "Open to the Bottom")
src/vs/workbench/contrib/search/browser/searchWidget.ts:	private static readonly REPLACE_ALL_DISABLED_LABEL = nls.localize('search.action.replaceAll.disabled.label', "Replace All (Submit Search to Enable)");
src/vs/workbench/contrib/search/browser/searchWidget.ts:		return appendKeyBindingLabel(nls.localize('search.action.replaceAll.enabled.label', "Replace All"), kb, keyBindingService2);
src/vs/workbench/contrib/search/browser/searchWidget.ts:		this.toggleReplaceButton.element.title = nls.localize('search.replace.toggle.button.title', "Toggle Replace");
src/vs/workbench/contrib/search/browser/searchWidget.ts:			label: nls.localize('label.Search', 'Search: Type Search Term and press Enter to search'),
src/vs/workbench/contrib/search/browser/searchWidget.ts:			placeholder: nls.localize('search.placeHolder', "Search"),
src/vs/workbench/contrib/search/browser/searchWidget.ts:			title: appendKeyBindingLabel(nls.localize('showContext', "Toggle Context Lines"), this.keybindingService.lookupKeybinding(ToggleSearchEditorContextLinesCommandId), this.keybindingService),
src/vs/workbench/contrib/search/browser/searchWidget.ts:			label: nls.localize('label.Replace', 'Replace: Type replace term and press Enter to preview'),
src/vs/workbench/contrib/search/browser/searchWidget.ts:			placeholder: nls.localize('search.replace.placeHolder', "Replace"),
src/vs/workbench/contrib/search/browser/searchResultsView.ts:			templateData.label.setLabel(nls.localize('searchFolderMatch.other.label', "Other files"));
src/vs/workbench/contrib/search/browser/searchResultsView.ts:			templateData.label.setLabel(nls.localize('searchFolderMatch.other.label', "Other files"));
src/vs/workbench/contrib/search/browser/searchResultsView.ts:		templateData.badge.setTitleFormat(count > 1 ? nls.localize('searchFileMatches', "{0} files found", count) : nls.localize('searchFileMatch', "{0} file found", count));
src/vs/workbench/contrib/search/browser/searchResultsView.ts:		templateData.badge.setTitleFormat(count > 1 ? nls.localize('searchMatches', "{0} matches found", count) : nls.localize('searchMatch', "{0} match found", count));
src/vs/workbench/contrib/search/browser/searchResultsView.ts:			nls.localize('lineNumStr', "From line {0}", startLine, numLines) + ' ' :
src/vs/workbench/contrib/search/browser/searchResultsView.ts:			'+ ' + nls.localize('numLinesStr', "{0} more lines", numLines) :
src/vs/workbench/contrib/search/browser/searchResultsView.ts:		return nls.localize('search', "Search");
src/vs/workbench/contrib/search/browser/searchResultsView.ts:				nls.localize('folderMatchAriaLabel', "{0} matches in folder root {1}, Search result", count, element.name()) :
src/vs/workbench/contrib/search/browser/searchResultsView.ts:				nls.localize('otherFilesAriaLabel', "{0} matches outside of the workspace, Search result", count);
src/vs/workbench/contrib/search/browser/searchResultsView.ts:			return nls.localize('fileMatchAriaLabel', "{0} matches in file {1} of folder {2}, Search result", element.count(), element.name(), paths.dirname(path));
src/vs/workbench/contrib/search/browser/searchResultsView.ts:				return nls.localize('replacePreviewResultAria', "Replace '{0}' with '{1}' at column {2} in line {3}", matchString, match.replaceString, range.startColumn + 1, matchText);
src/vs/workbench/contrib/search/browser/searchResultsView.ts:			return nls.localize('searchResultAria', "Found '{0}' at column {1} in line '{2}'", matchString, range.startColumn + 1, matchText);
src/vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets.ts:				value: localize('label', 'Populate File from Snippet'),
src/vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets.ts:			placeHolder: localize('placeholder', 'Select a snippet'),
src/vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions.ts:		value: localize('snippets', 'Snippets'),
src/vs/workbench/contrib/search/browser/search.contribution.ts:const category = { value: nls.localize('search', "Search"), original: 'Search' };
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize('restrictResultsToFolder', "Restrict Search to Folder")
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize('excludeFolderFromSearch', "Exclude Folder from Search")
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize('copyMatchLabel', "Copy")
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize('copyPathLabel', "Copy Path")
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize('copyAllLabel', "Copy All")
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('CancelSearchAction.label', "Cancel Search"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('RefreshAction.label', "Refresh"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('CollapseDeepestExpandedLevelAction.label', "Collapse All"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('ExpandAllAction.label', "Expand All"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('ClearSearchResultsAction.label', "Clear Search Results"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('ViewAsTreeAction.label', "View as Tree"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('ViewAsListAction.label', "View as List"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:	title: nls.localize('revealInSideBar', "Reveal in Explorer View")
src/vs/workbench/contrib/search/browser/search.contribution.ts:	title: { value: nls.localize('clearSearchHistoryLabel', "Clear Search History"), original: 'Clear Search History' },
src/vs/workbench/contrib/search/browser/search.contribution.ts:	title: { value: nls.localize('focusSearchListCommandLabel', "Focus List"), original: 'Focus List' },
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize('findInFolder', "Find in Folder...")
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize('findInWorkspace', "Find in Workspace...")
src/vs/workbench/contrib/search/browser/search.contribution.ts:	static readonly LABEL = nls.localize('showTriggerActions', "Go to Symbol in Workspace...");
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('showTriggerActions', "Go to Symbol in Workspace..."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:	title: { value: nls.localize('name', "Search"), original: 'Search' },
src/vs/workbench/contrib/search/browser/search.contribution.ts:	name: nls.localize('search', "Search"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:		mnemonicTitle: nls.localize({ key: 'miViewSearch', comment: ['&& denotes a mnemonic'] }, "&&Search"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:		description: nls.localize('findInFiles.description', "Open a workspace search"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				name: nls.localize('findInFiles.args', "A set of options for the search"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: Constants.FindInFilesActionId, title: { value: nls.localize('findInFiles', "Find in Files"), original: 'Find in Files' }, category } });
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize({ key: 'miFindInFiles', comment: ['&& denotes a mnemonic'] }, "Find &&in Files")
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('FocusNextSearchResult.label', 'Focus Next Search Result'),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('FocusPreviousSearchResult.label', 'Search: Focus Previous Search Result'),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('replaceInFiles', 'Search: Replace in Files'),
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize({ key: 'miReplaceInFiles', comment: ['&& denotes a mnemonic'] }, "Replace &&in Files")
src/vs/workbench/contrib/search/browser/search.contribution.ts:				value: nls.localize('toggleTabs', 'Toggle Search on Type'),
src/vs/workbench/contrib/search/browser/search.contribution.ts:	placeholder: nls.localize('anythingQuickAccessPlaceholder', "Search files by name (append {0} to go to line or {1} to go to symbol)", AbstractGotoLineQuickAccessProvider.PREFIX, GotoSymbolQuickAccessProvider.PREFIX),
src/vs/workbench/contrib/search/browser/search.contribution.ts:	helpEntries: [{ description: nls.localize('anythingQuickAccess', "Go to File"), commandId: 'workbench.action.quickOpen' }]
src/vs/workbench/contrib/search/browser/search.contribution.ts:	placeholder: nls.localize('symbolsQuickAccessPlaceholder', "Type the name of a symbol to open."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:	helpEntries: [{ description: nls.localize('symbolsQuickAccess', "Go to Symbol in Workspace"), commandId: ShowAllSymbolsAction.ID }]
src/vs/workbench/contrib/search/browser/search.contribution.ts:	title: nls.localize('searchConfigurationTitle', "Search"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('exclude', "Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `#files.exclude#` setting."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:						description: nls.localize('exclude.boolean', "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:								markdownDescription: nls.localize({ key: 'exclude.when', comment: ['\\$(basename) should not be translated'] }, 'Additional check on the siblings of a matching file. Use \\$(basename) as variable for the matching file name.')
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('search.mode', "Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor"),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.mode.view', "Search in the search view, either in the panel or side bars."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.mode.reuseEditor', "Search in an existing search editor if present, otherwise in a new search editor."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.mode.newEditor', "Search in a new search editor."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('useRipgrep', "This setting is deprecated and now falls back on \"search.usePCRE2\"."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			deprecationMessage: nls.localize('useRipgrepDeprecated', "Deprecated. Consider \"search.usePCRE2\" for advanced regex feature support."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			deprecationMessage: nls.localize('maintainFileSearchCacheDeprecated', "The search cache is kept in the extension host which never shuts down, so this setting is no longer needed."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.maintainFileSearchCache', "When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('useIgnoreFiles', "Controls whether to use `.gitignore` and `.ignore` files when searching for files."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('useGlobalIgnoreFiles', "Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `#search.useIgnoreFiles#` to be enabled."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('useParentIgnoreFiles', "Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `#search.useIgnoreFiles#` to be enabled."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.quickOpen.includeSymbols', "Whether to include results from a global symbol search in the file results for Quick Open."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.quickOpen.includeHistory', "Whether to include results from recently opened files in the file results for Quick Open."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('filterSortOrder.default', 'History entries are sorted by relevance based on the filter value used. More relevant entries appear first.'),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('filterSortOrder.recency', 'History entries are sorted by recency. More recently opened entries appear first.')
src/vs/workbench/contrib/search/browser/search.contribution.ts:			'description': nls.localize('filterSortOrder', "Controls sorting order of editor history in quick open when filtering.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.followSymlinks', "Controls whether to follow symlinks while searching."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.smartCase', "Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.globalFindClipboard', "Controls whether the search view should read or modify the shared find clipboard on macOS."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.location', "Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			deprecationMessage: nls.localize('search.location.deprecationMessage', "This setting is deprecated. You can drag the search icon to a new location instead.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('search.maxResults', "Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.collapseResults.auto', "Files with less than 10 results are expanded. Others are collapsed."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.collapseAllResults', "Controls whether the search results will be collapsed or expanded."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.useReplacePreview', "Controls whether to open Replace Preview when selecting or replacing a match."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.showLineNumbers', "Controls whether to show line numbers for search results."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.usePCRE2', "Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			deprecationMessage: nls.localize('usePCRE2Deprecated', "Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.actionsPositionAuto', "Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.actionsPositionRight', "Always position the actionbar to the right."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.actionsPosition', "Controls the positioning of the actionbar on rows in the search view.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.searchOnType', "Search all files as you type.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.seedWithNearestWord', "Enable seeding search from the word nearest the cursor when the active editor has no selection.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('search.seedOnFocus', "Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('search.searchOnTypeDebouncePeriod', "When {0} is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when {0} is disabled.", '`#search.searchOnType#`')
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.searchEditor.doubleClickBehaviour.selectWord', "Double clicking selects the word under the cursor."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.searchEditor.doubleClickBehaviour.goToLocation', "Double clicking opens the result in the active editor group."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('search.searchEditor.doubleClickBehaviour.openLocationToSide', "Double clicking opens the result in the editor group to the side, creating one if it does not yet exist."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('search.searchEditor.doubleClickBehaviour', "Configure effect of double clicking a result in a search editor.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize({ key: 'search.searchEditor.reusePriorSearchConfiguration', comment: ['"Search Editor" is a type of editor that can display search results. "includes, excludes, and flags" refers to the "files to include" and "files to exclude" input boxes, and the flags that control whether a query is case-sensitive or a regex.'] }, "When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			markdownDescription: nls.localize('search.searchEditor.defaultNumberOfContextLines', "The default number of surrounding context lines to use when creating new Search Editors. If using `#search.searchEditor.reusePriorSearchConfiguration#`, this can be set to `null` (empty) to use the prior Search Editor's configuration.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('searchSortOrder.default', "Results are sorted by folder and file names, in alphabetical order."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('searchSortOrder.filesOnly', "Results are sorted by file names ignoring folder order, in alphabetical order."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('searchSortOrder.type', "Results are sorted by file extensions, in alphabetical order."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('searchSortOrder.modified', "Results are sorted by file last modified date, in descending order."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('searchSortOrder.countDescending', "Results are sorted by count per file, in descending order."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('searchSortOrder.countAscending', "Results are sorted by count per file, in ascending order.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			'description': nls.localize('search.sortOrder', "Controls sorting order of search results.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.decorations.colors', "Controls whether search file decorations should use colors."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:			description: nls.localize('search.decorations.badges', "Controls whether search file decorations should use badges."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('scm.defaultViewMode.tree', "Shows search results as a tree."),
src/vs/workbench/contrib/search/browser/search.contribution.ts:				nls.localize('scm.defaultViewMode.list', "Shows search results as a list.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:			'description': nls.localize('search.defaultViewMode', "Controls the default search result view mode.")
src/vs/workbench/contrib/search/browser/search.contribution.ts:		title: nls.localize({ key: 'miGotoSymbolInWorkspace', comment: ['&& denotes a mnemonic'] }, "Go to Symbol in &&Workspace...")
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:		label: localize('noAnythingResults', "No matching results")
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:				picks.push({ type: 'separator', label: localize('recentlyOpenedSeparator', "recently opened") } as IQuickPickSeparator);
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:					{ type: 'separator', label: this.configuration.includeSymbols ? localize('fileAndSymbolResultsSeparator', "file and symbol results") : localize('fileResultsSeparator', "file results") },
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:			label: localize('more', 'More')
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:					localize({ key: 'openToSide', comment: ['Open this file in a split editor on the left/right side'] }, "Open to the Side") :
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:					localize({ key: 'openToBottom', comment: ['Open this file in a split editor on the bottom'] }, "Open to the Bottom")
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:					tooltip: localize('closeEditor', "Remove from Recently Opened"),
src/vs/workbench/contrib/search/browser/anythingQuickAccess.ts:			ariaLabel: isDirty ? localize('filePickAriaLabelDirty', "{0} unsaved changes", labelAndDescription) : labelAndDescription,
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:					? nls.localize('global.scope', "(global)")
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:					: nls.localize('global.1', "({0})", [...names].join(', '))
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:		placeHolder: nls.localize('name', "Type snippet file name"),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				return nls.localize('bad_name1', "Invalid file name");
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				return nls.localize('bad_name2', "'{0}' is not a valid file name", input);
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				return nls.localize('bad_name3', "'{0}' already exists", input);
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				value: nls.localize('openSnippet.label', "Configure User Snippets"),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				value: nls.localize('userSnippets', "User Snippets"),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				mnemonicTitle: nls.localize({ key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] }, "User &&Snippets"),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:			scope: nls.localize('new.global_scope', 'global'),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:			label: nls.localize('new.global', "New Global Snippets file..."),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				scope: nls.localize('new.workspace_scope', "{0} workspace", folder.name),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:				label: nls.localize('new.folder', "New Snippets file for '{0}'...", folder.name),
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:			existing.unshift({ type: 'separator', label: nls.localize('group.global', "Existing Snippets") });
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:			existing.push({ type: 'separator', label: nls.localize('new.global.sep', "New Snippets") });
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:			existing.push({ type: 'separator', label: nls.localize('new.global.sep', "New Snippets") });
src/vs/workbench/contrib/snippets/browser/commands/configureSnippets.ts:			placeHolder: nls.localize('openSnippet.pickLanguage', "Select Snippets File or Create Snippets"),
src/vs/workbench/contrib/search/browser/searchActions.ts:	static readonly LABEL = nls.localize('RemoveAction.label', "Dismiss");
src/vs/workbench/contrib/search/browser/searchActions.ts:	static readonly LABEL = nls.localize('match.replace.label', "Replace");
src/vs/workbench/contrib/search/browser/searchActions.ts:	static readonly LABEL = nls.localize('file.replaceAll.label', "Replace All");
src/vs/workbench/contrib/search/browser/searchActions.ts:	static readonly LABEL = nls.localize('file.replaceAll.label', "Replace All");
src/vs/workbench/browser/parts/compositePart.ts:		toolBar.setAriaLabel(localize('ariaCompositeToolbarLabel', "{0} actions", compositeTitle));
src/vs/workbench/browser/parts/compositePart.ts:			toggleMenuTitle: localize('viewsAndMoreActions', "Views and More Actions...")
src/vs/workbench/browser/parts/compositePart.ts:					titleLabel.title = keybinding ? localize('titleTooltip', "{0} ({1})", title, keybinding) : title;
src/vs/workbench/browser/parts/compositeBarActions.ts:		let title = this.keybindingLabel ? localize('titleKeybinding', "{0} ({1})", this.activity.name, this.keybindingLabel) : this.activity.name;
src/vs/workbench/browser/parts/compositeBarActions.ts:			title = localize('badgeTitle', "{0} - {1}", title, badge.getDescription());
src/vs/workbench/browser/parts/compositeBarActions.ts:			name: localize('additionalViews', "Additional Views"),
src/vs/workbench/browser/parts/compositeBarActions.ts:				action.label = localize('numberBadge', "{0} ({1})", composite.name, suffix);
src/vs/workbench/browser/parts/compositeBarActions.ts:		super('activitybar.manage.extension', localize('manageExtension', "Manage Extension"));
src/vs/workbench/browser/parts/compositeBarActions.ts:			this.toggleCompositePinnedAction.label = localize('hide', "Hide '{0}'", this.activity.name);
src/vs/workbench/browser/parts/compositeBarActions.ts:			this.toggleCompositePinnedAction.label = localize('keep', "Keep '{0}'", this.activity.name);
src/vs/workbench/browser/parts/compositeBarActions.ts:		super('show.toggleCompositePinned', activity ? activity.name : localize('toggle', "Toggle View Pinned"));
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:					const manageExtensionsAction = disposables.add(new Action(`configureSessions${accountName}`, localize('manageTrustedExtensions', "Manage Trusted Extensions"), '', true, () => {
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:					const signOutAction = disposables.add(new Action('signOut', localize('signOut', "Sign Out"), '', true, () => {
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:				const providerUnavailableAction = disposables.add(new Action('providerUnavailable', localize('authProviderUnavailable', '{0} is currently unavailable', providerDisplayName)));
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:			const noAccountsAvailableAction = disposables.add(new Action('noAccountsAvailable', localize('noAccounts', "You are not signed in to any accounts"), undefined, false));
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:			toAction({ id: 'hideAccounts', label: localize('hideAccounts', "Hide Accounts"), run: () => this.storageService.store(AccountsActivityActionViewItem.ACCOUNTS_VISIBILITY_PREFERENCE_KEY, false, StorageScope.PROFILE, StorageTarget.USER) }),
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:			toAction({ id: 'hideprofiles', label: localize('hideprofiles', "Hide {0}", PROFILES_CATEGORY.value), run: () => this.storageService.store(ProfilesActivityActionViewItem.PROFILES_VISIBILITY_PREFERENCE_KEY, false, StorageScope.PROFILE, StorageTarget.USER) }),
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:		return localize('profiles', "{0} (Profile)", this.userDataProfileService.currentProfile.name);
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:				title: { value: localize('previousSideBarView', "Previous Primary Side Bar View"), original: 'Previous Primary Side Bar View' },
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:				title: { value: localize('nextSideBarView', "Next Primary Side Bar View"), original: 'Next Primary Side Bar View' },
src/vs/workbench/browser/parts/activitybar/activitybarActions.ts:				title: { value: localize('focusActivityBar', "Focus Activity Bar"), original: 'Focus Activity Bar' },
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:	private static readonly GEAR_ICON = registerIcon('settings-view-bar-icon', Codicon.settingsGear, localize('settingsViewBarIcon', "Settings icon in the view bar."));
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:	private static readonly ACCOUNTS_ICON = registerIcon('accounts-view-bar-icon', Codicon.account, localize('accountsViewBarIcon', "Accounts icon in the view bar."));
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:				description: localize('pinned view containers', "Activity bar entries visibility customizations")
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:				description: localize('accounts visibility key', "Accounts entry visibility customization in the activity bar.")
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:					actions.unshift(...[toAction({ id: 'toggleMenuVisibility', label: localize('menu', "Menu"), checked: menuBarVisibility === 'compact', run: () => this.configurationService.updateValue('window.menuBarVisibility', menuBarVisibility === 'compact' ? 'toggle' : 'compact') }), new Separator()]);
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:						actions.unshift(...[toAction({ id: 'hideCompactMenu', label: localize('hideMenu', "Hide Menu"), run: () => this.configurationService.updateValue('window.menuBarVisibility', 'toggle') }), new Separator()]);
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:				actions.push(toAction({ id: 'toggleAccountsVisibility', label: localize('accounts', "Accounts"), checked: this.accountsVisibilityPreference, run: () => this.accountsVisibilityPreference = !this.accountsVisibilityPreference }));
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:				actions.push(toAction({ id: ToggleActivityBarVisibilityAction.ID, label: localize('hideActivitBar', "Hide Activity Bar"), run: () => this.instantiationService.invokeFunction(accessor => new ToggleActivityBarVisibilityAction().run(accessor)) }));
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:			actions.push(toAction({ id: 'resetLocationAction', label: localize('resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewContainerToLocation(viewContainer, defaultLocation) }));
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:					actions.push(toAction({ id: 'resetLocationAction', label: localize('resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewsToContainer([viewToReset], defaultContainer) }));
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:			ariaLabel: localize('manage', "Manage"),
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:			name: localize('manage', "Manage"),
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:				name: localize('accounts', "Accounts"),
src/vs/workbench/browser/parts/activitybar/activitybarPart.ts:					name: localize('accounts', "Accounts"),
src/vs/workbench/contrib/scm/browser/scmViewPaneContainer.ts:		return localize('source control', "Source Control");
src/vs/workbench/browser/parts/banner/bannerPart.ts:	static readonly LABEL = localize('focusBanner', "Focus Banner");
src/vs/workbench/contrib/localHistory/electron-sandbox/localHistoryCommands.ts:				value: isWindows ? localize('revealInWindows', "Reveal in File Explorer") : isMacintosh ? localize('revealInMac', "Reveal in Finder") : localize('openContainer', "Open Containing Folder"),
src/vs/workbench/contrib/scm/browser/activity.ts:				name: localize('status.scm', "Source Control"),
src/vs/workbench/contrib/scm/browser/activity.ts:			const badge = new NumberBadge(count, num => localize('scmPendingChangesBadge', '{0} pending changes', num));
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:		return localize('scm', "Source Control Management");
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:			return localize('input', "Source Control Input");
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:	title: localize('sortAction', "View & Sort"),
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:	title: localize('repositories', "Repositories"),
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:			title: localize('setListViewMode', "View as List"),
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:			title: localize('setTreeViewMode', "View as Tree"),
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:		super(ISCMRepositorySortKey.DiscoveryTime, localize('repositorySortByDiscoveryTime', "Sort by Discovery Time"));
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:		super(ISCMRepositorySortKey.Name, localize('repositorySortByName', "Sort by Name"));
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:		super(ISCMRepositorySortKey.Path, localize('repositorySortByPath', "Sort by Path"));
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:		super(ViewModelSortKey.Name, localize('sortChangesByName', "Sort Changes by Name"));
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:		super(ViewModelSortKey.Path, localize('sortChangesByPath', "Sort Changes by Path"));
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:		super(ViewModelSortKey.Status, localize('sortChangesByStatus', "Sort Changes by Status"));
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:			title: localize('collapse all', "Collapse All Repositories"),
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:			title: localize('expand all', "Expand All Repositories"),
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:				const action = new Action('scmInputWidget.validationMessage.close', localize('label.close', "Close"), Codicon.close.classNames, true, () => {
src/vs/workbench/contrib/scm/browser/scmViewPane.ts:export const scmProviderSeparatorBorderColor = registerColor('scm.providerBorder', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, localize('scm.providerBorder', "SCM Provider separator border."));
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:const sourceControlViewIcon = registerIcon('source-control-view-icon', Codicon.sourceControl, localize('sourceControlViewIcon', 'View icon of the Source Control view.'));
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	title: localize('source control', "Source Control"),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	content: localize('no open repo', "No source control providers registered."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	content: localize('no open repo in an untrusted workspace', "None of the registered source control providers work in Restricted Mode."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	content: `[${localize('manageWorkspaceTrustAction', "Manage Workspace Trust")}](command:${MANAGE_TRUST_COMMAND_ID})`,
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	name: localize('source control', "Source Control"),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:		mnemonicTitle: localize({ key: 'miViewSCM', comment: ['&& denotes a mnemonic'] }, "Source &&Control"),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	name: localize('source control repositories', "Source Control Repositories"),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	title: localize('scmConfigurationTitle', "Source Control"),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorations.all', "Show the diff decorations in all available locations."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorations.gutter', "Show the diff decorations only in the editor gutter."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorations.overviewRuler', "Show the diff decorations only in the overview ruler."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorations.minimap', "Show the diff decorations only in the minimap."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorations.none', "Do not show the diff decorations.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('diffDecorations', "Controls diff decorations in the editor.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('diffGutterWidth', "Controls the width(px) of diff decorations in gutter (added & modified).")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorationsGutterVisibility.always', "Show the diff decorator in the gutter at all times."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorationsGutterVisibility.hover', "Show the diff decorator in the gutter only on hover.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('scm.diffDecorationsGutterVisibility', "Controls the visibility of the Source Control diff decorator in the gutter."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorationsGutterAction.diff', "Show the inline diff peek view on click."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorationsGutterAction.none', "Do nothing.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('scm.diffDecorationsGutterAction', "Controls the behavior of Source Control diff gutter decorations."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('diffGutterPattern', "Controls whether a pattern is used for the diff decorations in gutter."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:					description: localize('diffGutterPatternAdded', "Use pattern for the diff decorations in gutter for added lines."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:					description: localize('diffGutterPatternModifed', "Use pattern for the diff decorations in gutter for modified lines."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorationsIgnoreTrimWhitespace.true', "Ignore leading and trailing whitespace."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorationsIgnoreTrimWhitespace.false', "Do not ignore leading and trailing whitespace."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.diffDecorationsIgnoreTrimWhitespace.inherit', "Inherit from `diffEditor.ignoreTrimWhitespace`.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('diffDecorationsIgnoreTrimWhitespace', "Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('alwaysShowActions', "Controls whether inline actions are always visible in the Source Control view."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.countBadge.all', "Show the sum of all Source Control Provider count badges."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.countBadge.focused', "Show the count badge of the focused Source Control Provider."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.countBadge.off', "Disable the Source Control count badge.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('scm.countBadge', "Controls the count badge on the Source Control icon on the Activity Bar."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.providerCountBadge.hidden', "Hide Source Control Provider count badges."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.providerCountBadge.auto', "Only show count badge for Source Control Provider when non-zero."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.providerCountBadge.visible', "Show Source Control Provider count badges.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('scm.providerCountBadge', "Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.defaultViewMode.tree', "Show the repository changes as a tree."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.defaultViewMode.list', "Show the repository changes as a list.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('scm.defaultViewMode', "Controls the default Source Control repository view mode."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.defaultViewSortKey.name', "Sort the repository changes by file name."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.defaultViewSortKey.path', "Sort the repository changes by path."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.defaultViewSortKey.status', "Sort the repository changes by Source Control status.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('scm.defaultViewSortKey', "Controls the default Source Control repository changes sort order when viewed as a list."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('autoReveal', "Controls whether the Source Control view should automatically reveal and select files when opening them."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			markdownDescription: localize('inputFontFamily', "Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `#editor.fontFamily#`'s value, or a custom font family."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			markdownDescription: localize('inputFontSize', "Controls the font size for the input message in pixels."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			markdownDescription: localize('alwaysShowRepository', "Controls whether repositories should always be visible in the Source Control view."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.repositoriesSortOrder.discoveryTime', "Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.repositoriesSortOrder.name', "Repositories in the Source Control Repositories and Source Control views are sorted by repository name."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:				localize('scm.repositoriesSortOrder.path', "Repositories in the Source Control Repositories and Source Control views are sorted by repository path.")
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('repositoriesSortOrder', "Controls the sort order of the repositories in the source control repositories view."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			description: localize('providersVisible', "Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:			markdownDescription: localize('showActionButton', "Controls whether an action button can be shown in the Source Control view."),
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	description: { description: localize('scm accept', "Source Control: Accept Input"), args: [] },
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	description: { description: localize('scm view next commit', "Source Control: View Next Commit"), args: [] },
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:	description: { description: localize('scm view previous commit', "Source Control: View Previous Commit"), args: [] },
src/vs/workbench/contrib/scm/browser/scm.contribution.ts:		title: localize('open in terminal', "Open In Terminal")
src/vs/workbench/browser/parts/compositeBar.ts:			ariaLabel: localize('activityBarAriaLabel', "Active View Switcher"),
src/vs/workbench/contrib/scm/browser/scmRepositoriesViewPane.ts:					return localize('scm', "Source Control Repositories");
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:	value: localize('remoteTunnel.category', 'Remote Tunnels')
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:	export const turnOn = localize('remoteTunnel.actions.turnOn', 'Turn on Remote Tunnel Access...');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:	export const turnOff = localize('remoteTunnel.actions.turnOff', 'Turn off Remote Tunnel Access...');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:	export const showLog = localize('remoteTunnel.actions.showLog', 'Show Log');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:	export const configure = localize('remoteTunnel.actions.configure', 'Configure Machine Name...');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:	export const copyToClipboard = localize('remoteTunnel.actions.copyToClipboard', 'Copy Browser URI to Clipboard');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:	export const learnMore = localize('remoteTunnel.actions.learnMore', 'Get Started with VS Code Tunnels');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:		quickpick.placeholder = localize('accountPreference.placeholder', "Sign in to an account to enable remote access");
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:		options.push({ type: 'separator', label: localize('signed in', "Signed In") });
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:		options.push({ type: 'separator', label: localize('others', "Others") });
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:				options.push({ label: localize('sign in using account', "Sign in with {0}", providerName), provider: authenticationProvider });
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:						title: localize('progress.title', "[Turning on remote tunnel](command:{0})", RemoteTunnelCommandIds.showLog),
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:						message: localize('progress.turnOn.final',
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:								new Action('copyToClipboard', localize('action.copyToClipboard', "Copy Browser Link to Clipboard"), undefined, true, () => clipboardService.writeText(linkToOpen)),
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:								new Action('showExtension', localize('action.showExtension', "Show Extension"), undefined, true, () => {
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:						message: localize('progress.turnOn.failed',
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:					title: localize('remoteTunnel.actions.manage.on', 'Remote Tunnel Access in On'),
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:					title: localize('remoteTunnel.actions.manage.connecting', 'Remote Tunnel Access in Connecting'),
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:					message: localize('remoteTunnel.turnOff.confirm', 'Do you want to turn off Remote Tunnel Access?'),
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:					primaryButton: localize('remoteTunnel.turnOff.yesButton', 'Yes'),
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:			quickPick.placeholder = localize('manage.placeholder', 'Select a command to invoke');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:				quickPick.title = localize('manage.title.on', 'Remote Machine Access enabled for {0}({1}) as {2}', account.label, account.description, this.connectionInfo.hostName);
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:				quickPick.title = localize('manage.title.off', 'Remote Machine Access not enabled');
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:			items.push({ id: RemoteTunnelCommandIds.configure, label: localize('manage.machineName', 'Change Host Name'), description: this.connectionInfo?.hostName });
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:			description: localize('remoteTunnelAccess.machineName', "The name under which the remote tunnel access is registered. If not set, the host name is used."),
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:			patternErrorMessage: localize('remoteTunnelAccess.machineNameRegex', "The name can only consist of letters, numbers, underscore and minus."),
src/vs/workbench/contrib/localHistory/browser/localHistoryTimeline.ts:	readonly label = localize('localHistory', "Local History");
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:				name: localize('langStatus.name', "Editor Language Status"),
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:				ariaLabel: localize('langStatus.aria', "Editor Language Status: {0}", ariaLabels.join(', next: ')),
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:			action = new Action('pin', localize('pin', "Add to Status Bar"), Codicon.pin.classNames, true, () => {
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:			action = new Action('unpin', localize('unpin', "Remove from Status Bar"), Codicon.pinned.classNames, true, () => {
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:			return localize('aria.1', '{0}, {1}', status.label, status.detail);
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:			return localize('aria.2', '{0}', status.label);
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:			name: localize('name.pattern', '{0} (Language Status)', item.name),
src/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.ts:				value: localize('reset', 'Reset Language Status Interaction Counter'),
src/vs/workbench/contrib/sash/browser/sash.contribution.ts:				description: localize('sashSize', "Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.")
src/vs/workbench/contrib/sash/browser/sash.contribution.ts:				description: localize('sashHoverDelay', "Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.")
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:			? nls.localize('changes', "{0} of {1} changes", this.index + 1, this.model.changes.length)
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:			: nls.localize('change', "{0} of {1} change", this.index + 1, this.model.changes.length);
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:		this._actionbarWidget!.push(new Action('peekview.close', nls.localize('label.close', "Close"), Codicon.close.classNames, true, () => this.dispose()), { label: false, icon: true });
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:			label: nls.localize('show previous change', "Show Previous Change"),
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:			label: nls.localize('show next change', "Show Next Change"),
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:		title: nls.localize({ key: 'miGotoNextChange', comment: ['&& denotes a mnemonic'] }, "Next &&Change")
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:		title: nls.localize({ key: 'miGotoPreviousChange', comment: ['&& denotes a mnemonic'] }, "Previous &&Change")
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:			label: nls.localize('move to previous change', "Go to Previous Change"),
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:			label: nls.localize('move to next change', "Go to Next Change"),
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:}, nls.localize('editorGutterModifiedBackground', "Editor gutter background color for lines that are modified."));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:}, nls.localize('editorGutterAddedBackground', "Editor gutter background color for lines that are added."));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:}, nls.localize('editorGutterDeletedBackground', "Editor gutter background color for lines that are deleted."));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:}, nls.localize('minimapGutterModifiedBackground', "Minimap gutter background color for lines that are modified."));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:}, nls.localize('minimapGutterAddedBackground', "Minimap gutter background color for lines that are added."));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:}, nls.localize('minimapGutterDeletedBackground', "Minimap gutter background color for lines that are deleted."));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:const overviewRulerModifiedForeground = registerColor('editorOverviewRuler.modifiedForeground', { dark: transparent(editorGutterModifiedBackground, 0.6), light: transparent(editorGutterModifiedBackground, 0.6), hcDark: transparent(editorGutterModifiedBackground, 0.6), hcLight: transparent(editorGutterModifiedBackground, 0.6) }, nls.localize('overviewRulerModifiedForeground', 'Overview ruler marker color for modified content.'));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:const overviewRulerAddedForeground = registerColor('editorOverviewRuler.addedForeground', { dark: transparent(editorGutterAddedBackground, 0.6), light: transparent(editorGutterAddedBackground, 0.6), hcDark: transparent(editorGutterAddedBackground, 0.6), hcLight: transparent(editorGutterAddedBackground, 0.6) }, nls.localize('overviewRulerAddedForeground', 'Overview ruler marker color for added content.'));
src/vs/workbench/contrib/scm/browser/dirtydiffDecorator.ts:const overviewRulerDeletedForeground = registerColor('editorOverviewRuler.deletedForeground', { dark: transparent(editorGutterDeletedBackground, 0.6), light: transparent(editorGutterDeletedBackground, 0.6), hcDark: transparent(editorGutterDeletedBackground, 0.6), hcLight: transparent(editorGutterDeletedBackground, 0.6) }, nls.localize('overviewRulerDeletedForeground', 'Overview ruler marker color for deleted content.'));
src/vs/workbench/contrib/localHistory/browser/localHistory.ts:export const LOCAL_HISTORY_ICON_ENTRY = registerIcon('localHistory-icon', Codicon.circleOutline, localize('localHistoryIcon', "Icon for a local history entry in the timeline view."));
src/vs/workbench/contrib/localHistory/browser/localHistory.ts:export const LOCAL_HISTORY_ICON_RESTORE = registerIcon('localHistory-restore', Codicon.check, localize('localHistoryRestore', "Icon for restoring contents of a local history entry."));
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:	placeholder: localize('helpQuickAccessPlaceholder', "Type '{0}' to get help on the actions you can take from here.", HelpQuickAccessProvider.PREFIX),
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:	helpEntries: [{ description: localize('helpQuickAccess', "Show all Quick Access Providers") }]
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:	placeholder: localize('viewQuickAccessPlaceholder', "Type the name of a view, output channel or terminal to open."),
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:	helpEntries: [{ description: localize('viewQuickAccess', "Open View"), commandId: OpenViewPickerAction.ID }]
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:	placeholder: localize('commandsQuickAccessPlaceholder', "Type the name of a command to run."),
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:	helpEntries: [{ description: localize('commandsQuickAccess', "Show and Run Commands"), commandId: ShowAllCommandsAction.ID }]
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:		title: localize({ key: 'miCommandPalette', comment: ['&& denotes a mnemonic'] }, "&&Command Palette...")
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:		title: localize({ key: 'miShowAllCommands', comment: ['&& denotes a mnemonic'] }, "Show All Commands")
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:		title: localize({ key: 'miOpenView', comment: ['&& denotes a mnemonic'] }, "&&Open View...")
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:		title: localize({ key: 'miGotoLine', comment: ['&& denotes a mnemonic'] }, "Go to &&Line/Column...")
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:		title: localize('commandPalette', "Command Palette...")
src/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.ts:		title: localize('commandPalette', "Command Palette..."),
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:				label: localize('noViewResults', "No matching views"),
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:		addPaneComposites(ViewContainerLocation.Sidebar, localize('views', "Side Bar"));
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:		addPaneComposites(ViewContainerLocation.Panel, localize('panels', "Panel"));
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:		addPaneComposites(ViewContainerLocation.AuxiliaryBar, localize('secondary side bar', "Secondary Side Bar"));
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:				const label = localize('terminalTitle', "{0}: {1}", `${groupIndex + 1}.${terminalIndex + 1}`, terminal.title);
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:					containerLabel: localize('terminals', "Terminal"),
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:				containerLabel: localize('debugConsoles', "Debug Console"),
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:				containerLabel: localize('channels', "Output"),
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:			title: { value: localize('openView', "Open View"), original: 'Open View' },
src/vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts:			title: { value: localize('quickOpenView', "Quick Open View"), original: 'Quick Open View' },
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsHeaderForeground = registerColor('settings.headerForeground', { light: '#444444', dark: '#e7e7e7', hcDark: '#ffffff', hcLight: '#292929' }, localize('headerForeground', "The foreground color for a section header or active title."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:}, localize('modifiedItemForeground', "The color of the modified setting indicator."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsHeaderBorder = registerColor('settings.headerBorder', { dark: PANEL_BORDER, light: PANEL_BORDER, hcDark: PANEL_BORDER, hcLight: PANEL_BORDER }, localize('settingsHeaderBorder', "The color of the header container border."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsSashBorder = registerColor('settings.sashBorder', { dark: PANEL_BORDER, light: PANEL_BORDER, hcDark: PANEL_BORDER, hcLight: PANEL_BORDER }, localize('settingsSashBorder', "The color of the Settings editor splitview sash border."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsSelectBackground = registerColor(`settings.dropdownBackground`, { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, localize('settingsDropdownBackground', "Settings editor dropdown background."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsSelectForeground = registerColor('settings.dropdownForeground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, localize('settingsDropdownForeground', "Settings editor dropdown foreground."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsSelectBorder = registerColor('settings.dropdownBorder', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, localize('settingsDropdownBorder', "Settings editor dropdown border."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsSelectListBorder = registerColor('settings.dropdownListBorder', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, localize('settingsDropdownListBorder', "Settings editor dropdown list border. This surrounds the options and separates the options from the description."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsCheckboxBackground = registerColor('settings.checkboxBackground', { dark: checkboxBackground, light: checkboxBackground, hcDark: checkboxBackground, hcLight: checkboxBackground }, localize('settingsCheckboxBackground', "Settings editor checkbox background."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsCheckboxForeground = registerColor('settings.checkboxForeground', { dark: checkboxForeground, light: checkboxForeground, hcDark: checkboxForeground, hcLight: checkboxForeground }, localize('settingsCheckboxForeground', "Settings editor checkbox foreground."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsCheckboxBorder = registerColor('settings.checkboxBorder', { dark: checkboxBorder, light: checkboxBorder, hcDark: checkboxBorder, hcLight: checkboxBorder }, localize('settingsCheckboxBorder', "Settings editor checkbox border."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsTextInputBackground = registerColor('settings.textInputBackground', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, localize('textInputBoxBackground', "Settings editor text input box background."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsTextInputForeground = registerColor('settings.textInputForeground', { dark: inputForeground, light: inputForeground, hcDark: inputForeground, hcLight: inputForeground }, localize('textInputBoxForeground', "Settings editor text input box foreground."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsTextInputBorder = registerColor('settings.textInputBorder', { dark: inputBorder, light: inputBorder, hcDark: inputBorder, hcLight: inputBorder }, localize('textInputBoxBorder', "Settings editor text input box border."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsNumberInputBackground = registerColor('settings.numberInputBackground', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, localize('numberInputBoxBackground', "Settings editor number input box background."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsNumberInputForeground = registerColor('settings.numberInputForeground', { dark: inputForeground, light: inputForeground, hcDark: inputForeground, hcLight: inputForeground }, localize('numberInputBoxForeground', "Settings editor number input box foreground."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:export const settingsNumberInputBorder = registerColor('settings.numberInputBorder', { dark: inputBorder, light: inputBorder, hcDark: inputBorder, hcLight: inputBorder }, localize('numberInputBoxBorder', "Settings editor number input box border."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:}, localize('focusedRowBackground', "The background color of a settings row when focused."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:}, localize('settings.rowHoverBackground', "The background color of a settings row when hovered."));
src/vs/workbench/contrib/preferences/common/settingsEditorColorRegistry.ts:}, localize('settings.focusedRowBorder', "The color of the row's top and bottom border when the row is focused."));
src/vs/workbench/contrib/preferences/common/preferencesContribution.ts:					label: nls.localize('splitSettingsEditorLabel', "Split Settings Editor"),
src/vs/workbench/contrib/preferences/common/preferencesContribution.ts:			'description': nls.localize('enableNaturalLanguageSettingsSearch', "Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service."),
src/vs/workbench/contrib/preferences/common/preferencesContribution.ts:				nls.localize('settingsSearchTocBehavior.hide', "Hide the Table of Contents while searching."),
src/vs/workbench/contrib/preferences/common/preferencesContribution.ts:				nls.localize('settingsSearchTocBehavior.filter', "Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category."),
src/vs/workbench/contrib/preferences/common/preferencesContribution.ts:			'description': nls.localize('settingsSearchTocBehavior', "Controls the behavior of the settings editor Table of Contents while searching."),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:const LOCAL_HISTORY_CATEGORY = { value: localize('localHistory.category', "Local History"), original: 'Local History' };
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:export const COMPARE_WITH_FILE_LABEL = { value: localize('localHistory.compareWithFile', "Compare with File"), original: 'Compare with File' };
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.compareWithPrevious', "Compare with Previous"), original: 'Compare with Previous' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.selectForCompare', "Select for Compare"), original: 'Select for Compare' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.compareWithSelected', "Compare with Selected"), original: 'Compare with Selected' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.open', "Show Contents"), original: 'Show Contents' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:const RESTORE_CONTENTS_LABEL = { value: localize('localHistory.restore', "Restore Contents"), original: 'Restore Contents' };
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:const restoreSaveSource = SaveSourceRegistry.registerSource('localHistoryRestore.source', localize('localHistoryRestore.source', "File Restored"));
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			message: localize('confirmRestoreMessage', "Do you want to restore the contents of '{0}'?", basename(entry.workingCopy.resource)),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			detail: localize('confirmRestoreDetail', "Restoring will discard any unsaved changes."),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			primaryButton: localize({ key: 'restoreButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Restore"),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			await dialogService.show(Severity.Error, localize('unableToRestore', "Unable to restore '{0}'.", basename(entry.workingCopy.resource)), undefined, { detail: toErrorMessage(error) });
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.restoreViaPicker', "Find Entry to Restore"), original: 'Find Entry to Restore' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:		resourcePicker.placeholder = localize('restoreViaPicker.filePlaceholder', "Select the file to show local history for");
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:		entryPicker.placeholder = localize('restoreViaPicker.entryPlaceholder', "Select the local history entry to open");
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.rename', "Rename"), original: 'Rename' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			inputBox.title = localize('renameLocalHistoryEntryTitle', "Rename Local History Entry");
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			inputBox.placeholder = localize('renameLocalHistoryPlaceholder', "Enter the new name of the local history entry");
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.delete', "Delete"), original: 'Delete' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:				message: localize('confirmDeleteMessage', "Do you want to delete the local history entry of '{0}' from {1}?", entry.workingCopy.name, toLocalHistoryEntryDateLabel(entry.timestamp)),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:				detail: localize('confirmDeleteDetail', "This action is irreversible!"),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:				primaryButton: localize({ key: 'deleteButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete"),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.deleteAll', "Delete All"), original: 'Delete All' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			message: localize('confirmDeleteAllMessage', "Do you want to delete all entries of all files in local history?"),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			detail: localize('confirmDeleteAllDetail', "This action is irreversible!"),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			primaryButton: localize({ key: 'deleteAllButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete All"),
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:			title: { value: localize('localHistory.create', "Create Entry"), original: 'Create Entry' },
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:		inputBox.title = localize('createLocalHistoryEntryTitle', "Create Local History Entry");
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:		inputBox.placeholder = localize('createLocalHistoryPlaceholder', "Enter the new name of the local history entry for '{0}'", labelService.getUriBasenameLabel(resource));
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:		label: localize('localHistoryEditorLabel', "{0} ({1} • {2})", entry.workingCopy.name, SaveSourceRegistry.getSourceLabel(entry.source), toLocalHistoryEntryDateLabel(entry.timestamp))
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:		label = localize('localHistoryCompareToFileEditorLabel', "{0} ({1} • {2}) ↔ {3}", arg1.workingCopy.name, SaveSourceRegistry.getSourceLabel(arg1.source), toLocalHistoryEntryDateLabel(arg1.timestamp), arg1.workingCopy.name);
src/vs/workbench/contrib/localHistory/browser/localHistoryCommands.ts:		label = localize('localHistoryCompareToPreviousEditorLabel', "{0} ({1} • {2}) ↔ {3} ({4} • {5})", arg1.workingCopy.name, SaveSourceRegistry.getSourceLabel(arg1.source), toLocalHistoryEntryDateLabel(arg1.timestamp), modified.workingCopy.name, SaveSourceRegistry.getSourceLabel(modified.source), toLocalHistoryEntryDateLabel(modified.timestamp));
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:				label: localize('noCommandResults', "No matching commands"),
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:				tooltip: localize('configure keybinding', "Configure Keybinding"),
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:				label = localize('commandWithCategory', "{0}: {1}", category, label);
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:			title: { value: localize('showTriggerActions', "Show All Commands"), original: 'Show All Commands' },
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:			title: { value: localize('clearCommandHistory', "Clear Command History"), original: 'Clear Command History' },
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:				message: localize('confirmClearMessage', "Do you want to clear the history of recently used commands?"),
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:				detail: localize('confirmClearDetail', "This action is irreversible!"),
src/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.ts:				primaryButton: localize({ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Clear"),
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:		const name = nls.localize('status.workbench.keyboardLayout', "Keyboard Layout");
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:			const text = nls.localize('keyboardLayout', "Layout: {0}", layoutInfo.label);
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:				const text = nls.localize('keyboardLayout', "Layout: {0}", layoutInfo.label);
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:				const text = nls.localize('keyboardLayout', "Layout: {0}", layoutInfo.label);
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:	`// ${nls.localize('displayLanguage', 'Defines the keyboard layout used in VS Code in the browser environment.')}`,
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:	`// ${nls.localize('doc', 'Open VS Code and run "Developer: Inspect Key Mappings (JSON)" from Command Palette.')}`,
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:			title: { value: nls.localize('keyboard.chooseLayout', "Change Keyboard Layout"), original: 'Change Keyboard Layout' },
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:			picks.unshift({ type: 'separator', label: nls.localize('layoutPicks', "Keyboard Layouts ({0})", platform) });
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:		const configureKeyboardLayout: IQuickPickItem = { label: nls.localize('configureKeyboardLayout', "Configure Keyboard Layout") };
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:			label: nls.localize('autoDetect', "Auto Detect"),
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:		const pick = await quickInputService.pick(picks, { placeHolder: nls.localize('pickKeyboardLayout', "Select Keyboard Layout"), matchOnDescription: true });
src/vs/workbench/contrib/preferences/browser/keyboardLayoutPicker.ts:				throw new Error(nls.localize('fail.createSettings', "Unable to create '{0}' ({1}).", file.toString(), error));
src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts:const NLS_LAUNCH_MESSAGE = nls.localize('defineKeybinding.start', "Define Keybinding");
src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts:const NLS_KB_LAYOUT_ERROR_MESSAGE = nls.localize('defineKeybinding.kbLayoutErrorMessage', "You won't be able to produce this key combination under your current keyboard layout.");
src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts:					nls.localize({
src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts:					nls.localize({
src/vs/workbench/contrib/preferences/browser/tocTree.ts:		return localize({
src/vs/workbench/contrib/preferences/browser/tocTree.ts:			return localize('groupRowAriaLabel', "{0}, group", element.label);
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:		okButton.label = localize('okButton', "OK");
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:		cancelButton.label = localize('cancelButton', "Cancel");
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			? localize('listValueHintLabel', "List item `{0}`", value.data)
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			: localize('listSiblingHintLabel', "List item `{0}` with sibling `${1}`", value.data, sibling);
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			deleteActionTooltip: localize('removeItem', "Remove Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			editActionTooltip: localize('editItem', "Edit Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			addButtonLabel: localize('addItem', "Add Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			inputPlaceholder: localize('itemInputPlaceholder', "Item..."),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			siblingInputPlaceholder: localize('listSiblingInputPlaceholder', "Sibling..."),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			? localize('excludePatternHintLabel', "Exclude files matching `{0}`", value.data)
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			: localize('excludeSiblingHintLabel', "Exclude files matching `{0}`, only when a file matching `{1}` is present", value.data, sibling);
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			deleteActionTooltip: localize('removeExcludeItem', "Remove Exclude Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			editActionTooltip: localize('editExcludeItem', "Edit Exclude Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			addButtonLabel: localize('addPattern', "Add Pattern"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			inputPlaceholder: localize('excludePatternInputPlaceholder', "Exclude Pattern..."),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			siblingInputPlaceholder: localize('excludeSiblingInputPlaceholder', "When Pattern Is Present..."),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:		okButton.label = localize('okButton', "OK");
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:		cancelButton.label = localize('cancelButton', "Cancel");
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:				? localize('objectKeyInputPlaceholder', "Key")
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:				: localize('objectValueInputPlaceholder', "Value"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:		const accessibleDescription = localize('objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key.data, item.value.data);
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			deleteActionTooltip: localize('removeItem', "Remove Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			resetActionTooltip: localize('resetItem', "Reset Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			editActionTooltip: localize('editItem', "Edit Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			addButtonLabel: localize('addItem', "Add Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			keyHeaderText: localize('objectKeyHeader', "Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			valueHeaderText: localize('objectValueHeader', "Value"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:		const accessibleDescription = localize('objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key.data, item.value.data);
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			deleteActionTooltip: localize('removeItem', "Remove Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			resetActionTooltip: localize('resetItem', "Reset Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			editActionTooltip: localize('editItem', "Edit Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			addButtonLabel: localize('addItem', "Add Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			keyHeaderText: localize('objectKeyHeader', "Item"),
src/vs/workbench/contrib/preferences/browser/settingsWidgets.ts:			valueHeaderText: localize('objectValueHeader', "Value"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('modifiedSettingsSearch', "Modified"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('modifiedSettingsSearchTooltip', "Add or remove modified settings filter"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('extSettingsSearch', "Extension ID..."),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('extSettingsSearchTooltip', "Add extension ID filter"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('featureSettingsSearch', "Feature..."),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('featureSettingsSearchTooltip', "Add feature filter"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('tagSettingsSearch', "Tag..."),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('tagSettingsSearchTooltip', "Add tag filter"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('langSettingsSearch', "Language..."),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('langSettingsSearchTooltip', "Add language ID filter"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('onlineSettingsSearch', "Online services"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('onlineSettingsSearchTooltip', "Show settings for online services"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('policySettingsSearch', "Policy services"),
src/vs/workbench/contrib/preferences/browser/settingsSearchMenu.ts:				localize('policySettingsSearchTooltip', "Show settings for policy services"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:	label: localize('commonlyUsed', "Commonly Used"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:			label: localize('textEditor', "Text Editor"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('cursor', "Cursor"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('find', "Find"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('font', "Font"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('formatting', "Formatting"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('diffEditor', "Diff Editor"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('minimap', "Minimap"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('suggestions', "Suggestions"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('files', "Files"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:			label: localize('workbench', "Workbench"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('appearance', "Appearance"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('breadcrumbs', "Breadcrumbs"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('editorManagement', "Editor Management"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('settings', "Settings Editor"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('zenMode', "Zen Mode"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('screencastMode', "Screencast Mode"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:			label: localize('window', "Window"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('newWindow', "New Window"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:			label: localize('features', "Features"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('fileExplorer', "Explorer"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('search', "Search"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('debug', "Debug"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('testing', "Testing"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('scm', "Source Control"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('extensions', "Extensions"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('terminal', "Terminal"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('task', "Task"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('problems', "Problems"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('output', "Output"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('comments', "Comments"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('remote', "Remote"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('timeline', "Timeline"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('notebook', 'Notebook'),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('audioCues', 'Audio Cues'),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('mergeEditor', 'Merge Editor'),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:			label: localize('application', "Application"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('proxy', "Proxy"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('keyboard', "Keyboard"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('update', "Update"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('telemetry', "Telemetry"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('settingsSync', "Settings Sync"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:			label: localize('security', "Security"),
src/vs/workbench/contrib/preferences/browser/settingsLayout.ts:					label: localize('workspace', "Workspace"),
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:			label: localize('extensions', "Extensions"),
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:		modifiedIndicatorElement.title = localize('modified', "The setting has been configured in the current scope.");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:		let toggleMenuTitle = localize('settingsContextMenuTitle', "More Actions... ");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:		button.label = localize('newExtensionsButtonLabel', "Show matching extensions");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:	private static readonly EDIT_IN_JSON_LABEL = localize('editInSettingsJson', "Edit in settings.json");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:		const editLanguageSettingLabel = localize('editLanguageSettingLabel', "Edit settings for {0}", plainKey);
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:					decoratorRight: (((data === stringifiedDefaultValue) || (createdDefault && index === 0)) ? localize('settings.Default', "default") : '')
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:		modifiedIndicatorElement.title = localize('modified', "The setting has been configured in the current scope.");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:			new Action('settings.resetSetting', localize('resetSettingLabel', "Reset Setting"), undefined, undefined, async context => {
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:			const validationError = localize('validationError', "Validation Error.");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:			const validationError = localize('validationError', "Validation Error.");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:				const modifiedText = localize('settings.Modified', 'Modified.');
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:		return localize('settings', "Settings");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:	static readonly LABEL = localize('copySettingIdLabel', "Copy Setting ID");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:	static readonly LABEL = localize('copySettingAsJSONLabel', "Copy Setting as JSON");
src/vs/workbench/contrib/preferences/browser/settingsTree.ts:	static readonly LABEL = localize('stopSyncingSetting', "Sync This Setting");
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:const searchBoxLabel = localize('SearchSettings.AriaLabel', "Search settings");
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:		const clearInputAction = new Action(SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, localize('clearInput', "Clear Settings Search Input"), ThemeIcon.asClassName(preferencesClearInputIcon), false, async () => this.clearSearchResults());
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:		const filterAction = new Action(SETTINGS_EDITOR_COMMAND_SUGGEST_FILTERS, localize('filterInput', "Filter Settings"), ThemeIcon.asClassName(preferencesFilterIcon));
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:		this.noResultsMessage.innerText = localize('noResults', "No Settings Found");
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:		const clearFilterLink = DOM.append(this.clearFilterLinkContainer, $('a.pointer.prominent', { tabindex: 0 }, localize('clearSearchFilters', 'Clear Filters')));
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:				'aria-label': localize('settings', "Settings"),
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:					label: localize('settings require trust', "Workspace Trust"),
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:				case 0: resultString = localize('noResults', "No Settings Found"); break;
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:				case 1: resultString = localize('oneResult', "1 Setting Found"); break;
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:				default: resultString = localize('moreThanOneResult', "{0} Settings Found", count);
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:		this.turnOnSyncButton.label = localize('turnOnSyncButton', "Turn on Settings Sync");
src/vs/workbench/contrib/preferences/browser/settingsEditor2.ts:			label = localize('lastSyncedLabel', "Last synced: {0}", d);
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const settingsScopeDropDownIcon = registerIcon('settings-folder-dropdown', Codicon.triangleDown, localize('settingsScopeDropDownIcon', 'Icon for the folder dropdown button in the split JSON Settings editor.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const settingsMoreActionIcon = registerIcon('settings-more-action', Codicon.gear, localize('settingsMoreActionIcon', 'Icon for the \'more actions\' action in the Settings UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const keybindingsRecordKeysIcon = registerIcon('keybindings-record-keys', Codicon.recordKeys, localize('keybindingsRecordKeysIcon', 'Icon for the \'record keys\' action in the keybinding UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const keybindingsSortIcon = registerIcon('keybindings-sort', Codicon.sortPrecedence, localize('keybindingsSortIcon', 'Icon for the \'sort by precedence\' toggle in the keybinding UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const keybindingsEditIcon = registerIcon('keybindings-edit', Codicon.edit, localize('keybindingsEditIcon', 'Icon for the edit action in the keybinding UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const keybindingsAddIcon = registerIcon('keybindings-add', Codicon.add, localize('keybindingsAddIcon', 'Icon for the add action in the keybinding UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const settingsEditIcon = registerIcon('settings-edit', Codicon.edit, localize('settingsEditIcon', 'Icon for the edit action in the Settings UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const settingsRemoveIcon = registerIcon('settings-remove', Codicon.close, localize('settingsRemoveIcon', 'Icon for the remove action in the Settings UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const settingsDiscardIcon = registerIcon('settings-discard', Codicon.discard, localize('preferencesDiscardIcon', 'Icon for the discard action in the Settings UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const preferencesClearInputIcon = registerIcon('preferences-clear-input', Codicon.clearAll, localize('preferencesClearInput', 'Icon for clear input in the Settings and keybinding UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const preferencesFilterIcon = registerIcon('preferences-filter', Codicon.filter, localize('settingsFilter', 'Icon for the button that suggests filters for the Settings UI.'));
src/vs/workbench/contrib/preferences/browser/preferencesIcons.ts:export const preferencesOpenSettingsIcon = registerIcon('preferences-open-settings', Codicon.goToFile, localize('preferencesOpenSettings', 'Icon for open settings commands.'));
src/vs/workbench/browser/workbench.ts:					onUnexpectedError(new Error(localize('loaderErrorNative', "Failed to load a required file. Please restart the application to try again. Details: {0}", JSON.stringify(err))));
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.titleScrollbarSizing.default', "The default size."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.titleScrollbarSizing.large', "Increases the size, so it can be grabbed more easily with the mouse.")
src/vs/workbench/browser/workbench.contribution.ts:				description: localize('tabScrollbarHeight', "Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('showEditorTabs', "Controls whether opened editors should show in tabs or not."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('wrapTabs', "Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `#workbench.editor.showTabs#` is disabled."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'scrollToSwitchTabs' }, "Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `#workbench.editor.showTabs#` is disabled."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('highlightModifiedTabs', "Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `#workbench.editor.showTabs#` is disabled."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('decorations.badges', "Controls whether editor file decorations should use badges."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('decorations.colors', "Controls whether editor file decorations should use colors."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.labelFormat.default', "Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.labelFormat.short', "Show the name of the file followed by its directory name."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.labelFormat.medium', "Show the name of the file followed by its path relative to the workspace folder."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.labelFormat.long', "Show the name of the file followed by its absolute path.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize({
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.untitled.labelFormat.content', "The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.untitled.labelFormat.name', "The name of the untitled file is not derived from the contents of the file."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize({
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'untitledHint' }, "Controls if the untitled text hint should be visible in the editor.")
src/vs/workbench/browser/workbench.contribution.ts:				description: localize('workbench.editor.languageDetection', "Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown."),
src/vs/workbench/browser/workbench.contribution.ts:				description: localize('workbench.editor.historyBasedLanguageDetection', "Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs."),
src/vs/workbench/browser/workbench.contribution.ts:				description: localize('workbench.editor.preferBasedLanguageDetection', "When enabled, a language detection model that takes into account editor history will be given higher precedence."),
src/vs/workbench/browser/workbench.contribution.ts:				description: localize('workbench.editor.showLanguageDetectionHints', "When enabled, shows a status bar quick fix when the editor language doesn't match detected content language."),
src/vs/workbench/browser/workbench.contribution.ts:						description: localize('workbench.editor.showLanguageDetectionHints.editors', "Show in untitled text editors"),
src/vs/workbench/browser/workbench.contribution.ts:						description: localize('workbench.editor.showLanguageDetectionHints.notebook', "Show in notebook editors"),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorTabCloseButton' }, "Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `#workbench.editor.showTabs#` is disabled.")
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.tabSizing.fit', "Always keep tabs large enough to show the full editor label."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.tabSizing.shrink', "Allow tabs to get smaller when the available space is not enough to show all tabs at once.")
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'tabSizing' }, "Controls the sizing of editor tabs. This value is ignored when `#workbench.editor.showTabs#` is disabled.")
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.pinnedTabSizing.normal', "A pinned tab inherits the look of non pinned tabs."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.pinnedTabSizing.compact', "A pinned tab will show in a compact form with only icon or first letter of the editor name."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.pinnedTabSizing.shrink', "A pinned tab shrinks to a compact fixed size showing parts of the editor name.")
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'pinnedTabSizing' }, "Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `#workbench.editor.showTabs#` is disabled.")
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.splitSizingDistribute', "Splits all the editor groups to equal parts."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.splitSizingSplit', "Splits the active editor group to equal parts.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'splitSizing' }, "Controls the sizing of editor groups when splitting them.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('splitOnDragAndDrop', "Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('focusRecentEditorAfterClose', "Controls whether tabs are closed in most recently used order or from left to right."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('showIcons', "Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('enablePreview', "Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (e.g. via double click or editing), and show file names in italics."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('enablePreviewFromQuickOpen', "Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `#workbench.editor.enablePreview#` is disabled."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('enablePreviewFromCodeNavigation', "Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `#workbench.editor.enablePreview#` is disabled."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('closeOnFileDelete', "Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorOpenPositioning' }, "Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.")
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('sideBySideDirection', "Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('closeEmptyGroups', "Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('revealIfOpen', "Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('mouseBackForwardToNavigate', "Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('navigationScope', "Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.navigationScopeDefault', "Navigate across all opened editors and editor groups."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.navigationScopeEditorGroup', "Navigate only in editors of the active editor group."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.navigationScopeEditor', "Navigate only in the active editor.")
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('restoreViewState', "Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the {0} setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.", '`#workbench.editor.sharedViewState#`'),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('sharedViewState', "Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('splitInGroupLayout', "Controls the layout for when an editor is split in an editor group to be either vertical or horizontal."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.splitInGroupLayoutVertical', "Editors are positioned from top to bottom."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.editor.splitInGroupLayoutHorizontal', "Editors are positioned from left to right.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('centeredLayoutAutoResize', "Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('limitEditorsEnablement', "Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.")
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('limitEditorsMaximum', "Controls the maximum number of opened editors. Use the {0} setting to control this limit per editor group or across all groups.", '`#workbench.editor.limit.perEditorGroup#`')
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('limitEditorsExcludeDirty', "Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('perEditorGroup', "Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('localHistoryEnabled', "Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('localHistoryMaxFileSize', "Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('localHistoryMaxFileEntries', "Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('exclude', "Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files from the local file history. Changing this setting has no effect on existing local file history entries."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('mergeWindow', "Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('commandHistory', "Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('preserveInput', "Controls whether the last typed input to the command palette should be restored when opening it the next time."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('closeOnFocusLost', "Controls whether Quick Open should close automatically once it loses focus."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('workbench.quickOpen.preserveInput', "Controls whether the last typed input to Quick Open should be restored when opening it the next time."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('openDefaultSettings', "Controls whether opening settings also opens an editor showing all default settings."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('useSplitJSON', "Controls whether to use the split JSON editor when editing settings as JSON."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('openDefaultKeybindings', "Controls whether opening keybinding settings also opens an editor showing all default keybindings."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('sideBarLocation', "Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('panelDefaultLocation', "Controls the default location of the panel (terminal, debug console, output, problems) in a new workspace. It can either show at the bottom, right, or left of the editor area."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('panelOpensMaximized', "Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.panel.opensMaximized.always', "Always maximize the panel when opening it."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.panel.opensMaximized.never', "Never maximize the panel when opening it. The panel will open un-maximized."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.panel.opensMaximized.preserve', "Open the panel to the state that it was in, before it was closed.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('statusBarVisibility', "Controls the visibility of the status bar at the bottom of the workbench.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('activityBarVisibility', "Controls the visibility of the activity bar in the workbench.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('activityBarIconClickBehavior', "Controls the behavior of clicking an activity bar icon in the workbench."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.activityBar.iconClickBehavior.toggle', "Hide the side bar if the clicked item is already visible."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.activityBar.iconClickBehavior.focus', "Focus side bar if the clicked item is already visible.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('viewVisibility', "Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.")
src/vs/workbench/browser/workbench.contribution.ts:					localize('fontAliasing', "Controls font aliasing method in the workbench."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.fontAliasing.default', "Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.fontAliasing.antialiased', "Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.fontAliasing.none', "Disables font smoothing. Text will show with jagged sharp edges."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.fontAliasing.auto', "Applies `default` or `antialiased` automatically based on the DPI of displays.")
src/vs/workbench/browser/workbench.contribution.ts:					localize('settings.editor.ui', "Use the settings UI editor."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('settings.editor.json', "Use the JSON file editor."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('settings.editor.desc', "Determines which settings editor to use by default."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('workbench.hover.delay', "Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change."),
src/vs/workbench/browser/workbench.contribution.ts:				description: localize('workbench.reduceMotion', "Controls whether the workbench should render with fewer animations."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.reduceMotion.on', "Always render with reduced motion."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.reduceMotion.off', "Do not render with reduced motion"),
src/vs/workbench/browser/workbench.contribution.ts:					localize('workbench.reduceMotion.auto', "Render with reduced motion based on OS configuration."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('layoutControlEnabledWeb', "Controls whether the layout control in the title bar is shown.") :
src/vs/workbench/browser/workbench.contribution.ts:					localize({ key: 'layoutControlEnabled', comment: ['{0} is a placeholder for a setting identifier.'] }, "Controls whether the layout control is shown in the custom title bar. This setting only has an effect when {0} is set to {1}.", '`#window.titleBarStyle#`', '`custom`')
src/vs/workbench/browser/workbench.contribution.ts:					localize('layoutcontrol.type.menu', "Shows a single button with a dropdown of layout options."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('layoutcontrol.type.toggles', "Shows several buttons for toggling the visibility of the panels and side bar."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('layoutcontrol.type.both', "Shows both the dropdown and toggle buttons."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('layoutControlType', "Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles."),
src/vs/workbench/browser/workbench.contribution.ts:	let windowTitleDescription = localize('windowTitle', "Controls the window title based on the active editor. Variables are substituted based on the context:");
src/vs/workbench/browser/workbench.contribution.ts:		localize('activeEditorShort', "`${activeEditorShort}`: the file name (e.g. myFile.txt)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('activeEditorMedium', "`${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('activeEditorLong', "`${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('activeFolderShort', "`${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('activeFolderMedium', "`${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('activeFolderLong', "`${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('folderName', "`${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('folderPath', "`${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('rootName', "`${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('rootPath', "`${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace)."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('appName', "`${appName}`: e.g. VS Code."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('remoteName', "`${remoteName}`: e.g. SSH"),
src/vs/workbench/browser/workbench.contribution.ts:		localize('dirty', "`${dirty}`: an indicator for when the active editor has unsaved changes."),
src/vs/workbench/browser/workbench.contribution.ts:		localize('separator', "`${separator}`: a conditional separator (\" - \") that only shows when surrounded by variables with values or static text.")
src/vs/workbench/browser/workbench.contribution.ts:		'title': localize('windowConfigurationTitle', "Window"),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize("window.titleSeparator", "Separator used by {0}.", '`#window.title#`')
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.commandCenterWeb', "Show command launcher together with the window title.") :
src/vs/workbench/browser/workbench.contribution.ts:					localize({ key: 'window.commandCenter', comment: ['{0} is a placeholder for a setting identifier.'] }, "Show command launcher together with the window title. This setting only has an effect when {0} is set to {1}.", '`#window.titleBarStyle#`', '`custom`')
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.menuBarVisibility.classic', "Menu is displayed at the top of the window and only hidden in full screen mode."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.menuBarVisibility.visible', "Menu is always visible at the top of the window even in full screen mode."),
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.menuBarVisibility.toggle.mac', "Menu is hidden but can be displayed at the top of the window by executing the `Focus Application Menu` command.") :
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.menuBarVisibility.toggle', "Menu is hidden but can be displayed at the top of the window via the Alt key."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.menuBarVisibility.hidden', "Menu is always hidden."),
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.menuBarVisibility.compact.web', "Menu is displayed as a compact button in the side bar.") :
src/vs/workbench/browser/workbench.contribution.ts:						localize({ key: 'window.menuBarVisibility.compact', comment: ['{0} is a placeholder for a setting identifier.'] }, "Menu is displayed as a compact button in the side bar. This value is ignored when {0} is {1}.", '`#window.titleBarStyle#`', '`native`')
src/vs/workbench/browser/workbench.contribution.ts:					localize('menuBarVisibility.mac', "Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and executing `Focus Application Menu` will show it. A setting of 'compact' will move the menu into the side bar.") :
src/vs/workbench/browser/workbench.contribution.ts:					localize('menuBarVisibility', "Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of 'compact' will move the menu into the side bar."),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('enableMenuBarMnemonics', "Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead."),
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('customMenuBarAltFocus', "Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.openFilesInNewWindow.on', "Files will open in a new window."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.openFilesInNewWindow.off', "Files will open in the window with the files' folder open or the last active window."),
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.openFilesInNewWindow.defaultMac', "Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.") :
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.openFilesInNewWindow.default', "Files will open in a new window unless picked from within the application (e.g. via the File menu).")
src/vs/workbench/browser/workbench.contribution.ts:						localize('openFilesInNewWindowMac', "Controls whether files should open in a new window when using a command line or file dialog.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).") :
src/vs/workbench/browser/workbench.contribution.ts:						localize('openFilesInNewWindow', "Controls whether files should open in a new window when using a command line or file dialog.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).")
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.openFoldersInNewWindow.on', "Folders will open in a new window."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.openFoldersInNewWindow.off', "Folders will replace the last active window."),
src/vs/workbench/browser/workbench.contribution.ts:					localize('window.openFoldersInNewWindow.default', "Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).")
src/vs/workbench/browser/workbench.contribution.ts:				'markdownDescription': localize('openFoldersInNewWindow', "Controls whether folders should open in a new window or replace the last active window.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).")
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.confirmBeforeClose.always.web', "Always try to ask for confirmation. Note that browsers may still decide to close a tab or window without confirmation.") :
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.confirmBeforeClose.always', "Always ask for confirmation."),
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.confirmBeforeClose.keyboardOnly.web', "Only ask for confirmation if a keybinding was used to close the window. Note that detection may not be possible in some cases.") :
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.confirmBeforeClose.keyboardOnly', "Only ask for confirmation if a keybinding was used."),
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.confirmBeforeClose.never.web', "Never explicitly ask for confirmation unless data loss is imminent.") :
src/vs/workbench/browser/workbench.contribution.ts:						localize('window.confirmBeforeClose.never', "Never explicitly ask for confirmation.")
src/vs/workbench/browser/workbench.contribution.ts:					localize('confirmBeforeCloseWeb', "Controls whether to show a confirmation dialog before closing the browser tab or window. Note that even if enabled, browsers may still decide to close a tab or window without confirmation and that this setting is only a hint that may not work in all cases.") :
src/vs/workbench/browser/workbench.contribution.ts:					localize('confirmBeforeClose', "Controls whether to show a confirmation dialog before closing the window or quitting the application."),
src/vs/workbench/browser/workbench.contribution.ts:		'title': localize('zenModeConfigurationTitle', "Zen Mode"),
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.fullScreen', "Controls whether turning on Zen Mode also puts the workbench into full screen mode.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.centerLayout', "Controls whether turning on Zen Mode also centers the layout.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.hideTabs', "Controls whether turning on Zen Mode also hides workbench tabs.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.hideStatusBar', "Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.hideActivityBar', "Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.hideLineNumbers', "Controls whether turning on Zen Mode also hides the editor line numbers.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.restore', "Controls whether a window should restore to zen mode if it was exited in zen mode.")
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize('zenMode.silentNotifications', "Controls whether notifications do not disturb mode should be enabled while in zen mode. If true, only error notifications will pop out.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:			editPreferencesWidget.show(line, nls.localize('editTtile', "Edit"), settings);
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:				label: settingInOtherModel ? nls.localize('replaceDefaultValue', "Replace in Settings") : nls.localize('copyDefaultValue', "Copy to Settings"),
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:							message: nls.localize('unknown configuration setting', "Unknown Configuration Setting")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:			message: nls.localize('unsupportedPolicySetting', "This setting cannot be applied because it is configured in the system policy.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:					message: nls.localize('defaultProfileSettingWhileNonDefaultActive', "This setting cannot be applied while a non-default profile is active. It will be applied when the default profile is active.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:				message: nls.localize('unsupportedRemoteMachineSetting', "This setting cannot be applied in this window. It will be applied when you open a local window.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:				message: nls.localize('unsupportedWindowSetting', "This setting cannot be applied in this workspace. It will be applied when you open the containing workspace folder directly.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:			message: nls.localize('unsupportedApplicationSetting', "This setting has an application scope and can be set only in the user settings file.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:			message: nls.localize('unsupportedMachineSetting', "This setting can only be applied in user settings in local window or in remote settings in remote window.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:			message: nls.localize('untrustedSetting', "This setting can only be applied in a trusted workspace.")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:			title: nls.localize('manage workspace trust', "Manage Workspace Trust"),
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:				title: nls.localize('manage workspace trust', "Manage Workspace Trust")
src/vs/workbench/contrib/preferences/browser/preferencesRenderers.ts:								message: nls.localize('unsupportedProperty', "Unsupported Property")
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		this.recordKeysAction = new Action(KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, localize('recordKeysLabel', "Record Keys"), ThemeIcon.asClassName(keybindingsRecordKeysIcon));
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		this.sortByPrecedenceAction = new Action(KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, localize('sortByPrecedeneLabel', "Sort by Precedence (Highest first)"), ThemeIcon.asClassName(keybindingsSortIcon));
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		const fullTextSearchPlaceholder = localize('SearchKeybindings.FullTextSearchPlaceholder', "Type to search in keybindings");
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		const keybindingsSearchPlaceholder = localize('SearchKeybindings.KeybindingsSearchPlaceholder', "Recording Keys. Press Escape to exit");
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		const clearInputAction = new Action(KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, localize('clearInput', "Clear Keybindings Search Input"), ThemeIcon.asClassName(preferencesClearInputIcon), false, async () => this.clearSearchResults());
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		recordingBadge.textContent = localize('recording', "Recording Keys");
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:					label: localize('command', "Command"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:					label: localize('keybinding', "Keybinding"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:					label: localize('when', "When"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:					label: localize('source', "Source"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			return localize('show sorted keybindings', "Showing {0} Keybindings in precedence order", keybindingsEntries.length);
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			return localize('show keybindings', "Showing {0} Keybindings in alphabetical order", keybindingsEntries.length);
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: keybindingItemEntry.keybindingItem.keybinding ? localize('changeLabel', "Change Keybinding...") : localize('addLabel', "Add Keybinding..."),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('addLabel', "Add Keybinding..."),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('editWhen', "Change When Expression"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('removeLabel', "Remove Keybinding"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('resetLabel', "Reset Keybinding"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('showSameKeybindings', "Show Same Keybindings"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('copyLabel', "Copy"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('copyCommandLabel', "Copy Command ID"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			label: localize('copyCommandTitleLabel', "Copy Command Title"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		this.notificationService.error(typeof error === 'string' ? error : localize('error', "Error '{0}' while editing the keybinding. Please open 'keybindings.json' file and check for errors.", `${error}`));
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			tooltip: keybinding ? localize('editKeybindingLabelWithKey', "Change Keybinding {0}", `(${keybinding.getLabel()})`) : localize('editKeybindingLabel', "Change Keybinding"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			tooltip: keybinding ? localize('addKeybindingLabelWithKey', "Add Keybinding {0}", `(${keybinding.getLabel()})`) : localize('addKeybindingLabel', "Add Keybinding"),
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		templateData.commandColumn.title = keybindingItem.commandLabel ? localize('title', "{0} ({1})", keybindingItem.commandLabel, keybindingItem.command) : keybindingItem.command;
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:			ariaLabel: localize('whenContextInputAriaLabel', "Type when context. Press Enter to confirm or Escape to cancel.")
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		return localize('keybindingsLabel', "Keybindings");
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		ariaLabel += ', ' + (keybindingItemEntry.keybindingItem.keybinding?.getAriaLabel() || localize('noKeybinding', "No Keybinding assigned."));
src/vs/workbench/contrib/preferences/browser/keybindingsEditor.ts:		ariaLabel += ', ' + keybindingItemEntry.keybindingItem.when ? keybindingItemEntry.keybindingItem.when : localize('noWhen', "No when context.");
src/vs/workbench/contrib/preferences/browser/preferencesActions.ts:	static readonly LABEL = { value: nls.localize('configureLanguageBasedSettings', "Configure Language Specific Settings..."), original: 'Configure Language Specific Settings...' };
src/vs/workbench/contrib/preferences/browser/preferencesActions.ts:			const description: string = nls.localize('languageDescriptionConfigured', "({0})", languageId);
src/vs/workbench/contrib/preferences/browser/preferencesActions.ts:		await this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', "Select Language") })
src/vs/workbench/contrib/preferences/browser/keybindingWidgets.ts:		const message = nls.localize('defineKeybinding.initial', "Press desired key combination and then press ENTER.");
src/vs/workbench/contrib/preferences/browser/keybindingWidgets.ts:			const text = numberOfExisting === 1 ? nls.localize('defineKeybinding.oneExists', "1 existing command has this keybinding", numberOfExisting) : nls.localize('defineKeybinding.existing', "{0} existing commands have this keybinding", numberOfExisting);
src/vs/workbench/contrib/preferences/browser/keybindingWidgets.ts:			this._outputNode.appendChild(document.createTextNode(nls.localize('defineKeybinding.chordsTo', "chord to")));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		workspaceTrustLabel.text = '$(warning) ' + localize('workspaceUntrustedLabel', "Setting value not applied");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		const contentFallback = localize('trustLabel', "The setting value can only be applied in a trusted workspace.");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		const contentMarkdownString = contentFallback + ` [${localize('manageWorkspaceTrust', "Manage Workspace Trust")}](manage-workspace-trust).`;
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		syncIgnoredLabel.text = localize('extensionSyncIgnoredLabel', 'Not synced');
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		const syncIgnoredHoverContent = localize('syncIgnoredTitle', "This setting is ignored during sync");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		defaultOverrideLabel.text = localize('defaultOverriddenLabel', "Default value changed");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			localize('user', "User") : scope === 'workspace' ?
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:				localize('workspace', "Workspace") : localize('remote', "Remote");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			this.scopeOverridesIndicator.label.text = '$(warning) ' + localize('policyLabelText', "Setting value not applied");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			const contentFallback = localize('policyDescription', "This setting is managed by your organization and its applied value cannot be changed.");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			const contentMarkdownString = contentFallback + ` [${localize('policyFilterLink', "View policy settings")}](policy-settings).`;
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			const applicationSettingText = localize('applicationSetting', "Applies to all profiles");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			const content = localize('applicationSettingDescription', "The setting is not specific to the current profile, and will retain its value when switching profiles.");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:					localize('alsoConfiguredIn', "Also modified in") :
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:					localize('configuredIn', "Modified in");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:					localize('alsoConfiguredElsewhere', "Also modified elsewhere") :
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:					localize('configuredElsewhere', "Modified elsewhere");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:						localize('alsoModifiedInScopes', "The setting has also been modified in the following scopes:") :
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:						localize('modifiedInScopes', "The setting has been modified in the following scopes:");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:					const prefaceText = localize('hasDefaultOverridesForLanguages', "The following languages have default overrides:");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			const defaultOverrideHoverContent = localize('defaultOverriddenDetails', "Default setting value overridden by {0}", sourceToDisplay);
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		localize('user', "User") : scope === 'workspace' ?
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			localize('workspace', "Workspace") : localize('remote', "Remote");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		return localize('modifiedInScopeForLanguage', "The {0} scope for {1}", localizedScope, languageService.getLanguageName(language));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		localize('user', "User") : scope === 'workspace' ?
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			localize('workspace', "Workspace") : localize('remote', "Remote");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		return localize('modifiedInScopeForLanguageMidSentence', "the {0} scope for {1}", localizedScope.toLowerCase(), languageService.getLanguageName(language));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		ariaLabelSections.push(localize('workspaceUntrustedAriaLabel', "Workspace untrusted; setting value not applied"));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		ariaLabelSections.push(localize('policyDescriptionAccessible', "Managed by organization policy; setting value not applied"));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		ariaLabelSections.push(localize('applicationSettingDescriptionAccessible', "Setting value retained when switching profiles"));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			localize('alsoConfiguredIn', "Also modified in") :
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:			localize('configuredIn', "Modified in");
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		ariaLabelSections.push(localize('syncIgnoredAriaLabel', "Setting ignored during sync"));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		ariaLabelSections.push(localize('defaultOverriddenDetailsAriaLabel', "{0} overrides the default value", sourceToDisplay));
src/vs/workbench/contrib/preferences/browser/settingsEditorSettingIndicators.ts:		const otherLanguageOverridesText = localize('defaultOverriddenLanguagesList', "Language-specific default values exist for {0}", otherLanguageOverridesList);
src/vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts:				message: localize('prof.message', "Successfully created profiles."),
src/vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts:				detail: localize('prof.detail', "Please create an issue and manually attach the following files:\n{0}", profileFiles),
src/vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts:				primaryButton: localize('prof.restartAndFileIssue', "&&Create Issue and Restart"),
src/vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts:				secondaryButton: localize('prof.restart', "&&Restart")
src/vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts:							message: localize('prof.thanks', "Thanks for helping us."),
src/vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts:							detail: localize('prof.detail.restart', "A final restart is required to continue to use '{0}'. Again, thank you for your contribution.", this._productService.nameLong),
src/vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts:							primaryButton: localize('prof.restart.button', "&&Restart"),
src/vs/workbench/contrib/performance/browser/perfviewEditor.ts:			localize('name', "Startup Performance"),
src/vs/workbench/contrib/performance/browser/performance.contribution.ts:			title: { value: localize('show.label', "Startup Performance"), original: 'Startup Performance' },
src/vs/workbench/contrib/performance/browser/performance.contribution.ts:			title: { value: localize('cycles', "Print Service Cycles"), original: 'Print Service Cycles' },
src/vs/workbench/contrib/performance/browser/performance.contribution.ts:			title: { value: localize('insta.trace', "Print Service Traces"), original: 'Print Service Traces' },
src/vs/workbench/contrib/performance/browser/performance.contribution.ts:			title: { value: localize('emitter', "Print Emitter Profiles"), original: 'Print Emitter Profiles' },
src/vs/workbench/contrib/output/browser/outputView.ts:		return this.instantiationService.createInstance(TextResourceEditorInput, channel.uri, nls.localize('output model title', "{0} - Output", channel.label), nls.localize('channel', "Output channel for '{0}'", channel.label), undefined, undefined);
src/vs/workbench/contrib/output/browser/outputView.ts:		return nls.localize('output', "Output");
src/vs/workbench/contrib/output/browser/outputView.ts:		return this.input ? this.input.getAriaLabel() : nls.localize('outputViewAriaLabel', "Output panel");
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:		nls.localize('settingsEditor2', "Settings Editor 2")
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:		nls.localize('keybindingsEditor', "Keybindings Editor")
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:const OPEN_USER_SETTINGS_UI_TITLE = { value: nls.localize('openSettings2', "Open Settings (UI)"), original: 'Open Settings (UI)' };
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:const OPEN_USER_SETTINGS_JSON_TITLE = { value: nls.localize('openUserSettingsJson', "Open User Settings (JSON)"), original: 'Open User Settings (JSON)' };
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:const OPEN_CURRENT_PROFILE_SETTINGS_JSON_TITLE = { value: nls.localize('openCurrentProfileSettingsJson', "Open Current Profile Settings (JSON)"), original: 'Open Current Profile Settings (JSON)' };
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:const category = { value: nls.localize('preferences', "Preferences"), original: 'Preferences' };
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize('settings', "Settings"),
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:				title: nls.localize({ key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] }, "&&Settings")
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openSettings2', "Open Settings (UI)"), original: 'Open Settings (UI)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openGlobalSettings', "Open User Settings"), original: 'Open User Settings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openRawDefaultSettings', "Open Default Settings (JSON)"), original: 'Open Default Settings (JSON)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openSettingsJson', "Open Settings (JSON)"), original: 'Open Settings (JSON)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:						title: { value: nls.localize('openSettingsJson', "Open Settings (JSON)"), original: 'Open Settings (JSON)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openWorkspaceSettings', "Open Workspace Settings"), original: 'Open Workspace Settings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openAccessibilitySettings', "Open Accessibility Settings"), original: 'Open Accessibility Settings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openWorkspaceSettingsFile', "Open Workspace Settings (JSON)"), original: 'Open Workspace Settings (JSON)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openFolderSettings', "Open Folder Settings"), original: 'Open Folder Settings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openFolderSettingsFile', "Open Folder Settings (JSON)"), original: 'Open Folder Settings (JSON)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openFolderSettings', "Open Folder Settings"), original: 'Open Folder Settings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize({ key: 'miOpenOnlineSettings', comment: ['&& denotes a mnemonic'] }, "&&Online Services Settings"),
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('showTelemtrySettings', "Telemetry Settings"), original: 'Telemetry Settings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('filterUntrusted', "Show untrusted workspace settings"), original: 'Show untrusted workspace settings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:				const label = nls.localize('openRemoteSettings', "Open Remote Settings ({0})", hostLabel);
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:				const jsonLabel = nls.localize('openRemoteSettingsJSON', "Open Remote Settings (JSON) ({0})", hostLabel);
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('settings.focusSearch', "Focus Settings Search"), original: 'Focus Settings Search' }
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('settings.clearResults', "Clear Settings Search Results"), original: 'Clear Settings Search Results' }
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize('settings.focusFile', "Focus settings file")
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize('settings.focusFile', "Focus settings file")
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize('settings.focusSettingsList', "Focus settings list")
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('settings.focusSettingsTOC', "Focus Settings Table of Contents"), original: 'Focus Settings Table of Contents' }
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize('settings.focusSettingControl', "Focus Setting Control")
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('settings.showContextMenu', "Show Setting Context Menu"), original: 'Show Setting Context Menu' }
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('settings.focusLevelUp', "Move Focus Up One Level"), original: 'Move Focus Up One Level' }
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:		const category = { value: nls.localize('preferences', "Preferences"), original: 'Preferences' };
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:						title: { value: nls.localize('openGlobalKeybindings', "Open Keyboard Shortcuts"), original: 'Open Keyboard Shortcuts' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:				title: { value: nls.localize('Keyboard Shortcuts', "Keyboard Shortcuts"), original: 'Keyboard Shortcuts' }
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:				title: { value: nls.localize('Keyboard Shortcuts', "Keyboard Shortcuts"), original: 'Keyboard Shortcuts' }
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openDefaultKeybindingsFile', "Open Default Keyboard Shortcuts (JSON)"), original: 'Open Default Keyboard Shortcuts (JSON)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('openGlobalKeybindingsFile', "Open Keyboard Shortcuts (JSON)"), original: 'Open Keyboard Shortcuts (JSON)' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('showDefaultKeybindings', "Show Default Keybindings"), original: 'Show Default Keybindings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('showExtensionKeybindings', "Show Extension Keybindings"), original: 'Show Extension Keybindings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: { value: nls.localize('showUserKeybindings', "Show User Keybindings"), original: 'Show User Keybindings' },
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize('clear', "Clear Search Results"),
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:					title: nls.localize('clearHistory', "Clear Keyboard Shortcuts Search History"),
src/vs/workbench/contrib/preferences/browser/preferences.contribution.ts:	title: nls.localize({ key: 'miPreferences', comment: ['&& denotes a mnemonic'] }, "&&Preferences"),
src/vs/workbench/browser/window.ts:				localize('shutdownError', "An unexpected error occurred that requires a reload of this page."),
src/vs/workbench/browser/window.ts:					localize('reload', "Reload")
src/vs/workbench/browser/window.ts:					detail: localize('shutdownErrorDetail', "The workbench was unexpectedly disposed while running.")
src/vs/workbench/browser/window.ts:								localize('unableToOpenExternal', "The browser interrupted the opening of a new tab or window. Press 'Open' to open it anyway."),
src/vs/workbench/browser/window.ts:									localize('open', "Open"),
src/vs/workbench/browser/window.ts:									localize('learnMore', "Learn More"),
src/vs/workbench/browser/window.ts:									localize('cancel', "Cancel")
src/vs/workbench/browser/window.ts:						let detail = localize(
src/vs/workbench/browser/window.ts:							localize('openExternalDialogButtonClose.v2', "Close Tab"),
src/vs/workbench/browser/window.ts:							localize('openExternalDialogButtonRetry.v2', "Try Again"),
src/vs/workbench/browser/window.ts:							localize('openExternalDialogButtonInstall.v3', "Install"),
src/vs/workbench/browser/window.ts:							localize('openExternalDialogButtonCancel', "Cancel")
src/vs/workbench/browser/window.ts:							detail = localize(
src/vs/workbench/browser/window.ts:							localize('openExternalDialogTitle', "All done. You can close this tab now."),
src/vs/workbench/contrib/output/browser/logViewer.ts:		return localize('logViewerAriaLabel', "Log viewer");
src/vs/workbench/contrib/outline/browser/outlineActions.ts:			title: localize('collapse', "Collapse All"),
src/vs/workbench/contrib/outline/browser/outlineActions.ts:			title: localize('expand', "Expand All"),
src/vs/workbench/contrib/outline/browser/outlineActions.ts:			title: localize('followCur', "Follow Cursor"),
src/vs/workbench/contrib/outline/browser/outlineActions.ts:			title: localize('filterOnType', "Filter on Type"),
src/vs/workbench/contrib/outline/browser/outlineActions.ts:			title: localize('sortByPosition', "Sort By: Position"),
src/vs/workbench/contrib/outline/browser/outlineActions.ts:			title: localize('sortByName', "Sort By: Name"),
src/vs/workbench/contrib/outline/browser/outlineActions.ts:			title: localize('sortByKind', "Sort By: Category"),
src/vs/workbench/contrib/performance/electron-sandbox/performance.contribution.ts:			markdownDescription: localize('experimental.rendererProfiling', "When enabled slow renderers are automatically profiled")
src/vs/workbench/contrib/outline/browser/outlinePane.ts:			return this._showMessage(localize('no-editor', "The active editor cannot provide outline information."));
src/vs/workbench/contrib/outline/browser/outlinePane.ts:				this._showMessage(localize('loading', "Loading document symbols for '{0}'...", basename(resource)));
src/vs/workbench/contrib/outline/browser/outlinePane.ts:				this._showMessage(localize('no-symbols', "No symbols found in document '{0}'", basename(resource)));
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:const outlineViewIcon = registerIcon('outline-view-icon', Codicon.symbolClass, localize('outlineViewIcon', 'View icon of the outline view.'));
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:	name: localize('name', "Outline"),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:	'title': localize('outlineConfigurationTitle', "Outline"),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			'description': localize('outline.showIcons', "Render outline elements with icons."),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			'description': localize('outline.initialState', "Controls whether outline items are collapsed or expanded."),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:				localize('outline.initialState.collapsed', "Collapse all items."),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:				localize('outline.initialState.expanded', "Expand all items.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			'description': localize('outline.showProblem', "Show errors and warnings on outline elements."),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			'description': localize('outline.problem.colors', "Use colors for errors and warnings on outline elements."),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			'description': localize('outline.problems.badges', "Use badges for errors and warnings on outline elements."),
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.file', "When enabled outline shows `file`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.module', "When enabled outline shows `module`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.namespace', "When enabled outline shows `namespace`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.package', "When enabled outline shows `package`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.class', "When enabled outline shows `class`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.method', "When enabled outline shows `method`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.property', "When enabled outline shows `property`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.field', "When enabled outline shows `field`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.constructor', "When enabled outline shows `constructor`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.enum', "When enabled outline shows `enum`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.interface', "When enabled outline shows `interface`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.function', "When enabled outline shows `function`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.variable', "When enabled outline shows `variable`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.constant', "When enabled outline shows `constant`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.string', "When enabled outline shows `string`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.number', "When enabled outline shows `number`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.boolean', "When enabled outline shows `boolean`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.array', "When enabled outline shows `array`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.object', "When enabled outline shows `object`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.key', "When enabled outline shows `key`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.null', "When enabled outline shows `null`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.enumMember', "When enabled outline shows `enumMember`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.struct', "When enabled outline shows `struct`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.event', "When enabled outline shows `event`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.operator', "When enabled outline shows `operator`-symbols.")
src/vs/workbench/contrib/outline/browser/outline.contribution.ts:			markdownDescription: localize('filteredTypes.typeParameter', "When enabled outline shows `typeParameter`-symbols.")
src/vs/workbench/contrib/output/browser/output.contribution.ts:const outputViewIcon = registerIcon('output-view-icon', Codicon.output, nls.localize('outputViewIcon', 'View icon of the output view.'));
src/vs/workbench/contrib/output/browser/output.contribution.ts:	title: nls.localize('output', "Output"),
src/vs/workbench/contrib/output/browser/output.contribution.ts:	name: nls.localize('output', "Output"),
src/vs/workbench/contrib/output/browser/output.contribution.ts:		mnemonicTitle: nls.localize({ key: 'miToggleOutput', comment: ['&& denotes a mnemonic'] }, "&&Output"),
src/vs/workbench/contrib/output/browser/output.contribution.ts:		nls.localize('logViewer', "Log Viewer")
src/vs/workbench/contrib/output/browser/output.contribution.ts:					title: nls.localize('switchBetweenOutputs.label', "Switch Output"),
src/vs/workbench/contrib/output/browser/output.contribution.ts:			title: nls.localize('switchToOutput.label', "Switch Output"),
src/vs/workbench/contrib/output/browser/output.contribution.ts:					title: { value: nls.localize('clearOutput.label', "Clear Output"), original: 'Clear Output' },
src/vs/workbench/contrib/output/browser/output.contribution.ts:					aria.status(nls.localize('outputCleared', "Output was cleared"));
src/vs/workbench/contrib/output/browser/output.contribution.ts:					title: { value: nls.localize('toggleAutoScroll', "Toggle Auto Scrolling"), original: 'Toggle Auto Scrolling' },
src/vs/workbench/contrib/output/browser/output.contribution.ts:					tooltip: nls.localize('outputScrollOff', "Turn Auto Scrolling Off"),
src/vs/workbench/contrib/output/browser/output.contribution.ts:						tooltip: nls.localize('outputScrollOn', "Turn Auto Scrolling On")
src/vs/workbench/contrib/output/browser/output.contribution.ts:					title: { value: nls.localize('openActiveLogOutputFile', "Open Log Output File"), original: 'Open Log Output File' },
src/vs/workbench/contrib/output/browser/output.contribution.ts:					title: { value: nls.localize('showLogs', "Show Logs..."), original: 'Show Logs...' },
src/vs/workbench/contrib/output/browser/output.contribution.ts:					entries.push({ type: 'separator', label: nls.localize('extensionLogs', "Extension Logs") });
src/vs/workbench/contrib/output/browser/output.contribution.ts:				const entry = await quickInputService.pick(entries, { placeHolder: nls.localize('selectlog', "Select Log") });
src/vs/workbench/contrib/output/browser/output.contribution.ts:					title: { value: nls.localize('openLogFile', "Open Log File..."), original: 'Open Log File...' },
src/vs/workbench/contrib/output/browser/output.contribution.ts:				const entry = await quickInputService.pick(entries, { placeHolder: nls.localize('selectlogFile', "Select Log file") });
src/vs/workbench/contrib/output/browser/output.contribution.ts:	title: nls.localize('output', "Output"),
src/vs/workbench/contrib/output/browser/output.contribution.ts:			description: nls.localize('output.smartScroll.enabled', "Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line."),
src/vs/workbench/contrib/offline/browser/offline.contribution.ts:}, localize('statusBarOfflineBackground', "Status bar background color when the workbench is offline. The status bar is shown in the bottom of the window"));
src/vs/workbench/contrib/offline/browser/offline.contribution.ts:}, localize('statusBarOfflineForeground', "Status bar foreground color when the workbench is offline. The status bar is shown in the bottom of the window"));
src/vs/workbench/contrib/offline/browser/offline.contribution.ts:}, localize('statusBarOfflineBorder', "Status bar border color separating to the sidebar and editor when the workbench is offline. The status bar is shown in the bottom of the window"));
src/vs/workbench/contrib/offline/browser/offline.contribution.ts:					tooltip: localize('offline', "Network appears to be offline, certain features might be unavailable.")
src/vs/workbench/browser/web.main.ts:			const embedderLogger = instantiationService.createInstance(DelayedLogChannel, 'webEmbedder', productService.embedderIdentifier || localize('vscode.dev', "vscode.dev"), joinPath(dirname(environmentService.logFile), `webEmbedder.log`));
src/vs/workbench/browser/web.main.ts:					title: { original: 'Reset User Data', value: localize('reset', "Reset User Data") },
src/vs/workbench/browser/web.main.ts:					message: localize('reset user data message', "Would you like to reset your data (settings, keybindings, extensions, snippets and UI State) and reload?")
src/vs/workbench/contrib/notebook/common/notebookEditorModel.ts:					nls.localize('notebook.staleSaveError', "The contents of the file has changed on disk. Would you like to open the updated version or overwrite the file with your changes?"),
src/vs/workbench/contrib/notebook/common/notebookEditorModel.ts:						label: nls.localize('notebook.staleSaveError.revert', "Revert"),
src/vs/workbench/contrib/notebook/common/notebookEditorModel.ts:						label: nls.localize('notebook.staleSaveError.overwrite.', "Overwrite"),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				? localize('messageN', 'Do you want keep the merge result of {0} files?', inputModels.length)
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				: localize('message1', 'Do you want keep the merge result of {0}?', basename(inputModels[0].model.resultTextModel.uri));
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							? localize('detailNConflicts', "The files contain unhandled conflicts. The merge results will be lost if you don't save them.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							: localize('detail1Conflicts', "The file contains unhandled conflicts. The merge result will be lost if you don't save it.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							? localize('detailN', "The merge results will be lost if you don't save them.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							: localize('detail1', "The merge result will be lost if you don't save it.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				hasUnhandledConflicts ? localize('saveWithConflict', "Save With Conflicts") : localize('save', "Save"),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				localize('discard', "Don't Save"),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				localize('cancel', "Cancel"),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				localize(
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:					localize('acceptMerge', 'Accept Merge'),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:					localize('cancel', "Cancel"),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:	private static readonly FILE_SAVED_SOURCE = SaveSourceRegistry.registerSource('merge-editor.source', localize('merge-editor.source', "Before Resolving Conflicts In Merge Editor"));
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				? localize('workspace.messageN', 'Do you want to save the changes you made to {0} files?', inputModels.length)
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				: localize('workspace.message1', 'Do you want to save the changes you made to {0}?', basename(inputModels[0].resultUri));
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							? localize('workspace.detailN.unhandled', "The files contain unhandled conflicts. Your changes will be lost if you don't save them.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							: localize('workspace.detail1.unhandled', "The file contains unhandled conflicts. Your changes will be lost if you don't save them.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							? localize('workspace.detailN.handled', "Your changes will be lost if you don't save them.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							: localize('workspace.detail1.handled', "Your changes will be lost if you don't save them.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:						? localize('workspace.saveWithConflict', 'Save with Conflicts')
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:						: localize('workspace.save', 'Save'),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				[localize('workspace.doNotSave', "Don't Save"), ConfirmResult.DONT_SAVE],
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				[localize('workspace.cancel', 'Cancel'), ConfirmResult.CANCEL],
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				? localize('workspace.messageN.nonDirty', 'Do you want to close {0} merge editors?', inputModels.length)
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				: localize('workspace.message1.nonDirty', 'Do you want to close the merge editor for {0}?', basename(inputModels[0].resultUri));
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							? localize('workspace.detailN.unhandled.nonDirty', "The files contain unhandled conflicts.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:							: localize('workspace.detail1.unhandled.nonDirty', "The file contains unhandled conflicts.")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:						? localize('workspace.closeWithConflicts', 'Close with Conflicts')
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:						: localize('workspace.close', 'Close'),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				[localize('workspace.cancel', 'Cancel'), ConfirmResult.CANCEL],
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:	description: nls.localize('contributes.notebook.provider', 'Contributes notebook document provider.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:				description: nls.localize('contributes.notebook.provider.viewType', 'Type of the notebook.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:				description: nls.localize('contributes.notebook.provider.displayName', 'Human readable name of the notebook.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:				description: nls.localize('contributes.notebook.provider.selector', 'Set of globs that the notebook is for.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:							description: nls.localize('contributes.notebook.provider.selector.filenamePattern', 'Glob that the notebook is enabled for.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:							description: nls.localize('contributes.notebook.selector.provider.excludeFileNamePattern', 'Glob that the notebook is disabled for.')
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:				markdownDeprecationMessage: nls.localize('contributes.priority', 'Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:					nls.localize('contributes.priority.default', 'The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:					nls.localize('contributes.priority.option', 'The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:	description: nls.localize('contributes.notebook.renderer', 'Contributes notebook output renderer provider.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:						description: nls.localize('contributes.notebook.renderer.viewType', 'Unique identifier of the notebook output renderer.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:						description: nls.localize('contributes.notebook.renderer.displayName', 'Human readable name of the notebook output renderer.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:						markdownDescription: nls.localize('contributes.notebook.renderer.hardDependencies', 'List of kernel dependencies the renderer requires. If any of the dependencies are present in the `NotebookKernel.preloads`, the renderer can be used.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:						markdownDescription: nls.localize('contributes.notebook.renderer.optionalDependencies', 'List of soft kernel dependencies the renderer can make use of. If any of the dependencies are present in the `NotebookKernel.preloads`, the renderer will be preferred over renderers that don\'t interact with the kernel.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:							nls.localize('contributes.notebook.renderer.requiresMessaging.always', 'Messaging is required. The renderer will only be used when it\'s part of an extension that can be run in an extension host.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:							nls.localize('contributes.notebook.renderer.requiresMessaging.optional', 'The renderer is better with messaging available, but it\'s not requried.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:							nls.localize('contributes.notebook.renderer.requiresMessaging.never', 'The renderer does not require messaging.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:						description: nls.localize('contributes.notebook.renderer.requiresMessaging', 'Defines how and if the renderer needs to communicate with an extension host, via `createRendererMessaging`. Renderers with stronger messaging requirements may not work in all environments.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:								description: nls.localize('contributes.notebook.selector', 'Set of globs that the notebook is for.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:								description: nls.localize('contributes.notebook.renderer.entrypoint', 'File to load in the webview to render the extension.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:								description: nls.localize('contributes.notebook.renderer.entrypoint', 'File to load in the webview to render the extension.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:										description: nls.localize('contributes.notebook.renderer.entrypoint.extends', 'Existing renderer that this one extends.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:										description: nls.localize('contributes.notebook.renderer.entrypoint', 'File to load in the webview to render the extension.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:	description: nls.localize('contributes.preload.provider', 'Contributes notebook preloads.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:				description: nls.localize('contributes.preload.provider.viewType', 'Type of the notebook.'),
src/vs/workbench/contrib/notebook/browser/notebookExtensionPoint.ts:				description: nls.localize('contributes.preload.entrypoint', 'Path to file loaded in the webview.'),
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const selectKernelIcon = registerIcon('notebook-kernel-select', Codicon.serverEnvironment, localize('selectKernelIcon', 'Configure icon to select a kernel in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const executeIcon = registerIcon('notebook-execute', Codicon.play, localize('executeIcon', 'Icon to execute in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const executeAboveIcon = registerIcon('notebook-execute-above', Codicon.runAbove, localize('executeAboveIcon', 'Icon to execute above cells in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const executeBelowIcon = registerIcon('notebook-execute-below', Codicon.runBelow, localize('executeBelowIcon', 'Icon to execute below cells in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const stopIcon = registerIcon('notebook-stop', Codicon.primitiveSquare, localize('stopIcon', 'Icon to stop an execution in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const deleteCellIcon = registerIcon('notebook-delete-cell', Codicon.trash, localize('deleteCellIcon', 'Icon to delete a cell in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const executeAllIcon = registerIcon('notebook-execute-all', Codicon.runAll, localize('executeAllIcon', 'Icon to execute all cells in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const editIcon = registerIcon('notebook-edit', Codicon.pencil, localize('editIcon', 'Icon to edit a cell in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const stopEditIcon = registerIcon('notebook-stop-edit', Codicon.check, localize('stopEditIcon', 'Icon to stop editing a cell in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const moveUpIcon = registerIcon('notebook-move-up', Codicon.arrowUp, localize('moveUpIcon', 'Icon to move up a cell in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const moveDownIcon = registerIcon('notebook-move-down', Codicon.arrowDown, localize('moveDownIcon', 'Icon to move down a cell in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const clearIcon = registerIcon('notebook-clear', Codicon.clearAll, localize('clearIcon', 'Icon to clear cell outputs in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const splitCellIcon = registerIcon('notebook-split-cell', Codicon.splitVertical, localize('splitCellIcon', 'Icon to split a cell in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const successStateIcon = registerIcon('notebook-state-success', Codicon.check, localize('successStateIcon', 'Icon to indicate a success state in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const errorStateIcon = registerIcon('notebook-state-error', Codicon.error, localize('errorStateIcon', 'Icon to indicate an error state in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const pendingStateIcon = registerIcon('notebook-state-pending', Codicon.clock, localize('pendingStateIcon', 'Icon to indicate a pending state in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const executingStateIcon = registerIcon('notebook-state-executing', Codicon.sync, localize('executingStateIcon', 'Icon to indicate an executing state in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const collapsedIcon = registerIcon('notebook-collapsed', Codicon.chevronRight, localize('collapsedIcon', 'Icon to annotate a collapsed section in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const expandedIcon = registerIcon('notebook-expanded', Codicon.chevronDown, localize('expandedIcon', 'Icon to annotate an expanded section in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const openAsTextIcon = registerIcon('notebook-open-as-text', Codicon.fileCode, localize('openAsTextIcon', 'Icon to open the notebook in a text editor.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const revertIcon = registerIcon('notebook-revert', Codicon.discard, localize('revertIcon', 'Icon to revert in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const renderOutputIcon = registerIcon('notebook-render-output', Codicon.preview, localize('renderOutputIcon', 'Icon to render output in diff editor.'));
src/vs/workbench/contrib/notebook/browser/notebookIcons.ts:export const mimetypeIcon = registerIcon('notebook-mimetype', Codicon.code, localize('mimetypeIcon', 'Icon for a mime type in notebook editors.'));
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:				title: localize('notebookActions.editCell', "Edit Cell"),
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:				title: localize('notebookActions.quitEdit', "Stop Editing Cell"),
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:				title: localize('notebookActions.deleteCell', "Delete Cell"),
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:			title: localize('clearCellOutputs', 'Clear Cell Outputs'),
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:			title: localize('clearAllCellsOutputs', 'Clear Outputs of All Cells'),
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:			title: localize('changeLanguage', 'Change Cell Language'),
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:				description: localize('changeLanguage', 'Change Cell Language'),
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:				description = localize('languageDescription', "({0}) - Current Language", languageId);
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:				description = localize('languageDescriptionConfigured', "({0})", languageId);
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:			label: localize('autoDetect', "Auto Detect")
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:			{ type: 'separator', label: localize('languagesPicks', "languages (identifier)") },
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:		const selection = await quickInputService.pick(picks, { placeHolder: localize('pickLanguageToConfigure', "Select Language Mode") }) as ILanguagePickInput | undefined;
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:			title: { value: localize('detectLanguage', 'Accept Detected Language for Cell'), original: 'Accept Detected Language for Cell' },
src/vs/workbench/contrib/notebook/browser/controller/editActions.ts:			notificationService.warn(localize('noDetection', "Unable to detect cell language"));
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.renderMarkdown', "Render All Markdown Cells"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.executeNotebook', "Run All"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:				description: localize('notebookActions.executeNotebook', "Run All"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.execute', "Execute Cell"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:				description: localize('notebookActions.execute', "Execute Cell"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.executeAbove', "Execute Above Cells"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.executeBelow', "Execute Cell and Below"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.executeAndFocusContainer', "Execute Cell and Focus Container"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:				description: localize('notebookActions.executeAndFocusContainer', "Execute Cell and Focus Container"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.cancel', "Stop Cell Execution"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:				description: localize('notebookActions.cancel', "Stop Cell Execution"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.executeAndSelectBelow', "Execute Notebook Cell and Select Below"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('notebookActions.executeAndInsertBelow', "Execute Notebook Cell and Insert Below"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:				value: localize('notebookActions.cancelNotebook', "Stop Execution"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:				value: localize('notebookActions.interruptNotebook', "Interrupt"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('revealRunningCell', "Go to Running Cell"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			tooltip: localize('revealRunningCell', "Go to Running Cell"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			shortTitle: localize('revealRunningCellShort', "Go To"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			title: localize('revealLastFailedCell', "Go to Most Recently Failed Cell"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			tooltip: localize('revealLastFailedCell', "Go to Most Recently Failed Cell"),
src/vs/workbench/contrib/notebook/browser/controller/executeActions.ts:			shortTitle: localize('revealLastFailedCellShort', "Go To"),
src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts:		this.userLocalSettings.label = localize('userSettings', "User");
src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts:		this.userRemoteSettings.label = localize('userSettingsRemote', "Remote") + (hostLabel ? ` [${hostLabel}]` : '');
src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts:		this.workspaceSettings.label = localize('workspaceSettings', "Workspace");
src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts:		this.folderSettingsAction.label = localize('folderSettings', "Folder");
src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts:			ariaLabel: localize('settingsSwitcherBarAriaLabel', "Settings Switcher"),
src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts:			let label = localize('workspaceSettings', "Workspace");
src/vs/workbench/contrib/preferences/browser/preferencesWidgets.ts:			let label = localize('userSettings', "User");
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertCodeCellAbove', "Insert Code Cell Above"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertCodeCellAboveAndFocusContainer', "Insert Code Cell Above and Focus Container")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertCodeCellBelow', "Insert Code Cell Below"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertCodeCellBelowAndFocusContainer', "Insert Code Cell Below and Focus Container"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertMarkdownCellAbove', "Insert Markdown Cell Above"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertMarkdownCellBelow', "Insert Markdown Cell Below"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertCodeCellAtTop', "Add Code Cell At Top"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:				title: localize('notebookActions.insertMarkdownCellAtTop', "Add Markdown Cell At Top"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: '$(add) ' + localize('notebookActions.menu.insertCode', "Code"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertCode.tooltip', "Add Code Cell")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: localize('notebookActions.menu.insertCode.minimalToolbar', "Add Code"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertCode.tooltip', "Add Code Cell")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: localize('notebookActions.menu.insertCode.ontoolbar', "Code"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertCode.tooltip', "Add Code Cell")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: '$(add) ' + localize('notebookActions.menu.insertCode', "Code"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertCode.tooltip', "Add Code Cell")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: localize('notebookActions.menu.insertCode.minimaltoolbar', "Add Code"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertCode.tooltip', "Add Code Cell")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: '$(add) ' + localize('notebookActions.menu.insertMarkdown', "Markdown"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertMarkdown.tooltip', "Add Markdown Cell")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: localize('notebookActions.menu.insertMarkdown.ontoolbar', "Markdown"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertMarkdown.tooltip', "Add Markdown Cell")
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		title: '$(add) ' + localize('notebookActions.menu.insertMarkdown', "Markdown"),
src/vs/workbench/contrib/notebook/browser/controller/insertCellActions.ts:		tooltip: localize('notebookActions.menu.insertMarkdown.tooltip', "Add Markdown Cell")
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:				value: localize('workbench.notebook.layout.select.label', "Select between Notebook Layouts"),
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:				value: localize('workbench.notebook.layout.configure.label', "Customize Notebook Layout"),
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:				value: localize('workbench.notebook.layout.configure.label', "Customize Notebook Layout"),
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:	title: { value: localize('customizeNotebook', "Customize Notebook..."), original: 'Customize Notebook...', },
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:			title: { value: localize('notebook.toggleLineNumbers', "Toggle Notebook Line Numbers"), original: 'Toggle Notebook Line Numbers' },
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:				title: localize('notebook.showLineNumbers', "Notebook Line Numbers"),
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:			title: { value: localize('notebook.toggleCellToolbarPosition', "Toggle Cell Toolbar Position"), original: 'Toggle Cell Toolbar Position' },
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:			title: { value: localize('notebook.toggleBreadcrumb', "Toggle Breadcrumbs"), original: 'Toggle Breadcrumbs' },
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:				value: localize('notebook.saveMimeTypeOrder', 'Save Mimetype Display Order'),
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:		qp.placeholder = localize('notebook.placeholder', 'Settings file to save in');
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:			{ target: ConfigurationTarget.USER, label: localize('saveTarget.machine', 'User Settings') },
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:			{ target: ConfigurationTarget.WORKSPACE, label: localize('saveTarget.workspace', 'Workspace Settings') },
src/vs/workbench/contrib/notebook/browser/controller/layoutActions.ts:				value: localize('workbench.notebook.layout.webview.reset.label', "Reset Notebook Webview"),
src/vs/workbench/contrib/notebook/browser/services/notebookExecutionServiceImpl.ts:		const message = nls.localize('notebookRunTrust', "Executing a notebook cell will run code from this workspace.");
src/vs/workbench/contrib/notebook/browser/controller/foldingController.ts:const NOTEBOOK_FOLD_COMMAND_LABEL = localize('fold.cell', "Fold Cell");
src/vs/workbench/contrib/notebook/browser/controller/foldingController.ts:const NOTEBOOK_UNFOLD_COMMAND_LABEL = localize('unfold.cell', "Unfold Cell");
src/vs/workbench/contrib/notebook/browser/controller/foldingController.ts:			title: { value: localize('fold.cell', "Fold Cell"), original: 'Fold Cell' },
src/vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView.ts:			'notebook-cell-markup-empty-content': nls.localize('notebook.emptyMarkdownPlaceholder', "Empty markdown cell, double click or press enter to edit."),
src/vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView.ts:			'notebook-cell-renderer-not-found-error': nls.localize({
src/vs/workbench/contrib/notebook/browser/controller/coreActions.ts:export const NOTEBOOK_ACTIONS_CATEGORY = { value: localize('notebookActions.category', "Notebook"), original: 'Notebook' };
src/vs/workbench/contrib/notebook/browser/controller/coreActions.ts:	title: localize('notebookMenu.insertCell', "Insert Cell"),
src/vs/workbench/contrib/notebook/browser/controller/coreActions.ts:	title: localize('notebookMenu.cellTitle', "Notebook Cell"),
src/vs/workbench/contrib/notebook/browser/controller/coreActions.ts:	title: localize('miShare', "Share"),
src/vs/workbench/contrib/notebook/browser/viewParts/notebookKernelActionViewItem.ts:			this._action.label = localize('select', "Select Kernel");
src/vs/workbench/contrib/notebook/browser/viewParts/notebookKernelActionViewItem.ts:			this._action.label = localize('select', "Select Kernel");
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:const MERGE_EDITOR_CATEGORY: ILocalizedString = { value: localize('mergeEditor', "Merge Editor (Dev)"), original: 'Merge Editor (Dev)' };
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				name: localize('mergeEditor.name', 'Merge Editor'),
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				message: localize('mergeEditor.noActiveMergeEditor', "No active merge editor")
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:			name: localize('mergeEditor.name', 'Merge Editor'),
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:			message: localize('mergeEditor.successfullyCopiedMergeEditorContents', "Successfully copied merge editor state"),
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				name: localize('mergeEditor.name', 'Merge Editor'),
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				message: localize('mergeEditor.noActiveMergeEditor', "No active merge editor")
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:			title: localize('mergeEditor.selectFolderToSaveTo', 'Select folder to save to')
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:			name: localize('mergeEditor.name', 'Merge Editor'),
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:			message: localize('mergeEditor.successfullySavedMergeEditorContentsToFolder', "Successfully saved merge editor state to folder"),
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				title: localize('mergeEditor.selectFolderToSaveTo', 'Select folder to save to')
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:						return nls.localize('notebookTreeAriaLabel', "Notebook");
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.cellBorderColor', "The border color for notebook cells."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.focusedEditorBorder', "The color of the notebook cell editor border."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebookStatusSuccessIcon.foreground', "The error icon color of notebook cells in the cell status bar."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebookStatusErrorIcon.foreground', "The error icon color of notebook cells in the cell status bar."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebookStatusRunningIcon.foreground', "The running icon color of notebook cells in the cell status bar."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.outputContainerBorderColor', "The border color of the notebook output container."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.outputContainerBackgroundColor', "The color of the notebook output container background."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.cellToolbarSeparator', "The color of the separator in the cell bottom toolbar"));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('focusedCellBackground', "The background color of a cell when the cell is focused."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('selectedCellBackground', "The background color of a cell when the cell is selected."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.cellHoverBackground', "The background color of a cell when the cell is hovered."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.selectedCellBorder', "The color of the cell's top and bottom border when the cell is selected but not focused."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.inactiveSelectedCellBorder', "The color of the cell's borders when multiple cells are selected."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.focusedCellBorder', "The color of the cell's focus indicator borders when the cell is focused."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.inactiveFocusedCellBorder', "The color of the cell's top and bottom border when a cell is focused while the primary focus is outside of the editor."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.cellStatusBarItemHoverBackground', "The background color of notebook cell status bar items."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.cellInsertionIndicator', "The color of the notebook cell insertion indicator."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebookScrollbarSliderBackground', "Notebook scrollbar slider background color."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebookScrollbarSliderHoverBackground', "Notebook scrollbar slider background color when hovering."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebookScrollbarSliderActiveBackground', "Notebook scrollbar slider background color when clicked on."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.symbolHighlightBackground', "Background color of highlighted cell"));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.cellEditorBackground', "Cell editor background color."));
src/vs/workbench/contrib/notebook/browser/notebookEditorWidget.ts:}, nls.localize('notebook.editorBackground', "Notebook background color."));
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.change.background', 'The background color for changes.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.change.word.background', 'The background color for word changes.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.changeBase.background', 'The background color for changes in base.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.changeBase.word.background', 'The background color for word changes in base.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.unhandledUnfocused.border', 'The border color of unhandled unfocused conflicts.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.unhandledFocused.border', 'The border color of unhandled focused conflicts.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.handledUnfocused.border', 'The border color of handled unfocused conflicts.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.handledFocused.border', 'The border color of handled focused conflicts.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.handled.minimapOverViewRuler', 'The foreground color for changes in input 1.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.unhandled.minimapOverViewRuler', 'The foreground color for changes in input 1.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflictingLines.background', 'The background of the "Conflicting Lines" text.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.input1.background', 'The background color of decorations in input 1.')
src/vs/workbench/contrib/mergeEditor/browser/view/colors.ts:	localize('mergeEditor.conflict.input2.background', 'The background color of decorations in input 2.')
src/vs/workbench/contrib/notebook/browser/view/renderers/cellRenderer.ts:		executionOrderLabel.title = localize('cellExecutionOrderCountLabel', 'Execution Order');
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:			title: { value: localize('title', "Open Merge Editor"), original: 'Open Merge Editor' },
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('layout.mixed', 'Mixed Layout'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:			title: { value: localize('layout.column', "Column Layout"), original: 'Column Layout' },
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('showNonConflictingChanges', 'Show Non-Conflicting Changes'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('layout.showBase', 'Show Base'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('layout.showBaseTop', 'Show Base Top'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('layout.showBaseCenter', 'Show Base Center'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:	value: localize('mergeEditor', 'Merge Editor'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('openfile', 'Open File'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('merge.goToNextUnhandledConflict', 'Go to Next Unhandled Conflict'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:			shortTitle: localize('mergeEditor.compareWithBase', 'Compare With Base'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:			shortTitle: localize('mergeEditor.compareWithBase', 'Compare With Base'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize('merge.openBaseEditor', 'Open Base File'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:			shortTitle: localize('mergeEditor.resetResultToBaseAndAutoMerge.short', 'Reset'),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				message: localize('mergeEditor.acceptMerge.unhandledConflicts.message', "Do you want to complete the merge of {0}?", basename(inputModel.resultUri)),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				detail: localize('mergeEditor.acceptMerge.unhandledConflicts.detail', "The file contains unhandled conflicts."),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				primaryButton: localize('mergeEditor.acceptMerge.unhandledConflicts.accept', "Complete with Conflicts"),
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				secondaryButton: localize('mergeEditor.acceptMerge.unhandledConflicts.cancel', "Cancel"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/markupCell.ts:			element.title = localize('cellExpandInputButtonLabelWithDoubleClick', "Double click to expand cell input ({0})", keybinding.getLabel());
src/vs/workbench/contrib/notebook/browser/view/cellParts/markupCell.ts:			expandIcon.title = localize('cellExpandInputButtonLabel', "Expand Cell Input ({0})", keybinding.getLabel());
src/vs/workbench/contrib/mergeEditor/browser/view/viewModel.ts:			this.notificationService.error(localize('noConflictMessage', "There is currently no conflict focused that can be toggled."));
src/vs/workbench/contrib/mergeEditor/browser/view/mergeEditor.ts:		return localize('mergeEditor', "Text Merge Editor");
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:						command(localize('accept', "Accept {0}", inputData.title), async () => {
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:						}, localize('acceptTooltip', "Accept {0} in the result document.", inputData.title))
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:							command(localize('acceptBoth', "Accept Combination"), async () => {
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:							}, localize('acceptBothTooltip', "Accept an automatic combination of both sides in the result document.")),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:						command(localize('append', "Append {0}", inputData.title), async () => {
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:						}, localize('appendTooltip', "Append {0} to the result document.", inputData.title))
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:							command(localize('combine', "Accept Combination", inputData.title), async () => {
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:							}, localize('acceptBothTooltip', "Accept an automatic combination of both sides in the result document.")),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:							localize('ignore', 'Ignore'),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:							localize('markAsHandledTooltip', "Don't take this side of the conflict.")
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:				text: localize('manualResolution', "Manual Resolution"),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:				tooltip: localize('manualResolutionTooltip', "This conflict has been resolved manually."),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:				text: localize('noChangesAccepted', 'No Changes Accepted'),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:				tooltip: localize(
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:					localize('remove', 'Remove {0}', model.input1.title),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:					localize('removeTooltip', 'Remove {0} from the result document.', model.input1.title)
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:					localize('remove', 'Remove {0}', model.input2.title),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:					localize('removeTooltip', 'Remove {0} from the result document.', model.input2.title)
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:					localize('resetToBase', 'Reset to base'),
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:					localize('resetToBaseTooltip', 'Reset this conflict to the common ancestor of both the right and left changes.')
src/vs/workbench/contrib/mergeEditor/browser/view/editors/baseCodeEditorView.ts:				reset(this.htmlElements.title, ...renderLabelWithIcons(localize('base', 'Base')));
src/vs/workbench/contrib/mergeEditor/browser/view/editors/baseCodeEditorView.ts:					const label = localize('compareWith', 'Comparing with {0}', baseShowDiffAgainst === 1 ? vm.model.input1.title : vm.model.input2.title);
src/vs/workbench/contrib/mergeEditor/browser/view/editors/baseCodeEditorView.ts:					const tooltip = localize('compareWithTooltip', 'Differences are highlighted with a background color.');
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:				? vm.model.input1.title || localize('input1', 'Input 1')
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:				: vm.model.input2.title || localize('input2', 'Input 2');
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:					localize('mergeEditor.accept', 'Accept {0}', this.model.input1.title),
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:					localize('mergeEditor.accept', 'Accept {0}', this.model.input2.title),
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:						localize(
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:						localize('mergeEditor.swap', 'Swap'),
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:					localize('mergeEditor.markAsHandled', 'Mark as Handled'),
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:					[InputState.excluded]: { icon: undefined, checked: false, title: localize('accept.excluded', "Accept") },
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:					[InputState.unrecognized]: { icon: Codicon.circleFilled, checked: false, title: localize('accept.conflicting', "Accept (result is dirty)") },
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:					[InputState.first]: { icon: Codicon.check, checked: true, title: localize('accept.first', "Undo accept") },
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:					[InputState.second]: { icon: Codicon.checkAll, checked: true, title: localize('accept.second', "Undo accept (currently second)") },
src/vs/workbench/contrib/notebook/browser/services/notebookKeymapServiceImpl.ts:		this.notificationService.prompt(Severity.Info, localize('disableOtherKeymapsConfirmation', "Disable other keymaps ({0}) to avoid conflicts between keybindings?", distinct(oldKeymaps.map(k => k.local.manifest.displayName)).map(name => `'${name}'`).join(', ')),
src/vs/workbench/contrib/notebook/browser/services/notebookKeymapServiceImpl.ts:				label: localize('yes', "Yes"),
src/vs/workbench/contrib/notebook/browser/services/notebookKeymapServiceImpl.ts:				label: localize('no', "No"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint.ts:			localize('hiddenCellsLabel', "1 cell hidden") :
src/vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint.ts:			localize('hiddenCellsLabelPlural', "{0} cells hidden", num);
src/vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput.ts:		placeholder.textContent = localize('cellOutputsCollapsedMsg', "Outputs are collapsed");
src/vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput.ts:			placeholder.title = localize('cellExpandOutputButtonLabelWithDoubleClick', "Double click to expand cell output ({0})", keybinding.getLabel());
src/vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput.ts:			cellOutputCollapseContainer.title = localize('cellExpandOutputButtonLabel', "Expand Cell Output (${0})", keybinding.getLabel());
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:			return this._renderMessage(viewModel, nls.localize('empty', "Cell has no output"));
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:			return this._renderMessage(viewModel, nls.localize('noRenderer.2', "No renderer could be found for output. It has the following mimetypes: {0}", mimeTypesMessage));
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:		const pickAction = new Action('notebook.output.pickMimetype', nls.localize('pickMimeType', "Change Presentation"), ThemeIcon.asClassName(mimetypeIcon), undefined,
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:					description: index === currIndex ? nls.localize('curruentActiveMimeType', "Currently Active") : undefined
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:				label: nls.localize('installJupyterPrompt', "Install additional renderers from the marketplace"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:			? nls.localize('promptChooseMimeTypeInSecure.placeHolder', "Select mimetype to render for current output")
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:			: nls.localize('promptChooseMimeType.placeHolder', "Select mimetype to render for current output");
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellOutput.ts:		return nls.localize('unavailableRenderInfo', "renderer not available");
src/vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView.ts:			reset(this.htmlElements.title, ...renderLabelWithIcons(localize('result', 'Result')));
src/vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView.ts:				? localize(
src/vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView.ts:				: localize(
src/vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView.ts:					? localize('goToNextConflict', 'Go to next conflict')
src/vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView.ts:					: localize('allConflictHandled', 'All conflicts handled, the merge can be completed now.'),
src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellExecutionIcon.ts:				tooltip: localize('notebook.cell.status.success', "Success"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellExecutionIcon.ts:				tooltip: localize('notebook.cell.status.failed', "Failed"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellExecutionIcon.ts:				tooltip: localize('notebook.cell.status.pending', "Pending"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellExecutionIcon.ts:				tooltip: localize('notebook.cell.status.executing', "Executing"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCell.ts:			element.title = localize('cellExpandInputButtonLabelWithDoubleClick', "Double click to expand cell input ({0})", keybinding.getLabel());
src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCell.ts:			expandIcon.title = localize('cellExpandInputButtonLabel', "Expand Cell Input ({0})", keybinding.getLabel());
src/vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar.ts:		const dropdownAction = this._register(new Action('notebook.moreRunActions', localize('notebook.moreRunActionsLabel', "More..."), 'codicon-chevron-down', true));
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions.ts:			markdownDescription: localize('notebook.lineNumbers', "Controls the display of line numbers in the cell editor.")
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions.ts:			title: { value: localize('notebook.toggleLineNumbers', "Toggle Notebook Line Numbers"), original: 'Toggle Notebook Line Numbers' },
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions.ts:				title: localize('notebook.showLineNumbers', "Notebook Line Numbers"),
src/vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions.ts:			title: localize('notebook.cell.toggleLineNumbers.title', "Show Cell Line Numbers"),
src/vs/workbench/contrib/mergeEditor/browser/mergeMarkers/mergeMarkersController.ts:								? nls.localize('conflictingLine', "1 Conflicting Line")
src/vs/workbench/contrib/mergeEditor/browser/mergeMarkers/mergeMarkersController.ts:								: nls.localize('conflictingLines', "{0} Conflicting Lines", conflictingLinesCount)
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:	description: nls.localize('notebook.editorOptions.experimentalCustomization', 'Settings for code editors used in notebooks. This can be used to customize most editor.* settings.'),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:	title: nls.localize('notebookConfigurationTitle', "Notebook"),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.displayOrder.description', "Priority list for output mime types"),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.cellToolbarLocation.description', "Where the cell toolbar should be shown, or whether it should be hidden."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				markdownDescription: nls.localize('notebook.cellToolbarLocation.viewType', "Configure the cell toolbar position for for specific file types"),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.showCellStatusbar.description', "Whether the cell status bar should be shown."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('notebook.showCellStatusbar.hidden.description', "The cell Status bar is always hidden."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('notebook.showCellStatusbar.visible.description', "The cell Status bar is always visible."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('notebook.showCellStatusbar.visibleAfterExecute.description', "The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.")],
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.diff.enablePreview.description', "Whether to use the enhanced text diff editor for notebook."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			markdownDescription: nls.localize('notebook.cellToolbarVisibility.description', "Whether the cell toolbar should appear on hover or click."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.undoRedoPerCell.description', "Whether to use separate undo/redo stack for each cell."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.compactView.description', "Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.focusIndicator.description', "Controls where the focus indicator is rendered, either along the cell borders or on the left gutter"),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.insertToolbarPosition.description', "Control where the insert cell actions should appear."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('insertToolbarLocation.betweenCells', "A toolbar that appears on hover between cells."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('insertToolbarLocation.notebookToolbar', "The toolbar at the top of the notebook editor."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('insertToolbarLocation.both', "Both toolbars."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('insertToolbarLocation.hidden', "The insert actions don't appear anywhere."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.globalToolbar.description', "Control whether to render a global toolbar inside the notebook editor."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.consolidatedOutputButton.description', "Control whether outputs action should be rendered in the output toolbar."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.showFoldingControls.description', "Controls when the Markdown header folding arrow is shown."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('showFoldingControls.always', "The folding controls are always visible."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('showFoldingControls.never', "Never show the folding controls and reduce the gutter size."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:				nls.localize('showFoldingControls.mouseover', "The folding controls are visible only on mouseover."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.dragAndDrop.description', "Control whether the notebook editor should allow moving cells through drag and drop."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.consolidatedRunButton.description', "Control whether extra actions are shown in a dropdown next to the run button."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.globalToolbarShowLabel', "Control whether the actions on the notebook toolbar should render label or not."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			description: nls.localize('notebook.textOutputLineLimit', "Control how many lines of text in a text output is rendered."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			markdownDescription: nls.localize('notebook.markup.fontSize', "Controls the font size in pixels of rendered markup in notebooks. When set to {0}, 120% of {1} is used.", '`0`', '`#editor.fontSize#`'),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			markdownDescription: nls.localize('notebook.interactiveWindow.collapseCodeCells', "Controls whether code cells in the interactive window are collapsed by default."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			markdownDescription: nls.localize('notebook.outputLineHeight', "Line height of the output text for notebook cells.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values."),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			markdownDescription: nls.localize('notebook.outputFontSize', "Font size for the output text for notebook cells. When set to {0}, {1} is used.", '`0`', '`#editor.fontSize#`'),
src/vs/workbench/contrib/notebook/browser/notebook.contribution.ts:			markdownDescription: nls.localize('notebook.outputFontFamily', "The font family for the output text for notebook cells. When set to empty, the {0} is used.", '`#editor.fontFamily#`'),
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_TOGGLE_LABEL: string = nls.localize('problems.view.toggle.label', "Toggle Problems (Errors, Warnings, Infos)");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_SHOW_LABEL: string = nls.localize('problems.view.focus.label', "Focus Problems (Errors, Warnings, Infos)");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static PROBLEMS_PANEL_CONFIGURATION_TITLE: string = nls.localize('problems.panel.configuration.title', "Problems View");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static PROBLEMS_PANEL_CONFIGURATION_AUTO_REVEAL: string = nls.localize('problems.panel.configuration.autoreveal', "Controls whether Problems view should automatically reveal files when opening them.");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static PROBLEMS_PANEL_CONFIGURATION_VIEW_MODE: string = nls.localize('problems.panel.configuration.viewMode', "Controls the default view mode of the Problems view.");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static PROBLEMS_PANEL_CONFIGURATION_SHOW_CURRENT_STATUS: string = nls.localize('problems.panel.configuration.showCurrentInStatus', "When enabled shows the current problem in the status bar.");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static PROBLEMS_PANEL_CONFIGURATION_COMPARE_ORDER: string = nls.localize('problems.panel.configuration.compareOrder', "Controls the order in which problems are navigated.");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static PROBLEMS_PANEL_CONFIGURATION_COMPARE_ORDER_SEVERITY: string = nls.localize('problems.panel.configuration.compareOrder.severity', "Navigate problems ordered by severity");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static PROBLEMS_PANEL_CONFIGURATION_COMPARE_ORDER_POSITION: string = nls.localize('problems.panel.configuration.compareOrder.position', "Navigate problems ordered by position");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_TITLE_PROBLEMS: string = nls.localize('markers.panel.title.problems', "Problems");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_NO_PROBLEMS_BUILT: string = nls.localize('markers.panel.no.problems.build', "No problems have been detected in the workspace.");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_NO_PROBLEMS_ACTIVE_FILE_BUILT: string = nls.localize('markers.panel.no.problems.activeFile.build', "No problems have been detected in the current file.");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_NO_PROBLEMS_FILTERS: string = nls.localize('markers.panel.no.problems.filters', "No results found with provided filter criteria.");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_ACTION_TOOLTIP_MORE_FILTERS: string = nls.localize('markers.panel.action.moreFilters', "More Filters...");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_LABEL_SHOW_ERRORS: string = nls.localize('markers.panel.filter.showErrors', "Show Errors");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_LABEL_SHOW_WARNINGS: string = nls.localize('markers.panel.filter.showWarnings', "Show Warnings");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_LABEL_SHOW_INFOS: string = nls.localize('markers.panel.filter.showInfos', "Show Infos");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_LABEL_EXCLUDED_FILES: string = nls.localize('markers.panel.filter.useFilesExclude', "Hide Excluded Files");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_LABEL_ACTIVE_FILE: string = nls.localize('markers.panel.filter.activeFile', "Show Active File Only");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_ACTION_TOOLTIP_FILTER: string = nls.localize('markers.panel.action.filter', "Filter Problems");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_ACTION_TOOLTIP_QUICKFIX: string = nls.localize('markers.panel.action.quickfix', "Show fixes");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_ARIA_LABEL: string = nls.localize('markers.panel.filter.ariaLabel', "Filter Problems");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_PLACEHOLDER: string = nls.localize('markers.panel.filter.placeholder', "Filter (e.g. text, **/*.ts, !**/node_modules/**)");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_ERRORS: string = nls.localize('markers.panel.filter.errors', "errors");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_WARNINGS: string = nls.localize('markers.panel.filter.warnings', "warnings");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_FILTER_INFOS: string = nls.localize('markers.panel.filter.infos', "infos");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_SINGLE_ERROR_LABEL: string = nls.localize('markers.panel.single.error.label', "1 Error");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static readonly MARKERS_PANEL_MULTIPLE_ERRORS_LABEL = (noOfErrors: number): string => { return nls.localize('markers.panel.multiple.errors.label', "{0} Errors", '' + noOfErrors); };
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_SINGLE_WARNING_LABEL: string = nls.localize('markers.panel.single.warning.label', "1 Warning");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static readonly MARKERS_PANEL_MULTIPLE_WARNINGS_LABEL = (noOfWarnings: number): string => { return nls.localize('markers.panel.multiple.warnings.label', "{0} Warnings", '' + noOfWarnings); };
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_SINGLE_INFO_LABEL: string = nls.localize('markers.panel.single.info.label', "1 Info");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static readonly MARKERS_PANEL_MULTIPLE_INFOS_LABEL = (noOfInfos: number): string => { return nls.localize('markers.panel.multiple.infos.label', "{0} Infos", '' + noOfInfos); };
src/vs/workbench/contrib/markers/browser/messages.ts:	public static MARKERS_PANEL_SINGLE_UNKNOWN_LABEL: string = nls.localize('markers.panel.single.unknown.label', "1 Unknown");
src/vs/workbench/contrib/markers/browser/messages.ts:	public static readonly MARKERS_PANEL_MULTIPLE_UNKNOWNS_LABEL = (noOfUnknowns: number): string => { return nls.localize('markers.panel.multiple.unknowns.label', "{0} Unknowns", '' + noOfUnknowns); };
src/vs/workbench/contrib/markers/browser/messages.ts:	public static readonly MARKERS_PANEL_AT_LINE_COL_NUMBER = (ln: number, col: number): string => { return nls.localize('markers.panel.at.ln.col.number', "[Ln {0}, Col {1}]", '' + ln, '' + col); };
src/vs/workbench/contrib/markers/browser/messages.ts:	public static readonly MARKERS_TREE_ARIA_LABEL_RESOURCE = (noOfProblems: number, fileName: string, folder: string): string => { return nls.localize('problems.tree.aria.label.resource', "{0} problems in file {1} of folder {2}", noOfProblems, fileName, folder); };
src/vs/workbench/contrib/markers/browser/messages.ts:		const relatedInformationMessage = marker.relatedInformation.length ? nls.localize('problems.tree.aria.label.marker.relatedInformation', " This problem has references to {0} locations.", marker.relatedInformation.length) : '';
src/vs/workbench/contrib/markers/browser/messages.ts:				return marker.marker.source ? nls.localize('problems.tree.aria.label.error.marker', "Error generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage)
src/vs/workbench/contrib/markers/browser/messages.ts:					: nls.localize('problems.tree.aria.label.error.marker.nosource', "Error: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage);
src/vs/workbench/contrib/markers/browser/messages.ts:				return marker.marker.source ? nls.localize('problems.tree.aria.label.warning.marker', "Warning generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage)
src/vs/workbench/contrib/markers/browser/messages.ts:					: nls.localize('problems.tree.aria.label.warning.marker.nosource', "Warning: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage, relatedInformationMessage);
src/vs/workbench/contrib/markers/browser/messages.ts:				return marker.marker.source ? nls.localize('problems.tree.aria.label.info.marker', "Info generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage)
src/vs/workbench/contrib/markers/browser/messages.ts:					: nls.localize('problems.tree.aria.label.info.marker.nosource', "Info: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage);
src/vs/workbench/contrib/markers/browser/messages.ts:				return marker.marker.source ? nls.localize('problems.tree.aria.label.marker', "Problem generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage)
src/vs/workbench/contrib/markers/browser/messages.ts:					: nls.localize('problems.tree.aria.label.marker.nosource', "Problem: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage);
src/vs/workbench/contrib/markers/browser/messages.ts:	public static readonly MARKERS_TREE_ARIA_LABEL_RELATED_INFORMATION = (relatedInformation: IRelatedInformation): string => nls.localize('problems.tree.aria.label.relatedinfo.message', "{0} at line {1} and character {2} in {3}", relatedInformation.message, relatedInformation.startLineNumber, relatedInformation.startColumn, basename(relatedInformation.resource));
src/vs/workbench/contrib/markers/browser/messages.ts:	public static SHOW_ERRORS_WARNINGS_ACTION_LABEL: string = nls.localize('errors.warnings.show.label', "Show Errors and Warnings");
src/vs/workbench/contrib/notebook/browser/notebookEditor.ts:				throw new Error(localize('fail.noEditor', "Cannot open resource with notebook editor type '{0}', please check if you have the right extension installed and enabled.", input.viewType));
src/vs/workbench/contrib/notebook/browser/notebookEditor.ts:					id: 'workbench.notebook.action.openInTextEditor', label: localize('notebookOpenInTextEditor', "Open in Text Editor"), run: async () => {
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:					value: localize('notebookActions.moveCellUp', "Move Cell Up"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:					value: localize('notebookActions.moveCellDown', "Move Cell Down"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:					value: localize('notebookActions.copyCellUp', "Copy Cell Up"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:					value: localize('notebookActions.copyCellDown', "Copy Cell Down"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:					value: localize('notebookActions.splitCell', "Split Cell"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:					value: localize('notebookActions.joinCellAbove', "Join With Previous Cell"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:					value: localize('notebookActions.joinCellBelow', "Join With Next Cell"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.changeCellToCode', "Change Cell to Code"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.changeCellToMarkdown', "Change Cell to Markdown"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.collapseCellInput', "Collapse Cell Input"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.expandCellInput', "Expand Cell Input"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.collapseCellOutput', "Collapse Cell Output"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.expandCellOutput', "Expand Cell Output"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.toggleOutputs', "Toggle Outputs"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				description: localize('notebookActions.toggleOutputs', "Toggle Outputs"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.collapseAllCellInput', "Collapse All Cell Inputs"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.expandAllCellInput', "Expand All Cell Inputs"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.collapseAllCellOutput', "Collapse All Cell Outputs"),
src/vs/workbench/contrib/notebook/browser/contrib/cellCommands/cellCommands.ts:				value: localize('notebookActions.expandAllCellOutput', "Expand All Cell Outputs"),
src/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/statusBarProviders.ts:			tooltip: localize('notebook.cell.status.language', "Select Cell Language Mode"),
src/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/statusBarProviders.ts:			let tooltip = localize('notebook.cell.status.autoDetectLanguage', "Accept Detected Language: {0}", detectedName);
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFind.ts:			title: { value: localize('notebookActions.hideFind', "Hide Find in Notebook"), original: 'Hide Find in Notebook' },
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFind.ts:			title: { value: localize('notebookActions.findInNotebook', "Find in Notebook"), original: 'Find in Notebook' },
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInput.ts:		return localize('name', "Merging: {0}", super.getName());
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget.ts:				? localize('ariaSearchNoResultEmpty', "{0} found", label)
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget.ts:				: localize('ariaSearchNoResult', "{0} found for '{1}'", label, searchString);
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget.ts:		return localize('ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString);
src/vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout.ts:				value: localize('workbench.notebook.toggleLayoutTroubleshoot', "Toggle Layout Troubleshoot"),
src/vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout.ts:				value: localize('workbench.notebook.inspectLayout', "Inspect Notebook Layout"),
src/vs/workbench/contrib/notebook/browser/contrib/troubleshoot/layout.ts:				value: localize('workbench.notebook.clearNotebookEdtitorTypeCache', "Clear Notebook Editor Type Cache"),
src/vs/workbench/contrib/markers/browser/markersView.ts:		this.filterWidget.updateBadge(total === filtered || total === 0 ? undefined : localize('showing filtered problems', "Showing {0} of {1}", filtered, total));
src/vs/workbench/contrib/markers/browser/markersView.ts:				this.setAriaLabel(localize('No problems filtered', "Showing {0} problems", total));
src/vs/workbench/contrib/markers/browser/markersView.ts:				this.setAriaLabel(localize('problems filtered', "Showing {0} of {1} problems", filtered, total));
src/vs/workbench/contrib/markers/browser/markersView.ts:		link.textContent = localize('clearFilter', "Clear Filters");
src/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController.ts:				tooltip: localize('notebook.cell.status.success', "Success"),
src/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController.ts:				tooltip: localize('notebook.cell.status.failed', "Failed"),
src/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController.ts:				tooltip: localize('notebook.cell.status.pending', "Pending"),
src/vs/workbench/contrib/notebook/browser/contrib/cellStatusBar/executionStatusBarItemController.ts:				tooltip: localize('notebook.cell.status.executing', "Executing"),
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_FIND_INPUT_LABEL = nls.localize('label.find', "Find");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_FIND_INPUT_PLACEHOLDER = nls.localize('placeholder.find', "Find");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('label.previousMatchButton', "Previous Match");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:// const NLS_FILTER_BTN_LABEL = nls.localize('label.findFilterButton', "Search in View");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_NEXT_MATCH_BTN_LABEL = nls.localize('label.nextMatchButton', "Next Match");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_CLOSE_BTN_LABEL = nls.localize('label.closeButton', "Close");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = nls.localize('label.toggleReplaceButton', "Toggle Replace");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_REPLACE_INPUT_LABEL = nls.localize('label.replace', "Replace");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_REPLACE_INPUT_PLACEHOLDER = nls.localize('placeholder.replace', "Replace");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_REPLACE_BTN_LABEL = nls.localize('label.replaceButton', "Replace");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NLS_REPLACE_ALL_BTN_LABEL = nls.localize('label.replaceAllButton', "Replace All");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:export const findFilterButton = registerIcon('find-filter', Codicon.filter, nls.localize('findFilterIcon', 'Icon for Find Filter in find widget.'));
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NOTEBOOK_FIND_FILTERS = nls.localize('notebook.find.filter.filterAction', "Find Filters");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NOTEBOOK_FIND_IN_MARKUP_INPUT = nls.localize('notebook.find.filter.findInMarkupInput', "Markdown Source");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NOTEBOOK_FIND_IN_MARKUP_PREVIEW = nls.localize('notebook.find.filter.findInMarkupPreview', "Rendered Markdown");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NOTEBOOK_FIND_IN_CODE_INPUT = nls.localize('notebook.find.filter.findInCodeInput', "Code Cell Source");
src/vs/workbench/contrib/notebook/browser/contrib/find/notebookFindReplaceWidget.ts:const NOTEBOOK_FIND_IN_CODE_OUTPUT = nls.localize('notebook.find.filter.findInCodeOutput', "Cell Output");
src/vs/workbench/contrib/notebook/browser/contrib/profile/notebookProfile.ts:			title: localize('setProfileTitle', "Set Profile")
src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.ts:					preview = localize('empty', "empty cell");
src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.ts:			markdownDescription: localize('outline.showCodeCells', "When enabled notebook outline shows code cells.")
src/vs/workbench/contrib/notebook/browser/contrib/outline/notebookOutline.ts:			markdownDescription: localize('breadcrumbs.showCodeCells', "When enabled notebook breadcrumbs contain code cells.")
src/vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard.ts:				title: localize('notebookActions.copy', "Copy Cell"),
src/vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard.ts:				title: localize('notebookActions.cut', "Cut Cell"),
src/vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard.ts:				title: localize('notebookActions.paste', "Paste Cell"),
src/vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard.ts:				title: localize('notebookActions.pasteAbove', "Paste Cell Above"),
src/vs/workbench/contrib/notebook/browser/contrib/clipboard/notebookClipboard.ts:			title: { value: localize('toggleNotebookClipboardLog', "Toggle Notebook Clipboard Troubleshooting"), original: 'Toggle Notebook Clipboard Troubleshooting' },
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:			title: { value: nls.localize('notebookActions.selectKernel', "Select Notebook Kernel"), original: 'Select Notebook Kernel' },
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:				description: nls.localize('notebookActions.selectKernel.args', "Notebook Kernel Args"),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:			? nls.localize('prompt.placeholder.change', "Change kernel for '{0}'", labelService.getUriLabel(notebook.uri, { relative: true }))
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:			: nls.localize('prompt.placeholder.select', "Select kernel for '{0}'", labelService.getUriLabel(notebook.uri, { relative: true }));
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					res.description = nls.localize('current1', "Currently Selected");
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					res.description = nls.localize('current2', "{0} - Currently Selected", res.description);
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					label: nls.localize('suggestedKernels', "Suggested")
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					label: items[0].kernel.kind || nls.localize('otherKernelKinds', "Other")
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:				// label: nls.localize('sourceActions', "")
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					label: `$(${Codicon.lightbulb.id}) ` + nls.localize('installSuggestedKernel', 'Install suggested extensions'),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:				label: nls.localize('searchForKernels', "Browse marketplace for kernel extensions"),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					name: nls.localize('notebook.info', "Notebook Kernel Info"),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					tooltip: isSuggested ? nls.localize('tooltop', "{0} (suggestion)", tooltip) : tooltip,
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					name: nls.localize('notebook.select', "Notebook Kernel Selection"),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					text: nls.localize('kernel.select.label', "Select Kernel"),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:					ariaLabel: nls.localize('kernel.select.label', "Select Kernel"),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:			name: nls.localize('notebook.activeCellStatusName', "Notebook Editor Selections"),
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:			nls.localize('notebook.multiActiveCellIndicator', "Cell {0} ({1} selected)", idxFocused, numSelected) :
src/vs/workbench/contrib/notebook/browser/contrib/editorStatusBar/editorStatusBar.ts:			nls.localize('notebook.singleActiveCellIndicator', "Cell {0} of {1}", idxFocused, totalCells);
src/vs/workbench/contrib/notebook/browser/contrib/gettingStarted/notebookGettingStarted.ts:				value: localize('workbench.notebook.layout.gettingStarted.label', "Reset notebook getting started"),
src/vs/workbench/contrib/notebook/browser/contrib/format/formatting.ts:			title: { value: localize('format.title', "Format Notebook"), original: 'Format Notebook' },
src/vs/workbench/contrib/notebook/browser/contrib/format/formatting.ts:			await bulkEditService.apply(/* edit */allCellEdits.flat(), { label: localize('label', "Format Notebook"), code: 'undoredo.formatNotebook', });
src/vs/workbench/contrib/notebook/browser/contrib/format/formatting.ts:			label: localize('formatCell.label', "Format Cell"),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditor.contribution.ts:		localize('name', "Merge Editor")
src/vs/workbench/contrib/mergeEditor/browser/mergeEditor.contribution.ts:				localize('diffAlgorithm.smart', "Uses the default diffing algorithm."),
src/vs/workbench/contrib/mergeEditor/browser/mergeEditor.contribution.ts:				localize('diffAlgorithm.experimental', "Uses an experimental diffing algorithm."),
src/vs/workbench/contrib/markers/browser/markersTreeViewer.ts:		return localize('problemsView', "Problems View");
src/vs/workbench/contrib/markers/browser/markersTreeViewer.ts:const expandedIcon = registerIcon('markers-view-multi-line-expanded', Codicon.chevronUp, localize('expandedIcon', 'Icon indicating that multiple lines are shown in the markers view.'));
src/vs/workbench/contrib/markers/browser/markersTreeViewer.ts:const collapsedIcon = registerIcon('markers-view-multi-line-collapsed', Codicon.chevronDown, localize('collapsedIcon', 'Icon indicating that multiple lines are collapsed in the markers view.'));
src/vs/workbench/contrib/markers/browser/markersTreeViewer.ts:		action.tooltip = multiline ? localize('single line', "Show message in single line") : localize('multi line', "Show message in multiple lines");
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:			title: { value: localize('notebook.diff.switchToText', "Open Text Diff Editor"), original: 'Open Text Diff Editor' },
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:				title: localize('notebook.diff.cell.revertMetadata', "Revert Metadata"),
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:// 				title: localize('notebook.diff.cell.switchOutputRenderingStyle', "Switch Outputs Rendering"),
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:				title: localize('notebook.diff.cell.switchOutputRenderingStyleToText', "Switch Output Rendering"),
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:				title: localize('notebook.diff.cell.revertOutputs', "Revert Outputs"),
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:				title: localize('notebook.diff.cell.revertInput', "Revert Input"),
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:			{ value: localize('notebook.diff.showOutputs', "Show Outputs Differences"), original: 'Show Outputs Differences' },
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:			{ value: localize('notebook.diff.showMetadata', "Show Metadata Differences"), original: 'Show Metadata Differences' },
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:			markdownDescription: localize('notebook.diff.ignoreMetadata', "Hide Metadata Differences")
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffActions.ts:			markdownDescription: localize('notebook.diff.ignoreOutputs', "Hide Outputs Differences")
src/vs/workbench/contrib/notebook/browser/contrib/layout/layoutActions.ts:			title: { value: localize('notebook.toggleCellToolbarPosition', "Toggle Cell Toolbar Position"), original: 'Toggle Cell Toolbar Position' },
src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts:			mimeTypePicker.title = nls.localize('mimeTypePicker', "Choose a different output mimetype, available mimetypes: {0}", mimeTypes.map(mimeType => mimeType.mimeType).join(', '));
src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts:			return this._renderMessage(viewModel, nls.localize('empty', "Cell has no output"));
src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts:			return this._renderMessage(viewModel, nls.localize('noRenderer.2', "No renderer could be found for output. It has the following mimetypes: {0}", mimeTypesMessage));
src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts:			description: index === currIndex ? nls.localize('curruentActiveMimeType', "Currently Active") : undefined
src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts:			? nls.localize('promptChooseMimeTypeInSecure.placeHolder', "Select mimetype to render for current output. Rich mimetypes are available only when the notebook is trusted")
src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts:			: nls.localize('promptChooseMimeType.placeHolder', "Select mimetype to render for current output");
src/vs/workbench/contrib/notebook/browser/diff/diffElementOutputs.ts:		return nls.localize('builtinRenderInfo', "built-in");
src/vs/workbench/contrib/notebook/browser/diff/notebookDiffEditor.ts:						return nls.localize('notebookTreeAriaLabel', "Notebook Text Diff");
src/vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts:const MERGE_EDITOR_CATEGORY: ILocalizedString = { value: localize('mergeEditor', "Merge Editor (Dev)"), original: 'Merge Editor (Dev)' };
src/vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts:				prompt: localize('mergeEditor.enterJSON', 'Enter JSON'),
src/vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts:				value: localize(
src/vs/workbench/contrib/markers/browser/markersTable.ts:					label: localize('codeColumnLabel', "Code"),
src/vs/workbench/contrib/markers/browser/markersTable.ts:					label: localize('messageColumnLabel', "Message"),
src/vs/workbench/contrib/markers/browser/markersTable.ts:					label: localize('fileColumnLabel', "File"),
src/vs/workbench/contrib/markers/browser/markersTable.ts:					label: localize('sourceColumnLabel', "Source"),
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxIsMergeEditor = new RawContextKey<boolean>('isMergeEditor', false, { type: 'boolean', description: localize('is', 'The editor is a merge editor') });
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxIsMergeResultEditor = new RawContextKey<boolean>('isMergeResultEditor', false, { type: 'boolean', description: localize('isr', 'The editor is a the result editor of a merge editor.') });
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxMergeEditorLayout = new RawContextKey<MergeEditorLayoutKind>('mergeEditorLayout', 'mixed', { type: 'string', description: localize('editorLayout', 'The layout mode of a merge editor') });
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxMergeEditorShowBase = new RawContextKey<boolean>('mergeEditorShowBase', false, { type: 'boolean', description: localize('showBase', 'If the merge editor shows the base version') });
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxMergeEditorShowBaseAtTop = new RawContextKey<boolean>('mergeEditorShowBaseAtTop', false, { type: 'boolean', description: localize('showBaseAtTop', 'If base should be shown at the top') });
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxMergeEditorShowNonConflictingChanges = new RawContextKey<boolean>('mergeEditorShowNonConflictingChanges', false, { type: 'boolean', description: localize('showNonConflictingChanges', 'If the merge editor shows non-conflicting changes') });
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxMergeBaseUri = new RawContextKey<string>('mergeEditorBaseUri', '', { type: 'string', description: localize('baseUri', 'The uri of the baser of a merge editor') });
src/vs/workbench/contrib/mergeEditor/common/mergeEditor.ts:export const ctxMergeResultUri = new RawContextKey<string>('mergeEditorResultUri', '', { type: 'string', description: localize('resultUri', 'The uri of the result of a merge editor') });
src/vs/workbench/contrib/markers/browser/markersFileDecorations.ts:	readonly label: string = localize('label', "Problems");
src/vs/workbench/contrib/markers/browser/markersFileDecorations.ts:			tooltip: markers.length === 1 ? localize('tooltip.1', "1 problem in this file") : localize('tooltip.N', "{0} problems in this file", markers.length),
src/vs/workbench/contrib/markers/browser/markersFileDecorations.ts:			'description': localize('markers.showOnFile', "Show Errors & Warnings on files and folder."),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:const markersViewIcon = registerIcon('markers-view-icon', Codicon.warning, localize('markersViewIcon', 'View icon of the markers view.'));
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:		mnemonicTitle: localize({ key: 'miMarker', comment: ['&& denotes a mnemonic'] }, "&&Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('viewAsTree', "View as Tree"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('viewAsTable', "View as Table"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('toggle errors', "Toggle Errors"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:				title: localize('errors', "Show Errors")
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('toggle warnings', "Toggle Warnings"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:				title: localize('warnings', "Show Warnings")
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('toggle infos', "Toggle Infos"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:				title: localize('Infos', "Show Infos")
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('toggle active file', "Toggle Active File"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:				title: localize('Active File', "Show Active File Only")
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('toggle Excluded Files', "Toggle Excluded Files"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:				title: localize('Excluded Files', "Hide Excluded Files")
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: { value: localize('copyMarker', "Copy"), original: 'Copy' },
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: { value: localize('copyMessage', "Copy Message"), original: 'Copy Message' },
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: { value: localize('copyMessage', "Copy Message"), original: 'Copy Message' },
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('focusProblemsList', "Focus problems view"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('focusProblemsFilter', "Focus problems filter"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: { value: localize('show multiline', "Show message in multiple lines"), original: 'Problems: Show message in multiple lines' },
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: { value: localize('show singleline', "Show message in single line"), original: 'Problems: Show message in single line' },
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('clearFiltersText', "Clear filters text"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			category: localize('problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			title: localize('collapseAll', "Collapse All"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			name: localize('status.problems', "Problems"),
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:		const errorTitle = (n: number) => localize('totalErrors', "Errors: {0}", n);
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:		const warningTitle = (n: number) => localize('totalWarnings', "Warnings: {0}", n);
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:		const infoTitle = (n: number) => localize('totalInfos', "Infos: {0}", n);
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:			return localize('noProblems', "No Problems");
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:		const manyProblems = localize('manyProblems', "10K+");
src/vs/workbench/contrib/markers/browser/markers.contribution.ts:		const message = localize('totalProblems', 'Total {0} Problems', total);
src/vs/workbench/contrib/logs/electron-sandbox/logsActions.ts:	static readonly TITLE = { value: nls.localize('openLogsFolder', "Open Logs Folder"), original: 'Open Logs Folder' };
src/vs/workbench/contrib/logs/electron-sandbox/logsActions.ts:	static readonly TITLE = { value: nls.localize('openExtensionLogsFolder', "Open Extension Logs Folder"), original: 'Open Extension Logs Folder' };
src/vs/workbench/browser/quickaccess.ts:export const InQuickPickContextKey = new RawContextKey<boolean>(inQuickPickContextKeyValue, false, localize('inQuickOpen', "Whether keyboard focus is inside the quick open control"));
src/vs/workbench/contrib/logs/common/logsActions.ts:	static readonly TITLE = { value: nls.localize('setLogLevel', "Set Log Level..."), original: 'Set Log Level...' };
src/vs/workbench/contrib/logs/common/logsActions.ts:		entries.push({ type: 'separator', label: nls.localize('all', "All") });
src/vs/workbench/contrib/logs/common/logsActions.ts:		entries.push({ type: 'separator', label: nls.localize('loggers', "Logs") });
src/vs/workbench/contrib/logs/common/logsActions.ts:			entries.push({ type: 'separator', label: nls.localize('extensionLogs', "Extension Logs") });
src/vs/workbench/contrib/logs/common/logsActions.ts:		const entry = await this.quickInputService.pick(entries, { placeHolder: nls.localize('selectlog', "Set Log Level") });
src/vs/workbench/contrib/logs/common/logsActions.ts:		const entry = await this.quickInputService.pick(entries, { placeHolder: logChannel ? nls.localize('selectLogLevelFor', " {0}: Select log level", logChannel?.label) : nls.localize('selectLogLevel', "Select log level"), activeItem: entries[this.logService.getLevel()] });
src/vs/workbench/contrib/logs/common/logsActions.ts:			case LogLevel.Trace: label = nls.localize('trace', "Trace"); break;
src/vs/workbench/contrib/logs/common/logsActions.ts:			case LogLevel.Debug: label = nls.localize('debug', "Debug"); break;
src/vs/workbench/contrib/logs/common/logsActions.ts:			case LogLevel.Info: label = nls.localize('info', "Info"); break;
src/vs/workbench/contrib/logs/common/logsActions.ts:			case LogLevel.Warning: label = nls.localize('warn', "Warning"); break;
src/vs/workbench/contrib/logs/common/logsActions.ts:			case LogLevel.Error: label = nls.localize('err', "Error"); break;
src/vs/workbench/contrib/logs/common/logsActions.ts:			case LogLevel.Off: label = nls.localize('off', "Off"); break;
src/vs/workbench/contrib/logs/common/logsActions.ts:		return defaultLogLevel === level ? nls.localize('default', "Default") : undefined;
src/vs/workbench/contrib/logs/common/logsActions.ts:	static readonly TITLE = { value: nls.localize('openSessionLogFile', "Open Window Log File (Session)..."), original: 'Open Window Log File (Session)...' };
src/vs/workbench/contrib/logs/common/logsActions.ts:				description: index === 0 ? nls.localize('current', "Current") : undefined
src/vs/workbench/contrib/logs/common/logsActions.ts:				placeHolder: nls.localize('sessions placeholder', "Select Session")
src/vs/workbench/contrib/logs/common/logsActions.ts:					placeHolder: nls.localize('log placeholder', "Select Log file")
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('cursorMoveDown', 'Focus Next Cell Editor'),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('cursorMoveUp', 'Focus Previous Cell Editor'),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('focusFirstCell', 'Focus First Cell'),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('focusLastCell', 'Focus Last Cell'),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('focusOutput', 'Focus In Active Cell Output'),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('focusOutputOut', 'Focus Out Active Cell Output'),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('notebookActions.centerActiveCell', "Center Active Cell"),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('cursorPageUp', "Cell Cursor Page Up"),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('cursorPageUpSelect', "Cell Cursor Page Up Select"),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('cursorPageDown', "Cell Cursor Page Down"),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			title: localize('cursorPageDownSelect', "Cell Cursor Page Down Select"),
src/vs/workbench/contrib/notebook/browser/contrib/navigation/arrow.ts:			markdownDescription: localize('notebook.navigation.allowNavigateToSurroundingCells', "When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.")
src/vs/workbench/contrib/logs/electron-sandbox/logs.contribution.ts:		this.registerLogChannel(Constants.mainLogChannelId, nls.localize('mainLog', "Main"), URI.file(join(this.environmentService.logsPath, `main.log`)));
src/vs/workbench/contrib/logs/electron-sandbox/logs.contribution.ts:		this.registerLogChannel(Constants.sharedLogChannelId, nls.localize('sharedLog', "Shared"), URI.file(join(this.environmentService.logsPath, `sharedprocess.log`)));
src/vs/workbench/contrib/logs/common/logs.contribution.ts:		this.registerLogChannel(Constants.userDataSyncLogChannelId, nls.localize('userDataSyncLog', "Settings Sync"), this.environmentService.userDataSyncLogResource);
src/vs/workbench/contrib/logs/common/logs.contribution.ts:		this.registerLogChannel(Constants.editSessionsLogChannelId, nls.localize('editSessionsLog', "Edit Sessions"), this.environmentService.editSessionsLogResource);
src/vs/workbench/contrib/logs/common/logs.contribution.ts:		this.registerLogChannel(Constants.remoteTunnelLogChannelId, nls.localize('remoteTunnelLog', "Remote Tunnel"), this.environmentService.remoteTunnelLogResource);
src/vs/workbench/contrib/logs/common/logs.contribution.ts:		this.registerLogChannel(Constants.rendererLogChannelId, nls.localize('rendererLog', "Window"), this.environmentService.logFile);
src/vs/workbench/contrib/logs/common/logs.contribution.ts:				this.registerLogChannel(Constants.telemetryLogChannelId, nls.localize('telemetryLog', "Telemetry{0}", logSuffix), this.environmentService.telemetryLogResource);
src/vs/workbench/contrib/logs/common/logs.contribution.ts:				this.registerLogChannel(Constants.extensionTelemetryLogChannelId, nls.localize('extensionTelemetryLog', "Extension Telemetry{0}", logSuffix), this.environmentService.extHostTelemetryLogFile);
src/vs/workbench/contrib/logs/common/logs.contribution.ts:					title: { value: nls.localize('show window log', "Show Window Log"), original: 'Show Window Log' },
src/vs/workbench/contrib/localization/browser/localizationsActions.ts:	public static readonly LABEL = localize('configureLocale', "Configure Display Language");
src/vs/workbench/contrib/localization/browser/localizationsActions.ts:		qp.placeholder = localize('chooseLocale', "Select Display Language");
src/vs/workbench/contrib/localization/browser/localizationsActions.ts:			const items: Array<ILanguagePackItem | IQuickPickSeparator> = [{ type: 'separator', label: localize('installed', "Installed") }];
src/vs/workbench/contrib/localization/browser/localizationsActions.ts:					{ type: 'separator', label: localize('available', "Available") },
src/vs/workbench/contrib/localization/browser/localizationsActions.ts:	public static readonly LABEL = localize('clearDisplayLanguage', "Clear Display Language Preference");
src/vs/workbench/contrib/localization/browser/localeService.ts:			message: localize('relaunchDisplayLanguageMessage', "To change the display language, {0} needs to reload", this.productService.nameLong),
src/vs/workbench/contrib/localization/browser/localeService.ts:			detail: localize('relaunchDisplayLanguageDetail', "Press the reload button to refresh the page and set the display language to {0}.", languagePackItem.label),
src/vs/workbench/contrib/localization/browser/localeService.ts:			primaryButton: localize({ key: 'reload', comment: ['&& denotes a mnemonic character'] }, "&&Reload"),
src/vs/workbench/contrib/localization/browser/localeService.ts:			message: localize('clearDisplayLanguageMessage', "To change the display language, {0} needs to reload", this.productService.nameLong),
src/vs/workbench/contrib/localization/browser/localeService.ts:			detail: localize('clearDisplayLanguageDetail', "Press the reload button to refresh the page and use your browser's language."),
src/vs/workbench/contrib/localization/browser/localeService.ts:			primaryButton: localize({ key: 'reload', comment: ['&& denotes a mnemonic character'] }, "&&Reload"),
src/vs/workbench/contrib/localization/electron-sandbox/localeService.ts:				message: localize('argvInvalid', 'Unable to write display language. Please open the runtime settings, correct errors/warnings in it and try again.'),
src/vs/workbench/contrib/localization/electron-sandbox/localeService.ts:							label: localize('openArgv', "Open Runtime Settings"),
src/vs/workbench/contrib/localization/electron-sandbox/localeService.ts:						title: localize('installing', "Installing {0} language support...", languagePackItem.label),
src/vs/workbench/contrib/localization/electron-sandbox/localeService.ts:			message: localize('restartDisplayLanguageMessage', "To change the display language, {0} needs to restart", this.productService.nameLong),
src/vs/workbench/contrib/localization/electron-sandbox/localeService.ts:			detail: localize(
src/vs/workbench/contrib/localization/electron-sandbox/localeService.ts:			primaryButton: localize({ key: 'restart', comment: ['&& denotes a mnemonic character'] }, "&&Restart"),
src/vs/workbench/contrib/languageDetection/browser/languageDetection.contribution.ts:				let tooltip = localize('status.autoDetectLanguage', "Accept Detected Language: {0}", detectedName);
src/vs/workbench/contrib/languageDetection/browser/languageDetection.contribution.ts:					name: localize('langDetection.name', "Language Detection"),
src/vs/workbench/contrib/languageDetection/browser/languageDetection.contribution.ts:					ariaLabel: localize('langDetection.aria', "Change to Detected Language: {0}", lang),
src/vs/workbench/contrib/languageDetection/browser/languageDetection.contribution.ts:			title: { value: localize('detectlang', 'Detect Language from Content'), original: 'Detect Language from Content' },
src/vs/workbench/contrib/languageDetection/browser/languageDetection.contribution.ts:				notificationService.warn(localize('noDetection', "Unable to detect editor language"));
src/vs/workbench/contrib/keybindings/browser/keybindings.contribution.ts:			title: { value: nls.localize('toggleKeybindingsLog', "Toggle Keyboard Shortcuts Troubleshooting"), original: 'Toggle Keyboard Shortcuts Troubleshooting' },
src/vs/workbench/contrib/localization/electron-sandbox/minimalTranslations.ts:	showLanguagePackExtensions: localize('showLanguagePackExtensions', "Search language packs in the Marketplace to change the display language to {0}."),
src/vs/workbench/contrib/localization/electron-sandbox/minimalTranslations.ts:	searchMarketplace: localize('searchMarketplace', "Search Marketplace"),
src/vs/workbench/contrib/localization/electron-sandbox/minimalTranslations.ts:	installAndRestartMessage: localize('installAndRestartMessage', "Install language pack to change the display language to {0}."),
src/vs/workbench/contrib/localization/electron-sandbox/minimalTranslations.ts:	installAndRestart: localize('installAndRestart', "Install and Restart")
src/vs/workbench/contrib/issue/browser/issue.web.contribution.ts:			const OpenIssueReporterActionLabel = nls.localize({ key: 'reportIssueInEnglish', comment: ['Translate this to "Report Issue in English" in all languages please!'] }, "Report Issue");
src/vs/workbench/contrib/issue/browser/issue.web.contribution.ts:	return nls.localize('statusUnsupported', "The --status argument is not yet supported in browsers.");
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:			title: { value: localize('openProcessExplorer', "Open Process Explorer"), original: 'Open Process Explorer' },
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:			title: { value: localize({ key: 'reportPerformanceIssue', comment: [`Here, 'issue' means problem or bug`] }, "Report Performance Issue..."), original: 'Report Performance Issue' },
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:			title: { value: localize('stopTracing', "Stop Tracing"), original: 'Stop Tracing' },
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:				localize('stopTracing.message', "Tracing requires to launch with a '--trace' argument"),
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:					localize({ key: 'stopTracing.button', comment: ['&& denotes a mnemonic'] }, "&&Relaunch and Enable Tracing"),
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:					localize('cancel', "Cancel")
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:			title: localize('stopTracing.title', "Creating trace file..."),
src/vs/workbench/contrib/issue/electron-sandbox/issueActions.ts:			detail: localize('stopTracing.detail', "This can take up to one minute to complete.")
src/vs/workbench/common/views.ts:export const defaultViewIcon = registerIcon('default-view-icon', Codicon.window, localize('defaultViewIcon', 'Default view icon.'));
src/vs/workbench/common/views.ts:				throw new Error(localize('duplicateId', "A view with id '{0}' is already registered", viewDescriptor.id));
src/vs/workbench/contrib/interactive/browser/interactiveEditor.ts:			const text = nls.localize('interactiveInputPlaceHolder', "Type '{0}' code here and press {1} to run", languageId, keybinding ?? 'ctrl+enter');
src/vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts:			value: localize({ key: 'reportIssueInEnglish', comment: ['Translate this to "Report Issue in English" in all languages please!'] }, "Report Issue..."),
src/vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts:			title: localize({ key: 'miReportIssue', comment: ['&& denotes a mnemonic', 'Translate this to "Report Issue in English" in all languages please!'] }, "Report &&Issue")
src/vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts:		title: localize({ key: 'miOpenProcessExplorerer', comment: ['&& denotes a mnemonic'] }, "Open &&Process Explorer")
src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts:	static readonly IsReading = new RawContextKey<boolean>('isReadingLineWithInlayHints', false, { type: 'boolean', description: localize('isReadingLineWithInlayHints', "Whether the current line and its inlay hints are currently focused") });
src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts:		this._ariaElement.setAttribute('aria-description', localize('description', "Code with Inlay Hint Information"));
src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts:				value: localize('read.title', 'Read Line With Inline Hints'),
src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts:				value: localize('stop.title', 'Stop Inlay Hints Reading'),
src/vs/workbench/common/theme.ts:}, localize('tabActiveBackground', "Active tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabUnfocusedActiveBackground', "Active tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabInactiveBackground', "Inactive tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabUnfocusedInactiveBackground', "Inactive tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabActiveForeground', "Active tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabInactiveForeground', "Inactive tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabUnfocusedActiveForeground', "Active tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabUnfocusedInactiveForeground', "Inactive tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabHoverBackground', "Tab background color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabUnfocusedHoverBackground', "Tab background color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabHoverForeground', "Tab foreground color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabUnfocusedHoverForeground', "Tab foreground color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabBorder', "Border to separate tabs from each other. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('lastPinnedTabBorder', "Border to separate pinned tabs from other tabs. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabActiveBorder', "Border on the bottom of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabActiveUnfocusedBorder', "Border on the bottom of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabActiveBorderTop', "Border to the top of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabActiveUnfocusedBorderTop', "Border to the top of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabHoverBorder', "Border to highlight tabs when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabUnfocusedHoverBorder', "Border to highlight tabs in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabActiveModifiedBorder', "Border on the top of modified active tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('tabInactiveModifiedBorder', "Border on the top of modified inactive tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('unfocusedActiveModifiedBorder', "Border on the top of modified active tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('unfocusedINactiveModifiedBorder', "Border on the top of modified inactive tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups."));
src/vs/workbench/common/theme.ts:}, localize('editorPaneBackground', "Background color of the editor pane visible on the left and right side of the centered editor layout."));
src/vs/workbench/common/theme.ts:}, localize('editorGroupEmptyBackground', "Background color of an empty editor group. Editor groups are the containers of editors."));
src/vs/workbench/common/theme.ts:}, localize('editorGroupFocusedEmptyBorder', "Border color of an empty editor group that is focused. Editor groups are the containers of editors."));
src/vs/workbench/common/theme.ts:}, localize('tabsContainerBackground', "Background color of the editor group title header when tabs are enabled. Editor groups are the containers of editors."));
src/vs/workbench/common/theme.ts:}, localize('tabsContainerBorder', "Border color of the editor group title header when tabs are enabled. Editor groups are the containers of editors."));
src/vs/workbench/common/theme.ts:}, localize('editorGroupHeaderBackground', "Background color of the editor group title header when tabs are disabled (`\"workbench.editor.showTabs\": false`). Editor groups are the containers of editors."));
src/vs/workbench/common/theme.ts:}, localize('editorTitleContainerBorder', "Border color of the editor group title header. Editor groups are the containers of editors."));
src/vs/workbench/common/theme.ts:}, localize('editorGroupBorder', "Color to separate multiple editor groups from each other. Editor groups are the containers of editors."));
src/vs/workbench/common/theme.ts:}, localize('editorDragAndDropBackground', "Background color when dragging editors around. The color should have transparency so that the editor contents can still shine through."));
src/vs/workbench/common/theme.ts:}, localize('editorDropIntoPromptForeground', "Foreground color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor."));
src/vs/workbench/common/theme.ts:}, localize('editorDropIntoPromptBackground', "Background color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor."));
src/vs/workbench/common/theme.ts:}, localize('editorDropIntoPromptBorder', "Border color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor."));
src/vs/workbench/common/theme.ts:}, localize('sideBySideEditor.horizontalBorder', "Color to separate two editors from each other when shown side by side in an editor group from top to bottom."));
src/vs/workbench/common/theme.ts:}, localize('sideBySideEditor.verticalBorder', "Color to separate two editors from each other when shown side by side in an editor group from left to right."));
src/vs/workbench/common/theme.ts:}, localize('panelBackground', "Panel background color. Panels are shown below the editor area and contain views like output and integrated terminal."));
src/vs/workbench/common/theme.ts:}, localize('panelBorder', "Panel border color to separate the panel from the editor. Panels are shown below the editor area and contain views like output and integrated terminal."));
src/vs/workbench/common/theme.ts:}, localize('panelActiveTitleForeground', "Title color for the active panel. Panels are shown below the editor area and contain views like output and integrated terminal."));
src/vs/workbench/common/theme.ts:}, localize('panelInactiveTitleForeground', "Title color for the inactive panel. Panels are shown below the editor area and contain views like output and integrated terminal."));
src/vs/workbench/common/theme.ts:}, localize('panelActiveTitleBorder', "Border color for the active panel title. Panels are shown below the editor area and contain views like output and integrated terminal."));
src/vs/workbench/common/theme.ts:}, localize('panelInputBorder', "Input box border for inputs in the panel."));
src/vs/workbench/common/theme.ts:}, localize('panelDragAndDropBorder', "Drag and drop feedback color for the panel titles. Panels are shown below the editor area and contain views like output and integrated terminal."));
src/vs/workbench/common/theme.ts:}, localize('panelSectionDragAndDropBackground', "Drag and drop feedback color for the panel sections. The color should have transparency so that the panel sections can still shine through. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."));
src/vs/workbench/common/theme.ts:}, localize('panelSectionHeaderBackground', "Panel section header background color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."));
src/vs/workbench/common/theme.ts:}, localize('panelSectionHeaderForeground', "Panel section header foreground color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."));
src/vs/workbench/common/theme.ts:}, localize('panelSectionHeaderBorder', "Panel section header border color used when multiple views are stacked vertically in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."));
src/vs/workbench/common/theme.ts:}, localize('panelSectionBorder', "Panel section border color used when multiple views are stacked horizontally in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels."));
src/vs/workbench/common/theme.ts:}, localize('banner.background', "Banner background color. The banner is shown under the title bar of the window."));
src/vs/workbench/common/theme.ts:}, localize('banner.foreground', "Banner foreground color. The banner is shown under the title bar of the window."));
src/vs/workbench/common/theme.ts:}, localize('banner.iconForeground', "Banner icon color. The banner is shown under the title bar of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarForeground', "Status bar foreground color when a workspace or folder is opened. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarNoFolderForeground', "Status bar foreground color when no folder is opened. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarBackground', "Status bar background color when a workspace or folder is opened. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarNoFolderBackground', "Status bar background color when no folder is opened. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarBorder', "Status bar border color separating to the sidebar and editor. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarFocusBorder', "Status bar border color when focused on keyboard navigation. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarNoFolderBorder', "Status bar border color separating to the sidebar and editor when no folder is opened. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarItemActiveBackground', "Status bar item background color when clicking. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarItemFocusBorder', "Status bar item border color when focused on keyboard navigation. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarItemHoverBackground', "Status bar item background color when hovering. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarItemCompactHoverBackground', "Status bar item background color when hovering an item that contains two hovers. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarProminentItemForeground', "Status bar prominent items foreground color. Prominent items stand out from other status bar entries to indicate importance. Change mode `Toggle Tab Key Moves Focus` from command palette to see an example. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarProminentItemBackground', "Status bar prominent items background color. Prominent items stand out from other status bar entries to indicate importance. Change mode `Toggle Tab Key Moves Focus` from command palette to see an example. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarProminentItemHoverBackground', "Status bar prominent items background color when hovering. Prominent items stand out from other status bar entries to indicate importance. Change mode `Toggle Tab Key Moves Focus` from command palette to see an example. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarErrorItemBackground', "Status bar error items background color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarErrorItemForeground', "Status bar error items foreground color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarWarningItemBackground', "Status bar warning items background color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('statusBarWarningItemForeground', "Status bar warning items foreground color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window."));
src/vs/workbench/common/theme.ts:}, localize('activityBarBackground', "Activity bar background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarForeground', "Activity bar item foreground color when it is active. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarInActiveForeground', "Activity bar item foreground color when it is inactive. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarBorder', "Activity bar border color separating to the side bar. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarActiveBorder', "Activity bar border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarActiveFocusBorder', "Activity bar focus border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarActiveBackground', "Activity bar background color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarDragAndDropBorder', "Drag and drop feedback color for the activity bar items. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarBadgeBackground', "Activity notification badge background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarBadgeForeground', "Activity notification badge foreground color. The activity bar is showing on the far left or right and allows to switch between views of the side bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarItem.profilesForeground', "Foreground color for the profile entry on the activity bar."));
src/vs/workbench/common/theme.ts:}, localize('activityBarItem.profilesHoverForeground', "Foreground color for the profile entry on the activity bar when hovering."));
src/vs/workbench/common/theme.ts:}, localize('activityBarItem.profilesBackground', "Background color for the profile entry on the activity bar."));
src/vs/workbench/common/theme.ts:}, localize('statusBarItemHostBackground', "Background color for the remote indicator on the status bar."));
src/vs/workbench/common/theme.ts:}, localize('statusBarItemHostForeground', "Foreground color for the remote indicator on the status bar."));
src/vs/workbench/common/theme.ts:}, localize('extensionBadge.remoteBackground', "Background color for the remote badge in the extensions view."));
src/vs/workbench/common/theme.ts:}, localize('extensionBadge.remoteForeground', "Foreground color for the remote badge in the extensions view."));
src/vs/workbench/common/theme.ts:}, localize('sideBarBackground', "Side bar background color. The side bar is the container for views like explorer and search."));
src/vs/workbench/common/theme.ts:}, localize('sideBarForeground', "Side bar foreground color. The side bar is the container for views like explorer and search."));
src/vs/workbench/common/theme.ts:}, localize('sideBarBorder', "Side bar border color on the side separating to the editor. The side bar is the container for views like explorer and search."));
src/vs/workbench/common/theme.ts:}, localize('sideBarTitleForeground', "Side bar title foreground color. The side bar is the container for views like explorer and search."));
src/vs/workbench/common/theme.ts:}, localize('sideBarDragAndDropBackground', "Drag and drop feedback color for the side bar sections. The color should have transparency so that the side bar sections can still shine through. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."));
src/vs/workbench/common/theme.ts:}, localize('sideBarSectionHeaderBackground', "Side bar section header background color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."));
src/vs/workbench/common/theme.ts:}, localize('sideBarSectionHeaderForeground', "Side bar section header foreground color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."));
src/vs/workbench/common/theme.ts:}, localize('sideBarSectionHeaderBorder', "Side bar section header border color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar."));
src/vs/workbench/common/theme.ts:}, localize('titleBarActiveForeground', "Title bar foreground when the window is active."));
src/vs/workbench/common/theme.ts:}, localize('titleBarInactiveForeground', "Title bar foreground when the window is inactive."));
src/vs/workbench/common/theme.ts:}, localize('titleBarActiveBackground', "Title bar background when the window is active."));
src/vs/workbench/common/theme.ts:}, localize('titleBarInactiveBackground', "Title bar background when the window is inactive."));
src/vs/workbench/common/theme.ts:}, localize('titleBarBorder', "Title bar border color."));
src/vs/workbench/common/theme.ts:}, localize('menubarSelectionForeground', "Foreground color of the selected menu item in the menubar."));
src/vs/workbench/common/theme.ts:}, localize('menubarSelectionBackground', "Background color of the selected menu item in the menubar."));
src/vs/workbench/common/theme.ts:}, localize('menubarSelectionBorder', "Border color of the selected menu item in the menubar."));
src/vs/workbench/common/theme.ts:}, localize('notificationCenterBorder', "Notifications center border color. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationToastBorder', "Notification toast border color. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationsForeground', "Notifications foreground color. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationsBackground', "Notifications background color. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationsLink', "Notification links foreground color. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationCenterHeaderForeground', "Notifications center header foreground color. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationCenterHeaderBackground', "Notifications center header background color. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationsBorder', "Notifications border color separating from other notifications in the notifications center. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationsErrorIconForeground', "The color used for the icon of error notifications. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationsWarningIconForeground', "The color used for the icon of warning notifications. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('notificationsInfoIconForeground', "The color used for the icon of info notifications. Notifications slide in from the bottom right of the window."));
src/vs/workbench/common/theme.ts:}, localize('windowActiveBorder', "The color used for the border of the window when it is active. Only supported in the macOS and Linux desktop client when using the custom title bar."));
src/vs/workbench/common/theme.ts:}, localize('windowInactiveBorder', "The color used for the border of the window when it is inactive. Only supported in the macOS and Linux desktop client when using the custom title bar."));
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:const interactiveWindowCategory: ILocalizedString = { value: localize('interactiveWindow', 'Interactive Window'), original: 'Interactive Window' };
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: { value: localize('interactive.open', "Open Interactive Window"), original: 'Open Interactive Window' },
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:				description: localize('interactive.open', "Open Interactive Window"),
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: { value: localize('interactive.execute', "Execute Code"), original: 'Execute Code' },
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: { value: localize('interactive.input.clear', "Clear the interactive window input editor contents"), original: 'Clear the interactive window input editor contents' },
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: { value: localize('interactive.history.previous', "Previous value in history"), original: 'Previous value in history' },
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: { value: localize('interactive.history.next', "Next value in history"), original: 'Next value in history' },
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: localize('interactiveScrollToTop', 'Scroll to Top'),
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: localize('interactiveScrollToBottom', 'Scroll to Bottom'),
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: { value: localize('interactive.input.focus', "Focus Input Editor"), original: 'Focus Input Editor' },
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			title: { value: localize('interactive.history.focus', "Focus History"), original: 'Focus History' },
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:	}, localize('interactive.activeCodeBorder', 'The border color for the current interactive code cell when the editor has focus.'));
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:	// }, localize('interactive.activeCodeBackground', 'The background color for the current interactive code cell when the editor has focus.'));
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:	}, localize('interactive.inactiveCodeBorder', 'The border color for the current interactive code cell when the editor does not have focus.'));
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:	// }, localize('interactive.inactiveCodeBackground', 'The backgorund color for the current interactive code cell when the editor does not have focus.'));
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			markdownDescription: localize('interactiveWindow.alwaysScrollOnNewCell', "Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to.")
src/vs/workbench/contrib/interactive/browser/interactive.contribution.ts:			markdownDescription: localize('interactiveWindow.restore', "Controls whether the Interactive Window sessions/history should be restored across window reloads. Whether the state of controllers used in Interactive Windows is persisted across window reloads are controlled by extensions contributing controllers.")
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:						updateAndRestart ? localize('updateLocale', "Would you like to change VS Code's UI language to {0} and restart?", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId)
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:							: localize('activateLanguagePack', "In order to use VS Code in {0}, VS Code needs to restart.", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:							label: updateAndRestart ? localize('changeAndRestart', "Change Language and Restart") : localize('restart', "Restart"),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:							label: updateAndRestart ? localize('doNotChangeAndRestart', "Don't Change Language") : localize('doNotRestart', "Don't Restart"),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:									label: localize('neverAgain', "Don't Show Again"),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:		description: localize('vscode.extension.contributes.localizations', "Contributes localizations to the editor"),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:					description: localize('vscode.extension.contributes.localizations.languageId', 'Id of the language into which the display strings are translated.'),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:					description: localize('vscode.extension.contributes.localizations.languageName', 'Name of the language in English.'),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:					description: localize('vscode.extension.contributes.localizations.languageNameLocalized', 'Name of the language in contributed language.'),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:					description: localize('vscode.extension.contributes.localizations.translations', 'List of translations associated to the language.'),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:								description: localize('vscode.extension.contributes.localizations.translations.id', "Id of VS Code or Extension for which this translation is contributed to. Id of VS Code is always `vscode` and of extension should be in format `publisherId.extensionName`."),
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:								patternErrorMessage: localize('vscode.extension.contributes.localizations.translations.id.pattern', "Id should be `vscode` or in format `publisherId.extensionName` for translating VS code or an extension respectively.")
src/vs/workbench/contrib/localization/electron-sandbox/localization.contribution.ts:								description: localize('vscode.extension.contributes.localizations.translations.path', "A relative path to a file containing translations for the language.")
src/vs/workbench/browser/editor.ts:		ariaLabel = localize('preview', "{0}, preview", ariaLabel);
src/vs/workbench/browser/editor.ts:		ariaLabel = localize('pinned', "{0}, pinned", ariaLabel);
src/vs/workbench/contrib/format/browser/formatModified.ts:			label: nls.localize('formatChanges', "Format Modified Lines"),
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:const configureSettingsLabel = nls.localize('status.button.configure', "Configure");
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:				name: nls.localize('foldingRangesStatusItem.name', 'Folding Status'),
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:				label: nls.localize('status.limitedFoldingRanges.short', 'Folding Ranges Limited'),
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:				detail: nls.localize('status.limitedFoldingRanges.details', 'only {0} folding ranges shown for performance reasons', info.limited),
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:				source: nls.localize('foldingRangesStatusItem.source', 'Folding'),
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:		DefaultFoldingRangeProvider.extensionItemLabels.push(nls.localize('null', 'All'));
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:		DefaultFoldingRangeProvider.extensionDescriptions.push(nls.localize('nullFormatterDescription', "All active folding range providers"));
src/vs/workbench/contrib/folding/browser/folding.contribution.ts:			description: nls.localize('formatter.default', "Defines a default folding range provider which takes precedence over all other folding range provider. Must be the identifier of an extension contributing a folding range provider."),
src/vs/workbench/contrib/files/electron-sandbox/fileActions.contribution.ts:const REVEAL_IN_OS_LABEL = isWindows ? nls.localize('revealInWindows', "Reveal in File Explorer") : isMacintosh ? nls.localize('revealInMac', "Reveal in Finder") : nls.localize('openContainer', "Open Containing Folder");
src/vs/workbench/contrib/files/electron-sandbox/fileActions.contribution.ts:const category = { value: nls.localize('filesCategory', "File"), original: 'File' };
src/vs/workbench/contrib/feedback/browser/feedback.ts:		append(this.feedbackForm, $('h2.title')).textContent = localize("label.sendASmile", "Tweet us your feedback.");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		closeBtn.title = localize('close', "Close");
src/vs/workbench/contrib/feedback/browser/feedback.ts:			append(sentimentContainer, $('span')).textContent = localize("patchedVersion1", "Your installation is corrupt.");
src/vs/workbench/contrib/feedback/browser/feedback.ts:			append(sentimentContainer, $('span')).textContent = localize("patchedVersion2", "Please specify this if you submit a bug.");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		append(sentimentContainer, $('span')).textContent = localize("sentiment", "How was your experience?");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		this.smileyInput.setAttribute('aria-label', localize('smileCaption', "Happy Feedback Sentiment"));
src/vs/workbench/contrib/feedback/browser/feedback.ts:		this.smileyInput.title = localize('smileCaption', "Happy Feedback Sentiment");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		this.frownyInput.setAttribute('aria-label', localize('frownCaption', "Sad Feedback Sentiment"));
src/vs/workbench/contrib/feedback/browser/feedback.ts:		this.frownyInput.title = localize('frownCaption', "Sad Feedback Sentiment");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		append(contactUsContainer, $('span')).textContent = localize("other ways to contact us", "Other ways to contact us");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		submitBugLink.textContent = localize("submit a bug", "Submit a bug");
src/vs/workbench/contrib/feedback/browser/feedback.ts:			requestFeatureLink.textContent = localize("request a missing feature", "Request a missing feature");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		remainingCharacterCountContainer.textContent = localize("tell us why", "Tell us why?");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		this.feedbackDescriptionInput.setAttribute('aria-label', localize("feedbackTextInput", "Tell us your feedback"));
src/vs/workbench/contrib/feedback/browser/feedback.ts:		hideButtonLabel.textContent = localize('showFeedback', "Show Feedback Icon in Status Bar");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		this.sendButton.label = localize('tweet', "Tweet");
src/vs/workbench/contrib/feedback/browser/feedback.ts:		this.sendButton.element.title = localize('tweetFeedback', "Tweet Feedback");
src/vs/workbench/contrib/feedback/browser/feedback.ts:			? localize("character left", "character left")
src/vs/workbench/contrib/feedback/browser/feedback.ts:			: localize("characters left", "characters left");
src/vs/workbench/contrib/files/electron-sandbox/textFileEditor.ts:			throw createErrorWithActions(localize('fileTooLargeForHeapError', "To open a file of this size, you need to restart and allow {0} to use more memory", this.productService.nameShort), [
src/vs/workbench/contrib/files/electron-sandbox/textFileEditor.ts:					id: 'workbench.window.action.relaunchWithIncreasedMemoryLimit', label: localize('relaunchWithIncreasedMemoryLimit', "Restart with {0} MB", memoryLimit), run: () => {
src/vs/workbench/contrib/files/electron-sandbox/textFileEditor.ts:					id: 'workbench.window.action.configureMemoryLimit', label: localize('configureMemoryLimit', 'Configure Memory Limit'), run: () => {
src/vs/workbench/contrib/feedback/browser/feedbackStatusbarItem.ts:				title: localize('status.feedback', "Tweet Feedback")
src/vs/workbench/contrib/feedback/browser/feedbackStatusbarItem.ts:			name: localize('status.feedback.name', "Feedback"),
src/vs/workbench/contrib/feedback/browser/feedbackStatusbarItem.ts:			ariaLabel: localize('status.feedback', "Tweet Feedback"),
src/vs/workbench/contrib/feedback/browser/feedbackStatusbarItem.ts:			tooltip: localize('status.feedback', "Tweet Feedback"),
src/vs/workbench/contrib/files/electron-sandbox/files.contribution.ts:		nls.localize('textFileEditor', "Text File Editor")
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerViewletVisibleContext = new RawContextKey<boolean>('explorerViewletVisible', true, { type: 'boolean', description: localize('explorerViewletVisible', "True when the EXPLORER viewlet is visible.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerFolderContext = new RawContextKey<boolean>('explorerResourceIsFolder', false, { type: 'boolean', description: localize('explorerResourceIsFolder', "True when the focused item in the EXPLORER is a folder.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerResourceReadonlyContext = new RawContextKey<boolean>('explorerResourceReadonly', false, { type: 'boolean', description: localize('explorerResourceReadonly', "True when the focused item in the EXPLORER is readonly.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerRootContext = new RawContextKey<boolean>('explorerResourceIsRoot', false, { type: 'boolean', description: localize('explorerResourceIsRoot', "True when the focused item in the EXPLORER is a root folder.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerResourceCut = new RawContextKey<boolean>('explorerResourceCut', false, { type: 'boolean', description: localize('explorerResourceCut', "True when an item in the EXPLORER has been cut for cut and paste.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerResourceMoveableToTrash = new RawContextKey<boolean>('explorerResourceMoveableToTrash', false, { type: 'boolean', description: localize('explorerResourceMoveableToTrash', "True when the focused item in the EXPLORER can be moved to trash.") });
src/vs/workbench/contrib/files/common/files.ts:export const FilesExplorerFocusedContext = new RawContextKey<boolean>('filesExplorerFocus', true, { type: 'boolean', description: localize('filesExplorerFocus', "True when the focus is inside the EXPLORER view.") });
src/vs/workbench/contrib/files/common/files.ts:export const OpenEditorsVisibleContext = new RawContextKey<boolean>('openEditorsVisible', false, { type: 'boolean', description: localize('openEditorsVisible', "True when the OPEN EDITORS view is visible.") });
src/vs/workbench/contrib/files/common/files.ts:export const OpenEditorsFocusedContext = new RawContextKey<boolean>('openEditorsFocus', true, { type: 'boolean', description: localize('openEditorsFocus', "True when the focus is inside the OPEN EDITORS view.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerFocusedContext = new RawContextKey<boolean>('explorerViewletFocus', true, { type: 'boolean', description: localize('explorerViewletFocus', "True when the focus is inside the EXPLORER viewlet.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerCompressedFocusContext = new RawContextKey<boolean>('explorerViewletCompressedFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedFocus', "True when the focused item in the EXPLORER view is a compact item.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerCompressedFirstFocusContext = new RawContextKey<boolean>('explorerViewletCompressedFirstFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedFirstFocus', "True when the focus is inside a compact item's first part in the EXPLORER view.") });
src/vs/workbench/contrib/files/common/files.ts:export const ExplorerCompressedLastFocusContext = new RawContextKey<boolean>('explorerViewletCompressedLastFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedLastFocus', "True when the focus is inside a compact item's last part in the EXPLORER view.") });
src/vs/workbench/contrib/files/common/files.ts:export const ViewHasSomeCollapsibleRootItemContext = new RawContextKey<boolean>('viewHasSomeCollapsibleItem', false, { type: 'boolean', description: localize('viewHasSomeCollapsibleItem', "True when a workspace in the EXPLORER view has some collapsible root child.") });
src/vs/workbench/contrib/files/common/dirtyFilesIndicator.ts:					badge: new NumberBadge(dirtyCount, num => num === 1 ? nls.localize('dirtyFile', "1 unsaved file") : nls.localize('dirtyFiles', "{0} unsaved files", dirtyCount)),
src/vs/workbench/contrib/format/browser/formatActionsNone.ts:			label: nls.localize('formatDocument.label.multiple', "Format Document"),
src/vs/workbench/contrib/format/browser/formatActionsNone.ts:			notificationService.warn(nls.localize('too.large', "This file cannot be formatted because it is too large"));
src/vs/workbench/contrib/format/browser/formatActionsNone.ts:			const message = nls.localize('no.provider', "There is no formatter for '{0}' files installed.", langName);
src/vs/workbench/contrib/format/browser/formatActionsNone.ts:				[nls.localize('install.formatter', "Install Formatter..."), nls.localize('cancel', "Cancel")],
src/vs/workbench/contrib/files/browser/views/explorerDecorationsProvider.ts:			tooltip: localize('canNotResolve', "Unable to resolve workspace folder"),
src/vs/workbench/contrib/files/browser/views/explorerDecorationsProvider.ts:			tooltip: localize('symbolicLlink', "Symbolic Link"),
src/vs/workbench/contrib/files/browser/views/explorerDecorationsProvider.ts:			tooltip: localize('unknown', "Unknown File Type"),
src/vs/workbench/contrib/files/browser/views/explorerDecorationsProvider.ts:	readonly label: string = localize('label', "Explorer");
src/vs/workbench/contrib/files/browser/workspaceWatcher.ts:				localize('enospcError', "Unable to watch for file changes in this large workspace folder. Please follow the instructions link to resolve this issue."),
src/vs/workbench/contrib/files/browser/workspaceWatcher.ts:					label: localize('learnMore', "Instructions"),
src/vs/workbench/contrib/files/browser/workspaceWatcher.ts:				localize('eshutdownError', "File changes watcher stopped unexpectedly. A reload of the window may enable the watcher again unless the workspace cannot be watched for file changes."),
src/vs/workbench/contrib/files/browser/workspaceWatcher.ts:					label: localize('reload', "Reload"),
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:		return localize('treeAriaLabel', "Files Explorer");
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:			ariaLabel: localize('fileInputAriaLabel', "Type file name. Press Enter to confirm or Escape to cancel.")
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:			const message = items.length > 1 && items.every(s => s.isRoot) ? localize('confirmRootsMove', "Are you sure you want to change the order of multiple root folders in your workspace?")
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:				: items.length > 1 ? localize('confirmMultiMove', "Are you sure you want to move the following {0} files into '{1}'?", items.length, target.name)
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:					: items[0].isRoot ? localize('confirmRootMove', "Are you sure you want to change the order of root folder '{0}' in your workspace?", items[0].name)
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:						: localize('confirmMove', "Are you sure you want to move '{0}' into '{1}'?", items[0].name, target.name);
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:					label: localize('doNotAskAgain', "Do not ask me again")
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:				primaryButton: localize({ key: 'moveButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Move")
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:			undoLabel: localize('copy', "Copy {0}", labelSufix),
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:			progressLabel: localize('copying', "Copying {0}", labelSufix),
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:			undoLabel: localize('move', "Move {0}", labelSufix),
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:			progressLabel: localize('moving', "Moving {0}", labelSufix)
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:		return localize('numberOfFolders', "{0} folders", items.length);
src/vs/workbench/contrib/files/browser/views/explorerViewer.ts:		return localize('numberOfFiles', "{0} files", items.length);
src/vs/workbench/contrib/files/browser/views/emptyView.ts:	static readonly NAME = nls.localize('noWorkspace', "No Folder Opened");
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:		DefaultFormatter.extensionItemLabels.push(nls.localize('null', 'None'));
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:		DefaultFormatter.extensionDescriptions.push(nls.localize('nullFormatterDescription', "None"));
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:				const detail = nls.localize('miss', "Extension '{0}' is configured as formatter but it cannot format '{1}'-files", extension.displayName || extension.name, langName);
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			? nls.localize('config.needed', "There are multiple formatters for '{0}' files. One of them should be configured as default formatter.", DefaultFormatter._maybeQuotes(langName))
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			: nls.localize('config.bad', "Extension '{0}' is configured as formatter but not available. Select a different default formatter to continue.", defaultFormatterId);
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:				message: nls.localize('miss.1', "Configure Default Formatter"),
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:				primaryButton: nls.localize('do.config', "Configure..."),
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:				secondaryButton: nls.localize('cancel', "Cancel")
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:				[{ label: nls.localize('do.config', "Configure..."), run: () => this._pickAndPersistDefaultFormatter(formatter, document) }],
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:		const pick = await this._quickInputService.pick(picks, { placeHolder: nls.localize('select', "Select a default formatter for '{0}' files", DefaultFormatter._maybeQuotes(langName)) });
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			const command = { id: `formatter/configure/dfl/${generateUuid()}`, title: nls.localize('do.config', "Configure...") };
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:				name: nls.localize('summary', "Formatter Conflicts"),
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:				label: nls.localize('formatter', "Formatting"),
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			description: nls.localize('formatter.default', "Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter."),
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			description: isDefault ? nls.localize('def', "(default)") : undefined,
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:		label: nls.localize('config', "Configure Default Formatter...")
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			placeHolder: nls.localize('format.placeHolder', "Select a formatter"),
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:		const pick = await quickPickService.pick(picks, { placeHolder: nls.localize('select', "Select a default formatter for '{0}' files", DefaultFormatter._maybeQuotes(langName)) });
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			label: nls.localize('formatDocument.label.multiple', "Format Document With..."),
src/vs/workbench/contrib/format/browser/formatActionsMultiple.ts:			label: nls.localize('formatSelection.label.multiple', "Format Selection With..."),
src/vs/workbench/contrib/files/browser/files.web.contribution.ts:		localize('textFileEditor', "Text File Editor")
src/vs/workbench/contrib/files/browser/fileActions.ts:export const NEW_FILE_LABEL = nls.localize('newFile', "New File...");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const NEW_FOLDER_LABEL = nls.localize('newFolder', "New Folder...");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const TRIGGER_RENAME_LABEL = nls.localize('rename', "Rename...");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const MOVE_FILE_TO_TRASH_LABEL = nls.localize('delete', "Delete");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const COPY_FILE_LABEL = nls.localize('copyFile', "Copy");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const PASTE_FILE_LABEL = nls.localize('pasteFile', "Paste");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const DOWNLOAD_LABEL = nls.localize('download', "Download...");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const UPLOAD_LABEL = nls.localize('upload', "Upload...");
src/vs/workbench/contrib/files/browser/fileActions.ts:export const fileCategory = { value: nls.localize('filesCategory', "File"), original: 'File' };
src/vs/workbench/contrib/files/browser/fileActions.ts:		primaryButton = isWindows ? nls.localize('deleteButtonLabelRecycleBin', "&&Move to Recycle Bin") : nls.localize({ key: 'deleteButtonLabelTrash', comment: ['&& denotes a mnemonic'] }, "&&Move to Trash");
src/vs/workbench/contrib/files/browser/fileActions.ts:		primaryButton = nls.localize({ key: 'deleteButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete");
src/vs/workbench/contrib/files/browser/fileActions.ts:			message = nls.localize('dirtyMessageFilesDelete', "You are deleting files with unsaved changes. Do you want to continue?");
src/vs/workbench/contrib/files/browser/fileActions.ts:				message = nls.localize('dirtyMessageFolderOneDelete', "You are deleting a folder {0} with unsaved changes in 1 file. Do you want to continue?", distinctElements[0].name);
src/vs/workbench/contrib/files/browser/fileActions.ts:				message = nls.localize('dirtyMessageFolderDelete', "You are deleting a folder {0} with unsaved changes in {1} files. Do you want to continue?", distinctElements[0].name, dirtyWorkingCopies.size);
src/vs/workbench/contrib/files/browser/fileActions.ts:			message = nls.localize('dirtyMessageFileDelete', "You are deleting {0} with unsaved changes. Do you want to continue?", distinctElements[0].name);
src/vs/workbench/contrib/files/browser/fileActions.ts:			detail: nls.localize('dirtyWarning', "Your changes will be lost if you don't save them."),
src/vs/workbench/contrib/files/browser/fileActions.ts:	const deleteDetail = distinctElements.some(e => e.isDirectory) ? nls.localize('irreversible', "This action is irreversible!") :
src/vs/workbench/contrib/files/browser/fileActions.ts:		distinctElements.length > 1 ? nls.localize('restorePlural', "You can restore these files using the Undo command") : nls.localize('restore', "You can restore this file using the Undo command");
src/vs/workbench/contrib/files/browser/fileActions.ts:			detail += distinctElements.length > 1 ? nls.localize('undoBinFiles', "You can restore these files from the Recycle Bin.") : nls.localize('undoBin', "You can restore this file from the Recycle Bin.");
src/vs/workbench/contrib/files/browser/fileActions.ts:			detail += distinctElements.length > 1 ? nls.localize('undoTrashFiles', "You can restore these files from the Trash.") : nls.localize('undoTrash', "You can restore this file from the Trash.");
src/vs/workbench/contrib/files/browser/fileActions.ts:				label: nls.localize('doNotAskAgain', "Do not ask me again")
src/vs/workbench/contrib/files/browser/fileActions.ts:			undoLabel: distinctElements.length > 1 ? nls.localize({ key: 'deleteBulkEdit', comment: ['Placeholder will be replaced by the number of files deleted'] }, "Delete {0} files", distinctElements.length) : nls.localize({ key: 'deleteFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file deleted'] }, "Delete {0}", distinctElements[0].name),
src/vs/workbench/contrib/files/browser/fileActions.ts:			progressLabel: distinctElements.length > 1 ? nls.localize({ key: 'deletingBulkEdit', comment: ['Placeholder will be replaced by the number of files deleted'] }, "Deleting {0} files", distinctElements.length) : nls.localize({ key: 'deletingFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file deleted'] }, "Deleting {0}", distinctElements[0].name),
src/vs/workbench/contrib/files/browser/fileActions.ts:			errorMessage = isWindows ? nls.localize('binFailed', "Failed to delete using the Recycle Bin. Do you want to permanently delete instead?") : nls.localize('trashFailed', "Failed to delete using the Trash. Do you want to permanently delete instead?");
src/vs/workbench/contrib/files/browser/fileActions.ts:			primaryButton = nls.localize({ key: 'deletePermanentlyButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete Permanently");
src/vs/workbench/contrib/files/browser/fileActions.ts:			primaryButton = nls.localize({ key: 'retryButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Retry");
src/vs/workbench/contrib/files/browser/fileActions.ts:			message: nls.localize('confirmMoveTrashMessageFilesAndDirectories', "Are you sure you want to delete the following {0} files/directories and their contents?", distinctElements.length),
src/vs/workbench/contrib/files/browser/fileActions.ts:				message: nls.localize('confirmMoveTrashMessageMultipleDirectories', "Are you sure you want to delete the following {0} directories and their contents?", distinctElements.length),
src/vs/workbench/contrib/files/browser/fileActions.ts:			message: nls.localize('confirmMoveTrashMessageMultiple', "Are you sure you want to delete the following {0} files?", distinctElements.length),
src/vs/workbench/contrib/files/browser/fileActions.ts:		return { message: nls.localize('confirmMoveTrashMessageFolder', "Are you sure you want to delete '{0}' and its contents?", distinctElements[0].name), detail: '' };
src/vs/workbench/contrib/files/browser/fileActions.ts:	return { message: nls.localize('confirmMoveTrashMessageFile', "Are you sure you want to delete '{0}'?", distinctElements[0].name), detail: '' };
src/vs/workbench/contrib/files/browser/fileActions.ts:			message: nls.localize('confirmDeleteMessageFilesAndDirectories', "Are you sure you want to permanently delete the following {0} files/directories and their contents?", distinctElements.length),
src/vs/workbench/contrib/files/browser/fileActions.ts:				message: nls.localize('confirmDeleteMessageMultipleDirectories', "Are you sure you want to permanently delete the following {0} directories and their contents?", distinctElements.length),
src/vs/workbench/contrib/files/browser/fileActions.ts:			message: nls.localize('confirmDeleteMessageMultiple', "Are you sure you want to permanently delete the following {0} files?", distinctElements.length),
src/vs/workbench/contrib/files/browser/fileActions.ts:		return { message: nls.localize('confirmDeleteMessageFolder', "Are you sure you want to permanently delete '{0}' and its contents?", distinctElements[0].name), detail: '' };
src/vs/workbench/contrib/files/browser/fileActions.ts:	return { message: nls.localize('confirmDeleteMessageFile', "Are you sure you want to permanently delete '{0}'?", distinctElements[0].name), detail: '' };
src/vs/workbench/contrib/files/browser/fileActions.ts:	const result = await dialogService.show(Severity.Warning, nls.localize('confirmOverwrite', "A file or folder with the name '{0}' already exists in the destination folder. Do you want to replace it?", basename(targetResource.path)), [nls.localize('replaceButtonLabel', "Replace"), nls.localize('cancel', "Cancel")], { cancelId: 1 });
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('globalCompareFile', "Compare Active File With...");
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('toggleAutoSave', "Toggle Auto Save");
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('saveAllInGroup', "Save All in Group");
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('closeGroup', "Close Group");
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('focusFilesExplorer', "Focus on Files Explorer");
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('showInExplorer', "Reveal Active File in Explorer View");
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('openFileInNewWindow', "Open Active File in New Window");
src/vs/workbench/contrib/files/browser/fileActions.ts:				dialogService.show(Severity.Error, nls.localize('openFileToShowInNewWindow.unsupportedschema', "The active editor must contain an openable resource."));
src/vs/workbench/contrib/files/browser/fileActions.ts:			content: nls.localize('emptyFileNameError', "A file or folder name must be provided."),
src/vs/workbench/contrib/files/browser/fileActions.ts:			content: nls.localize('fileNameStartsWithSlashError', "A file or folder name cannot start with a slash."),
src/vs/workbench/contrib/files/browser/fileActions.ts:				content: nls.localize('fileNameExistsError', "A file or folder **{0}** already exists at this location. Please choose a different name.", name),
src/vs/workbench/contrib/files/browser/fileActions.ts:			content: nls.localize('invalidFileNameError', "The name **{0}** is not valid as a file or folder name. Please choose a different name.", trimLongName(escapedName)),
src/vs/workbench/contrib/files/browser/fileActions.ts:			content: nls.localize('fileNameWhitespaceWarning', "Leading or trailing whitespace detected in file or folder name."),
src/vs/workbench/contrib/files/browser/fileActions.ts:	static readonly LABEL = nls.localize('compareWithClipboard', "Compare Active File with Clipboard");
src/vs/workbench/contrib/files/browser/fileActions.ts:			const editorLabel = nls.localize('clipboardComparisonLabel', "Clipboard ↔ {0}", name);
src/vs/workbench/contrib/files/browser/fileActions.ts:			label: nls.localize('retry', "Retry"),
src/vs/workbench/contrib/files/browser/fileActions.ts:				undoLabel: nls.localize('createBulkEdit', "Create {0}", value),
src/vs/workbench/contrib/files/browser/fileActions.ts:				progressLabel: nls.localize('creatingBulkEdit', "Creating {0}", value),
src/vs/workbench/contrib/files/browser/fileActions.ts:							undoLabel: nls.localize('renameBulkEdit', "Rename {0} to {1}", stat.name, value),
src/vs/workbench/contrib/files/browser/fileActions.ts:							progressLabel: nls.localize('renamingBulkEdit', "Renaming {0} to {1}", stat.name, value),
src/vs/workbench/contrib/files/browser/fileActions.ts:				throw new Error(nls.localize('fileIsAncestor', "File to paste is an ancestor of the destination folder"));
src/vs/workbench/contrib/files/browser/fileActions.ts:					progressLabel: sourceTargetPairs.length > 1 ? nls.localize({ key: 'movingBulkEdit', comment: ['Placeholder will be replaced by the number of files being moved'] }, "Moving {0} files", sourceTargetPairs.length)
src/vs/workbench/contrib/files/browser/fileActions.ts:						: nls.localize({ key: 'movingFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file moved.'] }, "Moving {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target)),
src/vs/workbench/contrib/files/browser/fileActions.ts:					undoLabel: sourceTargetPairs.length > 1 ? nls.localize({ key: 'moveBulkEdit', comment: ['Placeholder will be replaced by the number of files being moved'] }, "Move {0} files", sourceTargetPairs.length)
src/vs/workbench/contrib/files/browser/fileActions.ts:						: nls.localize({ key: 'moveFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file moved.'] }, "Move {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target))
src/vs/workbench/contrib/files/browser/fileActions.ts:					progressLabel: sourceTargetPairs.length > 1 ? nls.localize({ key: 'copyingBulkEdit', comment: ['Placeholder will be replaced by the number of files being copied'] }, "Copying {0} files", sourceTargetPairs.length)
src/vs/workbench/contrib/files/browser/fileActions.ts:						: nls.localize({ key: 'copyingFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file copied.'] }, "Copying {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target)),
src/vs/workbench/contrib/files/browser/fileActions.ts:					undoLabel: sourceTargetPairs.length > 1 ? nls.localize({ key: 'copyBulkEdit', comment: ['Placeholder will be replaced by the number of files being copied'] }, "Paste {0} files", sourceTargetPairs.length)
src/vs/workbench/contrib/files/browser/fileActions.ts:						: nls.localize({ key: 'copyFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file copied.'] }, "Paste {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target))
src/vs/workbench/contrib/files/browser/fileActions.ts:		onError(notificationService, new Error(nls.localize('fileDeleted', "The file(s) to paste have been deleted or moved since you copied them. {0}", getErrorMessage(e))));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				title: localize('uploadingFiles', "Uploading")
src/vs/workbench/contrib/files/browser/fileImportExport.ts:						undoLabel: localize('overwrite', "Overwrite {0}", entry.name),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:						progressLabel: localize('overwriting', "Overwriting {0}", entry.name),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					message = localize('uploadProgressSmallMany', "{0} of {1} files ({2}/s)", operation.filesUploaded, operation.filesTotal, ByteSize.formatSize(bytesUploadedPerSecond));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				message = localize('uploadProgressLarge', "{0} ({1} of {2}, {3}/s)", entry.name, ByteSize.formatSize(fileBytesUploaded), ByteSize.formatSize(fileSize), ByteSize.formatSize(bytesUploadedPerSecond));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				title: localize('copyingFiles', "Copying...")
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize('copyFolders', "&&Copy Folders") :
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize('copyFolder', "&&Copy Folder"),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				localize('cancel', "Cancel")
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				buttons.unshift(folders.length > 1 ? localize('addFolders', "&&Add Folders to Workspace") : localize('addFolder', "&&Add Folder to Workspace"));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize('dropFolders', "Do you want to copy the folders or add the folders to the workspace?") :
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize('dropFolder', "Do you want to copy '{0}' or add '{0}' as a folder to the workspace?", basename(folders[0].uri));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize('copyfolders', "Are you sure to want to copy folders?") :
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize('copyfolder', "Are you sure to want to copy '{0}'?", basename(folders[0].uri));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				this.notificationService.error(inaccessibleFileCount > 1 ? localize('filesInaccessible', "Some or all of the dropped files could not be accessed for import.") : localize('fileInaccessible', "The dropped file could not be accessed for import."));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize({ comment: ['substitution will be the name of the file that was imported'], key: 'importFile' }, "Import {0}", basename(resourcesFiltered[0])) :
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize({ comment: ['substitution will be the number of files that were imported'], key: 'importnFile' }, "Import {0} resources", resourcesFiltered.length),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize({ comment: ['substitution will be the name of the file that was copied'], key: 'copyingFile' }, "Copying {0}", basename(resourcesFiltered[0])) :
src/vs/workbench/contrib/files/browser/fileImportExport.ts:					localize({ comment: ['substitution will be the number of files that were copied'], key: 'copyingnFile' }, "Copying {0} resources", resourcesFiltered.length),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				title: localize('downloadingFiles', "Downloading")
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				message = localize('downloadProgressSmallMany', "{0} of {1} files ({2}/s)", operation.filesDownloaded, operation.filesTotal, ByteSize.formatSize(bytesDownloadedPerSecond));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:			message = localize('downloadProgressLarge', "{0} ({1} of {2}, {3}/s)", name, ByteSize.formatSize(operation.fileBytesDownloaded), ByteSize.formatSize(fileSize), ByteSize.formatSize(bytesDownloadedPerSecond));
src/vs/workbench/contrib/files/browser/fileImportExport.ts:			saveLabel: mnemonicButtonLabel(localize('downloadButton', "Download")),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:			title: localize('chooseWhereToDownload', "Choose Where to Download"),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				undoLabel: localize('downloadBulkEdit', "Download {0}", explorerItem.name),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:				progressLabel: localize('downloadingBulkEdit', "Downloading {0}", explorerItem.name),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:		message: localize('confirmOverwrite', "A file or folder with the name '{0}' already exists in the destination folder. Do you want to replace it?", name),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:		detail: localize('irreversible', "This action is irreversible!"),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:		primaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:			message: localize('confirmManyOverwrites', "The following {0} files and/or folders already exist in the destination folder. Do you want to replace them?", files.length),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:			detail: getFileNamesMessage(files) + '\n' + localize('irreversible', "This action is irreversible!"),
src/vs/workbench/contrib/files/browser/fileImportExport.ts:			primaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:		nls.localize('binaryFileEditor', "Binary File Editor")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			nls.localize('hotExit.off', 'Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			nls.localize('hotExit.onExit', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			nls.localize('hotExit.onExitAndWindowClose', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it\'s the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`')
src/vs/workbench/contrib/files/browser/files.contribution.ts:		'description': nls.localize('hotExit', "Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.", HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE)
src/vs/workbench/contrib/files/browser/files.contribution.ts:			nls.localize('hotExit.off', 'Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			nls.localize('hotExit.onExitAndWindowCloseBrowser', 'Hot exit will be triggered when the browser quits or the window or tab is closed.')
src/vs/workbench/contrib/files/browser/files.contribution.ts:		'description': nls.localize('hotExit', "Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.", HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE)
src/vs/workbench/contrib/files/browser/files.contribution.ts:	'title': nls.localize('filesConfigurationTitle', "Files"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('exclude', "Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders. For example, the file explorer decides which files and folders to show or hide based on this setting. Refer to the `#search.exclude#` setting to define search-specific excludes."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:						'enumDescriptions': [nls.localize('trueDescription', "Enable the pattern."), nls.localize('falseDescription', "Disable the pattern.")],
src/vs/workbench/contrib/files/browser/files.contribution.ts:						'description': nls.localize('files.exclude.boolean', "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:								'markdownDescription': nls.localize({ key: 'files.exclude.when', comment: ['\\$(basename) should not be translated'] }, "Additional check on the siblings of a matching file. Use \\$(basename) as variable for the matching file name.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('associations', "Configure file associations to languages (e.g. `\"*.extension\": \"html\"`). These have precedence over the default associations of the languages installed."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('encoding', "The default character set encoding to use when reading and writing files. This setting can also be configured per language."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('autoGuessEncoding', "When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only {0} is respected.", '`#files.encoding#`'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('eol.LF', "LF"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('eol.CRLF', "CRLF"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('eol.auto', "Uses operating system specific end of line character.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('eol', "The default end of line character."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('useTrash', "Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('trimTrailingWhitespace', "When enabled, will trim trailing whitespace when saving a file."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('insertFinalNewline', "When enabled, insert a final new line at the end of the file when saving it."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('trimFinalNewlines', "When enabled, will trim all new lines after the final new line at the end of the file when saving it."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.off' }, "An editor with changes is never automatically saved."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.afterDelay' }, "An editor with changes is automatically saved after the configured `#files.autoSaveDelay#`."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onFocusChange' }, "An editor with changes is automatically saved when the editor loses focus."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onWindowChange' }, "An editor with changes is automatically saved when the window loses focus.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSave' }, "Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.", AutoSaveConfiguration.OFF, AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.ON_WINDOW_CHANGE, AutoSaveConfiguration.AFTER_DELAY)
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSaveDelay' }, "Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `#files.autoSave#` is set to `{0}`.", AutoSaveConfiguration.AFTER_DELAY)
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('watcherExclude', "Configure paths or glob patterns to exclude from file watching. Paths or basic glob patterns that are relative (for example `build/output` or `*.js`) will be resolved to an absolute path using the currently opened workspace. Complex glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders)."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('watcherInclude', "Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('defaultLanguage', "The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('maxMemoryForLargeFilesMB', "Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('files.restoreUndoStack', "Restore the undo stack when a file is reopened."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('askUser', "Will refuse to save and ask for resolving the save conflict manually."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('overwriteFileOnDisk', "Will resolve the save conflict by overwriting the file on disk with the changes in the editor.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('files.saveConflictResolution', "A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('files.simpleDialog.enable', "Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			markdownDescription: nls.localize('files.participants.timeout', "Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('formatOnSave', "Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize({ key: 'everything', comment: ['This is the description of an option'] }, "Format the whole file."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize({ key: 'modification', comment: ['This is the description of an option'] }, "Format modifications (requires source control)."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize({ key: 'modificationIfAvailable', comment: ['This is the description of an option'] }, "Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('formatOnSaveMode', "Controls if format on save formats the whole file or only modifications. Only applies when `#editor.formatOnSave#` is enabled."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:	'title': nls.localize('explorerConfigurationTitle', "File Explorer"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize({ key: 'openEditorsVisible', comment: ['Open is an adjective'] }, "The maximum number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize({ key: 'openEditorsVisibleMin', comment: ['Open is an adjective'] }, "The minimum number of editor slots shown in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize({ key: 'openEditorsSortOrder', comment: ['Open is an adjective'] }, "Controls the sorting order of editors in the Open Editors pane."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.editorOrder', 'Editors are ordered in the same order editor tabs are shown.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.alphabetical', 'Editors are ordered alphabetically by tab name inside each editor group.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.fullPath', 'Editors are ordered alphabetically by full path inside each editor group.')
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('autoReveal.on', 'Files will be revealed and selected.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('autoReveal.off', 'Files will not be revealed and selected.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('autoReveal.focusNoScroll', 'Files will not be scrolled into view, but will still be focused.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('autoReveal', "Controls whether the explorer should automatically reveal and select files when opening them.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('enableDragAndDrop', "Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('confirmDragAndDrop', "Controls whether the explorer should ask for confirmation to move files and folders via drag and drop."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('confirmDelete', "Controls whether the explorer should ask for confirmation when deleting a file via the trash."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('enableUndo', "Controls whether the explorer should support undoing file and folder operations."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('confirmUndo', "Controls whether the explorer should ask for confirmation when undoing."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('enableUndo.verbose', 'Explorer will prompt before all undo operations.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('enableUndo.default', 'Explorer will prompt before destructive undo operations.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('enableUndo.light', 'Explorer will not prompt before undo operations when focused.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('expandSingleFolderWorkspaces', "Controls whether the explorer should expand multi-root workspaces containing only one folder during initialization"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.default', 'Files and folders are sorted by their names. Folders are displayed before files.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.mixed', 'Files and folders are sorted by their names. Files are interwoven with folders.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.filesFirst', 'Files and folders are sorted by their names. Files are displayed before folders.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.type', 'Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.modified', 'Files and folders are sorted by last modified date in descending order. Folders are displayed before  files.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrder.foldersNestsFiles', 'Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.')
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('sortOrder', "Controls the property-based sorting of files and folders in the explorer. When `#explorer.fileNesting.enabled#` is enabled, also controls sorting of nested files.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrderLexicographicOptions.default', 'Uppercase and lowercase names are mixed together.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrderLexicographicOptions.upper', 'Uppercase names are grouped together before lowercase names.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrderLexicographicOptions.lower', 'Lowercase names are grouped together before uppercase names.'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('sortOrderLexicographicOptions.unicode', 'Names are sorted in unicode order.')
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('sortOrderLexicographicOptions', "Controls the lexicographic sorting of file and folder names in the Explorer.")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			description: nls.localize('explorer.decorations.colors', "Controls whether file decorations should use colors."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			description: nls.localize('explorer.decorations.badges', "Controls whether file decorations should use badges."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('simple', "Appends the word \"copy\" at the end of the duplicated name potentially followed by a number"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('smart', "Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number"),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('disabled', "Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file")
src/vs/workbench/contrib/files/browser/files.contribution.ts:			description: nls.localize('explorer.incrementalNaming', "Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('compressSingleChildFolders', "Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('copyRelativePathSeparator.slash', "Use slash as path separation character."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('copyRelativePathSeparator.backslash', "Use backslash as path separation character."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:				nls.localize('copyRelativePathSeparator.auto', "Uses operating system specific path separation character."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'description': nls.localize('copyRelativePathSeparator', "The path separation character used when copying relative file paths."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			markdownDescription: nls.localize('excludeGitignore', "Controls whether entries in .gitignore should be parsed and excluded from the explorer. Similar to {0}.", '`#files.exclude#`'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('fileNestingEnabled', "Controls whether file nesting is enabled in the explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file."),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('fileNestingExpand', "Controls whether file nests are automatically expanded. {0} must be set for this to take effect.", '`#explorer.fileNesting.enabled#`'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:			'markdownDescription': nls.localize('fileNestingPatterns', "Controls nesting of files in the explorer. {0} must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:\n- `${capture}`: Matches the resolved value of the `*` from the parent pattern\n- `${basename}`: Matches the parent file's basename, the `file` in `file.ts`\n- `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`\n- `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`\n- `*`:  Matches any string, may only be used once per child pattern", '`#explorer.fileNesting.enabled#`'),
src/vs/workbench/contrib/files/browser/files.contribution.ts:					markdownDescription: nls.localize('fileNesting.description', "Each key pattern may contain a single `*` character which will match any string."),
src/vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService.ts:					? nls.localize('selectOpenerDefaultLabel.web', 'Open in new browser window')
src/vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService.ts:					: nls.localize('selectOpenerDefaultLabel', 'Open in default browser'),
src/vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService.ts:				label: nls.localize('selectOpenerConfigureTitle', "Configure default opener..."),
src/vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService.ts:			placeHolder: nls.localize('selectOpenerPlaceHolder', "How would you like to open: {0}", targetUri.toString())
src/vs/workbench/contrib/files/browser/views/openEditorsView.ts:	static readonly NAME = nls.localize({ key: 'openEditors', comment: ['Open is an adjective'] }, "Open Editors");
src/vs/workbench/contrib/files/browser/views/openEditorsView.ts:			this.dirtyCountElement.textContent = nls.localize('dirtyCounter', "{0} unsaved", dirty);
src/vs/workbench/contrib/files/browser/views/openEditorsView.ts:		return nls.localize('openEditors', "Open Editors");
src/vs/workbench/contrib/files/browser/views/openEditorsView.ts:			title: { value: nls.localize('flipLayout', "Toggle Vertical/Horizontal Editor Layout"), original: 'Toggle Vertical/Horizontal Editor Layout' },
src/vs/workbench/contrib/files/browser/views/openEditorsView.ts:			value: nls.localize('miToggleEditorLayoutWithoutMnemonic', "Flip Layout"),
src/vs/workbench/contrib/files/browser/views/openEditorsView.ts:			mnemonicTitle: nls.localize({ key: 'miToggleEditorLayout', comment: ['&& denotes a mnemonic'] }, "Flip &&Layout")
src/vs/workbench/contrib/files/browser/views/openEditorsView.ts:			title: { value: nls.localize('newUntitledFile', "New Untitled File"), original: 'New Untitled File' },
src/vs/workbench/contrib/files/browser/fileConstants.ts:export const SAVE_FILE_AS_LABEL = nls.localize('saveAs', "Save As...");
src/vs/workbench/contrib/files/browser/fileConstants.ts:export const SAVE_FILE_LABEL = nls.localize('save', "Save");
src/vs/workbench/contrib/files/browser/fileConstants.ts:export const SAVE_FILE_WITHOUT_FORMATTING_LABEL = nls.localize('saveWithoutFormatting', "Save without Formatting");
src/vs/workbench/contrib/files/browser/fileConstants.ts:export const SAVE_ALL_LABEL = nls.localize('saveAll', "Save All");
src/vs/workbench/contrib/files/browser/fileConstants.ts:export const REMOVE_ROOT_FOLDER_LABEL = nls.localize('removeFolderFromWorkspace', "Remove Folder from Workspace");
src/vs/workbench/contrib/files/browser/fileConstants.ts:export const NEW_UNTITLED_FILE_LABEL = nls.localize('newUntitledFile', "New Untitled File");
src/vs/workbench/contrib/files/browser/views/explorerView.ts:			this.ariaHeaderLabel = nls.localize('explorerSection', "Explorer Section: {0}", this.name);
src/vs/workbench/contrib/files/browser/views/explorerView.ts:			title: nls.localize('createNewFile', "New File..."),
src/vs/workbench/contrib/files/browser/views/explorerView.ts:			title: nls.localize('createNewFolder', "New Folder..."),
src/vs/workbench/contrib/files/browser/views/explorerView.ts:			title: { value: nls.localize('refreshExplorer', "Refresh Explorer"), original: 'Refresh Explorer' },
src/vs/workbench/contrib/files/browser/views/explorerView.ts:			title: { value: nls.localize('collapseExplorerFolders', "Collapse Folders in Explorer"), original: 'Collapse Folders in Explorer' },
src/vs/workbench/contrib/files/browser/fileCommands.ts:			const editorLabel = nls.localize('modifiedLabel', "{0} (in file) ↔ {1}", name, name);
src/vs/workbench/contrib/files/browser/fileCommands.ts:				message: nls.localize({ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", editors.map(({ editor }) => editor.getName()).join(', '), toErrorMessage(error, false)),
src/vs/workbench/contrib/files/browser/fileCommands.ts:						toAction({ id: 'workbench.action.files.saveEditors', label: nls.localize('retry', "Retry"), run: () => instantiationService.invokeFunction(accessor => doSaveEditors(accessor, editors, options)) }),
src/vs/workbench/contrib/files/browser/fileCommands.ts:						toAction({ id: 'workbench.action.files.revertEditors', label: nls.localize('discard', "Discard"), run: () => editorService.revert(editors) })
src/vs/workbench/contrib/files/browser/fileCommands.ts:			notificationService.error(nls.localize('genericRevertError', "Failed to revert '{0}': {1}", editors.map(({ editor }) => editor.getName()).join(', '), toErrorMessage(error, false)));
src/vs/workbench/contrib/files/browser/fileCommands.ts:		const createFileLocalized = nls.localize('newFileCommand.saveLabel', "Create File");
src/vs/workbench/contrib/externalUriOpener/common/configuration.ts:			markdownDescription: nls.localize('externalUriOpeners', "Configure the opener to use for external URIs (http, https)."),
src/vs/workbench/contrib/externalUriOpener/common/configuration.ts:						markdownDescription: nls.localize('externalUriOpeners.uri', "Map URI pattern to an opener id.\nExample patterns: \n{0}", exampleUriPatterns),
src/vs/workbench/contrib/externalUriOpener/common/configuration.ts:						markdownDescription: nls.localize('externalUriOpeners.uri', "Map URI pattern to an opener id.\nExample patterns: \n{0}", exampleUriPatterns),
src/vs/workbench/contrib/externalUriOpener/common/configuration.ts:						enumDescriptions: [nls.localize('externalUriOpeners.defaultId', "Open using VS Code's standard opener.")],
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:	title: nls.localize('copyPath', "Copy Path")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:	title: nls.localize('copyRelativePath', "Copy Relative Path")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendEditorTitleContextMenuItem(REVEAL_IN_EXPLORER_COMMAND_ID, nls.localize('revealInSideBar', "Reveal in Explorer View"), ResourceContextKey.IsFileSystemResource, '2_files', 1);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendSaveConflictEditorTitleAction('workbench.files.action.acceptLocalChanges', nls.localize('acceptLocalChanges', "Use your changes and overwrite file contents"), Codicon.check, -10, acceptLocalChangesCommand);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendSaveConflictEditorTitleAction('workbench.files.action.revertLocalChanges', nls.localize('revertLocalChanges', "Discard your changes and revert to file contents"), Codicon.discard, -9, revertLocalChangesCommand);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendToCommandPalette(COPY_PATH_COMMAND_ID, { value: nls.localize('copyPathOfActive', "Copy Path of Active File"), original: 'Copy Path of Active File' }, fileCategory);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendToCommandPalette(COPY_RELATIVE_PATH_COMMAND_ID, { value: nls.localize('copyRelativePathOfActive', "Copy Relative Path of Active File"), original: 'Copy Relative Path of Active File' }, fileCategory);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendToCommandPalette(SAVE_ALL_IN_GROUP_COMMAND_ID, { value: nls.localize('saveAllInGroup', "Save All in Group"), original: 'Save All in Group' }, fileCategory);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendToCommandPalette(SAVE_FILES_COMMAND_ID, { value: nls.localize('saveFiles', "Save All Files"), original: 'Save All Files' }, fileCategory);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendToCommandPalette(REVERT_FILE_COMMAND_ID, { value: nls.localize('revert', "Revert File"), original: 'Revert File' }, fileCategory);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:appendToCommandPalette(COMPARE_WITH_SAVED_COMMAND_ID, { value: nls.localize('compareActiveWithSaved', "Compare Active File with Saved"), original: 'Compare Active File with Saved' }, fileCategory);
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:	title: nls.localize('openToSide', "Open to the Side")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('reopenWith', "Reopen Editor With...")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('revert', "Revert File"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('saveAll', "Save All"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('compareWithSaved', "Compare with Saved"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:	title: nls.localize('compareWithSelected', "Compare with Selected")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:	title: nls.localize('compareSource', "Select for Compare")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:	title: nls.localize('compareSelected', "Compare Selected")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('close', "Close")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('closeOthers', "Close Others")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('closeSaved', "Close Saved")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('closeAll', "Close All")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('explorerOpenWith', "Open With..."),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('cut', "Cut")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('deleteFile', "Delete Permanently"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize('deleteFile', "Delete Permanently"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: NEW_UNTITLED_FILE_COMMAND_ID, title: nls.localize('newFile', "New Text File") }, group: '1_file', order: 10 });
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: 'workbench.action.quickOpen', title: nls.localize('openFile', "Open File...") }, group: '1_file', order: 20 });
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miNewFile', comment: ['&& denotes a mnemonic'] }, "&&New Text File")
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miSave', comment: ['&& denotes a mnemonic'] }, "&&Save"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miSaveAs', comment: ['&& denotes a mnemonic'] }, "Save &&As..."),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miSaveAll', comment: ['&& denotes a mnemonic'] }, "Save A&&ll"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miAutoSave', comment: ['&& denotes a mnemonic'] }, "A&&uto Save"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miRevert', comment: ['&& denotes a mnemonic'] }, "Re&&vert File"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miCloseEditor', comment: ['&& denotes a mnemonic'] }, "&&Close Editor"),
src/vs/workbench/contrib/files/browser/fileActions.contribution.ts:		title: nls.localize({ key: 'miGotoFile', comment: ['&& denotes a mnemonic'] }, "Go to &&File...")
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:		title: { value: nls.localize('globalConsoleAction', "Open New External Terminal"), original: 'Open New External Terminal' }
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:			title: nls.localize('terminalConfigurationTitle', "External Terminal"),
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:						nls.localize('terminal.explorerKind.integrated', "Use VS Code's integrated terminal."),
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:						nls.localize('terminal.explorerKind.external', "Use the configured external terminal.")
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:					description: nls.localize('explorer.openInTerminalKind', "When opening a file from the explorer in a terminal, determines what kind of terminal will be launched"),
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:					description: nls.localize('terminal.external.windowsExec', "Customizes which terminal to run on Windows."),
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:					description: nls.localize('terminal.external.osxExec', "Customizes which terminal application to run on macOS."),
src/vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts:					description: nls.localize('terminal.external.linuxExec', "Customizes which terminal to run on Linux."),
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:const conflictEditorHelp = localize('userGuide', "Use the actions in the editor tool bar to either undo your changes or overwrite the content of the file with your changes.");
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:				message = localize('staleSaveError', "Failed to save '{0}': The content of the file is newer. Please compare your version with the file contents or overwrite the content of the file with your changes.", basename(resource));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:					message = isWindows ? localize('readonlySaveErrorAdmin', "Failed to save '{0}': File is read-only. Select 'Overwrite as Admin' to retry as administrator.", basename(resource)) : localize('readonlySaveErrorSudo', "Failed to save '{0}': File is read-only. Select 'Overwrite as Sudo' to retry as superuser.", basename(resource));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:					message = localize('readonlySaveError', "Failed to save '{0}': File is read-only. Select 'Overwrite' to attempt to make it writeable.", basename(resource));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:				message = isWindows ? localize('permissionDeniedSaveError', "Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.", basename(resource)) : localize('permissionDeniedSaveErrorSudo', "Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.", basename(resource));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:				message = localize({ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", basename(resource), toErrorMessage(error, false));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.resolveConflictLearnMore', localize('learnMore', "Learn More"));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.resolveConflictLearnMoreDoNotShowAgain', localize('dontShowAgain', "Don't Show Again"));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.resolveConflict', localize('compareChanges', "Compare"));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:			const editorLabel = localize('saveConflictDiffLabel', "{0} (in file) ↔ {1} (in {2}) - Resolve save conflict", name, name, this.productService.nameLong);
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.saveModelElevated', triedToUnlock ? isWindows ? localize('overwriteElevated', "Overwrite as Admin...") : localize('overwriteElevatedSudo', "Overwrite as Sudo...") : isWindows ? localize('saveElevated', "Retry as Admin...") : localize('saveElevatedSudo', "Retry as Sudo..."));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.saveModel', localize('retry', "Retry"));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.discardModel', localize('discard', "Discard"));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.unlock', localize('overwrite', "Overwrite"));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.saveIgnoreModifiedSince', localize('overwrite', "Overwrite"));
src/vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler.ts:		super('workbench.files.action.configureSaveConflict', localize('configure', "Configure"));
src/vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts:				title: nls.localize('scopedConsoleAction', "Open in Terminal")
src/vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts:			this._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.integrated', "Open in Integrated Terminal");
src/vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts:			this._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.integrated', "Open in Integrated Terminal");
src/vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts:				this._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.wt', "Open in Windows Terminal");
src/vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts:		this._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.external', "Open in External Terminal");
src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts:		return localize('textFileEditor', "Text File Editor");
src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts:					id: 'workbench.files.action.reveal', label: localize('reveal', "Reveal in Explorer View"), run: async () => {
src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts:					id: 'workbench.files.action.ok', label: localize('ok', "OK"), run: async () => {
src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts:			throw createErrorWithActions(new FileOperationError(localize('fileIsDirectoryError', "File is a directory"), FileOperationResult.FILE_IS_DIRECTORY), [action]);
src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts:			const fileNotFoundError = createErrorWithActions(new FileOperationError(localize('fileNotFoundError', "File not found"), FileOperationResult.FILE_NOT_FOUND), [
src/vs/workbench/contrib/files/browser/editors/textFileEditor.ts:					id: 'workbench.files.action.createMissingFile', label: localize('createFile', "Create File"), run: async () => {
src/vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts:		return this.input ? this.input.getName() : localize('binaryFileEditor', "Binary File Viewer");
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:const explorerViewIcon = registerIcon('explorer-view-icon', Codicon.files, localize('explorerViewIcon', 'View icon of the explorer view.'));
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:const openEditorsViewIcon = registerIcon('open-editors-view-icon', Codicon.book, localize('openEditorsIcon', 'View icon of the open editors view.'));
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:			name: localize('folders', "Folders"),
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	title: localize('explore', "Explorer"),
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:		title: { value: localize('explore', "Explorer"), original: 'Explorer' },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:		mnemonicTitle: localize({ key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] }, "&&Explorer"),
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:const openFolder = localize('openFolder', "Open Folder");
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:const addAFolder = localize('addAFolder', "add a folder");
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:const openRecent = localize('openRecent', "Open Recent");
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noWorkspaceHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noFolderHelpWeb', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'remoteNoFolderHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noFolderButEditorsHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noFolderHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/extensions/common/extensionsInput.ts:		return localize('extensionsInputName', "Extension: {0}", this._extension.displayName);
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsAutoProfiler.ts:			localize(
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsAutoProfiler.ts:				label: localize('show', 'Show Extensions'),
src/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts:	static readonly LABEL = nls.localize('debugExtensionHost', "Start Debugging Extension Host");
src/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts:				message: nls.localize('restart1', "Profile Extensions"),
src/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts:				detail: nls.localize('restart2', "In order to profile extensions a restart is required. Do you want to restart '{0}' now?", this.productService.nameLong),
src/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts:				primaryButton: nls.localize('restart3', "&&Restart"),
src/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts:				secondaryButton: nls.localize('cancel', "&&Cancel")
src/vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts:			name: nls.localize('debugExtensionHost.launch.name', "Attach Extension Host"),
src/vs/workbench/contrib/experiments/browser/experiments.contribution.ts:			'description': localize('workbench.enableExperiments', "Fetches experiments to run from a Microsoft online service."),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				name: nls.localize('status.profiler', "Extension Profiler"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				text: nls.localize('profilingExtensionHost', "Profiling Extension Host"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				ariaLabel: nls.localize('profilingExtensionHost', "Profiling Extension Host"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				tooltip: nls.localize('selectAndStartDebug', "Click to stop profiling."),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				this.profilingStatusBarIndicator?.update({ ...indicator, text: nls.localize('profilingExtensionHostTime', "Profiling Extension Host ({0} sec)", Math.round((new Date().getTime() - timeStarted) / 1000)), });
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				message: nls.localize('restart1', "Profile Extensions"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				detail: nls.localize('restart2', "In order to profile extensions a restart is required. Do you want to restart '{0}' now?", this._productService.nameLong),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				primaryButton: nls.localize('restart3', "&&Restart"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts:				secondaryButton: nls.localize('cancel', "&&Cancel")
src/vs/workbench/contrib/extensions/common/runtimeExtensionsInput.ts:		return nls.localize('extensionsInputName', "Running Extensions");
src/vs/workbench/contrib/extensions/common/reportExtensionIssueAction.ts:	private static readonly _label = nls.localize('reportExtensionIssue', "Report Issue");
src/vs/workbench/contrib/extensions/common/extensionsUtils.ts:		this.notificationService.prompt(Severity.Info, localize('disableOtherKeymapsConfirmation', "Disable other keymaps ({0}) to avoid conflicts between keybindings?", oldKeymaps.map(k => `'${k.local.manifest.displayName}'`).join(', ')),
src/vs/workbench/contrib/extensions/common/extensionsUtils.ts:				label: localize('yes', "Yes"),
src/vs/workbench/contrib/extensions/common/extensionsUtils.ts:				label: localize('no', "No"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensions.contribution.ts:	EditorPaneDescriptor.create(RuntimeExtensionsEditor, RuntimeExtensionsEditor.ID, localize('runtimeExtension', "Running Extensions")),
src/vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor.ts:	static readonly LABEL = nls.localize('extensionHostProfileStart', "Start Extension Host Profile");
src/vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor.ts:	static readonly LABEL = nls.localize('stopExtensionHostProfileStart', "Stop Extension Host Profile");
src/vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor.ts:	static readonly LABEL = nls.localize('saveExtensionHostProfile', "Save Extension Host Profile");
src/vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor.ts:			title: nls.localize('saveprofile.dialogTitle', "Save Extension Host Profile"),
src/vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor.ts:			buttonLabel: nls.localize('saveprofile.saveButton', "Save"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsActions.ts:			title: { value: localize('openExtensionsFolder', "Open Extensions Folder"), original: 'Open Extensions Folder' },
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions.ts:		super('report.slow', localize('cmd.reportOrShow', "Performance Issue"), 'extension-action report-issue');
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions.ts:		super('report.slow', localize('cmd.report', "Report Issue"));
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions.ts:			localize('attach.title', "Did you attach the CPU-Profile?"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions.ts:			{ detail: localize('attach.msg', "This is a reminder to make sure that you have not forgotten to attach '{0}' to the issue you have just created.", path.fsPath) }
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions.ts:		super('show.slow', localize('cmd.show', "Show Issues"));
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions.ts:			localize('attach.title', "Did you attach the CPU-Profile?"),
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsSlowActions.ts:			{ detail: localize('attach.msg2', "This is a reminder to make sure that you have not forgotten to attach '{0}' to an existing performance issue.", path.fsPath) }
src/vs/workbench/api/node/extHostTunnelService.ts:							label: nls.localize('tunnelPrivacy.private', "Private"),
src/vs/workbench/api/node/extHostTunnelService.ts:							label: nls.localize('tunnelPrivacy.public', "Public"),
src/vs/workbench/contrib/extensions/browser/workspaceRecommendations.ts:								reasonText: localize('workspaceRecommendation', "This extension is recommended by users of the current workspace.")
src/vs/workbench/contrib/extensions/common/extensionsFileTemplate.ts:	title: localize('app.extensions.json.title', "Extensions"),
src/vs/workbench/contrib/extensions/common/extensionsFileTemplate.ts:			description: localize('app.extensions.json.recommendations', "List of extensions which should be recommended for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'."),
src/vs/workbench/contrib/extensions/common/extensionsFileTemplate.ts:				errorMessage: localize('app.extension.identifier.errorMessage', "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'.")
src/vs/workbench/contrib/extensions/common/extensionsFileTemplate.ts:			description: localize('app.extensions.json.unwantedRecommendations', "List of extensions recommended by VS Code that should not be recommended for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'."),
src/vs/workbench/contrib/extensions/common/extensionsFileTemplate.ts:				errorMessage: localize('app.extension.identifier.errorMessage', "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'.")
src/vs/workbench/contrib/extensions/browser/extensionsViewer.ts:		dom.append(messageContainer, dom.$('span.error-marker')).textContent = localize('error', "Error");
src/vs/workbench/contrib/extensions/browser/extensionsViewer.ts:		dom.append(messageContainer, dom.$('span.message')).textContent = localize('Unknown Extension', "Unknown Extension:");
src/vs/workbench/contrib/extensions/browser/extensionsViewer.ts:						return localize('extension.arialabel', "{0}, {1}, {2}, {3}", extension.displayName, extension.version, extension.publisherDisplayName, extension.description);
src/vs/workbench/contrib/extensions/browser/extensionsViewer.ts:						return localize('extensions', "Extensions");
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:const choiceNever = localize('neverShowAgain', "Don't Show Again");
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:					localize('ignoreExtensionRecommendations', "Do you want to ignore all extension recommendations?"),
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:						label: localize('ignoreAll', "Yes, Ignore All"),
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:						label: localize('no', "No"),
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:		const message = (extensions: IExtension[]) => extensions.length === 1 ? localize('singleExtensionRecommended', "'{0}' extension is recommended for this repository. Do you want to install?", extensions[0].displayName) : localize('workspaceRecommended', "Do you want to install the recommended extensions for this repository?");
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:				label: localize('install', "Install"),
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:					label: localize('install and do no sync', "Install (Do not sync)"),
src/vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts:				label: localize('show recommendations', "Show Recommendations"),
src/vs/workbench/contrib/extensions/browser/webRecommendations.ts:					reasonText: localize('reason', "This extension is recommended for {0} for the Web", this.productService.nameLong)
src/vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts:const searchMarketplace = localize('searchMarketplace', "Search Marketplace");
src/vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts:						reasonText: localize('fileBasedRecommendation', "This extension is recommended based on the files you recently opened.")
src/vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts:		const message = treatmentMessage ? treatmentMessage.replace('{0}', name) : localize('reallyRecommended', "Do you want to install the recommended extensions for {0}?", name);
src/vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts:			localize('showLanguageExtensions', "The Marketplace has extensions that can help with '.{0}' files", fileExtension),
src/vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts:				label: localize('dontShowAgainExtension', "Don't Show Again for '.{0}' files", fileExtension),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			const productName = isWeb ? localize('VS Code for Web', "{0} for the Web", this.productService.nameLong) : this.productService.nameLong;
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			const message = localize('cannot be installed', "The '{0}' extension is not available in {1}. Click 'More Information' to learn more.", this.extension.displayName || this.extension.identifier.id, productName);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			const result = await this.dialogService.show(Severity.Info, message, [localize('close', "Close"), localize('more information', "More Information")], { cancelId: 0 });
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		let operationMessage = this.installOperation === InstallOperation.Update ? localize('update operation', "Error while updating '{0}' extension.", this.extension.displayName || this.extension.identifier.id)
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			: localize('install operation', "Error while installing '{0}' extension.", this.extension.displayName || this.extension.identifier.id);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			additionalMessage = localize('install release version message', "Would you like to install the release version?");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				label: localize('install release version', "Install Release Version"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			additionalMessage = localize('check logs', "Please check the [log]({0}) for more details.", `command:${Constants.showWindowLogActionId}`);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				label: localize('download', "Try Downloading Manually..."),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:						localize('install vsix', 'Once downloaded, please manually install the downloaded VSIX of \'{0}\'.', this.extension.identifier.id),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:							label: localize('installVSIX', "Install from VSIX..."),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super(id, localize('install', "Install"), cssClass, false);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			let detail = localize('deprecated message', "This extension is deprecated as it is no longer being maintained.");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				localize('install anyway', "Install Anyway"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				localize('cancel', "Cancel"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				detail = localize('deprecated with alternate extension message', "This extension is deprecated. Use the {0} extension instead.", this.extension.deprecationInfo.extension.displayName);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				buttons.splice(1, 0, localize('Show alternate extension', "Open {0}", this.extension.deprecationInfo.extension.displayName));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				detail = localize('deprecated with alternate settings message', "This extension is deprecated as this functionality is now built-in to VS Code.");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				buttons.splice(1, 0, localize('configure in settings', "Configure Settings"));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				localize('install confirmation', "Are you sure you want to install '{0}'?", this.extension.displayName),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		alert(localize('installExtensionStart', "Installing extension {0} started. An editor is now open with more details on this extension", this.extension.displayName));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			alert(localize('installExtensionComplete', "Installing extension {0} is completed.", this.extension.displayName));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			return primary ? localize('install pre-release', "Install Pre-Release") : localize('install pre-release version', "Install Pre-Release Version");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			return primary ? localize('install', "Install") : localize('install release version', "Install Release Version");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		return localize('install', "Install");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		const donotSyncLabel = localize('do no sync', "Do not sync");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					? localize({
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					: localize({
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				localize('install extension locally and do not sync', "{0} Locally ({1})", baseLabel, donotSyncLabel) : localize('install extension locally', "{0} Locally", baseLabel);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize({ key: 'install everywhere tooltip', comment: ['Placeholder is the name of the product. Eg: Visual Studio Code or Visual Studio Code - Insiders'] }, "Install this extension in all your synced {0} instances", productService.nameLong);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	private static readonly LABEL = localize('installing', "Installing");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	protected static readonly INSTALL_LABEL = localize('install', "Install");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	protected static readonly INSTALLING_LABEL = localize('installing', "Installing");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		alert(localize('installExtensionStart', "Installing extension {0} started. An editor is now open with more details on this extension", this.extension.displayName));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			throw new Error(localize('incompatible', "Can't install '{0}' extension because it is not compatible.", this.extension.identifier.id));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			? localize({ key: 'install in remote', comment: ['This is the name of the action to install an extension in remote server. Placeholder is for the name of remote server.'] }, "Install in {0}", this.extensionManagementServerService.remoteExtensionManagementServer.label)
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		return localize('install locally', "Install Locally");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		return localize('install browser', "Install in Browser");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly UninstallLabel = localize('uninstallAction', "Uninstall");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	private static readonly UninstallingLabel = localize('Uninstalling', "Uninstalling");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		alert(localize('uninstallExtensionStart', "Uninstalling extension {0} started.", this.extension.displayName));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			alert(localize('uninstallExtensionComplete', "Please reload Visual Studio Code to complete the uninstallation of the extension {0}.", this.extension!.displayName));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super(`extensions.update`, localize('update', "Update"), extensionsWorkbenchService);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.label = this.verbose ? localize('update to', "Update to v{0}", this.extension.latestVersion) : localize('update', "Update");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		alert(localize('updateExtensionStart', "Updating extension {0} to version {1} started.", this.extension.displayName, this.extension.latestVersion));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			alert(localize('updateExtensionComplete', "Updating extension {0} to version {1} completed.", extension.displayName, extension.latestVersion));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super(`extensions.ignoreUpdates`, localize('ignoreUpdates', "Ignore Updates"), extensionsWorkbenchService);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		alert(localize('ignoreExtensionUpdate', "Ignoring {0} updates", this.extension.displayName));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super('extensionsAction.migrateDeprecatedExtension', localize('migrateExtension', "Migrate"), MigrateDeprecatedExtensionAction.DisabledClass, false);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('migrate to', "Migrate to {0}", this.extension.deprecationInfo.extension.displayName);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.label = this.small ? localize('migrate', "Migrate") : this.tooltip;
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('manage', "Manage");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.tooltip = state === ExtensionState.Uninstalling ? localize('ManageExtensionAction.uninstallingTooltip', "Uninstalling") : '';
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('manage', "Manage");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly TITLE = { value: localize('switch to pre-release version', "Switch to Pre-Release Version"), original: 'Switch to  Pre-Release Version' };
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('switch to pre-release version tooltip', "Switch to Pre-Release version of this extension");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly TITLE = { value: localize('switch to release version', "Switch to Release Version"), original: 'Switch to Release Version' };
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('switch to release version tooltip', "Switch to Release version of this extension");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('install another version', "Install Another Version...");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			await this.dialogService.show(Severity.Info, localize('no versions', "This extension has no other versions."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				description: `${fromNow(new Date(Date.parse(v.date)), true)}${v.isPreReleaseVersion ? ` (${localize('pre-release', "pre-release")})` : ''}${v.version === this.extension!.version ? ` (${localize('current', "current")})` : ''}`,
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				placeHolder: localize('selectVersion', "Select Version to Install"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('enableForWorkspaceAction', "Enable (Workspace)");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('enableForWorkspaceActionToolTip', "Enable this extension only in this workspace");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('enableGloballyAction', "Enable");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('enableGloballyActionToolTip', "Enable this extension");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('disableForWorkspaceAction', "Disable (Workspace)");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('disableForWorkspaceActionToolTip', "Disable this extension only in this workspace");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('disableGloballyAction', "Disable");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('disableGloballyActionToolTip', "Disable this extension");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super('extensions.enable', localize('enableAction', "Enable"), [
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super('extensions.disable', localize('disableAction', "Disable"), [[
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super('extensions.reload', localize('reloadAction', "Reload"), ReloadAction.DisabledClass, false);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.label = reloadTooltip !== undefined ? localize('reload required', 'Reload Required') : '';
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		picks.push(<IQuickPickSeparator>{ type: 'separator', label: localize('current', "current") });
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly TITLE = { value: localize('workbench.extensions.action.setColorTheme', "Set Color Theme"), original: 'Set Color Theme' };
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				placeHolder: localize('select color theme', "Select Color Theme"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly TITLE = { value: localize('workbench.extensions.action.setFileIconTheme', "Set File Icon Theme"), original: 'Set File Icon Theme' };
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				placeHolder: localize('select file icon theme', "Select File Icon Theme"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly TITLE = { value: localize('workbench.extensions.action.setProductIconTheme', "Set Product Icon Theme"), original: 'Set Product Icon Theme' };
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				placeHolder: localize('select product icon theme', "Select Product Icon Theme"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly TITLE = { value: localize('workbench.extensions.action.setDisplayLanguage', "Set Display Language"), original: 'Set Display Language' };
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly TITLE = { value: localize('workbench.extensions.action.clearLanguage', "Clear Display Language"), original: 'Clear Display Language' };
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('showRecommendedExtension', "Show Recommended Extension");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('installRecommendedExtension', "Install Recommended Extension");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('ignoreExtensionRecommendation', "Do not recommend this extension again");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		this.tooltip = localize('undo', "Undo");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		super('extensions.searchExtensions', localize('search recommendations', "Search Extensions"), undefined, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				error => Promise.reject(new Error(localize('OpenExtensionsFile.failed', "Unable to create 'extensions.json' file inside the '.vscode' folder ({0}).", error))));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('configureWorkspaceRecommendedExtensions', "Configure Recommended Extensions (Workspace)");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('configureWorkspaceFolderRecommendedExtensions', "Configure Recommended Extensions (Workspace Folder)");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				return canAddExtension() ? this.initialStatus === ExtensionState.Installed ? localize('updated', "Updated") : localize('installed', "Installed") : null;
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				return canRemoveExtension() ? localize('uninstalled', "Uninstalled") : null;
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				return canAddExtension() ? localize('enabled', "Enabled") : null;
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				return canRemoveExtension() ? localize('disabled', "Disabled") : null;
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.tooltip = isIgnored ? localize('ignored', "This extension is ignored during sync") : localize('synced', "This extension is synced");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:						this.extensionsWorkbenchService.isExtensionIgnoredToSync(this.extension!) ? localize('sync', "Sync this extension") : localize('do not sync', "Do not sync this extension")
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.updateStatus({ icon: warningIcon, message: new MarkdownString(localize('malicious tooltip', "This extension was reported to be problematic.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ icon: warningIcon, message: new MarkdownString(localize('deprecated with alternate extension tooltip', "This extension is deprecated. Use the {0} extension instead.", link)) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				const link = `[${localize('settings', "settings")}](${URI.parse(`command:workbench.action.openSettings?${encodeURIComponent(JSON.stringify([this.extension.deprecationInfo.settings.map(setting => `@id:${setting}`).join(' ')]))}`)})`;
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ icon: warningIcon, message: new MarkdownString(localize('deprecated with alternate settings tooltip', "This extension is deprecated as this functionality is now built-in to VS Code. Configure these {0} to use this functionality.", link)) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ icon: warningIcon, message: new MarkdownString(localize('deprecated tooltip', "This extension is deprecated as it is no longer being maintained.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				const message = new MarkdownString(`${localize('incompatible platform', "The '{0}' extension is not available in {1} for {2}.", this.extension.displayName || this.extension.identifier.id, this.productService.nameLong, TargetPlatformToString(targetPlatform))} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-platform-specific-extensions)`);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				const productName = localize('VS Code for Web', "{0} for the Web", this.productService.nameLong);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				const message = new MarkdownString(`${localize('not web tooltip', "The '{0}' extension is not available in {1}.", this.extension.displayName || this.extension.identifier.id, productName)} [${localize('learn why', "Learn Why")}](https://aka.ms/vscode-web-extensions-guide)`);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.updateStatus({ message: new MarkdownString(localize('disabled by environment', "This extension is disabled by the environment.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.updateStatus({ message: new MarkdownString(localize('enabled by environment', "This extension is enabled because it is required in the current environment.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.updateStatus({ icon: infoIcon, message: new MarkdownString(details ? escapeMarkdownSyntaxTokens(details) : localize('disabled because of virtual workspace', "This extension has been disabled because it does not support virtual workspaces.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ icon: warningIcon, message: new MarkdownString(details ? escapeMarkdownSyntaxTokens(details) : localize('extension limited because of virtual workspace', "This extension has limited features because the current workspace is virtual.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.updateStatus({ icon: trustIcon, message: new MarkdownString(untrustedDetails ? escapeMarkdownSyntaxTokens(untrustedDetails) : localize('extension disabled because of trust requirement', "This extension has been disabled because the current workspace is not trusted.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ icon: trustIcon, message: new MarkdownString(untrustedDetails ? escapeMarkdownSyntaxTokens(untrustedDetails) : localize('extension limited because of trust requirement', "This extension has limited features because the current workspace is not trusted.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:							message = new MarkdownString(`${localize('Install in remote server to enable', "This extension is disabled in this workspace because it is defined to run in the Remote Extension Host. Please install the extension in '{0}' to enable.", this.extensionManagementServerService.remoteExtensionManagementServer.label)} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:							message = new MarkdownString(`${localize('Install in local server to enable', "This extension is disabled in this workspace because it is defined to run in the Local Extension Host. Please install the extension locally to enable.", this.extensionManagementServerService.remoteExtensionManagementServer.label)} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:							message = new MarkdownString(`${localize('Defined to run in desktop', "This extension is disabled because it is defined to run only in {0} for the Desktop.", this.productService.nameLong)} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					message = new MarkdownString(`${localize('Cannot be enabled', "This extension is disabled because it is not supported in {0} for the Web.", this.productService.nameLong)} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:						? new MarkdownString(localize('Install language pack also in remote server', "Install the language pack extension on '{0}' to enable it there also.", this.extensionManagementServerService.remoteExtensionManagementServer.label))
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:						: new MarkdownString(localize('Install language pack also locally', "Install the language pack extension locally to enable it there also."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					this.updateStatus({ icon: infoIcon, message: new MarkdownString(`${localize('enabled remotely', "This extension is enabled in the Remote Extension Host because it prefers to run there.")} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					this.updateStatus({ icon: infoIcon, message: new MarkdownString(`${localize('enabled locally', "This extension is enabled in the Local Extension Host because it prefers to run there.")} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					this.updateStatus({ icon: infoIcon, message: new MarkdownString(`${localize('enabled in web worker', "This extension is enabled in the Web Worker Extension Host because it prefers to run there.")} [${localize('learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			this.updateStatus({ icon: warningIcon, message: new MarkdownString(localize('extension disabled because of dependency', "This extension has been disabled because it depends on an extension that is disabled.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					this.updateStatus({ message: new MarkdownString(localize('extension enabled on remote', "Extension is enabled on '{0}'", this.extension.server.label)) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ message: new MarkdownString(localize('globally enabled', "This extension is enabled globally.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ message: new MarkdownString(localize('workspace enabled', "This extension is enabled for this workspace by the user.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ message: new MarkdownString(localize('globally disabled', "This extension is disabled globally by the user.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.updateStatus({ message: new MarkdownString(localize('workspace disabled', "This extension is disabled for this workspace by the user.")) }, true);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('reinstall', "Reinstall Extension...");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		return this.quickInputService.pick(this.getEntries(), { placeHolder: localize('selectExtensionToReinstall', "Select Extension to Reinstall") })
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:						const message = requireReload ? localize('ReinstallAction.successReload', "Please reload Visual Studio Code to complete reinstalling the extension {0}.", extension.identifier.id)
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:							: localize('ReinstallAction.success', "Reinstalling the extension {0} is completed.", extension.identifier.id);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:							label: localize('InstallVSIXAction.reloadNow', "Reload Now"),
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:	static readonly LABEL = localize('install previous version', "Install Specific Version of Extension...");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		const extensionPick = await this.quickInputService.pick(this.getExtensionEntries(), { placeHolder: localize('selectExtension', "Select Extension"), matchOnDetail: true });
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			quickPick.placeholder = localize('select extensions to install', "Select extensions to install");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				message: localize('no local extensions', "There are no extensions to install.")
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:						title: localize('installing extensions', "Installing Extensions...")
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:				this.notificationService.info(localize('finished installing', "Successfully installed extensions."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:			return localize('select and install local extensions', "Install Local Extensions in '{0}'...", this.extensionManagementServerService.remoteExtensionManagementServer.label);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		return localize('install local extensions title', "Install Local Extensions in '{0}'", this.extensionManagementServerService.remoteExtensionManagementServer!.label);
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		return localize('select and install remote extensions', "Install Remote Extensions Locally...");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:		return localize('install remote extensions', "Install Remote Extensions Locally");
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:}, localize('extensionButtonBackground', "Button background color for extension actions."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:}, localize('extensionButtonForeground', "Button foreground color for extension actions."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:}, localize('extensionButtonHoverBackground', "Button background hover color for extension actions."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:}, localize('extensionButtonSeparator', "Button separator color for extension actions"));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:}, localize('extensionButtonProminentBackground', "Button background color for extension actions that stand out (e.g. install button)."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:}, localize('extensionButtonProminentForeground', "Button foreground color for extension actions that stand out (e.g. install button)."));
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:}, localize('extensionButtonProminentHoverBackground', "Button background hover color for extension actions that stand out (e.g. install button)."));
src/vs/workbench/contrib/extensions/browser/extensionsDependencyChecker.ts:				category: localize('extensions', "Extensions"),
src/vs/workbench/contrib/extensions/browser/extensionsDependencyChecker.ts:				title: localize('auto install missing deps', "Install Missing Dependencies")
src/vs/workbench/contrib/extensions/browser/extensionsDependencyChecker.ts:					message: localize('finished installing missing deps', "Finished installing missing dependencies. Please reload the window now."),
src/vs/workbench/contrib/extensions/browser/extensionsDependencyChecker.ts:						primary: [new Action('realod', localize('reload', "Reload Window"), '', true,
src/vs/workbench/contrib/extensions/browser/extensionsDependencyChecker.ts:			this.notificationService.info(localize('no missing deps', "There are no missing dependencies to install."));
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:		this.container.title = localize('ratedLabel', "Average rating: {0} out of 5", rating);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:		const label = $('span', undefined, localize('sponsor', "Sponsor"));
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:					this.element.title = localize('remote extension title', "Extension in {0}", this.extensionManagementServerService.remoteExtensionManagementServer.label);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:			element.title = localize('syncingore.label', "This extension is ignored during sync.");
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:			activationTimeElement.textContent = `${localize('activation', "Activation time")}${extensionStatus.activationTimes.activationReason.startup ? ` (${localize('startup', "Startup")})` : ''} : ${activationTime}ms`;
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:			markdown.appendMarkdown(`**&nbsp;**&nbsp;<span style="color:#ffffff;background-color:${extensionPreReleaseIcon ? Color.Format.CSS.formatHex(extensionPreReleaseIcon) : '#ffffff'};">&nbsp;$(${preReleaseIcon.id})&nbsp;${localize('pre-release-label', "Pre-Release")}&nbsp;</span>`);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:				markdown.appendMarkdown(`$(${sponsorIcon.id}) [${localize('sponsor', "Sponsor")}](${this.extension.publisherSponsorLink})`);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:			const publisherVerifiedTooltip = localize('publisher verified tooltip', "This publisher has verified ownership of {0}", `[${URI.parse(this.extension.publisherDomain.link).authority}](${this.extension.publisherDomain.link})`);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:			markdown.appendMarkdown(localize('updateRequired', "Latest version:"));
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:					markdown.appendMarkdown(`${localize('activation', "Activation time")}${extensionRuntimeStatus.activationTimes.activationReason.startup ? ` (${localize('startup', "Startup")})` : ''}: \`${activationTime}ms\``);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:					const errorsLink = extensionRuntimeStatus.runtimeErrors.length ? `[${extensionRuntimeStatus.runtimeErrors.length === 1 ? localize('uncaught error', '1 uncaught error') : localize('uncaught errors', '{0} uncaught errors', extensionRuntimeStatus.runtimeErrors.length)}](${URI.parse(`command:extension.open?${encodeURIComponent(JSON.stringify([this.extension.identifier.id, ExtensionEditorTab.RuntimeStatus]))}`)})` : undefined;
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:					const messageLink = extensionRuntimeStatus.messages.length ? `[${extensionRuntimeStatus.messages.length === 1 ? localize('message', '1 message') : localize('messages', '{0} messages', extensionRuntimeStatus.messages.length)}](${URI.parse(`command:extension.open?${encodeURIComponent(JSON.stringify([this.extension.identifier.id, ExtensionEditorTab.RuntimeStatus]))}`)})` : undefined;
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:					markdown.appendMarkdown(`&nbsp;[${localize('dependencies', "Show Dependencies")}](${URI.parse(`command:extension.open?${encodeURIComponent(JSON.stringify([this.extension.identifier.id, ExtensionEditorTab.Dependencies]))}`)})`);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:		const preReleaseVersionLink = `[${localize('Show prerelease version', "Pre-Release version")}](${URI.parse(`command:workbench.extensions.action.showPreReleaseVersion?${encodeURIComponent(JSON.stringify([extension.identifier.id]))}`)})`;
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:		return localize('has prerelease', "This extension has a {0} available", preReleaseVersionLink);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:			return { icon: undefined, message: localize('recommendationHasBeenIgnored', "You have chosen not to receive recommendations for this extension.") };
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:export const extensionRatingIconColor = registerColor('extensionIcon.starForeground', { light: '#DF6100', dark: '#FF8E00', hcDark: '#FF8E00', hcLight: textLinkForeground }, localize('extensionIconStarForeground', "The icon color for extension ratings."), true);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:export const extensionVerifiedPublisherIconColor = registerColor('extensionIcon.verifiedForeground', { dark: textLinkForeground, light: textLinkForeground, hcDark: textLinkForeground, hcLight: textLinkForeground }, localize('extensionIconVerifiedForeground', "The icon color for extension verified publisher."), true);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:export const extensionPreReleaseIconColor = registerColor('extensionIcon.preReleaseForeground', { dark: '#1d9271', light: '#1d9271', hcDark: '#1d9271', hcLight: textLinkForeground }, localize('extensionPreReleaseForeground', "The icon color for pre-release extension."), true);
src/vs/workbench/contrib/extensions/browser/extensionsWidgets.ts:export const extensionSponsorIconColor = registerColor('extensionIcon.sponsorForeground', { light: '#B51E78', dark: '#D758B3', hcDark: null, hcLight: '#B51E78' }, localize('extensionIcon.sponsorForeground', "The icon color for extension sponsor."), true);
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:					const publisher = localize('extension.arialabel.publihser', "Publisher {0}", extension.publisherDisplayName);
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:					const deprecated = extension?.deprecationInfo ? localize('extension.arialabel.deprecated', "Deprecated") : '';
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:					return localize('extensions', "Extensions");
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:						this.bodyTemplate.messageBox.textContent = localize('offline error', "Unable to search the Marketplace when offline, please check your network connection.");
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:						this.bodyTemplate.messageBox.textContent = localize('error', "Error while fetching extensions. {0}", getErrorMessage(error));
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:					this.bodyTemplate.messageBox.textContent = localize('no extensions found', "No extensions found.");
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:			const error = createErrorWithActions(localize('suggestProxyError', "Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting."), [
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:				new Action('open user settings', localize('open user settings', "Open User Settings"), undefined, true, () => this.preferencesService.openUserSettings())
src/vs/workbench/contrib/extensions/browser/extensionsViews.ts:				message: localize('no local extensions', "There are no extensions to install.")
src/vs/workbench/contrib/extensions/browser/extensionsActivationProgress.ts:			title: localize('activation', "Activating Extensions...")
src/vs/workbench/contrib/extensions/browser/extensions.web.contribution.ts:	EditorPaneDescriptor.create(RuntimeExtensionsEditor, RuntimeExtensionsEditor.ID, localize('runtimeExtension', "Running Extensions")),
src/vs/workbench/contrib/extensions/browser/extensionsQuickAccess.ts:				label: localize('type', "Type an extension name to install or search.")
src/vs/workbench/contrib/extensions/browser/extensionsQuickAccess.ts:			label: localize('searchFor', "Press Enter to search for extension '{0}'.", filter),
src/vs/workbench/contrib/extensions/browser/extensionsQuickAccess.ts:				label: localize('install', "Press Enter to install extension '{0}'.", filter),
src/vs/workbench/contrib/extensions/browser/extensionsQuickAccess.ts:			label: localize('manage', "Press Enter to manage your extensions."),
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const extensionsViewIcon = registerIcon('extensions-view-icon', Codicon.extensions, localize('extensionsViewIcon', 'View icon of the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const manageExtensionIcon = registerIcon('extensions-manage', Codicon.gear, localize('manageExtensionIcon', 'Icon for the \'Manage\' action in the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const clearSearchResultsIcon = registerIcon('extensions-clear-search-results', Codicon.clearAll, localize('clearSearchResultsIcon', 'Icon for the \'Clear Search Result\' action in the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const refreshIcon = registerIcon('extensions-refresh', Codicon.refresh, localize('refreshIcon', 'Icon for the \'Refresh\' action in the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const filterIcon = registerIcon('extensions-filter', Codicon.filter, localize('filterIcon', 'Icon for the \'Filter\' action in the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const installLocalInRemoteIcon = registerIcon('extensions-install-local-in-remote', Codicon.cloudDownload, localize('installLocalInRemoteIcon', 'Icon for the \'Install Local Extension in Remote\' action in the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const installWorkspaceRecommendedIcon = registerIcon('extensions-install-workspace-recommended', Codicon.cloudDownload, localize('installWorkspaceRecommendedIcon', 'Icon for the \'Install Workspace Recommended Extensions\' action in the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const configureRecommendedIcon = registerIcon('extensions-configure-recommended', Codicon.pencil, localize('configureRecommendedIcon', 'Icon for the \'Configure Recommended Extensions\' action in the extensions view.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const syncEnabledIcon = registerIcon('extensions-sync-enabled', Codicon.sync, localize('syncEnabledIcon', 'Icon to indicate that an extension is synced.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const syncIgnoredIcon = registerIcon('extensions-sync-ignored', Codicon.syncIgnored, localize('syncIgnoredIcon', 'Icon to indicate that an extension is ignored when syncing.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const remoteIcon = registerIcon('extensions-remote', Codicon.remote, localize('remoteIcon', 'Icon to indicate that an extension is remote in the extensions view and editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const installCountIcon = registerIcon('extensions-install-count', Codicon.cloudDownload, localize('installCountIcon', 'Icon shown along with the install count in the extensions view and editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const ratingIcon = registerIcon('extensions-rating', Codicon.star, localize('ratingIcon', 'Icon shown along with the rating in the extensions view and editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const verifiedPublisherIcon = registerIcon('extensions-verified-publisher', Codicon.verifiedFilled, localize('verifiedPublisher', 'Icon used for the verified extension publisher in the extensions view and editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const preReleaseIcon = registerIcon('extensions-pre-release', Codicon.versions, localize('preReleaseIcon', 'Icon shown for extensions having pre-release versions in extensions view and editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const sponsorIcon = registerIcon('extensions-sponsor', Codicon.heartFilled, localize('sponsorIcon', 'Icon used for sponsoring extensions in the extensions view and editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const starFullIcon = registerIcon('extensions-star-full', Codicon.starFull, localize('starFullIcon', 'Full star icon used for the rating in the extensions editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const starHalfIcon = registerIcon('extensions-star-half', Codicon.starHalf, localize('starHalfIcon', 'Half star icon used for the rating in the extensions editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const starEmptyIcon = registerIcon('extensions-star-empty', Codicon.starEmpty, localize('starEmptyIcon', 'Empty star icon used for the rating in the extensions editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const errorIcon = registerIcon('extensions-error-message', Codicon.error, localize('errorIcon', 'Icon shown with a error message in the extensions editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const warningIcon = registerIcon('extensions-warning-message', Codicon.warning, localize('warningIcon', 'Icon shown with a warning message in the extensions editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const infoIcon = registerIcon('extensions-info-message', Codicon.info, localize('infoIcon', 'Icon shown with an info message in the extensions editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const trustIcon = registerIcon('extension-workspace-trust', Codicon.shield, localize('trustIcon', 'Icon shown with a workspace trust message in the extension editor.'));
src/vs/workbench/contrib/extensions/browser/extensionsIcons.ts:export const activationTimeIcon = registerIcon('extension-activation-time', Codicon.history, localize('activationtimeIcon', 'Icon shown with a activation time message in the extension editor.'));
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:	placeholder: localize('manageExtensionsQuickAccessPlaceholder', "Press Enter to manage extensions."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:	helpEntries: [{ description: localize('manageExtensionsHelp', "Manage Extensions") }]
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:		localize('extension', "Extension")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:		title: { value: localize('extensions', "Extensions"), original: 'Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			mnemonicTitle: localize({ key: 'miViewExtensions', comment: ['&& denotes a mnemonic'] }, "E&&xtensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:		title: localize('extensionsConfigurationTitle', "Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('all', "All Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('enabled', "Only Enabled Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('none', "None"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('extensions.autoUpdate.true', 'Download and install updates automatically for all extensions.'),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('extensions.autoUpdate.enabled', 'Download and install updates automatically only for enabled extensions. Disabled extensions will not be updated automatically.'),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('extensions.autoUpdate.false', 'Extensions are not automatically updated.'),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('extensions.autoUpdate', "Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('extensionsCheckUpdates', "When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('extensionsIgnoreRecommendations', "When enabled, the notifications for extension recommendations will not be shown."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				deprecationMessage: localize('extensionsShowRecommendationsOnlyOnDemand_Deprecated', "This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('extensionsCloseExtensionDetailsOnViewChange', "When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('handleUriConfirmedExtensions', "When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('extensionsWebWorker.true', "The Web Worker Extension Host will always be launched."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('extensionsWebWorker.false', "The Web Worker Extension Host will never be launched."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					localize('extensionsWebWorker.auto', "The Web Worker Extension Host will be launched when a web extension needs it."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('extensionsWebWorker', "Enable web worker extension host."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				markdownDescription: localize('extensions.supportVirtualWorkspaces', "Override the virtual workspaces support of an extension."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				markdownDescription: localize('extensions.affinity', "Configure an extension to execute in a different extension host process."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('extensionsUseUtilityProcess', "When enabled, the extension host will be launched using the new UtilityProcess Electron API."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				markdownDescription: localize('extensions.supportUntrustedWorkspaces', "Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:									localize('extensions.supportUntrustedWorkspaces.true', "Extension will always be enabled."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:									localize('extensions.supportUntrustedWorkspaces.false', "Extension will only be enabled only when the workspace is trusted."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:									localize('extensions.supportUntrustedWorkspaces.limited', "Extension will always be enabled, and the extension will hide functionality requiring trust."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:								description: localize('extensions.supportUntrustedWorkspaces.supported', "Defines the untrusted workspace support setting for the extension."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:								description: localize('extensions.supportUntrustedWorkspaces.version', "Defines the version of the extension for which the override should be applied. If not specified, the override will be applied independent of the extension version."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:		description: localize('workbench.extensions.installExtension.description', "Install the given extension"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				description: localize('workbench.extensions.installExtension.arg.decription', "Extension id or VSIX resource uri"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:							'description': localize('workbench.extensions.installExtension.option.installOnlyNewlyAddedFromExtensionPackVSIX', "When enabled, VS Code installs only newly added extensions from the extension pack VSIX. This option is considered only while installing a VSIX."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:							'description': localize('workbench.extensions.installExtension.option.installPreReleaseVersion', "When enabled, VS Code installs the pre-release version of the extension if available."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:							'description': localize('workbench.extensions.installExtension.option.donotSync', "When enabled, VS Code do not sync this extension when Settings Sync is on."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:							'description': localize('workbench.extensions.installExtension.option.context', "Context for the installation. This is a JSON object that can be used to pass any information to the installation handlers. i.e. `{skipWalkthrough: true}` will skip opening the walkthrough upon install."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					throw new Error(localize('notFound', "Extension '{0}' not found.", arg));
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:		description: localize('workbench.extensions.uninstallExtension.description', "Uninstall the given extension"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				name: localize('workbench.extensions.uninstallExtension.arg.name', "Id of the extension to uninstall"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			throw new Error(localize('id required', "Extension id required."));
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			throw new Error(localize('notInstalled', "Extension '{0}' is not installed. Make sure you use the full extension ID, including the publisher, e.g.: ms-dotnettools.csharp.", id));
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			throw new Error(localize('builtin', "Extension '{0}' is a Built-in extension and cannot be installed", id));
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:		description: localize('workbench.extensions.search.description', "Search for a specific extension"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				name: localize('workbench.extensions.search.arg.name', "Query to use in search"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				placeholder: localize('installExtensionQuickAccessPlaceholder', "Type the name of an extension to install or search."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				helpEntries: [{ description: localize('installExtensionQuickAccessHelp', "Install or Search Extensions") }]
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					title: localize({ key: 'miPreferencesExtensions', comment: ['&& denotes a mnemonic'] }, "&&Extensions")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					title: localize('showExtensions', "Extensions")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('installExtensions', "Install Extensions"), original: 'Install Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showRecommendedKeymapExtensionsShort', "Keymaps"), original: 'Keymaps' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[MenuId.MenubarPreferencesMenu.id]: localize({ key: 'miimportKeyboardShortcutsFrom', comment: ['&& denotes a mnemonic'] }, "&&Migrate Keyboard Shortcuts from..."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[MenuId.GlobalActivity.id]: localize('importKeyboardShortcutsFroms', "Migrate Keyboard Shortcuts from...")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showLanguageExtensionsShort', "Language Extensions"), original: 'Language Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('checkForUpdates', "Check for Extension Updates"), original: 'Check for Extension Updates' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					return this.dialogService.show(Severity.Info, localize('noUpdatesAvailable', "All extensions are up to date."));
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('configure auto updating extensions', "Auto Update Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('configureExtensionsAutoUpdate.all', "All Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('configureExtensionsAutoUpdate.enabled', "Only Enabled Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('configureExtensionsAutoUpdate.none', "None"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('updateAll', "Update All Extensions"), original: 'Update All Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('disableAutoUpdate', "Disable Auto Update for all extensions"), original: 'Disable Auto Update for all extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('enableAutoUpdate', "Enable Auto Update for all extensions"), original: 'Enable Auto Update for all extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('enableAll', "Enable All Extensions"), original: 'Enable All Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('enableAllWorkspace', "Enable All Extensions for this Workspace"), original: 'Enable All Extensions for this Workspace' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('disableAll', "Disable All Installed Extensions"), original: 'Disable All Installed Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('disableAllWorkspace', "Disable All Installed Extensions for this Workspace"), original: 'Disable All Installed Extensions for this Workspace' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('InstallFromVSIX', "Install from VSIX..."), original: 'Install from VSIX...' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					title: localize('installFromVSIX', "Install from VSIX"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					openLabel: mnemonicButtonLabel(localize({ key: 'installButton', comment: ['&& denotes a mnemonic'] }, "&&Install"))
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('installVSIX', "Install Extension VSIX"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:							const message = requireReload ? localize('InstallVSIXAction.successReload', "Completed installing {0} extension from VSIX. Please reload Visual Studio Code to enable it.", extension.displayName || extension.name)
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:								: localize('InstallVSIXAction.success', "Completed installing {0} extension from VSIX.", extension.displayName || extension.name);
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:								label: localize('InstallVSIXAction.reloadNow', "Reload Now"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('installWebExtensionFromLocation', "Install Web Extension..."), original: 'Install Web Extension...' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				quickPick.title = localize('installFromLocation', "Install Web Extension from Location");
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				quickPick.customLabel = localize('install button', "Install");
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				quickPick.placeholder = localize('installFromLocationPlaceHolder', "Location of the web extension");
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('filterExtensions', "Filter Extensions..."),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showFeaturedExtensions', "Show Featured Extensions"), original: 'Show Featured Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('featured filter', "Featured")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showPopularExtensions', "Show Popular Extensions"), original: 'Show Popular Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('most popular filter', "Most Popular")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showRecommendedExtensions', "Show Recommended Extensions"), original: 'Show Recommended Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('most popular recommended', "Recommended")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('recentlyPublishedExtensions', "Show Recently Published Extensions"), original: 'Show Recently Published Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('recently published filter', "Recently Published")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('filter by category', "Category"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showBuiltInExtensions', "Show Built-in Extensions"), original: 'Show Built-in Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('builtin filter', "Built-in")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('extensionUpdates', "Show Extension Updates"), original: 'Show Extension Updates' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('extension updates filter', "Updates")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showWorkspaceUnsupportedExtensions', "Show Extensions Unsupported By Workspace"), original: 'Show Extensions Unsupported By Workspace' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('workspace unsupported filter', "Workspace Unsupported")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showEnabledExtensions', "Show Enabled Extensions"), original: 'Show Enabled Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('enabled filter', "Enabled")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('showDisabledExtensions', "Show Disabled Extensions"), original: 'Show Disabled Extensions' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:				[extensionsFilterSubMenu.id]: localize('disabled filter', "Disabled")
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('sorty by', "Sort By"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			{ id: 'installs', title: localize('sort by installs', "Install Count"), precondition: BuiltInExtensionsContext.negate() },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			{ id: 'rating', title: localize('sort by rating', "Rating"), precondition: BuiltInExtensionsContext.negate() },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			{ id: 'name', title: localize('sort by name', "Name"), precondition: BuiltInExtensionsContext.negate() },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			{ id: 'publishedDate', title: localize('sort by published date', "Published Date"), precondition: BuiltInExtensionsContext.negate() },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			{ id: 'updateDate', title: localize('sort by update date', "Updated Date"), precondition: ContextKeyExpr.and(SearchMarketplaceExtensionsContext.negate(), RecommendedExtensionsContext.negate(), BuiltInExtensionsContext.negate()) },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('clearExtensionsSearchResults', "Clear Extensions Search Results"), original: 'Clear Extensions Search Results' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('refreshExtension', "Refresh"), original: 'Refresh' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: localize('installWorkspaceRecommendedExtensions', "Install Workspace Recommended Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('show pre-release version', "Show Pre-Release Version"), original: 'Show Pre-Release Version' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('show released version', "Show Release Version"), original: 'Show Release Version' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.copyExtension', "Copy"), original: 'Copy' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					const name = localize('extensionInfoName', 'Name: {0}', extension.displayName);
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					const id = localize('extensionInfoId', 'Id: {0}', extensionId);
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					const description = localize('extensionInfoDescription', 'Description: {0}', extension.description);
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					const verision = localize('extensionInfoVersion', 'Version: {0}', extension.version);
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					const publisher = localize('extensionInfoPublisher', 'Publisher: {0}', extension.publisherDisplayName);
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:					const link = extension.url ? localize('extensionInfoVSMarketplaceLink', 'VS Marketplace Link: {0}', `${extension.url}`) : null;
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.copyExtensionId', "Copy Extension ID"), original: 'Copy Extension ID' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.configure', "Extension Settings"), original: 'Extension Settings' },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.toggleIgnoreExtension', "Sync This Extension"), original: `Sync This Extension` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.ignoreRecommendation', "Ignore Recommendation"), original: `Ignore Recommendation` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.undoIgnoredRecommendation', "Undo Ignored Recommendation"), original: `Undo Ignored Recommendation` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.addExtensionToWorkspaceRecommendations', "Add to Workspace Recommendations"), original: `Add to Workspace Recommendations` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.removeExtensionFromWorkspaceRecommendations', "Remove from Workspace Recommendations"), original: `Remove from Workspace Recommendations` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.addToWorkspaceRecommendations', "Add Extension to Workspace Recommendations"), original: `Add Extension to Workspace Recommendations` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			category: localize('extensions', "Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.addToWorkspaceFolderRecommendations', "Add Extension to Workspace Folder Recommendations"), original: `Add Extension to Workspace Folder Recommendations` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			category: localize('extensions', "Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.addToWorkspaceIgnoredRecommendations', "Add Extension to Workspace Ignored Recommendations"), original: `Add Extension to Workspace Ignored Recommendations` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			category: localize('extensions', "Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			title: { value: localize('workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations', "Add Extension to Workspace Folder Ignored Recommendations"), original: `Add Extension to Workspace Folder Ignored Recommendations` },
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			category: localize('extensions', "Extensions"),
src/vs/workbench/contrib/extensions/browser/extensions.contribution.ts:			category: localize('extensions', "Extensions"),
src/vs/workbench/contrib/extensions/browser/extensionsCompletionItemsProvider.ts:			suggestions.push({ label: localize('exampleExtension', "Example"), kind: CompletionItemKind.Value, insertText: text, filterText: text, range });
src/vs/workbench/api/node/extHostDebugService.ts:			const terminalName = args.title || nls.localize('debug.terminal.title', "Debug Process");
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:const REMOTE_CATEGORY: ILocalizedString = { value: localize({ key: 'remote', comment: ['Remote as in remote machine'] }, "Remote"), original: 'Remote' };
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			const getInstalledViewName = (): string => getViewName(localize('installed', "Installed"), server);
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:									value: localize('select and install local extensions', "Install Local Extensions in '{0}'...", server.label),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:						title: { value: localize('install remote in local', "Install Remote Extensions Locally..."), original: 'Install Remote Extensions Locally...' },
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('popularExtensions', "Popular"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('recommendedExtensions', "Recommended"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:				name: localize('enabledExtensions', "Enabled"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:				name: localize('disabledExtensions', "Disabled"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('marketPlace', "Marketplace"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('installed', "Installed"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('recently updated', "Recently Updated"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('enabled', "Enabled"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('disabled', "Disabled"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('availableUpdates', "Available Updates"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('builtin', "Builtin"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('workspaceUnsupported', "Workspace Unsupported"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('workspaceRecommendedExtensions', "Workspace Recommendations"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('otherRecommendedExtensions', "Other Recommendations"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('builtinFeatureExtensions', "Features"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('builtInThemesExtensions', "Themes"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('builtinProgrammingLanguageExtensions', "Programming Languages"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('untrustedUnsupportedExtensions', "Disabled in Restricted Mode"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('untrustedPartiallySupportedExtensions', "Limited in Restricted Mode"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('virtualUnsupportedExtensions', "Disabled in Virtual Workspaces"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('virtualPartiallySupportedExtensions', "Limited in Virtual Workspaces"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			name: localize('deprecated', "Deprecated"),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:		const placeholder = localize('searchExtensions', "Search Extensions in Marketplace");
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:					alert(localize('extensionFoundInSection', "1 extension found in the {0} section.", view.name));
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:					alert(localize('extensionFound', "1 extension found."));
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:					alert(localize('extensionsFoundInSection', "{0} extensions found in the {1} section.", count, view.name));
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:					alert(localize('extensionsFound', "{0} extensions found.", count));
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:			const error = createErrorWithActions(localize('suggestProxyError', "Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting."), [
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:				new Action('open user settings', localize('open user settings', "Open User Settings"), undefined, true, () => this.preferencesService.openUserSettings())
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:				msg += outdated === 1 ? localize('extensionToUpdate', '{0} requires update', outdated) : localize('extensionsToUpdate', '{0} require update', outdated);
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:				msg += extensionsReloadRequired.length === 1 ? localize('extensionToReload', '{0} requires reload', extensionsReloadRequired.length) : localize('extensionsToReload', '{0} require reload', extensionsReloadRequired.length);
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:							localize('malicious warning', "We have uninstalled '{0}' which was reported to be problematic.", e.identifier.id),
src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts:								label: localize('reloadNow', "Reload Now"),
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:			this.logService.error(nls.localize('Manifest is not found', "Manifest is not found"), this.identifier.id);
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:				return nls.localize('postUninstallTooltip', "Please reload Visual Studio Code to complete the uninstallation of this extension.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:							return nls.localize('postUpdateTooltip', "Please reload Visual Studio Code to enable the updated extension.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:								return nls.localize('enable locally', "Please reload Visual Studio Code to enable this extension locally.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:								return nls.localize('enable remote', "Please reload Visual Studio Code to enable this extension in {0}.", this.extensionManagementServerService.remoteExtensionManagementServer?.label);
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:								return nls.localize('postEnableTooltip', "Please reload Visual Studio Code to enable this extension.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:								return nls.localize('postEnableTooltip', "Please reload Visual Studio Code to enable this extension.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:						return nls.localize('postDisableTooltip', "Please reload Visual Studio Code to disable this extension.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:					return nls.localize('postEnableTooltip', "Please reload Visual Studio Code to enable this extension.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:						return nls.localize('postEnableTooltip', "Please reload Visual Studio Code to enable this extension.");
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:			return Promise.reject(new Error(nls.localize('malicious', "This extension is reported to be problematic.")));
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:			title: nls.localize('uninstallingExtension', 'Uninstalling extension....'),
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:			throw new Error(nls.localize('not found', "Unable to install extension '{0}' because the requested version '{1}' is not found.", extension.gallery!.identifier.id, version));
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:		const title = extensionName ? nls.localize('installing named extension', "Installing '{0}' extension....", extensionName) : nls.localize('installing extension', 'Installing extension....');
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:								label: nls.localize('disable all', 'Disable All'),
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:			return nls.localize('singleDependentError', "Cannot disable '{0}' extension alone. '{1}' extension depends on this. Do you want to disable all these extensions?", extension.displayName, dependents[0].displayName);
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:			return nls.localize('twoDependentsError', "Cannot disable '{0}' extension alone. '{1}' and '{2}' extensions depend on this. Do you want to disable all these extensions?",
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:		return nls.localize('multipleDependentsError', "Cannot disable '{0}' extension alone. '{1}', '{2}' and other extensions depend on this. Do you want to disable all these extensions?",
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:						title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:						title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize('languageActivation', "Activated by {1} because you opened a {0} file", language, activationId);
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					el.title = nls.localize('unresponsive.title', "Extension has caused the extension host to freeze.");
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					const el = $('span', undefined, ...renderLabelWithIcons(`$(bug) ${nls.localize('errors', "{0} uncaught errors", element.status.runtimeErrors.length)}`));
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					return nls.localize('runtimeExtensions', "Runtime Extensions");
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:				nls.localize('copy id', "Copy id ({0})", e.element!.description.identifier.value),
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:				actions.push(new Action('runtimeExtensionsEditor.action.disableWorkspace', nls.localize('disable workspace', "Disable (Workspace)"), undefined, true, () => this._extensionsWorkbenchService.setEnablement(e.element!.marketplaceInfo!, EnablementState.DisabledWorkspace)));
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:				actions.push(new Action('runtimeExtensionsEditor.action.disable', nls.localize('disable', "Disable"), undefined, true, () => this._extensionsWorkbenchService.setEnablement(e.element!.marketplaceInfo!, EnablementState.DisabledGlobally)));
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:			title: { value: nls.localize('showRuntimeExtensions', "Show Running Extensions"), original: 'Show Running Extensions' },
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		this.element = append(container, $('code.version', { title: localize('extension version', "Extension Version") }));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		textElement.textContent = localize('preRelease', "Pre-Release");
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		const name = append(title, $('span.name.clickable', { title: localize('name', "Extension name"), role: 'heading', tabIndex: 0 }));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		const preview = append(title, $('span.preview', { title: localize('preview', "Preview") }));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		preview.textContent = localize('preview', "Preview");
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		builtin.textContent = localize('builtin', "Built-in");
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		const publisher = append(append(subtitle, $('.subtitle-entry')), $('.publisher.clickable', { title: localize('publisher', "Publisher"), tabIndex: 0 }));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		const installCount = append(append(subtitle, $('.subtitle-entry')), $('span.install', { title: localize('install count', "Install count"), tabIndex: 0 }));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		const rating = append(append(subtitle, $('.subtitle-entry')), $('span.rating.clickable', { title: localize('rating', "Rating"), tabIndex: 0 }));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		template.publisher.title = extension.publisherDomain?.verified && extension.publisherDomain.link ? localize('publisher verified tooltip', "This publisher has verified ownership of {0}", URI.parse(extension.publisherDomain.link).authority) : '';
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			template.navbar.push(ExtensionEditorTab.Readme, localize('details', "Details"), localize('detailstooltip', "Extension details, rendered from the extension's 'README.md' file"));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			template.navbar.push(ExtensionEditorTab.Contributions, localize('contributions', "Feature Contributions"), localize('contributionstooltip', "Lists contributions to VS Code by this extension"));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			template.navbar.push(ExtensionEditorTab.Changelog, localize('changelog', "Changelog"), localize('changelogtooltip', "Extension update history, rendered from the extension's 'CHANGELOG.md' file"));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			template.navbar.push(ExtensionEditorTab.Dependencies, localize('dependencies', "Dependencies"), localize('dependenciestooltip', "Lists extensions this extension depends on"));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			template.navbar.push(ExtensionEditorTab.ExtensionPack, localize('extensionpack', "Extension Pack"), localize('extensionpacktooltip', "Lists extensions those will be installed together with this extension"));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		const addRuntimeStatusSection = () => template.navbar.push(ExtensionEditorTab.RuntimeStatus, localize('runtimeStatus', "Runtime Status"), localize('runtimeStatus description', "Extension runtime status"));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			activeElement = await this.openMarkdown(this.extensionReadme!.get(), localize('noReadme', "No README available."), readmeContainer, WebviewIndex.Readme, token);
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		extensionPackHeader.textContent = localize('extension pack', "Extension Pack ({0})", manifest.extensionPack!.length);
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			this.openMarkdown(this.extensionReadme!.get(), localize('noReadme', "No README available."), readmeContent, WebviewIndex.Readme, token),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			append(categoriesContainer, $('.additional-details-title', undefined, localize('categories', "Categories")));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			resources.push([localize('Marketplace', "Marketplace"), URI.parse(extension.url)]);
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				resources.push([localize('repository', "Repository"), URI.parse(extension.repository)]);
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				resources.push([localize('license', "License"), URI.parse(extension.licenseUrl)]);
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			append(extensionResourcesContainer, $('.additional-details-title', undefined, localize('resources', "Extension Resources")));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		append(moreInfoContainer, $('.additional-details-title', undefined, localize('Marketplace Info', "More Info")));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('div', undefined, localize('published', "Published")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('div', undefined, localize('last released', "Last released")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('div', undefined, localize('last updated', "Last updated")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				$('div', undefined, localize('id', "Identifier")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:		return this.openMarkdown(this.extensionChangelog!.get(), localize('noChangelog', "No Changelog available."), template.content, WebviewIndex.Changelog, token);
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					append(content, $('p.nocontent')).textContent = localize('noContributions', "No Contributions");
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				append(content, $('p.nocontent')).textContent = localize('noContributions', "No Contributions");
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			append(template.content, $('p.nocontent')).textContent = localize('noDependencies', "No Dependencies");
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			append(element, $('div.activation-message', undefined, `${localize('activation', "Activation time")}${extensionStatus.activationTimes.activationReason.startup ? ` (${localize('startup', "Startup")})` : ''} : ${activationTime}ms`));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			append(element, $('div.activation-message', undefined, localize('not yet activated', "Not yet activated.")));
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				$('summary', { tabindex: '0' }, localize('uncaught errors', "Uncaught Errors ({0})", extensionStatus.runtimeErrors.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				$('summary', { tabindex: '0' }, localize('messages', "Messages ({0})", extensionStatus?.messages.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			append(element, $('div.no-status-message')).textContent = localize('noStatus', "No status available.");
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('settings', "Settings ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('setting name', "ID")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('description', "Description")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('default', "Default"))
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('debuggers', "Debuggers ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('debugger name', "Name")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('debugger type', "Type")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('viewContainers', "View Containers ({0})", viewContainers.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				$('tr', undefined, $('th', undefined, localize('view container id', "ID")), $('th', undefined, localize('view container title', "Title")), $('th', undefined, localize('view container location', "Where"))),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('views', "Views ({0})", views.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				$('tr', undefined, $('th', undefined, localize('view id', "ID")), $('th', undefined, localize('view name', "Name")), $('th', undefined, localize('view location', "Where"))),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('localizations', "Localizations ({0})", localizations.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:				$('tr', undefined, $('th', undefined, localize('localizations language id', "Language ID")), $('th', undefined, localize('localizations language name', "Language Name")), $('th', undefined, localize('localizations localized language name', "Language Name (Localized)"))),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('customEditors', "Custom Editors ({0})", webviewEditors.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('customEditors view type', "View Type")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('customEditors priority', "Priority")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('customEditors filenamePattern', "Filename Pattern"))),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('codeActions', "Code Actions ({0})", flatActions.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('codeActions.title', "Title")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('codeActions.kind', "Kind")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('codeActions.description', "Description")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('codeActions.languages', "Languages"))),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('authentication', "Authentication ({0})", authentication.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('authentication.label', "Label")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('authentication.id', "ID"))
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('colorThemes', "Color Themes ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('iconThemes', "File Icon Themes ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('productThemes', "Product Icon Themes ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('colors', "Colors ({0})", colors.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('colorId', "ID")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('description', "Description")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('defaultDark', "Dark Default")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('defaultLight', "Light Default")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('defaultHC', "High Contrast Default"))
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('JSON Validation', "JSON Validation ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('fileMatch', "File Match")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('schema', "Schema"))
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('commands', "Commands ({0})", commands.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('command name', "ID")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('command title', "Title")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('keyboard shortcuts', "Keyboard Shortcuts")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('menuContexts', "Menu Contexts"))
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('languages', "Languages ({0})", languages.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('language id', "ID")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('language name', "Name")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('file extensions', "File Extensions")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('grammar', "Grammar")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('snippets', "Snippets"))
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('activation events', "Activation Events ({0})", activationEvents.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('Notebooks', "Notebooks ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('Notebook id', "ID")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('Notebook name', "Name")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			$('summary', { tabindex: '0' }, localize('NotebookRenderers', "Notebook Renderers ({0})", contrib.length)),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('Notebook renderer name', "Name")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:					$('th', undefined, localize('Notebook mimetypes', "Mimetypes")),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			title: localize('find', "Find"),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			title: localize('find next', "Find Next"),
src/vs/workbench/contrib/extensions/browser/extensionEditor.ts:			title: localize('find previous', "Find Previous"),
src/vs/workbench/contrib/extensions/browser/dynamicWorkspaceRecommendations.ts:				reasonText: localize('dynamicWorkspaceRecommendation', "This extension may interest you because it's popular among users of the {0} repository.", folder.name)
src/vs/workbench/contrib/extensions/browser/configBasedRecommendations.ts:				reasonText: localize('exeBasedRecommendation', "This extension is recommended because of the current workspace configuration")
src/vs/workbench/contrib/emmet/browser/actions/expandAbbreviation.ts:			label: nls.localize('expandAbbreviationAction', "Emmet: Expand Abbreviation"),
src/vs/workbench/contrib/emmet/browser/actions/expandAbbreviation.ts:				title: nls.localize({ key: 'miEmmetExpandAbbreviation', comment: ['&& denotes a mnemonic'] }, "Emmet: E&&xpand Abbreviation"),
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:			content: localize(
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:				localize(
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					localize('storeEditSessionTitle', 'Store Edit Session')
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					title: localize('workbench.editSessions.actions.resume', "Resume Edit Session"),
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					title: localize('workbench.editSessions.actions.store', "Store Edit Session"),
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					title: localize('workbench.editSessions.actions.delete', "Delete Edit Session"),
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					message: localize('confirm delete', 'Are you sure you want to permanently delete the edit session with ref {0}? You cannot undo this action.', editSessionId),
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					title: localize('workbench.editSessions.actions.deleteAll', "Delete All Edit Sessions"),
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					message: localize('confirm delete all', 'Are you sure you want to permanently delete all edit sessions? You cannot undo this action.'),
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:					title: localize('open file', 'Open File'),
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:const configureContinueOnPreference = { iconClass: Codicon.settingsGear.classNames, tooltip: localize('configure continue on', 'Configure this preference in settings') };
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:		quickpick.placeholder = localize('choose account placeholder', "Select an account to turn on Edit Sessions");
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:		options.push({ type: 'separator', label: localize('signed in', "Signed In") });
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:		options.push({ type: 'separator', label: localize('others', "Others") });
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:				options.push({ label: localize('sign in using account', "Sign in with {0}", providerName), provider: authenticationProvider });
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:				label: localize('continue without', 'Continue without my working changes'),
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:					title: localize('sign in', 'Turn on Edit Sessions...'),
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:					title: localize('reset auth.v3', 'Turn off Edit Sessions...'),
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:					message: localize('sign out of edit sessions clear data prompt.v2', 'Do you want to turn off Edit Sessions?'),
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:					checkbox: { label: localize('delete all edit sessions.v2', 'Delete all stored data from the cloud.') },
src/vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts:					primaryButton: localize('clear data confirm', 'Yes'),
src/vs/workbench/contrib/editSessions/common/editSessions.ts:	value: localize('session sync', 'Edit Sessions')
src/vs/workbench/contrib/editSessions/common/editSessions.ts:export const EDIT_SESSIONS_TITLE = localize('edit sessions', 'Edit Sessions');
src/vs/workbench/contrib/editSessions/common/editSessions.ts:export const EDIT_SESSIONS_VIEW_ICON = registerIcon('edit-sessions-view-icon', Codicon.cloudDownload, localize('editSessionViewIcon', 'View icon of the edit sessions view.'));
src/vs/workbench/contrib/extensions/browser/exeBasedRecommendations.ts:				reasonText: localize('exeBasedRecommendation', "This extension is recommended because you have {0} installed.", tip.exeFriendlyName)
src/vs/workbench/common/editor/textEditorModel.ts:				this.accessibilityService.alert(localize('languageAutoDetected', "Language {0} was automatically detected and set as the language mode.", languageName));
src/vs/workbench/common/editor/sideBySideEditorInput.ts:		return localize('sideBySideLabels', "{0} - {1}", this.secondary.getName(), this.primary.getName());
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:	title: { value: localize('continue working on', "Continue Working On..."), original: 'Continue Working On...' },
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:	title: { value: localize('continue edit session in local folder', "Open In Local Folder"), original: 'Open In Local Folder' },
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:	title: { value: localize('show log', 'Show Log'), original: 'Show Log' },
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:	title: `[${localize('resuming edit session window', 'Resuming edit session...')}](command:${showOutputChannelCommand.id})`
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:		this.lifecycleService.onWillShutdown((e) => e.join(this.autoStoreEditSession(), { id: 'autoStoreEditSession', label: localize('autoStoreEditSession', 'Storing current edit session...') }));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:		const badge = new NumberBadge(1, () => localize('check for pending edit sessions', 'Check for pending edit sessions'));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				title: localize('store edit session', 'Storing edit session...')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					title: { value: localize('show edit session', "Show Edit Sessions"), original: 'Show Edit Sessions' },
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:						title: localize('store your edit session', 'Storing your edit session...')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					title: { value: localize('resume latest.v2', "Resume Latest Edit Session"), original: 'Resume Latest Edit Session' },
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					title: { value: localize('store current.v2', "Store Current Edit Session"), original: 'Store Current Edit Session' },
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					title: localize('storing edit session', 'Storing edit session...')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				this.notificationService.info(localize('no edit session', 'There are no edit sessions to resume.'));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				this.notificationService.warn(localize('no edit session content for ref', 'Could not resume edit session contents for ID {0}.', ref));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			this.notificationService.error(localize('client too old', "Please upgrade to a newer version of {0} to resume this edit session.", this.productService.nameLong));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				const yes = localize('resume edit session yes', 'Yes');
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				const cancel = localize('resume edit session cancel', 'Cancel');
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:						localize('resume edit session warning many', 'Resuming your edit session will overwrite the following {0} files. Do you want to proceed?', conflictingChanges.length) :
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:						localize('resume edit session warning 1', 'Resuming your edit session will overwrite {0}. Do you want to proceed?', basename(conflictingChanges[0].uri)),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			this.notificationService.error(localize('resume failed', "Failed to resume your edit session."));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:									localize('editSessionPartialMatch', 'You have a pending edit session for this workspace. Would you like to resume it?'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:									[{ label: localize('resume', 'Resume'), run: () => this.resumeEditSession(ref, false, true) }]
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				this.notificationService.info(localize('no edits to store', 'Skipped storing edit session as there are no edits to store.'));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:						this.notificationService.error(localize('payload too large', 'Your edit session exceeds the size limit and cannot be stored.'));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:						this.notificationService.error(localize('payload failed', 'Your edit session cannot be stored.'));
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					title: localize('continueEditSession.openLocalFolder.title', 'Select a local folder to continue your edit session in'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:		quickPick.placeholder = localize('continueEditSessionPick.title', "Select option to continue {0} on", `'${workspaceContext}'`);
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				'$(folder) ' + localize('continueEditSessionItem.openInLocalFolder.v2', 'Open in Local Folder'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('continueEditSessionItem.builtin', 'Built-in')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:		description: localize('continueEditSessionExtPoint', 'Contributes options for continuing the current edit session in a different environment'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					description: localize('continueEditSessionExtPoint.command', 'Identifier of the command to execute. The command must be declared in the \'commands\'-section and return a URI representing a different environment where the current edit session can be continued.'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					description: localize('continueEditSessionExtPoint.group', 'Group into which this item belongs.'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:					description: localize('continueEditSessionExtPoint.when', 'Condition which must be true to show this item.'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('autoStore.onShutdown', "Automatically store current edit session on window close."),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('autoStore.off', "Never attempt to automatically store an edit session.")
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			'markdownDescription': localize('autoStore', "Controls whether to automatically store an available edit session for the current workspace."),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('autoResume.onReload', "Automatically resume available edit session on window reload."),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('autoResume.off', "Never attempt to resume an edit session.")
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			'markdownDescription': localize('autoResume', "Controls whether to automatically resume an available edit session for the current workspace."),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('continueOn.promptForAuth', 'Prompt the user to sign in to store edit sessions with Continue Working On.'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('continueOn.off', 'Do not use edit sessions with Continue Working On unless the user has already turned on edit sessions.')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			markdownDescription: localize('continueOn', 'Controls whether to prompt the user to store edit sessions when using Continue Working On.')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('continueOn.promptForAuth', 'Prompt the user to sign in to store edit sessions with Continue Working On.'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('continueOn.off', 'Do not use edit sessions with Continue Working On unless the user has already turned on edit sessions.')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			markdownDeprecationMessage: localize('continueOnDeprecated', 'This setting is deprecated in favor of {0}.', '`#workbench.experimental.continueOn#`'),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			markdownDescription: localize('continueOn', 'Controls whether to prompt the user to store edit sessions when using Continue Working On.')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			'markdownDeprecationMessage': localize('editSessionsEnabledDeprecated', "This setting is deprecated as Edit Sessions are no longer experimental. Please see {0} and {1} for configuring behavior related to Edit Sessions.", '`#workbench.editSessions.autoResume#`', '`#workbench.editSessions.continueOn#`')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('autoResume.onReload', "Automatically resume available edit session on window reload."),
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:				localize('autoResume.off', "Never attempt to resume an edit session.")
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			'markdownDeprecationMessage': localize('autoResumeDeprecated', "This setting is deprecated in favor of {0}.", '`#workbench.editSessions.autoResume#`')
src/vs/workbench/contrib/editSessions/browser/editSessions.contribution.ts:			'markdownDescription': localize('editSessionsPartialMatchesEnabled', "Controls whether to surface edit sessions which partially match the current session.")
src/vs/workbench/common/editor/diffEditorInput.ts:			name = localize('sideBySideLabels', "{0} ↔ {1}", originalName, modifiedName);
src/vs/workbench/browser/actions/developerActions.ts:			title: { value: localize('inspect context keys', "Inspect Context Keys"), original: 'Inspect Context Keys' },
src/vs/workbench/browser/actions/developerActions.ts:			title: { value: localize('toggle screencast mode', "Toggle Screencast Mode"), original: 'Toggle Screencast Mode' },
src/vs/workbench/browser/actions/developerActions.ts:			title: { value: localize({ key: 'logStorage', comment: ['A developer only action to log the contents of the storage for the current window.'] }, "Log Storage Database Contents"), original: 'Log Storage Database Contents' },
src/vs/workbench/browser/actions/developerActions.ts:			title: { value: localize({ key: 'logWorkingCopies', comment: ['A developer only action to log the working copies that exist.'] }, "Log Working Copies"), original: 'Log Working Copies' },
src/vs/workbench/browser/actions/developerActions.ts:	title: localize('screencastModeConfigurationTitle', "Screencast Mode"),
src/vs/workbench/browser/actions/developerActions.ts:			description: localize('screencastMode.location.verticalPosition', "Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.")
src/vs/workbench/browser/actions/developerActions.ts:			description: localize('screencastMode.fontSize', "Controls the font size (in pixels) of the screencast mode keyboard.")
src/vs/workbench/browser/actions/developerActions.ts:				localize('keyboardShortcutsFormat.keys', "Keys."),
src/vs/workbench/browser/actions/developerActions.ts:				localize('keyboardShortcutsFormat.command', "Command title."),
src/vs/workbench/browser/actions/developerActions.ts:				localize('keyboardShortcutsFormat.commandWithGroup', "Command title prefixed by its group."),
src/vs/workbench/browser/actions/developerActions.ts:				localize('keyboardShortcutsFormat.commandAndKeys', "Command title and keys."),
src/vs/workbench/browser/actions/developerActions.ts:				localize('keyboardShortcutsFormat.commandWithGroupAndKeys', "Command title and keys, with the command prefixed by its group.")
src/vs/workbench/browser/actions/developerActions.ts:			description: localize('screencastMode.keyboardShortcutsFormat', "Controls what is displayed in the keyboard overlay when showing shortcuts."),
src/vs/workbench/browser/actions/developerActions.ts:			description: localize('screencastMode.onlyKeyboardShortcuts', "Only show keyboard shortcuts in screencast mode."),
src/vs/workbench/browser/actions/developerActions.ts:			description: localize('screencastMode.keyboardOverlayTimeout', "Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.")
src/vs/workbench/browser/actions/developerActions.ts:			description: localize('screencastMode.mouseIndicatorColor', "Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.")
src/vs/workbench/browser/actions/developerActions.ts:			description: localize('screencastMode.mouseIndicatorSize', "Controls the size (in pixels) of the mouse indicator in screencast mode.")
src/vs/workbench/api/common/extHostDiagnostics.ts:						message: localize({ key: 'limitHit', comment: ['amount of errors/warning skipped due to limits'] }, "Not showing {0} further errors and warnings.", diagnostics.length - this._maxDiagnosticsPerFile),
src/vs/workbench/api/common/extHostExtensionService.ts:			throw new Error(nls.localize('extensionTestError1', "Cannot load test runner."));
src/vs/workbench/api/common/extHostExtensionService.ts:			throw new Error(nls.localize('extensionTestError', "Path {0} does not point to a valid extension test runner.", extensionTestsLocationURI.toString()));
src/vs/workbench/browser/actions/workspaceCommands.ts:export const ADD_ROOT_FOLDER_LABEL: ILocalizedString = { value: localize('addFolderToWorkspace', "Add Folder to Workspace..."), original: 'Add Folder to Workspace...' };
src/vs/workbench/browser/actions/workspaceCommands.ts:		openLabel: mnemonicButtonLabel(localize({ key: 'add', comment: ['&& denotes a mnemonic'] }, "&&Add")),
src/vs/workbench/browser/actions/workspaceCommands.ts:		title: localize('addFolderToWorkspaceTitle', "Add Folder to Workspace"),
src/vs/workbench/browser/actions/workspaceCommands.ts:		options.placeHolder = localize('workspaceFolderPickerPlaceholder', "Select workspace folder");
src/vs/workbench/api/common/extHostStatusBar.ts:				name = localize('extensionLabel', "{0} (Extension)", this._extension!.displayName || this._extension!.name);
src/vs/workbench/api/common/extHostStatusBar.ts:		this._item.name = localize('status.extensionMessage', "Extension Status");
src/vs/workbench/api/common/extHostTerminalService.ts:			return { message: localize('launchFail.idMissingOnExtHost', "Could not find the terminal with id {0} on the extension host", id) };
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:		description: nls.localize('contributes.jsonValidation', 'Contributes json schema configuration.'),
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:					description: nls.localize('contributes.jsonValidation.fileMatch', 'The file pattern (or an array of patterns) to match, for example "package.json" or "*.launch". Exclusion patterns start with \'!\''),
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:					description: nls.localize('contributes.jsonValidation.url', 'A schema URL (\'http:\', \'https:\') or relative path to the extension folder (\'./\').'),
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:					collector.error(nls.localize('invalid.jsonValidation', "'configuration.jsonValidation' must be a array"));
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:						collector.error(nls.localize('invalid.fileMatch', "'configuration.jsonValidation.fileMatch' must be defined as a string or an array of strings."));
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:						collector.error(nls.localize('invalid.url', "'configuration.jsonValidation.url' must be a URL or relative path"));
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:								collector.warn(nls.localize('invalid.path.1', "Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.", configurationExtPoint.name, colorThemeLocation.toString(), extensionLocation.path));
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:							collector.error(nls.localize('invalid.url.fileschema', "'configuration.jsonValidation.url' is an invalid relative URL: {0}", e.message));
src/vs/workbench/api/common/jsonValidationExtensionPoint.ts:						collector.error(nls.localize('invalid.url.schema', "'configuration.jsonValidation.url' must be an absolute URL or start with './'  to reference schemas located in the extension."));
src/vs/workbench/contrib/deprecatedExtensionMigrator/browser/deprecatedExtensionMigrator.contribution.ts:			message: localize('bracketPairColorizer.notification', "The extension 'Bracket pair Colorizer' got disabled because it was deprecated."),
src/vs/workbench/contrib/deprecatedExtensionMigrator/browser/deprecatedExtensionMigrator.contribution.ts:					new Action('', localize('bracketPairColorizer.notification.action.uninstall', "Uninstall Extension"), undefined, undefined, () => {
src/vs/workbench/contrib/deprecatedExtensionMigrator/browser/deprecatedExtensionMigrator.contribution.ts:					!bracketPairColorizationEnabled ? new Action('', localize('bracketPairColorizer.notification.action.enableNative', "Enable Native Bracket Pair Colorization"), undefined, undefined, () => {
src/vs/workbench/contrib/deprecatedExtensionMigrator/browser/deprecatedExtensionMigrator.contribution.ts:					new Action('', localize('bracketPairColorizer.notification.action.showMoreInfo', "More Info"), undefined, undefined, () => {
src/vs/workbench/common/editor.ts:	displayName: localize('promptOpenWith.defaultEditor.displayName', "Text Editor"),
src/vs/workbench/common/editor.ts:	providerDisplayName: localize('builtinProviderDisplayName', "Built-in")
src/vs/workbench/api/common/extHostTreeViews.ts:			return Promise.reject(new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)));
src/vs/workbench/api/common/extHostTreeViews.ts:			return Promise.reject(new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', destinationViewId)));
src/vs/workbench/api/common/extHostTreeViews.ts:			return Promise.reject(new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', sourceViewId)));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId));
src/vs/workbench/api/common/extHostTreeViews.ts:			throw new Error(localize('treeView.duplicateElement', 'Element with id {0} is already registered', extTreeItem.id));
src/vs/workbench/api/common/extHostProgress.ts:		const source = { label: localize('extensionSource', "{0} (Extension)", extension.displayName || extension.name), id: extension.identifier.value };
src/vs/workbench/browser/actions/textInputActions.ts:			new Action('undo', localize('undo', "Undo"), undefined, true, async () => document.execCommand('undo')),
src/vs/workbench/browser/actions/textInputActions.ts:			new Action('redo', localize('redo', "Redo"), undefined, true, async () => document.execCommand('redo')),
src/vs/workbench/browser/actions/textInputActions.ts:			new Action('editor.action.clipboardCutAction', localize('cut', "Cut"), undefined, true, async () => document.execCommand('cut')),
src/vs/workbench/browser/actions/textInputActions.ts:			new Action('editor.action.clipboardCopyAction', localize('copy', "Copy"), undefined, true, async () => document.execCommand('copy')),
src/vs/workbench/browser/actions/textInputActions.ts:			new Action('editor.action.clipboardPasteAction', localize('paste', "Paste"), undefined, true, async element => {
src/vs/workbench/browser/actions/textInputActions.ts:			new Action('editor.action.selectAll', localize('selectAll', "Select All"), undefined, true, async () => document.execCommand('selectAll'))
src/vs/workbench/browser/actions/quickAccessActions.ts:				value: localize('quickOpen', "Go to File..."),
src/vs/workbench/browser/actions/quickAccessActions.ts:				value: localize('quickOpenWithModes', "Launch Command Center"),
src/vs/workbench/browser/actions/quickAccessActions.ts:		super('workbench.action.quickOpenNavigateNext', { value: localize('quickNavigateNext', "Navigate Next in Quick Open"), original: 'Navigate Next in Quick Open' }, true, true);
src/vs/workbench/browser/actions/quickAccessActions.ts:		super('workbench.action.quickOpenNavigatePrevious', { value: localize('quickNavigatePrevious', "Navigate Previous in Quick Open"), original: 'Navigate Previous in Quick Open' }, false, true);
src/vs/workbench/browser/actions/quickAccessActions.ts:			{ value: localize('quickSelectNext', "Select Next in Quick Open"), original: 'Select Next in Quick Open' },
src/vs/workbench/browser/actions/quickAccessActions.ts:			{ value: localize('quickSelectPrevious', "Select Previous in Quick Open"), original: 'Select Previous in Quick Open' },
src/vs/workbench/browser/actions/windowActions.ts:const fileCategory = { value: localize('file', "File"), original: 'File' };
src/vs/workbench/browser/actions/windowActions.ts:		tooltip: localize('remove', "Remove from Recently Opened")
src/vs/workbench/browser/actions/windowActions.ts:		tooltip: localize('dirtyRecentlyOpenedFolder', "Folder With Unsaved Files"),
src/vs/workbench/browser/actions/windowActions.ts:		tooltip: localize('dirtyRecentlyOpenedWorkspace', "Workspace With Unsaved Files"),
src/vs/workbench/browser/actions/windowActions.ts:		const workspaceSeparator: IQuickPickSeparator = { type: 'separator', label: hasWorkspaces ? localize('workspacesAndFolders', "folders & workspaces") : localize('folders', "folders") };
src/vs/workbench/browser/actions/windowActions.ts:		const fileSeparator: IQuickPickSeparator = { type: 'separator', label: localize('files', "files") };
src/vs/workbench/browser/actions/windowActions.ts:			placeHolder: isMacintosh ? localize('openRecentPlaceholderMac', "Select to open (hold Cmd-key to force new window or Option-key for same window)") : localize('openRecentPlaceholder', "Select to open (hold Ctrl-key to force new window or Alt-key for same window)"),
src/vs/workbench/browser/actions/windowActions.ts:						title: isDirtyWorkspace ? localize('dirtyWorkspace', "Workspace with Unsaved Files") : localize('dirtyFolder', "Folder with Unsaved Files"),
src/vs/workbench/browser/actions/windowActions.ts:						message: isDirtyWorkspace ? localize('dirtyWorkspaceConfirm', "Do you want to open the workspace to review the unsaved files?") : localize('dirtyFolderConfirm', "Do you want to open the folder to review the unsaved files?"),
src/vs/workbench/browser/actions/windowActions.ts:						detail: isDirtyWorkspace ? localize('dirtyWorkspaceConfirmDetail', "Workspaces with unsaved files cannot be removed until all unsaved files have been saved or reverted.") : localize('dirtyFolderConfirmDetail', "Folders with unsaved files cannot be removed until all unsaved files have been saved or reverted.")
src/vs/workbench/browser/actions/windowActions.ts:			ariaLabel: isDirty ? isWorkspace ? localize('recentDirtyWorkspaceAriaLabel', "{0}, workspace with unsaved changes", name) : localize('recentDirtyFolderAriaLabel', "{0}, folder with unsaved changes", name) : name,
src/vs/workbench/browser/actions/windowActions.ts:				value: localize('openRecent', "Open Recent..."),
src/vs/workbench/browser/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miMore', comment: ['&& denotes a mnemonic'] }, "&&More..."),
src/vs/workbench/browser/actions/windowActions.ts:			title: { value: localize('quickOpenRecent', "Quick Open Recent..."), original: 'Quick Open Recent...' },
src/vs/workbench/browser/actions/windowActions.ts:				value: localize('toggleFullScreen', "Toggle Full Screen"),
src/vs/workbench/browser/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miToggleFullScreen', comment: ['&& denotes a mnemonic'] }, "&&Full Screen"),
src/vs/workbench/browser/actions/windowActions.ts:			title: { value: localize('reloadWindow', "Reload Window"), original: 'Reload Window' },
src/vs/workbench/browser/actions/windowActions.ts:				value: localize('about', "About"),
src/vs/workbench/browser/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miAbout', comment: ['&& denotes a mnemonic'] }, "&&About"),
src/vs/workbench/browser/actions/windowActions.ts:				value: localize('newWindow', "New Window"),
src/vs/workbench/browser/actions/windowActions.ts:				mnemonicTitle: localize({ key: 'miNewWindow', comment: ['&& denotes a mnemonic'] }, "New &&Window"),
src/vs/workbench/browser/actions/windowActions.ts:			title: { value: localize('blur', "Remove keyboard focus from focused element"), original: 'Remove keyboard focus from focused element' }
src/vs/workbench/browser/actions/windowActions.ts:		title: localize('miConfirmClose', "Confirm Before Close"),
src/vs/workbench/browser/actions/windowActions.ts:	title: localize({ key: 'miOpenRecent', comment: ['&& denotes a mnemonic'] }, "Open &&Recent"),
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('keybindingsReference', "Keyboard Shortcuts Reference"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miKeyboardShortcuts', comment: ['&& denotes a mnemonic'] }, "&&Keyboard Shortcuts Reference"),
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('openVideoTutorialsUrl', "Video Tutorials"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miVideoTutorials', comment: ['&& denotes a mnemonic'] }, "&&Video Tutorials"),
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('openTipsAndTricksUrl', "Tips and Tricks"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miTipsAndTricks', comment: ['&& denotes a mnemonic'] }, "Tips and Tri&&cks"),
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('openDocumentationUrl', "Documentation"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miDocumentation', comment: ['&& denotes a mnemonic'] }, "&&Documentation"),
src/vs/workbench/browser/actions/helpActions.ts:			title: { value: localize('newsletterSignup', "Signup for the VS Code Newsletter"), original: 'Signup for the VS Code Newsletter' },
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('openTwitterUrl', "Join Us on Twitter"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miTwitter', comment: ['&& denotes a mnemonic'] }, "&&Join Us on Twitter"),
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('openUserVoiceUrl', "Search Feature Requests"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miUserVoice', comment: ['&& denotes a mnemonic'] }, "&&Search Feature Requests"),
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('openLicenseUrl', "View License"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miLicense', comment: ['&& denotes a mnemonic'] }, "View &&License"),
src/vs/workbench/browser/actions/helpActions.ts:				value: localize('openPrivacyStatement', "Privacy Statement"),
src/vs/workbench/browser/actions/helpActions.ts:				mnemonicTitle: localize({ key: 'miPrivacyStatement', comment: ['&& denotes a mnemonic'] }, "Privac&&y Statement"),
src/vs/workbench/browser/actions/layoutActions.ts:const menubarIcon = registerIcon('menuBar', Codicon.layoutMenubar, localize('menuBarIcon', "Represents the menu bar"));
src/vs/workbench/browser/actions/layoutActions.ts:const activityBarLeftIcon = registerIcon('activity-bar-left', Codicon.layoutActivitybarLeft, localize('activityBarLeft', "Represents the activity bar in the left position"));
src/vs/workbench/browser/actions/layoutActions.ts:const activityBarRightIcon = registerIcon('activity-bar-right', Codicon.layoutActivitybarRight, localize('activityBarRight', "Represents the activity bar in the right position"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelLeftIcon = registerIcon('panel-left', Codicon.layoutSidebarLeft, localize('panelLeft', "Represents a side bar in the left position"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelLeftOffIcon = registerIcon('panel-left-off', Codicon.layoutSidebarLeftOff, localize('panelLeftOff', "Represents a side bar in the left position toggled off"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelRightIcon = registerIcon('panel-right', Codicon.layoutSidebarRight, localize('panelRight', "Represents side bar in the right position"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelRightOffIcon = registerIcon('panel-right-off', Codicon.layoutSidebarRightOff, localize('panelRightOff', "Represents side bar in the right position toggled off"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelIcon = registerIcon('panel-bottom', Codicon.layoutPanel, localize('panelBottom', "Represents the bottom panel"));
src/vs/workbench/browser/actions/layoutActions.ts:const statusBarIcon = registerIcon('statusBar', Codicon.layoutStatusbar, localize('statusBarIcon', "Represents the status bar"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelAlignmentLeftIcon = registerIcon('panel-align-left', Codicon.layoutPanelLeft, localize('panelBottomLeft', "Represents the bottom panel alignment set to the left"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelAlignmentRightIcon = registerIcon('panel-align-right', Codicon.layoutPanelRight, localize('panelBottomRight', "Represents the bottom panel alignment set to the right"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelAlignmentCenterIcon = registerIcon('panel-align-center', Codicon.layoutPanelCenter, localize('panelBottomCenter', "Represents the bottom panel alignment set to the center"));
src/vs/workbench/browser/actions/layoutActions.ts:const panelAlignmentJustifyIcon = registerIcon('panel-align-justify', Codicon.layoutPanelJustify, localize('panelBottomJustify', "Represents the bottom panel alignment set to justified"));
src/vs/workbench/browser/actions/layoutActions.ts:const fullscreenIcon = registerIcon('fullscreen', Codicon.screenFull, localize('fullScreenIcon', "Represents full screen"));
src/vs/workbench/browser/actions/layoutActions.ts:const centerLayoutIcon = registerIcon('centerLayoutIcon', Codicon.layoutCentered, localize('centerLayoutIcon', "Represents centered layout mode"));
src/vs/workbench/browser/actions/layoutActions.ts:const zenModeIcon = registerIcon('zenMode', Codicon.target, localize('zenModeIcon', "Represents zen mode"));
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('closeSidebar', "Close Primary Side Bar"), original: 'Close Primary Side Bar' },
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('toggleActivityBar', "Toggle Activity Bar Visibility"),
src/vs/workbench/browser/actions/layoutActions.ts:				mnemonicTitle: localize({ key: 'miActivityBar', comment: ['&& denotes a mnemonic'] }, "&&Activity Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('toggleCenteredLayout', "Toggle Centered Layout"),
src/vs/workbench/browser/actions/layoutActions.ts:				mnemonicTitle: localize({ key: 'miToggleCenteredLayout', comment: ['&& denotes a mnemonic'] }, "&&Centered Layout"),
src/vs/workbench/browser/actions/layoutActions.ts:			value: localize('moveSidebarRight', "Move Primary Side Bar Right"),
src/vs/workbench/browser/actions/layoutActions.ts:			value: localize('moveSidebarLeft', "Move Primary Side Bar Left"),
src/vs/workbench/browser/actions/layoutActions.ts:	static readonly LABEL = localize('toggleSidebarPosition', "Toggle Primary Side Bar Position");
src/vs/workbench/browser/actions/layoutActions.ts:		return layoutService.getSideBarPosition() === Position.LEFT ? localize('moveSidebarRight', "Move Primary Side Bar Right") : localize('moveSidebarLeft', "Move Primary Side Bar Left");
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('toggleSidebarPosition', "Toggle Primary Side Bar Position"), original: 'Toggle Primary Side Bar Position' },
src/vs/workbench/browser/actions/layoutActions.ts:const configureLayoutIcon = registerIcon('configure-layout-icon', Codicon.layout, localize('cofigureLayoutIcon', 'Icon represents workbench layout configuration.'));
src/vs/workbench/browser/actions/layoutActions.ts:	title: localize('configureLayout', "Configure Layout"),
src/vs/workbench/browser/actions/layoutActions.ts:			title: localize('move side bar right', "Move Primary Side Bar Right")
src/vs/workbench/browser/actions/layoutActions.ts:			title: localize('move sidebar right', "Move Primary Side Bar Right")
src/vs/workbench/browser/actions/layoutActions.ts:			title: localize('move sidebar left', "Move Primary Side Bar Left")
src/vs/workbench/browser/actions/layoutActions.ts:			title: localize('move sidebar left', "Move Primary Side Bar Left")
src/vs/workbench/browser/actions/layoutActions.ts:			title: localize('move second sidebar left', "Move Secondary Side Bar Left")
src/vs/workbench/browser/actions/layoutActions.ts:			title: localize('move second sidebar right', "Move Secondary Side Bar Right")
src/vs/workbench/browser/actions/layoutActions.ts:		title: localize({ key: 'miMoveSidebarRight', comment: ['&& denotes a mnemonic'] }, "&&Move Primary Side Bar Right")
src/vs/workbench/browser/actions/layoutActions.ts:		title: localize({ key: 'miMoveSidebarLeft', comment: ['&& denotes a mnemonic'] }, "&&Move Primary Side Bar Left")
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('toggleEditor', "Toggle Editor Area Visibility"),
src/vs/workbench/browser/actions/layoutActions.ts:				mnemonicTitle: localize({ key: 'miShowEditorArea', comment: ['&& denotes a mnemonic'] }, "Show &&Editor Area"),
src/vs/workbench/browser/actions/layoutActions.ts:	title: localize({ key: 'miAppearance', comment: ['&& denotes a mnemonic'] }, "&&Appearance"),
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('toggleSidebar', "Toggle Primary Side Bar Visibility"), original: 'Toggle Primary Side Bar Visibility' },
src/vs/workbench/browser/actions/layoutActions.ts:				title: localize('compositePart.hideSideBarLabel', "Hide Primary Side Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				title: localize('compositePart.hideSideBarLabel', "Hide Primary Side Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				title: localize({ key: 'miShowSidebar', comment: ['&& denotes a mnemonic'] }, "&&Primary Side Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				title: localize('miSidebarNoMnnemonic', "Primary Side Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				title: localize('toggleSideBar', "Toggle Primary Side Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				title: localize('toggleSideBar', "Toggle Primary Side Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('toggleStatusbar', "Toggle Status Bar Visibility"),
src/vs/workbench/browser/actions/layoutActions.ts:				mnemonicTitle: localize({ key: 'miStatusbar', comment: ['&& denotes a mnemonic'] }, "S&&tatus Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('toggleTabs', "Toggle Tab Visibility"),
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('toggleZenMode', "Toggle Zen Mode"),
src/vs/workbench/browser/actions/layoutActions.ts:				mnemonicTitle: localize('miToggleZenMode', "Zen Mode"),
src/vs/workbench/browser/actions/layoutActions.ts:					value: localize('toggleMenuBar', "Toggle Menu Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:					mnemonicTitle: localize({ key: 'miMenuBar', comment: ['&& denotes a mnemonic'] }, "Menu &&Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:			title: localize('miMenuBarNoMnemonic', "Menu Bar"),
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('resetViewLocations', "Reset View Locations"),
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('moveView', "Move View"),
src/vs/workbench/browser/actions/layoutActions.ts:							label: localize('sidebarContainer', "Side Bar / {0}", containerModel.title)
src/vs/workbench/browser/actions/layoutActions.ts:							label: localize('panelContainer', "Panel / {0}", containerModel.title)
src/vs/workbench/browser/actions/layoutActions.ts:							label: localize('secondarySideBarContainer', "Secondary Side Bar / {0}", containerModel.title)
src/vs/workbench/browser/actions/layoutActions.ts:		quickPick.placeholder = localize('moveFocusedView.selectView', "Select a View to Move");
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('moveFocusedView', "Move Focused View"),
src/vs/workbench/browser/actions/layoutActions.ts:			dialogService.show(Severity.Error, localize('moveFocusedView.error.noFocusedView', "There is no view currently focused."));
src/vs/workbench/browser/actions/layoutActions.ts:			dialogService.show(Severity.Error, localize('moveFocusedView.error.nonMovableView', "The currently focused view is not movable."));
src/vs/workbench/browser/actions/layoutActions.ts:		quickPick.placeholder = localize('moveFocusedView.selectDestination', "Select a Destination for the View");
src/vs/workbench/browser/actions/layoutActions.ts:		quickPick.title = localize({ key: 'moveFocusedView.title', comment: ['{0} indicates the title of the view the user has selected to move.'] }, "View: Move {0}", viewDescriptor.name);
src/vs/workbench/browser/actions/layoutActions.ts:				label: localize({ key: 'moveFocusedView.newContainerInPanel', comment: ['Creates a new top-level tab in the panel.'] }, "New Panel Entry"),
src/vs/workbench/browser/actions/layoutActions.ts:				label: localize('moveFocusedView.newContainerInSidebar', "New Side Bar Entry")
src/vs/workbench/browser/actions/layoutActions.ts:				label: localize('moveFocusedView.newContainerInSidePanel', "New Secondary Side Bar Entry")
src/vs/workbench/browser/actions/layoutActions.ts:			label: localize('sidebar', "Side Bar")
src/vs/workbench/browser/actions/layoutActions.ts:			label: localize('panel', "Panel")
src/vs/workbench/browser/actions/layoutActions.ts:			label: localize('secondarySideBar', "Secondary Side Bar")
src/vs/workbench/browser/actions/layoutActions.ts:				value: localize('resetFocusedViewLocation', "Reset Focused View Location"),
src/vs/workbench/browser/actions/layoutActions.ts:			dialogService.show(Severity.Error, localize('resetFocusedView.error.noFocusedView', "There is no view currently focused."));
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('increaseViewSize', "Increase Current View Size"), original: 'Increase Current View Size' },
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('increaseEditorWidth', "Increase Editor Width"), original: 'Increase Editor Width' },
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('increaseEditorHeight', "Increase Editor Height"), original: 'Increase Editor Height' },
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('decreaseViewSize', "Decrease Current View Size"), original: 'Decrease Current View Size' },
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('decreaseEditorWidth', "Decrease Editor Width"), original: 'Decrease Editor Width' },
src/vs/workbench/browser/actions/layoutActions.ts:			title: { value: localize('decreaseEditorHeight', "Decrease Editor Height"), original: 'Decrease Editor Height' },
src/vs/workbench/browser/actions/layoutActions.ts:		activeAriaLabel: localize('visible', "Visible"),
src/vs/workbench/browser/actions/layoutActions.ts:		inactiveAriaLabel: localize('hidden', "Hidden"),
src/vs/workbench/browser/actions/layoutActions.ts:		activeAriaLabel: localize('active', "Active"),
src/vs/workbench/browser/actions/layoutActions.ts:	ToggleVisibilityActions.push(CreateToggleLayoutItem('workbench.action.toggleMenuBar', MenuBarToggledContext, localize('menuBar', "Menu Bar"), menubarIcon));
src/vs/workbench/browser/actions/layoutActions.ts:	CreateToggleLayoutItem(ToggleActivityBarVisibilityAction.ID, ContextKeyExpr.equals('config.workbench.activityBar.visible', true), localize('activityBar', "Activity Bar"), { whenA: ContextKeyExpr.equals('config.workbench.sideBar.location', 'left'), iconA: activityBarLeftIcon, iconB: activityBarRightIcon }),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateToggleLayoutItem(ToggleSidebarVisibilityAction.ID, SideBarVisibleContext, localize('sideBar', "Primary Side Bar"), { whenA: ContextKeyExpr.equals('config.workbench.sideBar.location', 'left'), iconA: panelLeftIcon, iconB: panelRightIcon }),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateToggleLayoutItem(ToggleAuxiliaryBarAction.ID, AuxiliaryBarVisibleContext, localize('secondarySideBar', "Secondary Side Bar"), { whenA: ContextKeyExpr.equals('config.workbench.sideBar.location', 'left'), iconA: panelRightIcon, iconB: panelLeftIcon }),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateToggleLayoutItem(TogglePanelAction.ID, PanelVisibleContext, localize('panel', "Panel"), panelIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateToggleLayoutItem(ToggleStatusbarVisibilityAction.ID, ContextKeyExpr.equals('config.workbench.statusBar.visible', true), localize('statusBar', "Status Bar"), statusBarIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem(MoveSidebarLeftAction.ID, ContextKeyExpr.equals('config.workbench.sideBar.location', 'left'), localize('leftSideBar', "Left"), panelLeftIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem(MoveSidebarRightAction.ID, ContextKeyExpr.equals('config.workbench.sideBar.location', 'right'), localize('rightSideBar', "Right"), panelRightIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem('workbench.action.alignPanelLeft', PanelAlignmentContext.isEqualTo('left'), localize('leftPanel', "Left"), panelAlignmentLeftIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem('workbench.action.alignPanelRight', PanelAlignmentContext.isEqualTo('right'), localize('rightPanel', "Right"), panelAlignmentRightIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem('workbench.action.alignPanelCenter', PanelAlignmentContext.isEqualTo('center'), localize('centerPanel', "Center"), panelAlignmentCenterIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem('workbench.action.alignPanelJustify', PanelAlignmentContext.isEqualTo('justify'), localize('justifyPanel', "Justify"), panelAlignmentJustifyIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem('workbench.action.toggleFullScreen', IsFullscreenContext, localize('fullscreen', "Full Screen"), fullscreenIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem('workbench.action.toggleZenMode', InEditorZenModeContext, localize('zenMode', "Zen Mode"), zenModeIcon),
src/vs/workbench/browser/actions/layoutActions.ts:	CreateOptionLayoutItem('workbench.action.toggleCenteredLayout', IsCenteredLayoutContext, localize('centeredLayout', "Centered Layout"), centerLayoutIcon),
src/vs/workbench/browser/actions/layoutActions.ts:			title: { original: 'Customize Layout...', value: localize('customizeLayout', "Customize Layout...") },
src/vs/workbench/browser/actions/layoutActions.ts:				label: localize('toggleVisibility', "Visibility")
src/vs/workbench/browser/actions/layoutActions.ts:				label: localize('sideBarPosition', "Primary Side Bar Position")
src/vs/workbench/browser/actions/layoutActions.ts:				label: localize('panelAlignment', "Panel Alignment")
src/vs/workbench/browser/actions/layoutActions.ts:				label: localize('layoutModes', "Modes"),
src/vs/workbench/browser/actions/layoutActions.ts:		quickPick.title = localize('customizeLayoutQuickPickTitle', "Customize Layout");
src/vs/workbench/browser/actions/layoutActions.ts:				tooltip: localize('close', "Close")
src/vs/workbench/browser/actions/workspaceActions.ts:const workspacesCategory: ILocalizedString = { value: localize('workspaces', "Workspaces"), original: 'Workspaces' };
src/vs/workbench/browser/actions/workspaceActions.ts:const fileCategory = { value: localize('filesCategory', "File"), original: 'File' };
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('openFile', "Open File..."), original: 'Open File...' },
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('openFolder', "Open Folder..."), original: 'Open Folder...' },
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('openFolder', "Open Folder..."), original: 'Open Folder...' },
src/vs/workbench/browser/actions/workspaceActions.ts:	static readonly LABEL: ILocalizedString = { value: localize('openFileFolder', "Open..."), original: 'Open...' };
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('openWorkspaceAction', "Open Workspace from File..."), original: 'Open Workspace from File...' },
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('closeWorkspace', "Close Workspace"), original: 'Close Workspace' },
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('openWorkspaceConfigFile', "Open Workspace Configuration File"), original: 'Open Workspace Configuration File' },
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('globalRemoveFolderFromWorkspace', "Remove Folder from Workspace..."), original: 'Remove Folder from Workspace...' },
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('saveWorkspaceAsAction', "Save Workspace As..."), original: 'Save Workspace As...' },
src/vs/workbench/browser/actions/workspaceActions.ts:			title: { value: localize('duplicateWorkspaceInNewWindow', "Duplicate As Workspace in New Window"), original: 'Duplicate As Workspace in New Window' },
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miOpenFile', comment: ['&& denotes a mnemonic'] }, "&&Open File...")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miOpenFolder', comment: ['&& denotes a mnemonic'] }, "Open &&Folder...")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miOpenFolder', comment: ['&& denotes a mnemonic'] }, "Open &&Folder...")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miOpen', comment: ['&& denotes a mnemonic'] }, "&&Open...")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miOpenWorkspace', comment: ['&& denotes a mnemonic'] }, "Open Wor&&kspace from File...")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miAddFolderToWorkspace', comment: ['&& denotes a mnemonic'] }, "A&&dd Folder to Workspace...")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize('miSaveWorkspaceAs', "Save Workspace As...")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize('duplicateWorkspace', "Duplicate Workspace")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miCloseFolder', comment: ['&& denotes a mnemonic'] }, "Close &&Folder")
src/vs/workbench/browser/actions/workspaceActions.ts:		title: localize({ key: 'miCloseWorkspace', comment: ['&& denotes a mnemonic'] }, "Close &&Workspace")
src/vs/workbench/browser/actions/navigationActions.ts:	static readonly LABEL = localize('navigateLeft', "Navigate to the View on the Left");
src/vs/workbench/browser/actions/navigationActions.ts:	static readonly LABEL = localize('navigateRight', "Navigate to the View on the Right");
src/vs/workbench/browser/actions/navigationActions.ts:	static readonly LABEL = localize('navigateUp', "Navigate to the View Above");
src/vs/workbench/browser/actions/navigationActions.ts:	static readonly LABEL = localize('navigateDown', "Navigate to the View Below");
src/vs/workbench/browser/actions/navigationActions.ts:	static readonly LABEL = localize('focusNextPart', "Focus Next Part");
src/vs/workbench/browser/actions/navigationActions.ts:	static readonly LABEL = localize('focusPreviousPart', "Focus Previous Part");
src/vs/workbench/contrib/debug/common/abstractDebugAdapter.ts:						message: localize('timeout', "Timeout after {0} ms for '{1}'", timeout, command)
src/vs/workbench/contrib/debug/common/debugModel.ts:				return new Variable(this.session, this.threadId, this, 0, '', undefined, nls.localize('invalidVariableAttributes', "Invalid variable attributes"), 0, 0, undefined, { kind: 'virtual' }, undefined, undefined, false);
src/vs/workbench/contrib/debug/common/debugModel.ts:			this.value = context === 'repl' ? nls.localize('startDebugFirst', "Please start a debug session to evaluate expressions") : Expression.DEFAULT_VALUE;
src/vs/workbench/contrib/debug/common/debugModel.ts:	static readonly DEFAULT_VALUE = nls.localize('notAvailable', "not available");
src/vs/workbench/contrib/debug/common/debugModel.ts:				(this.stoppedDetails.reason ? nls.localize({ key: 'pausedOn', comment: ['indicates reason for program being paused'] }, "Paused on {0}", this.stoppedDetails.reason) : nls.localize('paused', "Paused"));
src/vs/workbench/contrib/debug/common/debugModel.ts:		return nls.localize({ key: 'running', comment: ['indicates state'] }, "Running");
src/vs/workbench/contrib/debug/common/debugModel.ts:			return nls.localize('breakpointDirtydHover', "Unverified breakpoint. File is modified, please restart debug session.");
src/vs/workbench/contrib/debug/common/disassemblyViewInput.ts:		return localize('disassemblyInputName', "Disassembly");
src/vs/workbench/contrib/debug/node/debugAdapter.ts:						throw new Error(nls.localize('debugAdapterBinNotFound', "Debug adapter executable '{0}' does not exist.", command));
src/vs/workbench/contrib/debug/node/debugAdapter.ts:				throw new Error(nls.localize({ key: 'debugAdapterCannotDetermineExecutable', comment: ['Adapter executable file not found'] },
src/vs/workbench/contrib/debug/node/debugAdapter.ts:						throw new Error(nls.localize('unableToLaunchDebugAdapter', "Unable to launch debug adapter from '{0}'.", args[0]));
src/vs/workbench/contrib/debug/node/debugAdapter.ts:					throw new Error(nls.localize('unableToLaunchDebugAdapterNoArgs', "Unable to launch debug adapter."));
src/vs/workbench/contrib/debug/common/debugger.ts:		throw new Error(nls.localize('cannot.find.da', "Cannot find debug adapter for type '{0}'.", this.type));
src/vs/workbench/contrib/debug/common/debugger.ts:		const comment1 = nls.localize('launch.config.comment1', "Use IntelliSense to learn about possible attributes.");
src/vs/workbench/contrib/debug/common/debugger.ts:		const comment2 = nls.localize('launch.config.comment2', "Hover to view descriptions of existing attributes.");
src/vs/workbench/contrib/debug/common/debugger.ts:		const comment3 = nls.localize('launch.config.comment3', "For more information, visit: {0}", 'https://go.microsoft.com/fwlink/?linkid=830387');
src/vs/workbench/contrib/debug/common/debugger.ts:				description: nls.localize('debugType', "Type of configuration."),
src/vs/workbench/contrib/debug/common/debugger.ts:				errorMessage: nls.localize('debugTypeNotRecognised', "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled."),
src/vs/workbench/contrib/debug/common/debugger.ts:				patternErrorMessage: nls.localize('node2NotSupported', "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\".")
src/vs/workbench/contrib/debug/common/debugger.ts:				description: nls.localize('debugRequest', "Request type of configuration. Can be \"launch\" or \"attach\"."),
src/vs/workbench/contrib/debug/common/debugger.ts:						description: nls.localize('debugWindowsConfiguration', "Windows specific launch configuration attributes."),
src/vs/workbench/contrib/debug/common/debugger.ts:						description: nls.localize('debugOSXConfiguration', "OS X specific launch configuration attributes."),
src/vs/workbench/contrib/debug/common/debugger.ts:						description: nls.localize('debugLinuxConfiguration', "Linux specific launch configuration attributes."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:		description: nls.localize('vscode.extension.contributes.debuggers', 'Contributes debug adapters.'),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.type', "Unique identifier for this debug adapter."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.label', "Display name for this debug adapter."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.program', "Path to the debug adapter program. Path is either absolute or relative to the extension folder."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.args', "Optional arguments to pass to the adapter."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.runtime', "Optional runtime in case the program attribute is not an executable but requires a runtime."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.runtimeArgs', "Optional runtime arguments."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.variables', "Mapping from interactive variables (e.g. ${action.pickProcess}) in `launch.json` to a command."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.initialConfigurations', "Configurations for generating the initial \'launch.json\'."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.languages', "List of languages for which the debug extension could be considered the \"default debugger\"."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.configurationSnippets', "Snippets for adding new configurations in \'launch.json\'."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.configurationAttributes', "JSON schema configurations for validating \'launch.json\'."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.when', "Condition which must be true to enable this type of debugger. Consider using 'shellExecutionSupported', 'virtualWorkspace', 'resourceScheme' or an extension-defined context key as appropriate for this."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.deprecated', "Optional message to mark this debug type as being deprecated."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.windows', "Windows specific settings."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:							description: nls.localize('vscode.extension.contributes.debuggers.windows.runtime', "Runtime used for Windows."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.osx', "macOS specific settings."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:							description: nls.localize('vscode.extension.contributes.debuggers.osx.runtime', "Runtime used for macOS."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.linux', "Linux specific settings."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:							description: nls.localize('vscode.extension.contributes.debuggers.linux.runtime', "Runtime used for Linux."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.debuggers.strings', "UI strings contributed by this debug adapter."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:							description: nls.localize('vscode.extension.contributes.debuggers.strings.unverifiedBreakpoints', "When there are unverified breakpoints in a language supported by this debug adapter, this message will appear on the breakpoint hover and in the breakpoints view. Markdown and command links are supported."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:		description: nls.localize('vscode.extension.contributes.breakpoints', 'Contributes breakpoints.'),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.breakpoints.language', "Allow breakpoints for this language."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:					description: nls.localize('vscode.extension.contributes.breakpoints.when', "Condition which must be true to enable breakpoints in this language. Consider matching this to the debugger when clause as appropriate."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:	description: nls.localize('presentation', "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:			description: nls.localize('presentation.hidden', "Controls if this configuration should be shown in the configuration dropdown and the command palette.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:			description: nls.localize('presentation.group', "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:			description: nls.localize('presentation.order', "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:	title: nls.localize('app.launch.json.title', "Launch"),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:			description: nls.localize('app.launch.json.version', "Version of this file format."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:			description: nls.localize('app.launch.json.configurations', "List of configurations. Add new configurations or edit existing ones by using IntelliSense."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:			description: nls.localize('app.launch.json.compounds', "List of compounds. Each compound references multiple configurations which will get launched together."),
src/vs/workbench/contrib/debug/common/debugSchemas.ts:						description: nls.localize('app.launch.json.compound.name', "Name of compound. Appears in the launch configuration drop down menu.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:								description: nls.localize('useUniqueNames', "Please use unique configuration names.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:										description: nls.localize('app.launch.json.compound.name', "Name of compound. Appears in the launch configuration drop down menu.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:										description: nls.localize('app.launch.json.compound.folder', "Name of folder in which the compound is located.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:						description: nls.localize('app.launch.json.compounds.configurations', "Names of configurations that will be started as part of this compound.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:						description: nls.localize('app.launch.json.compound.stopAll', "Controls whether manually terminating one session will stop all of the compound sessions.")
src/vs/workbench/contrib/debug/common/debugSchemas.ts:						description: nls.localize('compoundPrelaunchTask', "Task to run before any of the compound configurations start.")
src/vs/workbench/contrib/debug/common/loadedScriptsPicker.ts:	quickPick.placeholder = nls.localize('moveFocusedView.selectView', "Search loaded scripts by name");
src/vs/workbench/contrib/debug/common/replModel.ts:			this.appendToRepl(session, nls.localize('consoleCleared', "Console was cleared"), severity.Ignore);
src/vs/workbench/api/common/extHostWorkspace.ts:				this._messageService.$showMessage(Severity.Error, localize('updateerror', "Extension '{0}' failed to update workspace folders: {1}", extName, error.toString()), options, []);
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DEBUG_TYPE = new RawContextKey<string>('debugType', undefined, { type: 'string', description: nls.localize('debugType', "Debug type of the active debug session. For example 'python'.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DEBUG_CONFIGURATION_TYPE = new RawContextKey<string>('debugConfigurationType', undefined, { type: 'string', description: nls.localize('debugConfigurationType', "Debug type of the selected launch configuration. For example 'python'.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DEBUG_STATE = new RawContextKey<string>('debugState', 'inactive', { type: 'string', description: nls.localize('debugState', "State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DEBUG_UX = new RawContextKey<string>(CONTEXT_DEBUG_UX_KEY, 'default', { type: 'string', description: nls.localize('debugUX', "Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_IN_DEBUG_MODE = new RawContextKey<boolean>('inDebugMode', false, { type: 'boolean', description: nls.localize('inDebugMode', "True when debugging, false otherwise.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_IN_DEBUG_REPL = new RawContextKey<boolean>('inDebugRepl', false, { type: 'boolean', description: nls.localize('inDebugRepl', "True when focus is in the debug console, false otherwise.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAKPOINT_WIDGET_VISIBLE = new RawContextKey<boolean>('breakpointWidgetVisible', false, { type: 'boolean', description: nls.localize('breakpointWidgetVisibile', "True when breakpoint editor zone widget is visible, false otherwise.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_IN_BREAKPOINT_WIDGET = new RawContextKey<boolean>('inBreakpointWidget', false, { type: 'boolean', description: nls.localize('inBreakpointWidget', "True when focus is in the breakpoint editor zone widget, false otherwise.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAKPOINTS_FOCUSED = new RawContextKey<boolean>('breakpointsFocused', true, { type: 'boolean', description: nls.localize('breakpointsFocused', "True when the BREAKPOINTS view is focused, false otherwise.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_WATCH_EXPRESSIONS_FOCUSED = new RawContextKey<boolean>('watchExpressionsFocused', true, { type: 'boolean', description: nls.localize('watchExpressionsFocused', "True when the WATCH view is focused, false otherwsie.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_WATCH_EXPRESSIONS_EXIST = new RawContextKey<boolean>('watchExpressionsExist', false, { type: 'boolean', description: nls.localize('watchExpressionsExist', "True when at least one watch expression exists, false otherwise.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_VARIABLES_FOCUSED = new RawContextKey<boolean>('variablesFocused', true, { type: 'boolean', description: nls.localize('variablesFocused', "True when the VARIABLES views is focused, false otherwsie") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_EXPRESSION_SELECTED = new RawContextKey<boolean>('expressionSelected', false, { type: 'boolean', description: nls.localize('expressionSelected', "True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAKPOINT_INPUT_FOCUSED = new RawContextKey<boolean>('breakpointInputFocused', false, { type: 'boolean', description: nls.localize('breakpointInputFocused', "True when the input box has focus in the BREAKPOINTS view.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_CALLSTACK_ITEM_TYPE = new RawContextKey<string>('callStackItemType', undefined, { type: 'string', description: nls.localize('callStackItemType', "Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_CALLSTACK_SESSION_IS_ATTACH = new RawContextKey<boolean>('callStackSessionIsAttach', false, { type: 'boolean', description: nls.localize('callStackSessionIsAttach', "True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_CALLSTACK_ITEM_STOPPED = new RawContextKey<boolean>('callStackItemStopped', false, { type: 'boolean', description: nls.localize('callStackItemStopped', "True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD = new RawContextKey<boolean>('callStackSessionHasOneThread', false, { type: 'boolean', description: nls.localize('callStackSessionHasOneThread', "True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_WATCH_ITEM_TYPE = new RawContextKey<string>('watchItemType', undefined, { type: 'string', description: nls.localize('watchItemType', "Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_CAN_VIEW_MEMORY = new RawContextKey<boolean>('canViewMemory', undefined, { type: 'boolean', description: nls.localize('canViewMemory', "Indicates whether the item in the view has an associated memory refrence.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAKPOINT_ITEM_TYPE = new RawContextKey<string>('breakpointItemType', undefined, { type: 'string', description: nls.localize('breakpointItemType', "Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAKPOINT_SUPPORTS_CONDITION = new RawContextKey<boolean>('breakpointSupportsCondition', false, { type: 'boolean', description: nls.localize('breakpointSupportsCondition', "True when the focused breakpoint supports conditions.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_LOADED_SCRIPTS_SUPPORTED = new RawContextKey<boolean>('loadedScriptsSupported', false, { type: 'boolean', description: nls.localize('loadedScriptsSupported', "True when the focused sessions supports the LOADED SCRIPTS view") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_LOADED_SCRIPTS_ITEM_TYPE = new RawContextKey<string>('loadedScriptsItemType', undefined, { type: 'string', description: nls.localize('loadedScriptsItemType', "Represents the item type of the focused element in the LOADED SCRIPTS view.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_FOCUSED_SESSION_IS_ATTACH = new RawContextKey<boolean>('focusedSessionIsAttach', false, { type: 'boolean', description: nls.localize('focusedSessionIsAttach', "True when the focused session is 'attach'.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_STEP_BACK_SUPPORTED = new RawContextKey<boolean>('stepBackSupported', false, { type: 'boolean', description: nls.localize('stepBackSupported', "True when the focused session supports 'stepBack' requests.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_RESTART_FRAME_SUPPORTED = new RawContextKey<boolean>('restartFrameSupported', false, { type: 'boolean', description: nls.localize('restartFrameSupported', "True when the focused session supports 'restartFrame' requests.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_STACK_FRAME_SUPPORTS_RESTART = new RawContextKey<boolean>('stackFrameSupportsRestart', false, { type: 'boolean', description: nls.localize('stackFrameSupportsRestart', "True when the focused stack frame suppots 'restartFrame'.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_JUMP_TO_CURSOR_SUPPORTED = new RawContextKey<boolean>('jumpToCursorSupported', false, { type: 'boolean', description: nls.localize('jumpToCursorSupported', "True when the focused session supports 'jumpToCursor' request.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_STEP_INTO_TARGETS_SUPPORTED = new RawContextKey<boolean>('stepIntoTargetsSupported', false, { type: 'boolean', description: nls.localize('stepIntoTargetsSupported', "True when the focused session supports 'stepIntoTargets' request.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAKPOINTS_EXIST = new RawContextKey<boolean>('breakpointsExist', false, { type: 'boolean', description: nls.localize('breakpointsExist', "True when at least one breakpoint exists.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DEBUGGERS_AVAILABLE = new RawContextKey<boolean>('debuggersAvailable', false, { type: 'boolean', description: nls.localize('debuggersAvailable', "True when there is at least one debug extensions active.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DEBUG_EXTENSION_AVAILABLE = new RawContextKey<boolean>('debugExtensionAvailable', true, { type: 'boolean', description: nls.localize('debugExtensionsAvailable', "True when there is at least one debug extension installed and enabled.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT = new RawContextKey<string>('debugProtocolVariableMenuContext', undefined, { type: 'string', description: nls.localize('debugProtocolVariableMenuContext', "Represents the context the debug adapter sets on the focused variable in the VARIABLES view.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_SET_VARIABLE_SUPPORTED = new RawContextKey<boolean>('debugSetVariableSupported', false, { type: 'boolean', description: nls.localize('debugSetVariableSupported', "True when the focused session supports 'setVariable' request.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_SET_EXPRESSION_SUPPORTED = new RawContextKey<boolean>('debugSetExpressionSupported', false, { type: 'boolean', description: nls.localize('debugSetExpressionSupported', "True when the focused session supports 'setExpression' request.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED = new RawContextKey<boolean>('breakWhenValueChangesSupported', false, { type: 'boolean', description: nls.localize('breakWhenValueChangesSupported', "True when the focused session supports to break when value changes.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED = new RawContextKey<boolean>('breakWhenValueIsAccessedSupported', false, { type: 'boolean', description: nls.localize('breakWhenValueIsAccessedSupported', "True when the focused breakpoint supports to break when value is accessed.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED = new RawContextKey<boolean>('breakWhenValueIsReadSupported', false, { type: 'boolean', description: nls.localize('breakWhenValueIsReadSupported', "True when the focused breakpoint supports to break when value is read.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED = new RawContextKey<boolean>('terminateDebuggeeSupported', false, { type: 'boolean', description: nls.localize('terminateDebuggeeSupported', "True when the focused session supports the terminate debuggee capability.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED = new RawContextKey<boolean>('suspendDebuggeeSupported', false, { type: 'boolean', description: nls.localize('suspendDebuggeeSupported', "True when the focused session supports the suspend debuggee capability.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT = new RawContextKey<boolean>('variableEvaluateNamePresent', false, { type: 'boolean', description: nls.localize('variableEvaluateNamePresent', "True when the focused variable has an 'evalauteName' field set.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_VARIABLE_IS_READONLY = new RawContextKey<boolean>('variableIsReadonly', false, { type: 'boolean', description: nls.localize('variableIsReadonly', "True when the focused variable is readonly.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_EXCEPTION_WIDGET_VISIBLE = new RawContextKey<boolean>('exceptionWidgetVisible', false, { type: 'boolean', description: nls.localize('exceptionWidgetVisible', "True when the exception widget is visible.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_MULTI_SESSION_REPL = new RawContextKey<boolean>('multiSessionRepl', false, { type: 'boolean', description: nls.localize('multiSessionRepl', "True when there is more than 1 debug console.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_MULTI_SESSION_DEBUG = new RawContextKey<boolean>('multiSessionDebug', false, { type: 'boolean', description: nls.localize('multiSessionDebug', "True when there is more than 1 active debug session.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED = new RawContextKey<boolean>('disassembleRequestSupported', false, { type: 'boolean', description: nls.localize('disassembleRequestSupported', "True when the focused sessions supports disassemble request.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_DISASSEMBLY_VIEW_FOCUS = new RawContextKey<boolean>('disassemblyViewFocus', false, { type: 'boolean', description: nls.localize('disassemblyViewFocus', "True when the Disassembly View is focused.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST = new RawContextKey<boolean>('languageSupportsDisassembleRequest', false, { type: 'boolean', description: nls.localize('languageSupportsDisassembleRequest', "True when the language in the current editor supports disassemble request.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE = new RawContextKey<boolean>('focusedStackFrameHasInstructionReference', false, { type: 'boolean', description: nls.localize('focusedStackFrameHasInstructionReference', "True when the focused stack frame has instruction pointer reference.") });
src/vs/workbench/contrib/debug/common/debug.ts:export const debuggerDisabledMessage = (debugType: string) => nls.localize('debuggerDisabled', "Configured debug type '{0}' is installed but not supported in this environment.", debugType);
src/vs/workbench/contrib/debug/common/debug.ts:	description: nls.localize('internalConsoleOptions', "Controls when the internal debug console should open.")
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('vscode.extension.contributes.configuration.title', 'A title for the current category of settings. This label will be rendered in the Settings editor as a subheading. If the title is the same as the extension display name, then the category will be grouped under the main extension heading.'),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('vscode.extension.contributes.configuration.order', 'When specified, gives the order of this category of settings relative to other categories.'),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),
src/vs/workbench/api/common/configurationExtensionPoint.ts:				patternErrorMessage: nls.localize('vscode.extension.contributes.configuration.property.empty', 'Property should not be empty.'),
src/vs/workbench/api/common/configurationExtensionPoint.ts:						title: nls.localize('vscode.extension.contributes.configuration.properties.schema', 'Schema of the configuration property.'),
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.application.description', "Configuration that can be configured only in the user settings."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.machine.description', "Configuration that can be configured only in the user settings or only in the remote settings."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.window.description', "Configuration that can be configured in the user, remote or workspace settings."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.resource.description', "Configuration that can be configured in the user, remote, workspace or folder settings."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.language-overridable.description', "Resource configuration that can be configured in language specific settings."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.machine-overridable.description', "Machine configuration that can be configured also in workspace or folder settings.")
src/vs/workbench/api/common/configurationExtensionPoint.ts:								markdownDescription: nls.localize('scope.description', "Scope in which the configuration is applicable. Available scopes are `application`, `machine`, `window`, `resource`, and `machine-overridable`.")
src/vs/workbench/api/common/configurationExtensionPoint.ts:								description: nls.localize('scope.enumDescriptions', 'Descriptions for enum values')
src/vs/workbench/api/common/configurationExtensionPoint.ts:								description: nls.localize('scope.markdownEnumDescriptions', 'Descriptions for enum values in the markdown format.')
src/vs/workbench/api/common/configurationExtensionPoint.ts:								markdownDescription: nls.localize('scope.enumItemLabels', 'Labels for enum values to be displayed in the Settings editor. When specified, the {0} values still show after the labels, but less prominently.', '`enum`')
src/vs/workbench/api/common/configurationExtensionPoint.ts:								description: nls.localize('scope.markdownDescription', 'The description in the markdown format.')
src/vs/workbench/api/common/configurationExtensionPoint.ts:								description: nls.localize('scope.deprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation.')
src/vs/workbench/api/common/configurationExtensionPoint.ts:								description: nls.localize('scope.markdownDeprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation in the markdown format.')
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.singlelineText.description', 'The value will be shown in an inputbox.'),
src/vs/workbench/api/common/configurationExtensionPoint.ts:									nls.localize('scope.multilineText.description', 'The value will be shown in a textarea.')
src/vs/workbench/api/common/configurationExtensionPoint.ts:								description: nls.localize('scope.editPresentation', 'When specified, controls the presentation format of the string setting.')
src/vs/workbench/api/common/configurationExtensionPoint.ts:								description: nls.localize('scope.order', 'When specified, gives the order of this setting relative to other settings within the same category. Settings with an order property will be placed before settings without this property set.')
src/vs/workbench/api/common/configurationExtensionPoint.ts:						extension.collector.warn(nls.localize('config.property.defaultConfiguration.warning', "Cannot register configuration defaults for '{0}'. Only defaults for machine-overridable, window, resource and language overridable scoped settings are supported.", key));
src/vs/workbench/api/common/configurationExtensionPoint.ts:		description: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			extension.collector.error(nls.localize('invalid.title', "'configuration.title' must be a string"));
src/vs/workbench/api/common/configurationExtensionPoint.ts:				extension.collector.error(nls.localize('invalid.properties', "'configuration.properties' must be an object"));
src/vs/workbench/api/common/configurationExtensionPoint.ts:					extension.collector.warn(nls.localize('config.property.duplicate', "Cannot register '{0}'. This property is already registered.", key));
src/vs/workbench/api/common/configurationExtensionPoint.ts:					extension.collector.error(nls.localize('invalid.property', "configuration.properties property '{0}' must be an object", key));
src/vs/workbench/api/common/configurationExtensionPoint.ts:			extension.collector.error(nls.localize('invalid.allOf', "'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point."));
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('workspaceConfig.folders.description', "List of folders to be loaded in the workspace."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:							description: nls.localize('workspaceConfig.path.description', "A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.")
src/vs/workbench/api/common/configurationExtensionPoint.ts:							description: nls.localize('workspaceConfig.name.description', "An optional name for the folder. ")
src/vs/workbench/api/common/configurationExtensionPoint.ts:							description: nls.localize('workspaceConfig.uri.description', "URI of the folder")
src/vs/workbench/api/common/configurationExtensionPoint.ts:							description: nls.localize('workspaceConfig.name.description', "An optional name for the folder. ")
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('workspaceConfig.settings.description', "Workspace settings"),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('workspaceConfig.launch.description', "Workspace launch configurations"),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('workspaceConfig.tasks.description', "Workspace task configurations"),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('workspaceConfig.extensions.description', "Workspace extensions"),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('workspaceConfig.remoteAuthority', "The remote server where the workspace is located."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:			description: nls.localize('workspaceConfig.transient', "A transient workspace will disappear when restarting or reloading."),
src/vs/workbench/api/common/configurationExtensionPoint.ts:	errorMessage: nls.localize('unknownWorkspaceProperty', "Unknown workspace configuration property")
src/vs/workbench/contrib/debug/common/debugLifecycle.ts:			message = nls.localize('debug.debugSessionCloseConfirmationSingular', "There is an active debug session, are you sure you want to stop it?");
src/vs/workbench/contrib/debug/common/debugLifecycle.ts:			message = nls.localize('debug.debugSessionCloseConfirmationPlural', "There are active debug sessions, are you sure you want to stop them?");
src/vs/workbench/contrib/debug/common/debugLifecycle.ts:			primaryButton: nls.localize('debug.stop', "Stop Debugging")
src/vs/workbench/contrib/debug/common/debugContentProvider.ts:			return Promise.reject(new ErrorNoTelemetry(localize('unable', "Unable to resolve the resource without a debug session")));
src/vs/workbench/contrib/debug/common/debugContentProvider.ts:				? localize('canNotResolveSourceWithError', "Could not load source '{0}': {1}.", resource.path, errMsg)
src/vs/workbench/contrib/debug/common/debugContentProvider.ts:				: localize('canNotResolveSource', "Could not load source '{0}'.", resource.path);
src/vs/workbench/api/browser/mainThreadAuthentication.ts:			this.dialogService.show(Severity.Info, nls.localize('noTrustedExtensions', "This account has not been used by any extensions."));
src/vs/workbench/api/browser/mainThreadAuthentication.ts:		quickPick.customLabel = nls.localize('manageTrustedExtensions.cancel', 'Cancel');
src/vs/workbench/api/browser/mainThreadAuthentication.ts:					? nls.localize({ key: 'accountLastUsedDate', comment: ['The placeholder {0} is a string with time information, such as "3 days ago"'] }, "Last used this account {0}", fromNow(usage.lastUsed, true))
src/vs/workbench/api/browser/mainThreadAuthentication.ts:					: nls.localize('notUsed', "Has not used this account"),
src/vs/workbench/api/browser/mainThreadAuthentication.ts:		quickPick.title = nls.localize('manageTrustedExtensions', "Manage Trusted Extensions");
src/vs/workbench/api/browser/mainThreadAuthentication.ts:		quickPick.placeholder = nls.localize('manageExtensions', "Choose which extensions can access this account");
src/vs/workbench/api/browser/mainThreadAuthentication.ts:				? nls.localize('signOutMessage', "The account '{0}' has been used by: \n\n{1}\n\n Sign out from these extensions?", accountName, accountUsages.map(usage => usage.extensionName).join('\n'))
src/vs/workbench/api/browser/mainThreadAuthentication.ts:				: nls.localize('signOutMessageSimple', "Sign out of '{0}'?", accountName),
src/vs/workbench/api/browser/mainThreadAuthentication.ts:				nls.localize('signOut', "Sign Out"),
src/vs/workbench/api/browser/mainThreadAuthentication.ts:				nls.localize('cancel', "Cancel")
src/vs/workbench/api/browser/mainThreadAuthentication.ts:		this.notificationService.info(nls.localize('signedOut', "Successfully signed out."));
src/vs/workbench/api/browser/mainThreadAuthentication.ts:			? nls.localize('confirmRelogin', "The extension '{0}' wants you to sign in again using {1}.", extensionName, providerName)
src/vs/workbench/api/browser/mainThreadAuthentication.ts:			: nls.localize('confirmLogin', "The extension '{0}' wants to sign in using {1}.", extensionName, providerName);
src/vs/workbench/api/browser/mainThreadAuthentication.ts:			[nls.localize('allow', "Allow"), nls.localize('cancel', "Cancel")],
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:const debugCategory = nls.localize('debugCategory', "Debug");
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	placeholder: nls.localize('startDebugPlaceholder', "Type the name of a launch configuration to run."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	helpEntries: [{ description: nls.localize('startDebuggingHelp', "Start Debugging"), commandId: SELECT_AND_START_ID }]
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	placeholder: nls.localize('tasksQuickAccessPlaceholder', "Type the name of a debug console to open."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	helpEntries: [{ description: nls.localize('tasksQuickAccessHelp', "Show All Debug Consoles"), commandId: SELECT_DEBUG_CONSOLE_ID }]
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugCommandPaletteItem(TERMINATE_THREAD_ID, { value: nls.localize('terminateThread', "Terminate Thread"), original: 'Terminate Thread' }, CONTEXT_IN_DEBUG_MODE);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugCommandPaletteItem(FOCUS_REPL_ID, { value: nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, 'Focus on Debug Console View'), original: 'Focus on Debug Console View' });
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugCommandPaletteItem(JUMP_TO_CURSOR_ID, { value: nls.localize('jumpToCursor', "Jump to Cursor"), original: 'Jump to Cursor' }, CONTEXT_JUMP_TO_CURSOR_SUPPORTED);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugCommandPaletteItem(JUMP_TO_CURSOR_ID, { value: nls.localize('SetNextStatement', "Set Next Statement"), original: 'Set Next Statement' }, CONTEXT_JUMP_TO_CURSOR_SUPPORTED);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugCommandPaletteItem(TOGGLE_INLINE_BREAKPOINT_ID, { value: nls.localize('inlineBreakpoint', "Inline Breakpoint"), original: 'Inline Breakpoint' });
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugCallStackContext, TERMINATE_THREAD_ID, nls.localize('terminateThread', "Terminate Thread"), 10, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), undefined, 'termination');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugCallStackContext, RESTART_FRAME_ID, nls.localize('restartFrame', "Restart Frame"), 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), CONTEXT_RESTART_FRAME_SUPPORTED), CONTEXT_STACK_FRAME_SUPPORTS_RESTART);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugCallStackContext, COPY_STACK_TRACE_ID, nls.localize('copyStackTrace', "Copy Call Stack"), 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), undefined, '3_modification');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, VIEW_MEMORY_ID, nls.localize('viewMemory', "View Binary Data"), 15, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_IN_DEBUG_MODE, 'inline', icons.debugInspectMemory);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, SET_VARIABLE_ID, nls.localize('setValue', "Set Value"), 10, ContextKeyExpr.or(CONTEXT_SET_VARIABLE_SUPPORTED, ContextKeyExpr.and(CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, CONTEXT_SET_EXPRESSION_SUPPORTED)), CONTEXT_VARIABLE_IS_READONLY.toNegated(), '3_modification');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, COPY_VALUE_ID, nls.localize('copyValue', "Copy Value"), 10, undefined, undefined, '5_cutcopypaste');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, COPY_EVALUATE_PATH_ID, nls.localize('copyAsExpression', "Copy as Expression"), 20, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, '5_cutcopypaste');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, ADD_TO_WATCH_ID, nls.localize('addToWatchExpressions', "Add to Watch"), 100, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, 'z_commands');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_IS_READ_ID, nls.localize('breakWhenValueIsRead', "Break on Value Read"), 200, CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED, undefined, 'z_commands');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_CHANGES_ID, nls.localize('breakWhenValueChanges', "Break on Value Change"), 210, CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED, undefined, 'z_commands');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_IS_ACCESSED_ID, nls.localize('breakWhenValueIsAccessed', "Break on Value Access"), 220, CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED, undefined, 'z_commands');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugWatchContext, EDIT_EXPRESSION_COMMAND_ID, nls.localize('editWatchExpression', "Edit Expression"), 20, CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), undefined, '3_modification');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugWatchContext, SET_EXPRESSION_COMMAND_ID, nls.localize('setValue', "Set Value"), 30, ContextKeyExpr.or(ContextKeyExpr.and(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), CONTEXT_SET_EXPRESSION_SUPPORTED), ContextKeyExpr.and(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable'), CONTEXT_SET_VARIABLE_SUPPORTED)), CONTEXT_VARIABLE_IS_READONLY.toNegated(), '3_modification');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugWatchContext, COPY_VALUE_ID, nls.localize('copyValue', "Copy Value"), 40, ContextKeyExpr.or(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable')), CONTEXT_IN_DEBUG_MODE, '3_modification');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugWatchContext, VIEW_MEMORY_ID, nls.localize('viewMemory', "View Binary Data"), 50, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_IN_DEBUG_MODE, '3_modification');
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:registerDebugViewMenuItem(MenuId.DebugWatchContext, REMOVE_EXPRESSION_COMMAND_ID, nls.localize('removeWatchExpression', "Remove Expression"), 10, CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), undefined, 'inline', icons.watchExpressionRemove);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:MenuRegistry.appendMenuItem(MenuId.EditorTitle, { submenu: MenuId.EditorTitleRun, rememberDefaultAction: true, title: { value: nls.localize('run', "Run or Debug..."), original: 'Run or Debug...', }, icon: icons.debugRun, group: 'navigation', order: -1 });
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		mnemonicTitle: nls.localize({ key: 'mRun', comment: ['&& denotes a mnemonic'] }, "&&Run")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miStartDebugging', comment: ['&& denotes a mnemonic'] }, "&&Start Debugging")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miRun', comment: ['&& denotes a mnemonic'] }, "Run &&Without Debugging")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miStopDebugging', comment: ['&& denotes a mnemonic'] }, "&&Stop Debugging"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miRestart Debugging', comment: ['&& denotes a mnemonic'] }, "&&Restart Debugging"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miAddConfiguration', comment: ['&& denotes a mnemonic'] }, "A&&dd Configuration...")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miStepOver', comment: ['&& denotes a mnemonic'] }, "Step &&Over"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miStepInto', comment: ['&& denotes a mnemonic'] }, "Step &&Into"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miStepOut', comment: ['&& denotes a mnemonic'] }, "Step O&&ut"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miContinue', comment: ['&& denotes a mnemonic'] }, "&&Continue"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miInlineBreakpoint', comment: ['&& denotes a mnemonic'] }, "Inline Breakp&&oint")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	title: nls.localize({ key: 'miNewBreakpoint', comment: ['&& denotes a mnemonic'] }, "&&New Breakpoint"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		title: nls.localize({ key: 'miInstallAdditionalDebuggers', comment: ['&& denotes a mnemonic'] }, "&&Install Additional Debuggers...")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	title: nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	name: nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		mnemonicTitle: nls.localize({ key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] }, "De&&bug Console"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	title: { value: nls.localize('run and debug', "Run and Debug"), original: 'Run and Debug' },
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:		mnemonicTitle: nls.localize({ key: 'miViewRun', comment: ['&& denotes a mnemonic'] }, "&&Run"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:viewsRegistry.registerViews([{ id: VARIABLES_VIEW_ID, name: nls.localize('variables', "Variables"), containerIcon: icons.variablesViewIcon, ctorDescriptor: new SyncDescriptor(VariablesView), order: 10, weight: 40, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusVariablesView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:viewsRegistry.registerViews([{ id: WATCH_VIEW_ID, name: nls.localize('watch', "Watch"), containerIcon: icons.watchViewIcon, ctorDescriptor: new SyncDescriptor(WatchExpressionsView), order: 20, weight: 10, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusWatchView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:viewsRegistry.registerViews([{ id: CALLSTACK_VIEW_ID, name: nls.localize('callStack', "Call Stack"), containerIcon: icons.callStackViewIcon, ctorDescriptor: new SyncDescriptor(CallStackView), order: 30, weight: 30, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusCallStackView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:viewsRegistry.registerViews([{ id: BREAKPOINTS_VIEW_ID, name: nls.localize('breakpoints', "Breakpoints"), containerIcon: icons.breakpointsViewIcon, ctorDescriptor: new SyncDescriptor(BreakpointsView), order: 40, weight: 20, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusBreakpointsView' }, when: ContextKeyExpr.or(CONTEXT_BREAKPOINTS_EXIST, CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:viewsRegistry.registerViews([{ id: LOADED_SCRIPTS_VIEW_ID, name: nls.localize('loadedScripts', "Loaded Scripts"), containerIcon: icons.loadedScriptsViewIcon, ctorDescriptor: new SyncDescriptor(LoadedScriptsView), order: 35, weight: 5, canToggleVisibility: true, canMoveView: true, collapsed: true, when: ContextKeyExpr.and(CONTEXT_LOADED_SCRIPTS_SUPPORTED, CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer);
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	EditorPaneDescriptor.create(DisassemblyView, DISASSEMBLY_VIEW_ID, nls.localize('disassembly', "Disassembly")),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:	title: nls.localize('debugConfigurationTitle', "Debug"),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' }, "Allow setting breakpoints in any file."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' }, "Automatically open the explorer view at the end of a debug session."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'inlineValues' }, "Show variable values inline in editor while debugging."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('inlineValues.on', 'Always show variable values inline in editor while debugging.'),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('inlineValues.off', 'Never show variable values inline in editor while debugging.'),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('inlineValues.focusNoScroll', 'Show variable values inline in editor while debugging when the language supports inline value locations.'),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			markdownDescription: nls.localize({ comment: ['This is the description for a setting'], key: 'toolBarLocation' }, "Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			enumDescriptions: [nls.localize('never', "Never show debug in status bar"), nls.localize('always', "Always show debug in status bar"), nls.localize('onFirstSessionStart', "Show debug in status bar only after debug was started for the first time")],
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showInStatusBar' }, "Controls when the debug status bar should be visible."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.closeOnEnd', "Controls if the debug console should be automatically closed when the debug session ends."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'debug.terminal.clearBeforeReusing' }, "Before starting a new debug session in an integrated or external terminal, clear the terminal."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('openDebug', "Controls when the debug view should open.")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showSubSessionsInToolBar' }, "Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.fontSize', "Controls the font size in pixels in the debug console."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.fontFamily', "Controls the font family in the debug console."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.lineHeight', "Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.wordWrap', "Controls if the lines should wrap in the debug console."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.historySuggestions', "Controls if the debug console should suggest previously typed input."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.collapseIdenticalLines', "Controls if the debug console should collapse identical lines and show a number of occurrences with a badge."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.console.acceptSuggestionOnEnter', "Controls whether suggestions should be accepted on enter in the debug console. enter is also used to evaluate whatever is typed in the debug console."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'launch' }, "Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.focusWindowOnBreak', "Controls whether the workbench window should be focused when the debugger breaks."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.focusEditorOnBreak', "Controls whether the editor should be focused when the debugger breaks."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			enumDescriptions: [nls.localize('debugAnyway', "Ignore task errors and start debugging."), nls.localize('showErrors', "Show the Problems view and do not start debugging."), nls.localize('prompt', "Prompt user."), nls.localize('cancel', "Cancel debugging.")],
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.onTaskErrors', "Controls what to do when errors are encountered after running a preLaunchTask."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showBreakpointsInOverviewRuler' }, "Controls whether breakpoints should be shown in the overview ruler."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize({ comment: ['This is the description for a setting'], key: 'showInlineBreakpointCandidates' }, "Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.saveBeforeStart', "Controls what editors to save before starting a debug session."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('debug.saveBeforeStart.allEditorsInActiveGroup', "Save all editors in the active group before starting a debug session."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('debug.saveBeforeStart.nonUntitledEditorsInActiveGroup', "Save all editors in the active group except untitled ones before starting a debug session."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('debug.saveBeforeStart.none', "Don't save any editors before starting a debug session."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.confirmOnExit', "Controls whether to confirm when the window closes if there are active debug sessions."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('debug.confirmOnExit.never', "Never confirm."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:				nls.localize('debug.confirmOnExit.always', "Always confirm if there are debug sessions."),
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.disassemblyView.showSourceCode', "Show Source Code in Disassembly View.")
src/vs/workbench/contrib/debug/browser/debug.contribution.ts:			description: nls.localize('debug.autoExpandLazyVariables', "Automatically show values for variables that are lazily resolved by the debugger, such as getters.")
src/vs/workbench/api/browser/mainThreadExtensionService.ts:				message: localize('reload window', "Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not loaded. Would you like to reload the window to load the extension?", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name),
src/vs/workbench/api/browser/mainThreadExtensionService.ts:					primary: [new Action('reload', localize('reload', "Reload Window"), '', true, () => this._hostService.reload())]
src/vs/workbench/api/browser/mainThreadExtensionService.ts:					message: localize('notSupportedInWorkspace', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is not supported in the current workspace", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name),
src/vs/workbench/api/browser/mainThreadExtensionService.ts:					message: localize('restrictedMode', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is not supported in Restricted Mode", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name),
src/vs/workbench/api/browser/mainThreadExtensionService.ts:						primary: [new Action('manageWorkspaceTrust', localize('manageWorkspaceTrust', "Manage Workspace Trust"), '', true,
src/vs/workbench/api/browser/mainThreadExtensionService.ts:					message: localize('disabledDep', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is disabled. Would you like to enable the extension and reload the window?", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name),
src/vs/workbench/api/browser/mainThreadExtensionService.ts:						primary: [new Action('enable', localize('enable dep', "Enable and Reload"), '', true,
src/vs/workbench/api/browser/mainThreadExtensionService.ts:					message: localize('disabledDepNoAction', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is disabled.", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name),
src/vs/workbench/api/browser/mainThreadExtensionService.ts:				message: localize('uninstalledDep', "Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not installed. Would you like to install the extension and reload the window?", extName, dependencyExtension.displayName),
src/vs/workbench/api/browser/mainThreadExtensionService.ts:					primary: [new Action('install', localize('install missing dep', "Install and Reload"), '', true,
src/vs/workbench/api/browser/mainThreadExtensionService.ts:			this._notificationService.error(localize('unknownDep', "Cannot activate the '{0}' extension because it depends on an unknown '{1}' extension.", extName, missingDependency));
src/vs/workbench/contrib/debug/common/debugSource.ts:export const UNKNOWN_SOURCE_LABEL = nls.localize('unknownSource', "Unknown Source");
src/vs/workbench/api/browser/mainThreadComments.ts:const commentsViewIcon = registerIcon('comments-view-icon', Codicon.commentDiscussion, localize('commentsViewIcon', 'View icon of the comments view.'));
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize('ask.1.create', "Extension '{0}' wants to make refactoring changes with this file creation", data.extensionNames[0]);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize('ask.1.copy', "Extension '{0}' wants to make refactoring changes with this file copy", data.extensionNames[0]);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize('ask.1.move', "Extension '{0}' wants to make refactoring changes with this file move", data.extensionNames[0]);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize('ask.1.delete', "Extension '{0}' wants to make refactoring changes with this file deletion", data.extensionNames[0]);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize({ key: 'ask.N.create', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file creation", data.extensionNames.length);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize({ key: 'ask.N.copy', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file copy", data.extensionNames.length);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize({ key: 'ask.N.move', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file move", data.extensionNames.length);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							message = localize({ key: 'ask.N.delete', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file deletion", data.extensionNames.length);
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:						const answer = await dialogService.show(Severity.Info, message, [localize('preview', "Show Preview"), localize('cancel', "Skip Changes")], { cancelId: 1 });
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:							[localize('ok', "OK"), localize('preview', "Show Preview"), localize('cancel', "Skip Changes")],
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:								checkbox: { label: localize('again', "Don't ask again") }
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:						return localize('msg-create', "Running 'File Create' participants...");
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:						return localize('msg-rename', "Running 'File Rename' participants...");
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:						return localize('msg-copy', "Running 'File Copy' participants...");
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:						return localize('msg-delete', "Running 'File Delete' participants...");
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:						return localize('msg-write', "Running 'File Write' participants...");
src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts:				value: localize('label', "Reset choice for 'File operation needs preview'"),
src/vs/workbench/api/browser/mainThreadWorkspace.ts:				message = localize('folderStatusMessageAddSingleFolder', "Extension '{0}' added 1 folder to the workspace", extensionName);
src/vs/workbench/api/browser/mainThreadWorkspace.ts:				message = localize('folderStatusMessageAddMultipleFolders', "Extension '{0}' added {1} folders to the workspace", extensionName, addCount);
src/vs/workbench/api/browser/mainThreadWorkspace.ts:				message = localize('folderStatusMessageRemoveSingleFolder', "Extension '{0}' removed 1 folder from the workspace", extensionName);
src/vs/workbench/api/browser/mainThreadWorkspace.ts:				message = localize('folderStatusMessageRemoveMultipleFolders', "Extension '{0}' removed {1} folders from the workspace", extensionName, removeCount);
src/vs/workbench/api/browser/mainThreadWorkspace.ts:			message = localize('folderStatusChangeFolder', "Extension '{0}' changed folders of the workspace", extensionName);
src/vs/workbench/api/browser/mainThreadUriOpeners.ts:						const openDefaultAction = new Action('default', localize('openerFailedUseDefault', "Open using default opener"), undefined, undefined, async () => {
src/vs/workbench/api/browser/mainThreadUriOpeners.ts:							message: localize({
src/vs/workbench/api/browser/mainThreadTunnelService.ts:			nls.localize('remote.tunnel.openTunnel', "The extension {0} has forwarded port {1}. You'll need to run as superuser to use port {2} locally.", source, tunnelOptions.remoteAddress.port, tunnelOptions.localAddressPort),
src/vs/workbench/api/browser/mainThreadTunnelService.ts:				label: nls.localize('remote.tunnelsView.elevationButton', "Use Port {0} as Sudo...", tunnel.tunnelRemotePort),
src/vs/workbench/api/browser/mainThreadWebviews.ts:			<body>${localize('errorMessage', "An error occurred while loading view: {0}", escape(viewType))}</body>
src/vs/workbench/api/browser/mainThreadSaveParticipant.ts:				() => reject(new Error(localize('timeout.onWillSave', "Aborted onWillSaveTextDocument-event after 1750ms"))),
src/vs/workbench/contrib/debug/browser/debugHover.ts:		tip.textContent = nls.localize({ key: 'quickTip', comment: ['"switch to editor language hover" means to show the programming language hover widget instead of the debug hover'] }, 'Hold {0} key to switch to editor language hover', isMacintosh ? 'Option' : 'Alt');
src/vs/workbench/contrib/debug/browser/debugHover.ts:		return nls.localize('treeAriaLabel', "Debug Hover");
src/vs/workbench/contrib/debug/browser/debugHover.ts:		return nls.localize({ key: 'variableAriaLabel', comment: ['Do not translate placeholders. Placeholders are name and value of a variable.'] }, "{0}, value {1}, variables, debug", element.name, element.value);
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:	description: nls.localize('contributes.customEditors', 'Contributed custom editors.'),
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:				markdownDescription: nls.localize('contributes.viewType', 'Identifier for the custom editor. This must be unique across all custom editors, so we recommend including your extension id as part of `viewType`. The `viewType` is used when registering custom editors with `vscode.registerCustomEditorProvider` and in the `onCustomEditor:${id}` [activation event](https://code.visualstudio.com/api/references/activation-events).'),
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:				description: nls.localize('contributes.displayName', 'Human readable name of the custom editor. This is displayed to users when selecting which editor to use.'),
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:				description: nls.localize('contributes.selector', 'Set of globs that the custom editor is enabled for.'),
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:							description: nls.localize('contributes.selector.filenamePattern', 'Glob that the custom editor is enabled for.'),
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:				markdownDeprecationMessage: nls.localize('contributes.priority', 'Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.'),
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:					nls.localize('contributes.priority.default', 'The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.'),
src/vs/workbench/contrib/customEditor/common/extensionPoint.ts:					nls.localize('contributes.priority.option', 'The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.'),
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	static readonly LABEL = localize('run', "Run");
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'openAFileWhichCanBeDebugged', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'runAndDebugAction', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'detectThenRunAndDebug', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'customizeRunAndDebug', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'customizeRunAndDebugOpenFolder', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize('allDebuggersDisabled', "All debug extensions are disabled. Enable a debug extension or install a new one from the Marketplace."),
src/vs/workbench/api/browser/mainThreadTask.ts:		const label = nls.localize('task.label', '{0}: {1}', source.label, task.name);
src/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts:}, localize('statusBarDebuggingBackground', "Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window"));
src/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts:}, localize('statusBarDebuggingForeground', "Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window"));
src/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts:}, localize('statusBarDebuggingBorder', "Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window"));
src/vs/workbench/api/browser/mainThreadMessageService.ts:					label: nls.localize('extensionSource', "{0} (Extension)", options.source.label),
src/vs/workbench/api/browser/mainThreadMessageService.ts:				source = nls.localize('defaultSource', "Extension");
src/vs/workbench/api/browser/mainThreadMessageService.ts:					label: nls.localize('manageExtension', "Manage Extension"),
src/vs/workbench/api/browser/mainThreadMessageService.ts:				buttons.push(nls.localize('cancel', "Cancel"));
src/vs/workbench/api/browser/mainThreadMessageService.ts:				buttons.push(nls.localize('ok', "OK"));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize({ key: 'vscode.extension.contributes.views.containers.id', comment: ['Contribution refers to those that an extension contributes to VS Code through an extension/contribution point. '] }, "Unique id used to identify the container in which views can be contributed using 'views' contribution point"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.views.containers.title', 'Human readable string used to render the container'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.views.containers.icon', "Path to the container icon. Icons are 24x24 centered on a 50x40 block and have a fill color of 'rgb(215, 218, 224)' or '#d7dae0'. It is recommended that icons be in SVG, though any image file type is accepted."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:	description: localize('vscode.extension.contributes.viewsContainers', 'Contributes views containers to the editor'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('views.container.activitybar', "Contribute views containers to Activity Bar"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('views.container.panel', "Contribute views containers to Panel"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			markdownDescription: localize('vscode.extension.contributes.view.type', "Type of the view. This can either be `tree` for a tree view based view or `webview` for a webview based view. The default is `tree`."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				localize('vscode.extension.contributes.view.tree', "The view is backed by a `TreeView` created by `createTreeView`."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				localize('vscode.extension.contributes.view.webview', "The view is backed by a `WebviewView` registered by `registerWebviewViewProvider`."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			markdownDescription: localize('vscode.extension.contributes.view.id', 'Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.when', 'Condition which must be true to show this view'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.icon', "Path to the view icon. View icons are displayed when the name of the view cannot be shown. It is recommended that icons be in SVG, though any image file type is accepted."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.contextualTitle', "Human-readable context for when the view is moved out of its original location. By default, the view's container name will be used."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.initialState', "Initial state of the view when the extension is first installed. Once the user has changed the view state by collapsing, moving, or hiding the view, the initial state will not be used again."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				localize('vscode.extension.contributes.view.initialState.visible', "The default initial state for the view. In most containers the view will be expanded, however; some built-in containers (explorer, scm, and debug) show all contributed views collapsed regardless of the `visibility`."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				localize('vscode.extension.contributes.view.initialState.hidden', "The view will not be shown in the view container, but will be discoverable through the views menu and other view entry points and can be un-hidden by the user."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				localize('vscode.extension.contributes.view.initialState.collapsed', "The view will show in the view container, but will be collapsed.")
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributs.view.size', "The initial size of the view. The size will behave like the css 'flex' property, and will set the initial size when the view is first shown. In the side bar, this is the height of the view. This value is only respected when the same extension owns both the view and the view container."),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.id', 'Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.when', 'Condition which must be true to show this view'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.group', 'Nested group in the viewlet'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('vscode.extension.contributes.view.remoteName', 'The name of the remote type associated with this view'),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:	description: localize('vscode.extension.contributes.views', "Contributes views to the editor"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('views.explorer', "Contributes views to Explorer container in the Activity bar"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('views.debug', "Contributes views to Debug container in the Activity bar"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('views.scm', "Contributes views to SCM container in the Activity bar"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('views.test', "Contributes views to Test container in the Activity bar"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			description: localize('views.remote', "Contributes views to Remote container in the Activity bar. To contribute to this container, enableProposedApi needs to be turned on"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:		description: localize('views.contributed', "Contributes views to contributed views container"),
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			collector.error(localize('viewcontainer requirearray', "views containers must be an array"));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('requireidstring', "property `{0}` is mandatory and must be of type `string` with non-empty value. Only alphanumeric characters, '_', and '-' are allowed.", 'id'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('requireidstring', "property `{0}` is mandatory and must be of type `string` with non-empty value. Only alphanumeric characters, '_', and '-' are allowed.", 'id'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'title'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'icon'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.warn(localize('requirenonemptystring', "property `{0}` is mandatory and must be of type `string` with non-empty value", 'title'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:					collector.warn(localize('ViewContainerRequiresProposedAPI', "View container '{0}' requires 'enabledApiProposals: [\"contribViewsRemote\"]' to be added to 'Remote'.", key));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:					collector.warn(localize('ViewContainerDoesnotExist', "View container '{0}' does not exist and all views registered to it will be added to 'Explorer'.", key));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:						collector.error(localize('duplicateView1', "Cannot register multiple views with same id `{0}`", item.id));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:						collector.error(localize('duplicateView2', "A view with id `{0}` is already registered.", item.id));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:						collector.error(localize('unknownViewType', "Unknown view type `{0}`.", item.type));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:			collector.error(localize('requirearray', "views must be an array"));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'id'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('requirestring', "property `{0}` is mandatory and must be of type `string`", 'name'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'when'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'icon'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('optstring', "property `{0}` can be omitted or must be of type `string`", 'contextualTitle'));
src/vs/workbench/api/browser/viewsExtensionPoint.ts:				collector.error(localize('optenum', "property `{0}` can be omitted or must be one of {1}", 'visibility', Object.values(InitialVisibility).join(', ')));
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:				ariaLabel: localize('typeNewValue', "Type new value"),
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:			ariaLabel: localize('watchExpressionInputAriaLabel', "Type watch expression"),
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:			placeholder: localize('watchExpressionPlaceholder', "Expression to watch"),
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:		return localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'watchAriaTreeLabel' }, "Debug Watch Expressions");
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:			return localize('watchExpressionAriaLabel', "{0}, value {1}", (<Expression>element).name, (<Expression>element).value);
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:		return localize('watchVariableAriaLabel', "{0}, value {1}", (<Variable>element).name, (<Variable>element).value);
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:			title: localize('collapse', "Collapse All"),
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:export const ADD_WATCH_LABEL = localize('addWatchExpression', "Add Expression");
src/vs/workbench/contrib/debug/browser/watchExpressionsView.ts:export const REMOVE_WATCH_EXPRESSIONS_LABEL = localize('removeAllWatchExpressions', "Remove All Expressions");
src/vs/workbench/contrib/debug/browser/repl.ts:				placeholder: localize({ key: 'workbench.debug.filter.placeholder', comment: ['Text in the brackets after e.g. is not localizable'] }, "Filter (e.g. text, !exclude)"),
src/vs/workbench/contrib/debug/browser/repl.ts:			this.filterWidget.updateBadge(total === filtered || total === 0 ? undefined : localize('showing filtered repl lines', "Showing {0} of {1}", filtered, total));
src/vs/workbench/contrib/debug/browser/repl.ts:		options.ariaLabel = localize('debugConsole', "Debug Console");
src/vs/workbench/contrib/debug/browser/repl.ts:						contentText: localize('startDebugFirst', "Please start a debug session to evaluate expressions"),
src/vs/workbench/contrib/debug/browser/repl.ts:			label: localize({ key: 'actions.repl.acceptInput', comment: ['Apply input from the debug console input box'] }, "REPL Accept Input"),
src/vs/workbench/contrib/debug/browser/repl.ts:			label: localize('repl.action.filter', "REPL Focus Content to Filter"),
src/vs/workbench/contrib/debug/browser/repl.ts:			label: localize('actions.repl.copyAll', "Debug: Console Copy All"),
src/vs/workbench/contrib/debug/browser/repl.ts:			title: localize('selectRepl', "Select Debug Console"),
src/vs/workbench/contrib/debug/browser/repl.ts:			title: { value: localize('clearRepl', "Clear Console"), original: 'Clear Console' },
src/vs/workbench/contrib/debug/browser/repl.ts:		aria.status(localize('debugConsoleCleared', "Debug console was cleared"));
src/vs/workbench/contrib/debug/browser/repl.ts:			title: localize('collapse', "Collapse All"),
src/vs/workbench/contrib/debug/browser/repl.ts:			title: localize('paste', "Paste"),
src/vs/workbench/contrib/debug/browser/repl.ts:			title: localize('copyAll', "Copy All"),
src/vs/workbench/contrib/debug/browser/repl.ts:			title: localize('copy', "Copy"),
src/vs/workbench/contrib/debug/browser/variablesView.ts:			ariaLabel: localize('variableValueAriaLabel', "Type new variable value"),
src/vs/workbench/contrib/debug/browser/variablesView.ts:		return localize('variablesAriaTreeLabel', "Debug Variables");
src/vs/workbench/contrib/debug/browser/variablesView.ts:			return localize('variableScopeAriaLabel', "Scope {0}", element.name);
src/vs/workbench/contrib/debug/browser/variablesView.ts:			return localize({ key: 'variableAriaLabel', comment: ['Placeholders are variable name and variable value respectivly. They should not be translated.'] }, "{0}, value {1}", element.name, element.value);
src/vs/workbench/contrib/debug/browser/variablesView.ts:			localize("viewMemory.prompt", "Inspecting binary data requires the Hex Editor extension. Would you like to install it now?"), [
src/vs/workbench/contrib/debug/browser/variablesView.ts:				label: localize("cancel", "Cancel"),
src/vs/workbench/contrib/debug/browser/variablesView.ts:				label: localize("install", "Install"),
src/vs/workbench/contrib/debug/browser/variablesView.ts:								title: localize("viewMemory.install.progress", "Installing the Hex Editor..."),
src/vs/workbench/contrib/debug/browser/variablesView.ts:			title: localize('collapse', "Collapse All"),
src/vs/workbench/contrib/customEditor/common/customEditor.ts:	description: nls.localize('context.customEditor', "The viewType of the currently active custom editor."),
src/vs/workbench/contrib/debug/browser/loadedScriptsView.ts:			options.title = nls.localize('loadedScriptsSession', "Debug Session");
src/vs/workbench/contrib/debug/browser/loadedScriptsView.ts:		return nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'loadedScriptsAriaLabel' }, "Debug Loaded Scripts");
src/vs/workbench/contrib/debug/browser/loadedScriptsView.ts:			return nls.localize('loadedScriptsRootFolderAriaLabel', "Workspace folder {0}, loaded script, debug", element.getLabel());
src/vs/workbench/contrib/debug/browser/loadedScriptsView.ts:			return nls.localize('loadedScriptsSessionAriaLabel', "Session {0}, loaded script, debug", element.getLabel());
src/vs/workbench/contrib/debug/browser/loadedScriptsView.ts:			return nls.localize('loadedScriptsFolderAriaLabel', "Folder {0}, loaded script, debug", element.getLabel());
src/vs/workbench/contrib/debug/browser/loadedScriptsView.ts:			return nls.localize('loadedScriptsSourceAriaLabel', "{0}, loaded script, debug", element.getLabel());
src/vs/workbench/contrib/debug/browser/linkDetector.ts:		const followLink = this.tunnelService.canTunnel(uri) ? localize('followForwardedLink', "follow link using forwarded port") : localize('followLink', "follow link");
src/vs/workbench/contrib/debug/browser/linkDetector.ts:			? (platform.isMacintosh ? localize('fileLinkWithPathMac', "Cmd + click to {0}\n{1}", followLink, fulltext) : localize('fileLinkWithPath', "Ctrl + click to {0}\n{1}", followLink, fulltext))
src/vs/workbench/contrib/debug/browser/linkDetector.ts:			: (platform.isMacintosh ? localize('fileLinkMac', "Cmd + click to {0}", followLink) : localize('fileLink', "Ctrl + click to {0}", followLink));
src/vs/workbench/api/browser/mainThreadProgress.ts:				secondaryActions: [new ManageExtensionAction(extensionId, localize('manageExtension', "Manage Extension"), this._commandService)]
src/vs/workbench/contrib/debug/browser/rawDebugSession.ts:			return Promise.reject(new Error(nls.localize('noDebugAdapterStart', "No debug adapter, can not start debug session.")));
src/vs/workbench/contrib/debug/browser/rawDebugSession.ts:					const showResult = await this.dialogSerivce.show(Severity.Warning, nls.localize('canNotStart', "The debugger needs to open a new tab or window for the debuggee but the browser prevented this. You must give permission to continue."),
src/vs/workbench/contrib/debug/browser/rawDebugSession.ts:						[nls.localize('continue', "Continue"), nls.localize('cancel', "Cancel")], { cancelId: 1 });
src/vs/workbench/contrib/debug/browser/rawDebugSession.ts:					errorDispatch(new Error(nls.localize('noDebugAdapter', "No debugger available found. Can not send '{0}'.", command)));
src/vs/workbench/contrib/debug/browser/rawDebugSession.ts:			const label = error.urlLabel ? error.urlLabel : nls.localize('moreInfo', "More Info");
src/vs/workbench/contrib/debug/browser/replViewer.ts:		return localize('debugConsole', "Debug Console");
src/vs/workbench/contrib/debug/browser/replViewer.ts:			return localize('replVariableAriaLabel', "Variable {0}, value {1}", element.name, element.value);
src/vs/workbench/contrib/debug/browser/replViewer.ts:			return element.value + (element instanceof SimpleReplElement && element.count > 1 ? localize({ key: 'occurred', comment: ['Front will the value of the debug console element. Placeholder will be replaced by a number which represents occurrance count.'] },
src/vs/workbench/contrib/debug/browser/replViewer.ts:			return localize('replRawObjectAriaLabel', "Debug console variable {0}, value {1}", element.name, element.value);
src/vs/workbench/contrib/debug/browser/replViewer.ts:			return localize('replGroup', "Debug console group {0}", element.name);
src/vs/workbench/contrib/debug/browser/debugViewlet.ts:				mnemonicTitle: nls.localize({ key: 'miOpenConfigurations', comment: ['&& denotes a mnemonic'] }, "Open &&Configurations")
src/vs/workbench/contrib/debug/browser/debugViewlet.ts:					placeHolder: nls.localize({ key: 'selectWorkspaceFolder', comment: ['User picks a workspace folder or a workspace configuration file here. Workspace configuration files can contain settings and thus a launch.json configuration can be written into one.'] }, "Select a workspace folder to create a launch.json file in or add it to the workspace config file")
src/vs/workbench/contrib/debug/browser/debugViewlet.ts:			title: nls.localize('debugPanel', "Debug Console"),
src/vs/workbench/contrib/debug/browser/debugViewlet.ts:		title: nls.localize('startAdditionalSession', "Start Additional Session"),
src/vs/workbench/contrib/debug/browser/exceptionWidget.ts:const debugExceptionWidgetBorder = registerColor('debugExceptionWidget.border', { dark: '#a31515', light: '#a31515', hcDark: '#a31515', hcLight: '#a31515' }, nls.localize('debugExceptionWidgetBorder', 'Exception widget border color.'));
src/vs/workbench/contrib/debug/browser/exceptionWidget.ts:const debugExceptionWidgetBackground = registerColor('debugExceptionWidget.background', { dark: '#420b0d', light: '#f1dfde', hcDark: '#420b0d', hcLight: '#f1dfde' }, nls.localize('debugExceptionWidgetBackground', 'Exception widget background color.'));
src/vs/workbench/contrib/debug/browser/exceptionWidget.ts:		label.textContent = this.exceptionInfo.id ? nls.localize('exceptionThrownWithId', 'Exception has occurred: {0}', this.exceptionInfo.id) : nls.localize('exceptionThrown', 'Exception has occurred.');
src/vs/workbench/contrib/debug/browser/exceptionWidget.ts:		actionBar.push(new Action('editor.closeExceptionWidget', nls.localize('close', "Close"), ThemeIcon.asClassName(widgetClose), true, async () => {
src/vs/workbench/contrib/debug/browser/debugSessionPicker.ts:	quickPick.placeholder = nls.localize('moveFocusedView.selectView', 'Search debug sessions by name');
src/vs/workbench/contrib/debug/browser/debugSessionPicker.ts:	const createDebugSessionLabel = nls.localize('workbench.action.debug.startDebug', 'Start a New Debug Session');
src/vs/workbench/contrib/debug/browser/debugSessionPicker.ts:		ariaLabel = nls.localize('workbench.action.debug.spawnFrom', 'Session {0} spawned from {1}', label, parentName);
src/vs/workbench/contrib/debug/browser/disassemblyView.ts:		instruction: localize('instructionNotAvailable', "Disassembly not available.")
src/vs/workbench/contrib/debug/browser/disassemblyView.ts:					label: localize('disassemblyTableColumnLabel', "instructions"),
src/vs/workbench/contrib/debug/browser/disassemblyView.ts:				description: localize('editorOpenedFromDisassemblyDescription', "from disassembly"),
src/vs/workbench/contrib/debug/browser/disassemblyView.ts:		return localize('disassemblyView', "Disassembly View");
src/vs/workbench/contrib/debug/browser/disassemblyView.ts:			label += `${localize('instructionAddress', "Address")}: ${instruction.address}`;
src/vs/workbench/contrib/debug/browser/disassemblyView.ts:			label += `, ${localize('instructionBytes', "Bytes")}: ${instruction.instructionBytes}`;
src/vs/workbench/contrib/debug/browser/disassemblyView.ts:		label += `, ${localize(`instructionText`, "Instruction")}: ${instruction.instruction}`;
src/vs/workbench/api/browser/mainThreadCLICommands.ts:			output.log(localize('cannot be installed', "Cannot install the '{0}' extension because it is declared to not run in this setup.", getExtensionId(manifest.publisher, manifest.name)));
src/vs/workbench/contrib/customEditor/common/contributedCustomEditors.ts:					providerDisplayName: extension.description.isBuiltin ? nls.localize('builtinProviderDisplayName', "Built-in") : extension.description.displayName || extension.description.identifier.value,
src/vs/workbench/contrib/debug/browser/debugService.ts:					this.activity = this.activityService.showViewContainerActivity(viewContainer.id, { badge: new NumberBadge(numberOfSessions, n => n === 1 ? nls.localize('1activeSession', "1 active session") : nls.localize('nActiveSessions', "{0} active sessions", n)) });
src/vs/workbench/contrib/debug/browser/debugService.ts:		const message = options && options.noDebug ? nls.localize('runTrust', "Running executes build tasks and program code from your workspace.") : nls.localize('debugTrust', "Debugging executes build tasks and program code from your workspace.");
src/vs/workbench/contrib/debug/browser/debugService.ts:					throw new Error(nls.localize({ key: 'compoundMustHaveConfigurations', comment: ['compound indicates a "compounds" configuration item', '"configurations" is an attribute and should not be localized'] },
src/vs/workbench/contrib/debug/browser/debugService.ts:							throw new Error(launchesContainingName.length === 0 ? nls.localize('noConfigurationNameInWorkspace', "Could not find launch configuration '{0}' in the workspace.", name)
src/vs/workbench/contrib/debug/browser/debugService.ts:								: nls.localize('multipleConfigurationNamesInWorkspace', "There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.", name));
src/vs/workbench/contrib/debug/browser/debugService.ts:							throw new Error(nls.localize('noFolderWithName', "Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.", configData.folder, configData.name, compound!.name));
src/vs/workbench/contrib/debug/browser/debugService.ts:				const message = !!launch ? nls.localize('configMissing', "Configuration '{0}' is missing in 'launch.json'.", typeof configOrName === 'string' ? configOrName : configOrName.name) :
src/vs/workbench/contrib/debug/browser/debugService.ts:					nls.localize('launchJsonDoesNotExist', "'launch.json' does not exist for passed workspace folder.");
src/vs/workbench/contrib/debug/browser/debugService.ts:						message = configByProviders.request ? nls.localize('debugRequestNotSupported', "Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.", 'request', configByProviders.request)
src/vs/workbench/contrib/debug/browser/debugService.ts:							: nls.localize('debugRequesMissing', "Attribute '{0}' is missing from the chosen debug configuration.", 'request');
src/vs/workbench/contrib/debug/browser/debugService.ts:						message = resolvedConfig.type ? nls.localize('debugTypeNotSupported', "Configured debug type '{0}' is not supported.", resolvedConfig.type) :
src/vs/workbench/contrib/debug/browser/debugService.ts:							nls.localize('debugTypeMissing', "Missing property 'type' for the chosen launch configuration.");
src/vs/workbench/contrib/debug/browser/debugService.ts:						nls.localize({ key: 'installAdditionalDebuggers', comment: ['Placeholder is the debug type, so for example "node", "python"'] }, "Install {0} Extension", resolvedConfig.type),
src/vs/workbench/contrib/debug/browser/debugService.ts:					await this.showError(nls.localize('noFolderWorkspaceDebugError', "The active file can not be debugged. Make sure it is saved and that you have a debug extension installed for that file type."));
src/vs/workbench/contrib/debug/browser/debugService.ts:			const result = await this.dialogService.confirm({ message: nls.localize('multipleSession', "'{0}' is already running. Do you want to start another instance?", session.getLabel()) });
src/vs/workbench/contrib/debug/browser/debugService.ts:					this.notificationService.error(nls.localize('debugAdapterCrash', "Debug adapter process has terminated unexpectedly ({0})", adapterExitEvent.error.message || adapterExitEvent.error.toString()));
src/vs/workbench/contrib/debug/browser/debugService.ts:		const { choice } = await this.dialogService.show(severity.Error, message, actions.map(a => a.label).concat(nls.localize('cancel', "Cancel")), { cancelId: actions.length });
src/vs/workbench/contrib/debug/browser/debugService.ts:							aria.alert(nls.localize({ key: 'debuggingPaused', comment: ['First placeholder is the file line content, second placeholder is the reason why debugging is stopped, for example "breakpoint", third is the stack frame name, and last is the line number.'] },
src/vs/workbench/contrib/debug/browser/debugService.ts:			breakpoints.forEach(bp => aria.status(nls.localize('breakpointAdded', "Added breakpoint, line {0}, file {1}", bp.lineNumber, uri.fsPath)));
src/vs/workbench/contrib/debug/browser/debugService.ts:		toRemove.forEach(bp => aria.status(nls.localize('breakpointRemoved', "Removed breakpoint, line {0}, file {1}", bp.lineNumber, bp.uri.fsPath)));
src/vs/workbench/contrib/debug/browser/debugStatus.ts:			name: nls.localize('status.debug', "Debug"),
src/vs/workbench/contrib/debug/browser/debugStatus.ts:			ariaLabel: nls.localize('debugTarget', "Debug: {0}", text),
src/vs/workbench/contrib/debug/browser/debugStatus.ts:			tooltip: nls.localize('selectAndStartDebug', "Select and start debug configuration"),
src/vs/workbench/api/browser/mainThreadCustomEditors.ts:			label: label ?? localize('defaultEditLabel', "Edit"),
src/vs/workbench/contrib/debug/browser/debugToolBar.ts:	const dropdownAction = disposables.add(new Action('notebook.moreRunActions', localize('notebook.moreRunActionsLabel', "More..."), 'codicon-chevron-down', true));
src/vs/workbench/contrib/debug/browser/debugToolBar.ts:registerDebugToolBarItem(STEP_BACK_ID, localize('stepBackDebug', "Step Back"), 50, icons.debugStepBack, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
src/vs/workbench/contrib/debug/browser/debugToolBar.ts:registerDebugToolBarItem(REVERSE_CONTINUE_ID, localize('reverseContinue', "Reverse"), 55, icons.debugReverseContinue, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:			label: nls.localize('toggleBreakpointAction', "Debug: Toggle Breakpoint"),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:				title: nls.localize({ key: 'miToggleBreakpoint', comment: ['&& denotes a mnemonic'] }, "Toggle &&Breakpoint"),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:			label: nls.localize('conditionalBreakpointEditorAction', "Debug: Add Conditional Breakpoint..."),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:				title: nls.localize({ key: 'miConditionalBreakpoint', comment: ['&& denotes a mnemonic'] }, "&&Conditional Breakpoint..."),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:			label: nls.localize('logPointEditorAction', "Debug: Add Logpoint..."),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:					title: nls.localize({ key: 'miLogPoint', comment: ['&& denotes a mnemonic'] }, "&&Logpoint..."),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:				value: nls.localize('openDisassemblyView', "Open Disassembly View"),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:				mnemonicTitle: nls.localize({ key: 'miDisassemblyView', comment: ['&& denotes a mnemonic'] }, "&&DisassemblyView")
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:				value: nls.localize('toggleDisassemblyViewSourceCode', "Toggle Source Code in Disassembly View"),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:				mnemonicTitle: nls.localize({ key: 'mitogglesource', comment: ['&& denotes a mnemonic'] }, "&&ToggleSource")
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:	public static readonly LABEL = nls.localize('runToCursor', "Run to Cursor");
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:	public static readonly LABEL = nls.localize('evaluateInDebugConsole', "Evaluate in Debug Console");
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:	public static readonly LABEL = nls.localize('addToWatch', "Add to Watch");
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:			label: nls.localize('showDebugHover', "Debug: Show Hover"),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:const NO_TARGETS_MESSAGE = nls.localize('editor.debug.action.stepIntoTargets.notAvailable', "Step targets are not available here");
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:	public static readonly LABEL = nls.localize({ key: 'stepIntoTargets', comment: ['Step Into Targets lets the user step into an exact function he or she is interested in.'] }, "Step Into Target");
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:			label: nls.localize('goToNextBreakpoint', "Debug: Go to Next Breakpoint"),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:			label: nls.localize('goToPreviousBreakpoint', "Debug: Go to Previous Breakpoint"),
src/vs/workbench/contrib/debug/browser/debugEditorActions.ts:			label: nls.localize('closeExceptionWidget', "Close Exception Widget"),
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:				? nls.localize('preLaunchTaskErrors', "Errors exist after running preLaunchTask '{0}'.", taskLabel)
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:					? nls.localize('preLaunchTaskError', "Error exists after running preLaunchTask '{0}'.", taskLabel)
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:						? nls.localize('preLaunchTaskExitCode', "The preLaunchTask '{0}' terminated with exit code {1}.", taskLabel, taskSummary.exitCode)
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:						: nls.localize('preLaunchTaskTerminated', "The preLaunchTask '{0}' terminated.", taskLabel);
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:			const result = await this.dialogService.show(severity.Warning, message, [nls.localize('debugAnyway', "Debug Anyway"), nls.localize('showErrors', "Show Errors"), nls.localize('abort', "Abort")], {
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:					label: nls.localize('remember', "Remember my choice in user settings"),
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:					[nls.localize('debugAnyway', "Debug Anyway"), taskConfigureAction.label, nls.localize('cancel', "Cancel")],
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:							label: nls.localize('rememberTask', "Remember my choice for this task")
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:			return Promise.reject(new Error(nls.localize('invalidTaskReference', "Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.", typeof taskId === 'string' ? taskId : taskId.type)));
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:				? nls.localize('DebugTaskNotFoundWithTaskId', "Could not find the task '{0}'.", taskId)
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:				: nls.localize('DebugTaskNotFound', "Could not find the specified task.");
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:							? nls.localize('taskNotTrackedWithTaskId', "The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.", taskId)
src/vs/workbench/contrib/debug/browser/debugTaskRunner.ts:							: nls.localize('taskNotTracked', "The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.", JSON.stringify(taskId));
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:				label: localize('noDebugResults', "No matching launch configurations")
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:						tooltip: localize('customizeLaunchConfig', "Configure Launch Configuration")
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:				type: 'separator', label: localize({
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:						tooltip: localize('removeLaunchConfig', "Remove Launch Configuration")
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:				ariaLabel: localize({ key: 'providerAriaLabel', comment: ['Placeholder stands for the provider label. For example "NodeJS".'] }, "{0} contributed configurations", provider.label),
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:			picks.push({ type: 'separator', label: localize('configure', "configure") });
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:				localize("addConfigTo", "Add Config ({0})...", launch.name) :
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:				localize('addConfiguration', "Add Configuration...");
src/vs/workbench/contrib/debug/browser/debugColors.ts:}, localize('debugToolBarBackground', "Debug toolbar background color."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:}, localize('debugToolBarBorder', "Debug toolbar border color."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:}, localize('debugIcon.startForeground', "Debug toolbar icon for start debugging."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.pauseForeground', "Debug toolbar icon for pause."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.stopForeground', "Debug toolbar icon for stop."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.disconnectForeground', "Debug toolbar icon for disconnect."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.restartForeground', "Debug toolbar icon for restart."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.stepOverForeground', "Debug toolbar icon for step over."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.stepIntoForeground', "Debug toolbar icon for step into."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.stepOutForeground', "Debug toolbar icon for step over."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.continueForeground', "Debug toolbar icon for continue."));
src/vs/workbench/contrib/debug/browser/debugColors.ts:	}, localize('debugIcon.stepBackForeground', "Debug toolbar icon for step back."));
src/vs/workbench/contrib/debug/browser/debugEditorContribution.ts:}, nls.localize('editor.inlineValuesForeground', "Color for the debug inline value text."));
src/vs/workbench/contrib/debug/browser/debugEditorContribution.ts:}, nls.localize('editor.inlineValuesBackground', "Color for the debug inline value background."));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'launch or attach'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'restart'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'breakpoints'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'function breakpoints'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'exception breakpoints'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'data breakpoints info'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('sessionNotReadyForBreakpoints', "Session is not ready for breakpoints"));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'data breakpoints'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'instruction breakpoints'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'breakpoints locations'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", request));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'stackTrace'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'exceptionInfo'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'scopes'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'variables'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'evaluate'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'restartFrame'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'next'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'stepIn'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'stepOut'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'stepBack'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'continue'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'reverse continue'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'pause'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'terminateThreads'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'setVariable'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'setExpression'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'gotoTargets'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			throw new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'goto'));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'loadSource')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'getLoadedSources')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'completions')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'stepInTargets')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'cancel')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'disassemble')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'readMemory')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			return Promise.reject(new Error(localize('noDebugAdapter', "No debugger available, can not send '{0}'", 'disassemble')));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			aria.status(localize('debuggingStarted', "Debugging started."));
src/vs/workbench/contrib/debug/browser/debugSession.ts:			aria.status(localize('debuggingStopped', "Debugging stopped."));
src/vs/workbench/contrib/debug/browser/debugConsoleQuickAccess.ts:		const createTerminalLabel = localize("workbench.action.debug.startDebug", "Start a New Debug Session");
src/vs/workbench/contrib/debug/browser/debugConfigurationManager.ts:					input.placeholder = nls.localize('selectConfiguration', "Select Launch Configuration");
src/vs/workbench/contrib/debug/browser/debugConfigurationManager.ts:									tooltip: nls.localize('editLaunchConfig', "Edit Debug Configuration in launch.json")
src/vs/workbench/contrib/debug/browser/debugConfigurationManager.ts:				throw new Error(nls.localize('DebugConfig.failed', "Unable to create 'launch.json' file inside the '.vscode' folder ({0}).", error.message));
src/vs/workbench/contrib/debug/browser/debugConfigurationManager.ts:		return nls.localize('workspace', "workspace");
src/vs/workbench/contrib/debug/browser/debugConfigurationManager.ts:		return nls.localize('user settings', "user settings");
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugConsoleViewIcon = registerIcon('debug-console-view-icon', Codicon.debugConsole, localize('debugConsoleViewIcon', 'View icon of the debug console view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const runViewIcon = registerIcon('run-view-icon', Codicon.debugAlt, localize('runViewIcon', 'View icon of the run view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const variablesViewIcon = registerIcon('variables-view-icon', Codicon.debugAlt, localize('variablesViewIcon', 'View icon of the variables view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const watchViewIcon = registerIcon('watch-view-icon', Codicon.debugAlt, localize('watchViewIcon', 'View icon of the watch view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const callStackViewIcon = registerIcon('callstack-view-icon', Codicon.debugAlt, localize('callStackViewIcon', 'View icon of the call stack view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const breakpointsViewIcon = registerIcon('breakpoints-view-icon', Codicon.debugAlt, localize('breakpointsViewIcon', 'View icon of the breakpoints view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const loadedScriptsViewIcon = registerIcon('loaded-scripts-view-icon', Codicon.debugAlt, localize('loadedScriptsViewIcon', 'View icon of the loaded scripts view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	regular: registerIcon('debug-breakpoint', Codicon.debugBreakpoint, localize('debugBreakpoint', 'Icon for breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	disabled: registerIcon('debug-breakpoint-disabled', Codicon.debugBreakpointDisabled, localize('debugBreakpointDisabled', 'Icon for disabled breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	unverified: registerIcon('debug-breakpoint-unverified', Codicon.debugBreakpointUnverified, localize('debugBreakpointUnverified', 'Icon for unverified breakpoints.'))
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	regular: registerIcon('debug-breakpoint-function', Codicon.debugBreakpointFunction, localize('debugBreakpointFunction', 'Icon for function breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	disabled: registerIcon('debug-breakpoint-function-disabled', Codicon.debugBreakpointFunctionDisabled, localize('debugBreakpointFunctionDisabled', 'Icon for disabled function breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	unverified: registerIcon('debug-breakpoint-function-unverified', Codicon.debugBreakpointFunctionUnverified, localize('debugBreakpointFunctionUnverified', 'Icon for unverified function breakpoints.'))
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	regular: registerIcon('debug-breakpoint-conditional', Codicon.debugBreakpointConditional, localize('debugBreakpointConditional', 'Icon for conditional breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	disabled: registerIcon('debug-breakpoint-conditional-disabled', Codicon.debugBreakpointConditionalDisabled, localize('debugBreakpointConditionalDisabled', 'Icon for disabled conditional breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	unverified: registerIcon('debug-breakpoint-conditional-unverified', Codicon.debugBreakpointConditionalUnverified, localize('debugBreakpointConditionalUnverified', 'Icon for unverified conditional breakpoints.'))
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	regular: registerIcon('debug-breakpoint-data', Codicon.debugBreakpointData, localize('debugBreakpointData', 'Icon for data breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	disabled: registerIcon('debug-breakpoint-data-disabled', Codicon.debugBreakpointDataDisabled, localize('debugBreakpointDataDisabled', 'Icon for disabled data breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	unverified: registerIcon('debug-breakpoint-data-unverified', Codicon.debugBreakpointDataUnverified, localize('debugBreakpointDataUnverified', 'Icon for unverified data breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	regular: registerIcon('debug-breakpoint-log', Codicon.debugBreakpointLog, localize('debugBreakpointLog', 'Icon for log breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	disabled: registerIcon('debug-breakpoint-log-disabled', Codicon.debugBreakpointLogDisabled, localize('debugBreakpointLogDisabled', 'Icon for disabled log breakpoint.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:	unverified: registerIcon('debug-breakpoint-log-unverified', Codicon.debugBreakpointLogUnverified, localize('debugBreakpointLogUnverified', 'Icon for unverified log breakpoints.')),
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugBreakpointHint = registerIcon('debug-hint', Codicon.debugHint, localize('debugBreakpointHint', 'Icon for breakpoint hints shown on hover in editor glyph margin.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugBreakpointUnsupported = registerIcon('debug-breakpoint-unsupported', Codicon.debugBreakpointUnsupported, localize('debugBreakpointUnsupported', 'Icon for unsupported breakpoints.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStackframe = registerIcon('debug-stackframe', Codicon.debugStackframe, localize('debugStackframe', 'Icon for a stackframe shown in the editor glyph margin.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStackframeFocused = registerIcon('debug-stackframe-focused', Codicon.debugStackframeFocused, localize('debugStackframeFocused', 'Icon for a focused stackframe  shown in the editor glyph margin.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugGripper = registerIcon('debug-gripper', Codicon.gripper, localize('debugGripper', 'Icon for the debug bar gripper.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugRestartFrame = registerIcon('debug-restart-frame', Codicon.debugRestartFrame, localize('debugRestartFrame', 'Icon for the debug restart frame action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStop = registerIcon('debug-stop', Codicon.debugStop, localize('debugStop', 'Icon for the debug stop action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugDisconnect = registerIcon('debug-disconnect', Codicon.debugDisconnect, localize('debugDisconnect', 'Icon for the debug disconnect action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugRestart = registerIcon('debug-restart', Codicon.debugRestart, localize('debugRestart', 'Icon for the debug restart action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStepOver = registerIcon('debug-step-over', Codicon.debugStepOver, localize('debugStepOver', 'Icon for the debug step over action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStepInto = registerIcon('debug-step-into', Codicon.debugStepInto, localize('debugStepInto', 'Icon for the debug step into action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStepOut = registerIcon('debug-step-out', Codicon.debugStepOut, localize('debugStepOut', 'Icon for the debug step out action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStepBack = registerIcon('debug-step-back', Codicon.debugStepBack, localize('debugStepBack', 'Icon for the debug step back action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugPause = registerIcon('debug-pause', Codicon.debugPause, localize('debugPause', 'Icon for the debug pause action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugContinue = registerIcon('debug-continue', Codicon.debugContinue, localize('debugContinue', 'Icon for the debug continue action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugReverseContinue = registerIcon('debug-reverse-continue', Codicon.debugReverseContinue, localize('debugReverseContinue', 'Icon for the debug reverse continue action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugRun = registerIcon('debug-run', Codicon.run, localize('debugRun', 'Icon for the run or debug action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugStart = registerIcon('debug-start', Codicon.debugStart, localize('debugStart', 'Icon for the debug start action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugConfigure = registerIcon('debug-configure', Codicon.gear, localize('debugConfigure', 'Icon for the debug configure action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugConsole = registerIcon('debug-console', Codicon.gear, localize('debugConsole', 'Icon for the debug console open action.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugRemoveConfig = registerIcon('debug-remove-config', Codicon.trash, localize('debugRemoveConfig', 'Icon for removing debug configurations.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugCollapseAll = registerIcon('debug-collapse-all', Codicon.collapseAll, localize('debugCollapseAll', 'Icon for the collapse all action in the debug views.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const callstackViewSession = registerIcon('callstack-view-session', Codicon.bug, localize('callstackViewSession', 'Icon for the session icon in the call stack view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugConsoleClearAll = registerIcon('debug-console-clear-all', Codicon.clearAll, localize('debugConsoleClearAll', 'Icon for the clear all action in the debug console.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const watchExpressionsRemoveAll = registerIcon('watch-expressions-remove-all', Codicon.closeAll, localize('watchExpressionsRemoveAll', 'Icon for the Remove All action in the watch view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const watchExpressionRemove = registerIcon('watch-expression-remove', Codicon.removeClose, localize('watchExpressionRemove', 'Icon for the Remove action in the watch view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const watchExpressionsAdd = registerIcon('watch-expressions-add', Codicon.add, localize('watchExpressionsAdd', 'Icon for the add action in the watch view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const watchExpressionsAddFuncBreakpoint = registerIcon('watch-expressions-add-function-breakpoint', Codicon.add, localize('watchExpressionsAddFuncBreakpoint', 'Icon for the add function breakpoint action in the watch view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const breakpointsRemoveAll = registerIcon('breakpoints-remove-all', Codicon.closeAll, localize('breakpointsRemoveAll', 'Icon for the Remove All action in the breakpoints view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const breakpointsActivate = registerIcon('breakpoints-activate', Codicon.activateBreakpoints, localize('breakpointsActivate', 'Icon for the activate action in the breakpoints view.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugConsoleEvaluationInput = registerIcon('debug-console-evaluation-input', Codicon.arrowSmallRight, localize('debugConsoleEvaluationInput', 'Icon for the debug evaluation input marker.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugConsoleEvaluationPrompt = registerIcon('debug-console-evaluation-prompt', Codicon.chevronRight, localize('debugConsoleEvaluationPrompt', 'Icon for the debug evaluation prompt.'));
src/vs/workbench/contrib/debug/browser/debugIcons.ts:export const debugInspectMemory = registerIcon('debug-inspect-memory', Codicon.fileBinary, localize('debugInspectMemory', 'Icon for the inspect memory action.'));
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const DEBUG_COMMAND_CATEGORY: ILocalizedString = { original: 'Debug', value: nls.localize('debug', 'Debug') };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const RESTART_LABEL = { value: nls.localize('restartDebug', "Restart"), original: 'Restart' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const STEP_OVER_LABEL = { value: nls.localize('stepOverDebug', "Step Over"), original: 'Step Over' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const STEP_INTO_LABEL = { value: nls.localize('stepIntoDebug', "Step Into"), original: 'Step Into' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const STEP_INTO_TARGET_LABEL = { value: nls.localize('stepIntoTargetDebug', "Step Into Target"), original: 'Step Into Target' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const STEP_OUT_LABEL = { value: nls.localize('stepOutDebug', "Step Out"), original: 'Step Out' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const PAUSE_LABEL = { value: nls.localize('pauseDebug', "Pause"), original: 'Pause' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const DISCONNECT_LABEL = { value: nls.localize('disconnect', "Disconnect"), original: 'Disconnect' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const DISCONNECT_AND_SUSPEND_LABEL = { value: nls.localize('disconnectSuspend', "Disconnect and Suspend"), original: 'Disconnect and Suspend' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const STOP_LABEL = { value: nls.localize('stop', "Stop"), original: 'Stop' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const CONTINUE_LABEL = { value: nls.localize('continueDebug', "Continue"), original: 'Continue' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const FOCUS_SESSION_LABEL = { value: nls.localize('focusSession', "Focus Session"), original: 'Focus Session' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const SELECT_AND_START_LABEL = { value: nls.localize('selectAndStartDebugging', "Select and Start Debugging"), original: 'Select and Start Debugging' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const DEBUG_CONFIGURE_LABEL = nls.localize('openLaunchJson', "Open '{0}'", 'launch.json');
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const DEBUG_START_LABEL = { value: nls.localize('startDebug', "Start Debugging"), original: 'Start Debugging' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const DEBUG_RUN_LABEL = { value: nls.localize('startWithoutDebugging', "Start Without Debugging"), original: 'Start Without Debugging' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const NEXT_DEBUG_CONSOLE_LABEL = { value: nls.localize('nextDebugConsole', "Focus Next Debug Console"), original: 'Focus Next Debug Console' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const PREV_DEBUG_CONSOLE_LABEL = { value: nls.localize('prevDebugConsole', "Focus Previous Debug Console"), original: 'Focus Previous Debug Console' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const OPEN_LOADED_SCRIPTS_LABEL = { value: nls.localize('openLoadedScript', "Open Loaded Script..."), original: 'Open Loaded Script...' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const CALLSTACK_TOP_LABEL = { value: nls.localize('callStackTop', "Navigate to Top of Call Stack"), original: 'Navigate to Top of Call Stack' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const CALLSTACK_BOTTOM_LABEL = { value: nls.localize('callStackBottom', "Navigate to Bottom of Call Stack"), original: 'Navigate to Bottom of Call Stack' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const CALLSTACK_UP_LABEL = { value: nls.localize('callStackUp', "Navigate Up Call Stack"), original: 'Navigate Up Call Stack' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const CALLSTACK_DOWN_LABEL = { value: nls.localize('callStackDown', "Navigate Down Call Stack"), original: 'Navigate Down Call Stack' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const SELECT_DEBUG_CONSOLE_LABEL = { value: nls.localize('selectDebugConsole', "Select Debug Console"), original: 'Select Debug Console' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:export const SELECT_DEBUG_SESSION_LABEL = { value: nls.localize('selectDebugSession', "Select Debug Session"), original: 'Select Debug Session' };
src/vs/workbench/contrib/debug/browser/debugCommands.ts:						const pick = await quickInputService.pick(picks, { placeHolder: nls.localize('chooseLocation', "Choose the specific location") });
src/vs/workbench/contrib/debug/browser/debugCommands.ts:		return notificationService.warn(nls.localize('noExecutableCode', "No executable code is associated at the current cursor position."));
src/vs/workbench/contrib/debug/browser/debugCommands.ts:		title: nls.localize('jumpToCursor', "Jump to Cursor"),
src/vs/workbench/contrib/debug/browser/debugCommands.ts:				qp.placeholder = nls.localize('editor.debug.action.stepIntoTargets.none', "No step targets available");
src/vs/workbench/contrib/debug/browser/debugCommands.ts:			title: { value: nls.localize('addConfiguration', "Add Configuration..."), original: 'Add Configuration...' },
src/vs/workbench/contrib/debug/browser/debugCommands.ts:		title: nls.localize('addInlineBreakpoint', "Add Inline Breakpoint"),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:						const breakpointType = logPoint ? nls.localize('logPoint', "Logpoint") : nls.localize('breakpoint', "Breakpoint");
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:						const disabledBreakpointDialogMessage = nls.localize(
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:							logPoint ? nls.localize('message', "message") : nls.localize('condition', "condition")
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:						const enabledBreakpointDialogMessage = nls.localize(
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:							logPoint ? nls.localize('message', "message") : nls.localize('condition', "condition")
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:								nls.localize('removeLogPoint', "Remove {0}", breakpointType),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:								nls.localize('disableLogPoint', "{0} {1}", enabled ? nls.localize('disable', "Disable") : nls.localize('enable', "Enable"), breakpointType),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:								nls.localize('cancel', "Cancel")
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:			const breakpointType = breakpoints[0].logMessage ? nls.localize('logPoint', "Logpoint") : nls.localize('breakpoint', "Breakpoint");
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:			actions.push(new Action('debug.removeBreakpoint', nls.localize('removeBreakpoint', "Remove {0}", breakpointType), undefined, true, async () => {
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				nls.localize('editBreakpoint', "Edit {0}...", breakpointType),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				breakpoints[0].enabled ? nls.localize('disableBreakpoint', "Disable {0}", breakpointType) : nls.localize('enableBreakpoint', "Enable {0}", breakpointType),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:			actions.push(new SubmenuAction('debug.removeBreakpoints', nls.localize('removeBreakpoints', "Remove Breakpoints"), sorted.map(bp => new Action(
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				bp.column ? nls.localize('removeInlineBreakpointOnColumn', "Remove Inline Breakpoint on Column {0}", bp.column) : nls.localize('removeLineBreakpoint', "Remove Line Breakpoint"),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:			actions.push(new SubmenuAction('debug.editBreakpoints', nls.localize('editBreakpoints', "Edit Breakpoints"), sorted.map(bp =>
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:					bp.column ? nls.localize('editInlineBreakpointOnColumn', "Edit Inline Breakpoint on Column {0}", bp.column) : nls.localize('editLineBreakpoint', "Edit Line Breakpoint"),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:			actions.push(new SubmenuAction('debug.enableDisableBreakpoints', nls.localize('enableDisableBreakpoints', "Enable/Disable Breakpoints"), sorted.map(bp => new Action(
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				bp.enabled ? (bp.column ? nls.localize('disableInlineColumnBreakpoint', "Disable Inline Breakpoint on Column {0}", bp.column) : nls.localize('disableBreakpointOnLine', "Disable Line Breakpoint"))
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:					: (bp.column ? nls.localize('enableBreakpoints', "Enable Inline Breakpoint on Column {0}", bp.column) : nls.localize('enableBreakpointOnLine', "Enable Line Breakpoint")),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				nls.localize('addBreakpoint', "Add Breakpoint"),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				nls.localize('addConditionalBreakpoint', "Add Conditional Breakpoint..."),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				nls.localize('addLogPoint', "Add Logpoint..."),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:				nls.localize('runToLine', "Run to Line"),
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:const debugIconBreakpointForeground = registerColor('debugIcon.breakpointForeground', { dark: '#E51400', light: '#E51400', hcDark: '#E51400', hcLight: '#E51400' }, nls.localize('debugIcon.breakpointForeground', 'Icon color for breakpoints.'));
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:const debugIconBreakpointDisabledForeground = registerColor('debugIcon.breakpointDisabledForeground', { dark: '#848484', light: '#848484', hcDark: '#848484', hcLight: '#848484' }, nls.localize('debugIcon.breakpointDisabledForeground', 'Icon color for disabled breakpoints.'));
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:const debugIconBreakpointUnverifiedForeground = registerColor('debugIcon.breakpointUnverifiedForeground', { dark: '#848484', light: '#848484', hcDark: '#848484', hcLight: '#848484' }, nls.localize('debugIcon.breakpointUnverifiedForeground', 'Icon color for unverified breakpoints.'));
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:const debugIconBreakpointCurrentStackframeForeground = registerColor('debugIcon.breakpointCurrentStackframeForeground', { dark: '#FFCC00', light: '#BE8700', hcDark: '#FFCC00', hcLight: '#BE8700' }, nls.localize('debugIcon.breakpointCurrentStackframeForeground', 'Icon color for the current breakpoint stack frame.'));
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:const debugIconBreakpointStackframeForeground = registerColor('debugIcon.breakpointStackframeForeground', { dark: '#89D185', light: '#89D185', hcDark: '#89D185', hcLight: '#89D185' }, nls.localize('debugIcon.breakpointStackframeForeground', 'Icon color for all breakpoint stack frames.'));
src/vs/workbench/contrib/debug/browser/baseDebugView.ts:		lazyButton.title = localize('debug.lazyButton.tooltip', "Click to expand");
src/vs/workbench/contrib/debug/browser/callStackEditorContribution.ts:export const topStackFrameColor = registerColor('editor.stackFrameHighlightBackground', { dark: '#ffff0033', light: '#ffff6673', hcDark: '#ffff0033', hcLight: '#ffff6673' }, localize('topStackFrameLineHighlight', 'Background color for the highlight of line at the top stack frame position.'));
src/vs/workbench/contrib/debug/browser/callStackEditorContribution.ts:export const focusedStackFrameColor = registerColor('editor.focusedStackFrameHighlightBackground', { dark: '#7abd7a4d', light: '#cee7ce73', hcDark: '#7abd7a4d', hcLight: '#cee7ce73' }, localize('focusedStackFrameLineHighlight', 'Background color for the highlight of line at focused stack frame position.'));
src/vs/workbench/contrib/debug/browser/callStackView.ts:				this.stateMessageLabel.textContent = localize({ key: 'running', comment: ['indicates state'] }, "Running");
src/vs/workbench/contrib/debug/browser/callStackView.ts:					return localize('showMoreStackFrames2', "Show More Stack Frames");
src/vs/workbench/contrib/debug/browser/callStackView.ts:		data.session.title = localize({ key: 'session', comment: ['Session is a noun'] }, "Session");
src/vs/workbench/contrib/debug/browser/callStackView.ts:			data.stateLabel.textContent = localize({ key: 'running', comment: ['indicates state'] }, "Running");
src/vs/workbench/contrib/debug/browser/callStackView.ts:			const action = new Action('debug.callStack.restartFrame', localize('restartFrame', "Restart Frame"), ThemeIcon.asClassName(icons.debugRestartFrame), true, async () => {
src/vs/workbench/contrib/debug/browser/callStackView.ts:	static readonly LABEL = localize('loadAllStackFrames', "Load More Stack Frames");
src/vs/workbench/contrib/debug/browser/callStackView.ts:			data.label.textContent = localize('showMoreAndOrigin', "Show {0} More: {1}", stackFrames.length, stackFrames[0].source.origin);
src/vs/workbench/contrib/debug/browser/callStackView.ts:			data.label.textContent = localize('showMoreStackFrames', "Show {0} More Stack Frames", stackFrames.length);
src/vs/workbench/contrib/debug/browser/callStackView.ts:		(stoppedDetails.reason ? localize({ key: 'pausedOn', comment: ['indicates reason for program being paused'] }, "Paused on {0}", stoppedDetails.reason) : localize('paused', "Paused"));
src/vs/workbench/contrib/debug/browser/callStackView.ts:		return localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'callStackAriaLabel' }, "Debug Call Stack");
src/vs/workbench/contrib/debug/browser/callStackView.ts:			return localize({ key: 'threadAriaLabel', comment: ['Placeholders stand for the thread name and the thread state.For example "Thread 1" and "Stopped'] }, "Thread {0} {1}", element.name, element.stateLabel);
src/vs/workbench/contrib/debug/browser/callStackView.ts:			return localize('stackFrameAriaLabel', "Stack Frame {0}, line {1}, {2}", element.name, element.range.startLineNumber, getSpecificSourceName(element));
src/vs/workbench/contrib/debug/browser/callStackView.ts:			const state = thread ? thread.stateLabel : localize({ key: 'running', comment: ['indicates state'] }, "Running");
src/vs/workbench/contrib/debug/browser/callStackView.ts:			return localize({ key: 'sessionLabel', comment: ['Placeholders stand for the session name and the session state. For example "Launch Program" and "Running"'] }, "Session {0} {1}", element.getLabel(), state);
src/vs/workbench/contrib/debug/browser/callStackView.ts:			return localize('showMoreStackFrames', "Show {0} More Stack Frames", element.length);
src/vs/workbench/contrib/debug/browser/callStackView.ts:			title: localize('collapse', "Collapse All"),
src/vs/workbench/contrib/debug/browser/breakpointWidget.ts:				return nls.localize('breakpointWidgetLogMessagePlaceholder', "Message to log when breakpoint is hit. Expressions within {} are interpolated. 'Enter' to accept, 'esc' to cancel.");
src/vs/workbench/contrib/debug/browser/breakpointWidget.ts:				return nls.localize('breakpointWidgetHitCountPlaceholder', "Break when hit count condition is met. 'Enter' to accept, 'esc' to cancel.");
src/vs/workbench/contrib/debug/browser/breakpointWidget.ts:				return nls.localize('breakpointWidgetExpressionPlaceholder', "Break when expression evaluates to true. 'Enter' to accept, 'esc' to cancel.");
src/vs/workbench/contrib/debug/browser/breakpointWidget.ts:		const selectBox = new SelectBox(<ISelectOptionItem[]>[{ text: nls.localize('expression', "Expression") }, { text: nls.localize('hitCount', "Hit Count") }, { text: nls.localize('logMessage', "Log Message") }], this.context, this.contextViewService, undefined, { ariaLabel: nls.localize('breakpointType', 'Breakpoint Type') });
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:		data.breakpoint.title = exceptionBreakpoint.verified ? (exceptionBreakpoint.description || data.name.textContent) : exceptionBreakpoint.message || localize('unverifiedExceptionBreakpoint', "Unverified Exception Breakpoint");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:		data.condition.title = localize('expressionCondition', "Expression condition: {0}", exceptionBreakpoint.condition);
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			data.condition.textContent = localize('expressionAndHitCount', "Expression: {0} | Hit Count: {1}", functionBreakpoint.condition, functionBreakpoint.hitCondition);
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			data.breakpoint.title = localize('functionBreakpointsNotSupported', "Function breakpoints are not supported by this debug type");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			data.breakpoint.title = localize('dataBreakpointsNotSupported', "Data breakpoints are not supported by this debug type");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			const accessType = dataBreakpoint.accessType === 'read' ? localize('read', "Read") : dataBreakpoint.accessType === 'write' ? localize('write', "Write") : localize('access', "Access");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:		let placeholder = localize('functionBreakpointPlaceholder', "Function to break on");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:		let ariaLabel = localize('functionBreakPointInputAriaLabel', "Type function breakpoint.");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			placeholder = localize('functionBreakpointExpressionPlaceholder', "Break when expression evaluates to true");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			ariaLabel = localize('functionBreakPointExpresionAriaLabel', "Type expression. Function breakpoint will break when expression evaluates to true");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			placeholder = localize('functionBreakpointHitCountPlaceholder', "Break when hit count is met");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			ariaLabel = localize('functionBreakPointHitCountAriaLabel', "Type hit count. Function breakpoint will break when hit count is met.");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			ariaLabel: localize('exceptionBreakpointAriaLabel', "Type exception breakpoint condition")
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:		const placeHolder = exceptionBreakpoint.conditionDescription || localize('exceptionBreakpointPlaceholder', "Break when expression evaluates to true");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:		return localize('breakpoints', "Breakpoints");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			message: breakpoint.logMessage ? localize('disabledLogpoint', "Disabled Logpoint") : localize('disabledBreakpoint', "Disabled Breakpoint"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			message: ('message' in breakpoint && breakpoint.message) ? breakpoint.message : (breakpoint.logMessage ? localize('unverifiedLogpoint', "Unverified Logpoint") : localize('unverifiedBreakpoint', "Unverified Breakpoint")),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				message: localize('dataBreakpointUnsupported', "Data breakpoints not supported by this debug type"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			message: breakpoint.message || localize('dataBreakpoint', "Data Breakpoint")
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				message: localize('functionBreakpointUnsupported', "Function breakpoints not supported by this debug type"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:		messages.push(breakpoint.message || localize('functionBreakpoint', "Function Breakpoint"));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('expression', "Expression condition: {0}", breakpoint.condition));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('hitCount', "Hit Count: {0}", breakpoint.hitCondition));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				message: localize('instructionBreakpointUnsupported', "Instruction breakpoints not supported by this debug type"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('instructionBreakpointAtAddress', "Instruction breakpoint at address {0}", breakpoint.instructionReference));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('instructionBreakpoint', "Instruction breakpoint"));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('hitCount', "Hit Count: {0}", breakpoint.hitCondition));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				message: localize('breakpointUnsupported', "Breakpoints of this type are not supported by the debugger"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('logMessage', "Log Message: {0}", breakpoint.logMessage));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('expression', "Expression condition: {0}", breakpoint.condition));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			messages.push(localize('hitCount', "Hit Count: {0}", breakpoint.hitCondition));
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:	const message = ('message' in breakpoint && breakpoint.message) ? breakpoint.message : breakpoint instanceof Breakpoint && labelService ? labelService.getUriLabel(breakpoint.uri) : localize('breakpoint', "Breakpoint");
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				value: localize('addFunctionBreakpoint', "Add Function Breakpoint"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				mnemonicTitle: localize({ key: 'miFunctionBreakpoint', comment: ['&& denotes a mnemonic'] }, "&&Function Breakpoint...")
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			title: { value: localize('activateBreakpoints', "Toggle Activate Breakpoints"), original: 'Toggle Activate Breakpoints' },
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			title: localize('removeBreakpoint', "Remove Breakpoint"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				value: localize('removeAllBreakpoints', "Remove All Breakpoints"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				mnemonicTitle: localize({ key: 'miRemoveAllBreakpoints', comment: ['&& denotes a mnemonic'] }, "Remove &&All Breakpoints")
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				value: localize('enableAllBreakpoints', "Enable All Breakpoints"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				mnemonicTitle: localize({ key: 'miEnableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, "&&Enable All Breakpoints"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				value: localize('disableAllBreakpoints', "Disable All Breakpoints"),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:				mnemonicTitle: localize({ key: 'miDisableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, "Disable A&&ll Breakpoints")
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			title: { value: localize('reapplyAllBreakpoints', "Reapply All Breakpoints"), original: 'Reapply All Breakpoints' },
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			title: localize('editCondition', "Edit Condition..."),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			const actions: Action[] = [new Action('breakpoint.editCondition', localize('editCondition', "Edit Condition..."), undefined, true, async () => view.renderInputBox({ breakpoint, type: 'condition' })),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			new Action('breakpoint.editCondition', localize('editHitCount', "Edit Hit Count..."), undefined, true, async () => view.renderInputBox({ breakpoint, type: 'hitCount' }))];
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			title: localize('editBreakpoint', "Edit Function Breakpoint..."),
src/vs/workbench/contrib/debug/browser/breakpointsView.ts:			title: localize('editHitCount', "Edit Hit Count..."),
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:						added.collector.error(nls.localize('debugNoType', "Debugger 'type' can not be omitted and must be of type 'string'."));
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:						description: nls.localize('debugName', "Name of configuration; appears in the launch configuration dropdown menu."),
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:						description: nls.localize('debugServer', "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode"),
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:						description: nls.localize('debugPrelaunchTask', "Task to run before debug session starts.")
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:						description: nls.localize('debugPostDebugTask', "Task to run after debug session ends.")
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:						description: nls.localize('suppressMultipleSessionWarning', "Disable the warning when trying to start the same debug configuration more than once."),
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:			const message = nls.localize('CouldNotFindLanguage', "You don't have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?", languageLabel);
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:			const buttonLabel = nls.localize('findExtension', "Find {0} extension", languageLabel);
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:			const showResult = await this.dialogService.show(Severity.Warning, message, [buttonLabel, nls.localize('cancel', "Cancel")], { cancelId: 1 });
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:				{ type: 'separator', label: nls.localize('suggestedDebuggers', "Suggested") },
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:			{ label: languageLabel ? nls.localize('installLanguage', "Install an extension for {0}...", languageLabel) : nls.localize('installExt', "Install extension...") });
src/vs/workbench/contrib/debug/browser/debugAdapterManager.ts:		const placeHolder = nls.localize('selectDebug', "Select debugger");
src/vs/workbench/contrib/debug/browser/debugActionViewItems.ts:		this.selectBox = new SelectBox([], -1, contextViewService, undefined, { ariaLabel: nls.localize('debugLaunchConfigurations', 'Debug Launch Configurations') });
src/vs/workbench/contrib/debug/browser/debugActionViewItems.ts:			this.debugOptions.push({ label: nls.localize('noConfigurations', "No Configurations"), handler: async () => false });
src/vs/workbench/contrib/debug/browser/debugActionViewItems.ts:			const label = inWorkspace ? nls.localize("addConfigTo", "Add Config ({0})...", l.name) : nls.localize('addConfiguration', "Add Configuration...");
src/vs/workbench/contrib/debug/browser/debugActionViewItems.ts:		super(null, action, [], -1, contextViewService, { ariaLabel: nls.localize('debugSession', 'Debug Session') });
src/vs/workbench/common/contextkeys.ts:export const WorkbenchStateContext = new RawContextKey<string>('workbenchState', undefined, { type: 'string', description: localize('workbenchState', "The kind of workspace opened in the window, either 'empty' (no workspace), 'folder' (single folder) or 'workspace' (multi-root workspace)") });
src/vs/workbench/common/contextkeys.ts:export const WorkspaceFolderCountContext = new RawContextKey<number>('workspaceFolderCount', 0, localize('workspaceFolderCount', "The number of root folders in the workspace"));
src/vs/workbench/common/contextkeys.ts:export const DirtyWorkingCopiesContext = new RawContextKey<boolean>('dirtyWorkingCopies', false, localize('dirtyWorkingCopies', "Whether there are any working copies with unsaved changes"));
src/vs/workbench/common/contextkeys.ts:export const RemoteNameContext = new RawContextKey<string>('remoteName', '', localize('remoteName', "The name of the remote the window is connected to or an empty string if not connected to any remote"));
src/vs/workbench/common/contextkeys.ts:export const VirtualWorkspaceContext = new RawContextKey<string>('virtualWorkspace', '', localize('virtualWorkspace', "The scheme of the current workspace is from a virtual file system or an empty string."));
src/vs/workbench/common/contextkeys.ts:export const TemporaryWorkspaceContext = new RawContextKey<boolean>('temporaryWorkspace', false, localize('temporaryWorkspace', "The scheme of the current workspace is from a temporary file system."));
src/vs/workbench/common/contextkeys.ts:export const IsFullscreenContext = new RawContextKey<boolean>('isFullscreen', false, localize('isFullscreen', "Whether the window is in fullscreen mode"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorDirtyContext = new RawContextKey<boolean>('activeEditorIsDirty', false, localize('activeEditorIsDirty', "Whether the active editor has unsaved changes"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorPinnedContext = new RawContextKey<boolean>('activeEditorIsNotPreview', false, localize('activeEditorIsNotPreview', "Whether the active editor is not in preview mode"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorFirstInGroupContext = new RawContextKey<boolean>('activeEditorIsFirstInGroup', false, localize('activeEditorIsFirstInGroup', "Whether the active editor is the first one in its group"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorLastInGroupContext = new RawContextKey<boolean>('activeEditorIsLastInGroup', false, localize('activeEditorIsLastInGroup', "Whether the active editor is the last one in its group"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorStickyContext = new RawContextKey<boolean>('activeEditorIsPinned', false, localize('activeEditorIsPinned', "Whether the active editor is pinned"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorReadonlyContext = new RawContextKey<boolean>('activeEditorIsReadonly', false, localize('activeEditorIsReadonly', "Whether the active editor is readonly"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorCanRevertContext = new RawContextKey<boolean>('activeEditorCanRevert', false, localize('activeEditorCanRevert', "Whether the active editor can revert"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorContext = new RawContextKey<string | null>('activeEditor', null, { type: 'string', description: localize('activeEditor', "The identifier of the active editor") });
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorAvailableEditorIdsContext = new RawContextKey<string>('activeEditorAvailableEditorIds', '', localize('activeEditorAvailableEditorIds', "The available editor identifiers that are usable for the active editor"));
src/vs/workbench/common/contextkeys.ts:export const TextCompareEditorVisibleContext = new RawContextKey<boolean>('textCompareEditorVisible', false, localize('textCompareEditorVisible', "Whether a text compare editor is visible"));
src/vs/workbench/common/contextkeys.ts:export const TextCompareEditorActiveContext = new RawContextKey<boolean>('textCompareEditorActive', false, localize('textCompareEditorActive', "Whether a text compare editor is active"));
src/vs/workbench/common/contextkeys.ts:export const SideBySideEditorActiveContext = new RawContextKey<boolean>('sideBySideEditorActive', false, localize('sideBySideEditorActive', "Whether a side by side editor is active"));
src/vs/workbench/common/contextkeys.ts:export const EditorGroupEditorsCountContext = new RawContextKey<number>('groupEditorsCount', 0, localize('groupEditorsCount', "The number of opened editor groups"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorGroupEmptyContext = new RawContextKey<boolean>('activeEditorGroupEmpty', false, localize('activeEditorGroupEmpty', "Whether the active editor group is empty"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorGroupIndexContext = new RawContextKey<number>('activeEditorGroupIndex', 0, localize('activeEditorGroupIndex', "The index of the active editor group"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorGroupLastContext = new RawContextKey<boolean>('activeEditorGroupLast', false, localize('activeEditorGroupLast', "Whether the active editor group is the last group"));
src/vs/workbench/common/contextkeys.ts:export const ActiveEditorGroupLockedContext = new RawContextKey<boolean>('activeEditorGroupLocked', false, localize('activeEditorGroupLocked', "Whether the active editor group is locked"));
src/vs/workbench/common/contextkeys.ts:export const MultipleEditorGroupsContext = new RawContextKey<boolean>('multipleEditorGroups', false, localize('multipleEditorGroups', "Whether there are multiple editor groups opened"));
src/vs/workbench/common/contextkeys.ts:export const EditorsVisibleContext = new RawContextKey<boolean>('editorIsOpen', false, localize('editorIsOpen', "Whether an editor is open"));
src/vs/workbench/common/contextkeys.ts:export const InEditorZenModeContext = new RawContextKey<boolean>('inZenMode', false, localize('inZenMode', "Whether Zen mode is enabled"));
src/vs/workbench/common/contextkeys.ts:export const IsCenteredLayoutContext = new RawContextKey<boolean>('isCenteredLayout', false, localize('isCenteredLayout', "Whether centered layout is enabled"));
src/vs/workbench/common/contextkeys.ts:export const SplitEditorsVertically = new RawContextKey<boolean>('splitEditorsVertically', false, localize('splitEditorsVertically', "Whether editors split vertically"));
src/vs/workbench/common/contextkeys.ts:export const EditorAreaVisibleContext = new RawContextKey<boolean>('editorAreaVisible', true, localize('editorAreaVisible', "Whether the editor area is visible"));
src/vs/workbench/common/contextkeys.ts:export const EditorTabsVisibleContext = new RawContextKey<boolean>('editorTabsVisible', true, localize('editorTabsVisible', "Whether editor tabs are visible"));
src/vs/workbench/common/contextkeys.ts:export const SideBarVisibleContext = new RawContextKey<boolean>('sideBarVisible', false, localize('sideBarVisible', "Whether the sidebar is visible"));
src/vs/workbench/common/contextkeys.ts:export const SidebarFocusContext = new RawContextKey<boolean>('sideBarFocus', false, localize('sideBarFocus', "Whether the sidebar has keyboard focus"));
src/vs/workbench/common/contextkeys.ts:export const ActiveViewletContext = new RawContextKey<string>('activeViewlet', '', localize('activeViewlet', "The identifier of the active viewlet"));
src/vs/workbench/common/contextkeys.ts:export const StatusBarFocused = new RawContextKey<boolean>('statusBarFocused', false, localize('statusBarFocused', "Whether the status bar has keyboard focus"));
src/vs/workbench/common/contextkeys.ts:export const BannerFocused = new RawContextKey<boolean>('bannerFocused', false, localize('bannerFocused', "Whether the banner has keyboard focus"));
src/vs/workbench/common/contextkeys.ts:export const NotificationFocusedContext = new RawContextKey<boolean>('notificationFocus', true, localize('notificationFocus', "Whether a notification has keyboard focus"));
src/vs/workbench/common/contextkeys.ts:export const NotificationsCenterVisibleContext = new RawContextKey<boolean>('notificationCenterVisible', false, localize('notificationCenterVisible', "Whether the notifications center is visible"));
src/vs/workbench/common/contextkeys.ts:export const NotificationsToastsVisibleContext = new RawContextKey<boolean>('notificationToastsVisible', false, localize('notificationToastsVisible', "Whether a notification toast is visible"));
src/vs/workbench/common/contextkeys.ts:export const ActiveAuxiliaryContext = new RawContextKey<string>('activeAuxiliary', '', localize('activeAuxiliary', "The identifier of the active auxiliary panel"));
src/vs/workbench/common/contextkeys.ts:export const AuxiliaryBarFocusContext = new RawContextKey<boolean>('auxiliaryBarFocus', false, localize('auxiliaryBarFocus', "Whether the auxiliary bar has keyboard focus"));
src/vs/workbench/common/contextkeys.ts:export const AuxiliaryBarVisibleContext = new RawContextKey<boolean>('auxiliaryBarVisible', false, localize('auxiliaryBarVisible', "Whether the auxiliary bar is visible"));
src/vs/workbench/common/contextkeys.ts:export const ActivePanelContext = new RawContextKey<string>('activePanel', '', localize('activePanel', "The identifier of the active panel"));
src/vs/workbench/common/contextkeys.ts:export const PanelFocusContext = new RawContextKey<boolean>('panelFocus', false, localize('panelFocus', "Whether the panel has keyboard focus"));
src/vs/workbench/common/contextkeys.ts:export const PanelPositionContext = new RawContextKey<string>('panelPosition', 'bottom', localize('panelPosition', "The position of the panel, always 'bottom'"));
src/vs/workbench/common/contextkeys.ts:export const PanelAlignmentContext = new RawContextKey<string>('panelAlignment', 'center', localize('panelAlignment', "The alignment of the panel, either 'center', 'left', 'right' or 'justify'"));
src/vs/workbench/common/contextkeys.ts:export const PanelVisibleContext = new RawContextKey<boolean>('panelVisible', false, localize('panelVisible', "Whether the panel is visible"));
src/vs/workbench/common/contextkeys.ts:export const PanelMaximizedContext = new RawContextKey<boolean>('panelMaximized', false, localize('panelMaximized', "Whether the panel is maximized"));
src/vs/workbench/common/contextkeys.ts:export const FocusedViewContext = new RawContextKey<string>('focusedView', '', localize('focusedView', "The identifier of the view that has keyboard focus"));
src/vs/workbench/common/contextkeys.ts:	static readonly Scheme = new RawContextKey<string>('resourceScheme', undefined, { type: 'string', description: localize('resourceScheme', "The scheme of the resource") });
src/vs/workbench/common/contextkeys.ts:	static readonly Filename = new RawContextKey<string>('resourceFilename', undefined, { type: 'string', description: localize('resourceFilename', "The file name of the resource") });
src/vs/workbench/common/contextkeys.ts:	static readonly Dirname = new RawContextKey<string>('resourceDirname', undefined, { type: 'string', description: localize('resourceDirname', "The folder name the resource is contained in") });
src/vs/workbench/common/contextkeys.ts:	static readonly Path = new RawContextKey<string>('resourcePath', undefined, { type: 'string', description: localize('resourcePath', "The full path of the resource") });
src/vs/workbench/common/contextkeys.ts:	static readonly LangId = new RawContextKey<string>('resourceLangId', undefined, { type: 'string', description: localize('resourceLangId', "The language identifier of the resource") });
src/vs/workbench/common/contextkeys.ts:	static readonly Resource = new RawContextKey<string>('resource', undefined, { type: 'URI', description: localize('resource', "The full value of the resource including scheme and path") });
src/vs/workbench/common/contextkeys.ts:	static readonly Extension = new RawContextKey<string>('resourceExtname', undefined, { type: 'string', description: localize('resourceExtname', "The extension name of the resource") });
src/vs/workbench/common/contextkeys.ts:	static readonly HasResource = new RawContextKey<boolean>('resourceSet', undefined, { type: 'boolean', description: localize('resourceSet', "Whether a resource is present or not") });
src/vs/workbench/common/contextkeys.ts:	static readonly IsFileSystemResource = new RawContextKey<boolean>('isFileSystemResource', undefined, { type: 'boolean', description: localize('isFileSystemResource', "Whether the resource is backed by a file system provider") });
src/vs/workbench/contrib/comments/common/commentModel.ts:			return localize('noComments', "There are no comments in this workspace yet.");
src/vs/workbench/common/configuration.ts:	'title': localize('workbenchConfigurationTitle', "Workbench"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:			title: localize('focusCommentsList', "Focus Comments view"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:			title: localize('commentsClearFilterText', "Clear filter text"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:			title: localize('focusCommentsFilter', "Focus comments filter"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:			title: localize('toggle unresolved', "Toggle Unresolved Comments"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:			category: localize('comments', "Comments"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:				title: localize('unresolved', "Show Unresolved"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:			title: localize('toggle resolved', "Toggle Resolved Comments"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:			category: localize('comments', "Comments"),
src/vs/workbench/contrib/comments/browser/commentsViewActions.ts:				title: localize('resolved', "Show Resolved"),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:	description: nls.localize('hasCommentingRange', "Whether the position at the active cursor has a commenting range"),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:	description: nls.localize('hasCommentingProvider', "Whether the open workspace has either comments or commenting ranges."),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:				return this.quickInputService.pick(picks, { placeHolder: nls.localize('pickCommentService', "Select Comment Provider"), matchOnDescription: true }).then(pick => {
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:			label: nls.localize('nextCommentThreadAction', "Go to Next Comment Thread"),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:			label: nls.localize('previousCommentThreadAction', "Go to Previous Comment Thread"),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:		title: nls.localize('comments.toggleCommenting', "Toggle Editor Commenting"),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:		title: nls.localize('comments.addCommand', "Add Comment on Current Selection"),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:		title: nls.localize('comments.collapseAll', "Collapse All Comments"),
src/vs/workbench/contrib/comments/browser/commentsEditorContribution.ts:		title: nls.localize('comments.expandAll', "Expand All Comments"),
src/vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint.ts:	markdownDescription: nls.localize('contributes.codeActions', "Configure which editor to use for a resource."),
src/vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint.ts:				description: nls.localize('contributes.codeActions.languages', "Language modes that the code actions are enabled for."),
src/vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint.ts:						markdownDescription: nls.localize('contributes.codeActions.kind', "`CodeActionKind` of the contributed code action."),
src/vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint.ts:						description: nls.localize('contributes.codeActions.title', "Label for the code action used in the UI."),
src/vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint.ts:						description: nls.localize('contributes.codeActions.description', "Description of what the code action does."),
src/vs/workbench/contrib/comments/browser/comments.contribution.ts:	title: nls.localize('commentsConfigurationTitle', "Comments"),
src/vs/workbench/contrib/comments/browser/comments.contribution.ts:			description: nls.localize('openComments', "Controls when the comments panel should open."),
src/vs/workbench/contrib/comments/browser/comments.contribution.ts:			markdownDeprecationMessage: nls.localize('comments.openPanel.deprecated', "This setting is deprecated in favor of `comments.openView`.")
src/vs/workbench/contrib/comments/browser/comments.contribution.ts:			enumDescriptions: [nls.localize('comments.openView.never', "The comments view will never be opened."), nls.localize('comments.openView.file', "The comments view will open when a file with comments is active."), nls.localize('comments.openView.firstFile', "If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active.")],
src/vs/workbench/contrib/comments/browser/comments.contribution.ts:			description: nls.localize('comments.openView', "Controls when the comments view should open."),
src/vs/workbench/contrib/comments/browser/comments.contribution.ts:			description: nls.localize('useRelativeTime', "Determines if relative time will be used in comment timestamps (ex. '1 day ago').")
src/vs/workbench/contrib/codeActions/browser/codeActionsContribution.ts:		description: nls.localize('codeActionsOnSave.fixAll', "Controls whether auto fix action should be run on file save.")
src/vs/workbench/contrib/codeActions/browser/codeActionsContribution.ts:	description: nls.localize('codeActionsOnSave', "Code action kinds to be run on save."),
src/vs/workbench/contrib/codeActions/browser/codeActionsContribution.ts:				description: nls.localize('codeActionsOnSave.generic', "Controls whether '{0}' actions should be run on file save.", props.title)
src/vs/workbench/contrib/comments/browser/reactionsAction.ts:		super(ToggleReactionsAction.ID, title || nls.localize('pickReactions', "Pick Reactions..."), 'toggle-reactions', true);
src/vs/workbench/contrib/comments/browser/commentsView.ts:				placeholder: nls.localize('comments.filter.placeholder', "Filter (e.g. text, author)"),
src/vs/workbench/contrib/comments/browser/commentsView.ts:				ariaLabel: nls.localize('comments.filter.ariaLabel', "Filter comments"),
src/vs/workbench/contrib/comments/browser/commentsView.ts:		this.filterWidget.updateBadge(total === filtered || total === 0 ? undefined : nls.localize('showing filtered results', "Showing {0} of {1}", filtered, total));
src/vs/workbench/contrib/comments/browser/commentsView.ts:						return nls.localize('rootCommentsLabel', "Comments for current workspace");
src/vs/workbench/contrib/comments/browser/commentsView.ts:						return nls.localize('resourceWithCommentThreadsLabel', "Comments in {0}, full path {1}", basename(element.resource), element.resource.fsPath);
src/vs/workbench/contrib/comments/browser/commentsView.ts:						return nls.localize('resourceWithCommentLabel',
src/vs/workbench/contrib/comments/browser/commentsView.ts:			title: nls.localize('collapseAll', "Collapse All"),
src/vs/workbench/contrib/comments/browser/commentsTreeViewer.ts:export const COMMENTS_VIEW_TITLE = nls.localize('comments.view.title', "Comments");
src/vs/workbench/contrib/comments/browser/commentsTreeViewer.ts:			return nls.localize('commentsCount', "{0} comments", commentCount);
src/vs/workbench/contrib/comments/browser/commentsTreeViewer.ts:			return nls.localize('commentCount', "1 comment");
src/vs/workbench/contrib/comments/browser/commentsTreeViewer.ts:			textDescription.textContent = image.alt ? nls.localize('imageWithLabel', "Image: {0}", image.alt) : nls.localize('image', "Image");
src/vs/workbench/contrib/comments/browser/commentsTreeViewer.ts:			templateData.threadMetadata.range.textContent = nls.localize('commentLine', "[Ln {0}]", node.element.range.startLineNumber);
src/vs/workbench/contrib/comments/browser/commentsTreeViewer.ts:			templateData.threadMetadata.range.textContent = nls.localize('commentRange', "[Ln {0}-{1}]", node.element.range.startLineNumber, node.element.range.endLineNumber);
src/vs/workbench/contrib/comments/browser/commentsTreeViewer.ts:		templateData.repliesMetadata.lastReplyDetail.textContent = nls.localize('lastReplyFrom', "Last reply from {0}", lastComment.userName);
src/vs/workbench/contrib/codeActions/common/documentationExtensionPoint.ts:	description: nls.localize('contributes.documentation', "Contributed documentation."),
src/vs/workbench/contrib/codeActions/common/documentationExtensionPoint.ts:			description: nls.localize('contributes.documentation.refactorings', "Contributed documentation for refactorings."),
src/vs/workbench/contrib/codeActions/common/documentationExtensionPoint.ts:				description: nls.localize('contributes.documentation.refactoring', "Contributed documentation for refactoring."),
src/vs/workbench/contrib/codeActions/common/documentationExtensionPoint.ts:						description: nls.localize('contributes.documentation.refactoring.title', "Label for the documentation used in the UI."),
src/vs/workbench/contrib/codeActions/common/documentationExtensionPoint.ts:						description: nls.localize('contributes.documentation.refactoring.when', "When clause."),
src/vs/workbench/contrib/codeActions/common/documentationExtensionPoint.ts:						description: nls.localize('contributes.documentation.refactoring.command', "Command executed."),
src/vs/workbench/contrib/codeEditor/electron-sandbox/startDebugTextMate.ts:			title: { value: nls.localize('startDebugTextMate', "Start Text Mate Syntax Grammar Logging"), original: 'Start Text Mate Syntax Grammar Logging' },
src/vs/workbench/contrib/codeEditor/browser/untitledTextEditorHint.ts:			const hintMsg = localize({ key: 'message', comment: ['Presereve double-square brackets and their order'] }, '[[Select a language]], or [[open a different editor]] to get started.\nStart typing to dismiss or [[don\'t show]] this again.');
src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.ts:			label: nls.localize('inspectEditorTokens', "Developer: Inspect Editor Tokens and Scopes"),
src/vs/workbench/contrib/codeEditor/browser/inspectEditorTokens/inspectEditorTokens.ts:		this._domNode.appendChild(document.createTextNode(nls.localize('inspectTMScopesWidget.loading', "Loading...")));
src/vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace.ts:				value: localize('toggleRenderWhitespace', "Toggle Render Whitespace"),
src/vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace.ts:				mnemonicTitle: localize({ key: 'miToggleRenderWhitespace', comment: ['&& denotes a mnemonic'] }, "&&Render Whitespace"),
src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts:			title: { value: localize('toggleLocation', "Toggle Multi-Cursor Modifier"), original: 'Toggle Multi-Cursor Modifier' },
src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts:		title: localize('miMultiCursorAlt', "Switch to Alt+Click for Multi-Cursor")
src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts:				? localize('miMultiCursorCmd', "Switch to Cmd+Click for Multi-Cursor")
src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts:				: localize('miMultiCursorCtrl', "Switch to Ctrl+Click for Multi-Cursor")
src/vs/workbench/contrib/codeEditor/browser/toggleMinimap.ts:				value: localize('toggleMinimap', "Toggle Minimap"),
src/vs/workbench/contrib/codeEditor/browser/toggleMinimap.ts:				mnemonicTitle: localize({ key: 'miMinimap', comment: ['&& denotes a mnemonic'] }, "&&Minimap")
src/vs/workbench/contrib/codeEditor/browser/toggleColumnSelection.ts:				value: localize('toggleColumnSelection', "Toggle Column Selection Mode"),
src/vs/workbench/contrib/codeEditor/browser/toggleColumnSelection.ts:				mnemonicTitle: localize({ key: 'miColumnSelection', comment: ['&& denotes a mnemonic'] }, "Column &&Selection Mode"),
src/vs/workbench/contrib/codeEditor/browser/inspectKeybindings.ts:			title: { value: localize('workbench.action.inspectKeyMap', "Inspect Key Mappings"), original: 'Inspect Key Mappings' },
src/vs/workbench/contrib/codeEditor/browser/inspectKeybindings.ts:			title: { value: localize('workbench.action.inspectKeyMapJSON', "Inspect Key Mappings (JSON)"), original: 'Inspect Key Mappings (JSON)' },
src/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts:				message: localize(
src/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts:		progress.report({ message: localize('codeaction', "Quick Fixes") });
src/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts:					message: localize(
src/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts:					progress.report({ message: localize('codeAction.apply', "Applying code action '{0}'.", action.action.title) });
src/vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.ts:				value: localize('toggleRenderControlCharacters', "Toggle Control Characters"),
src/vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.ts:				mnemonicTitle: localize({ key: 'miToggleRenderControlCharacters', comment: ['&& denotes a mnemonic'] }, "Render &&Control Characters"),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:				console.error(nls.localize('parseErrors', "Errors parsing {0}: {1}", configFileLocation.toString(), errors.map(e => (`[${e.offset}, ${e.length}] ${getParseErrorMessage(e.error)}`)).join('\n')));
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:				console.error(nls.localize('formatError', "{0}: Invalid format, JSON object expected.", configFileLocation.toString()));
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.comments', 'Defines the comment symbols'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.blockComments', 'Defines how block comments are marked.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:						description: nls.localize('schema.blockComment.begin', 'The character sequence that starts a block comment.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:						description: nls.localize('schema.blockComment.end', 'The character sequence that ends a block comment.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.lineComment', 'The character sequence that starts a line comment.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.autoClosingPairs', 'Defines the bracket pairs. When a opening bracket is entered, the closing bracket is inserted automatically.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.autoClosingPairs.notIn', 'Defines a list of scopes where the auto pairs are disabled.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.autoCloseBefore', 'Defines what characters must be after the cursor in order for bracket or quote autoclosing to occur when using the \'languageDefined\' autoclosing setting. This is typically the set of characters which can not start an expression.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.surroundingPairs', 'Defines the bracket pairs that can be used to surround a selected string.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.wordPattern', 'Defines what is considered to be a word in the programming language.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.wordPattern.pattern', 'The RegExp pattern used to match words.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.wordPattern.flags', 'The RegExp flags used to match words.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					patternErrorMessage: nls.localize('schema.wordPattern.flags.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.indentationRules', 'The language\'s indentation settings.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.indentationRules.increaseIndentPattern', 'If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.increaseIndentPattern.pattern', 'The RegExp pattern for increaseIndentPattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.increaseIndentPattern.flags', 'The RegExp flags for increaseIndentPattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							patternErrorMessage: nls.localize('schema.indentationRules.increaseIndentPattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.indentationRules.decreaseIndentPattern', 'If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.decreaseIndentPattern.pattern', 'The RegExp pattern for decreaseIndentPattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.decreaseIndentPattern.flags', 'The RegExp flags for decreaseIndentPattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							patternErrorMessage: nls.localize('schema.indentationRules.decreaseIndentPattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.indentationRules.indentNextLinePattern', 'If a line matches this pattern, then **only the next line** after it should be indented once.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.indentNextLinePattern.pattern', 'The RegExp pattern for indentNextLinePattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.indentNextLinePattern.flags', 'The RegExp flags for indentNextLinePattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							patternErrorMessage: nls.localize('schema.indentationRules.indentNextLinePattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.indentationRules.unIndentedLinePattern', 'If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.unIndentedLinePattern.pattern', 'The RegExp pattern for unIndentedLinePattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.indentationRules.unIndentedLinePattern.flags', 'The RegExp flags for unIndentedLinePattern.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							patternErrorMessage: nls.localize('schema.indentationRules.unIndentedLinePattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.folding', 'The language\'s folding settings.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.folding.offSide', 'A language adheres to the off-side rule if blocks in that language are expressed by their indentation. If set, empty lines belong to the subsequent block.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:					description: nls.localize('schema.folding.markers', 'Language specific folding markers such as \'#region\' and \'#endregion\'. The start and end regexes will be tested against the contents of all lines and must be designed efficiently'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.folding.markers.start', 'The RegExp pattern for the start marker. The regexp must start with \'^\'.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:							description: nls.localize('schema.folding.markers.end', 'The RegExp pattern for the end marker. The regexp must start with \'^\'.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:			description: nls.localize('schema.onEnterRules', 'The language\'s rules to be evaluated when pressing Enter.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:				description: nls.localize('schema.onEnterRules', 'The language\'s rules to be evaluated when pressing Enter.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:						description: nls.localize('schema.onEnterRules.beforeText', 'This rule will only execute if the text before the cursor matches this regular expression.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.beforeText.pattern', 'The RegExp pattern for beforeText.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.beforeText.flags', 'The RegExp flags for beforeText.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								patternErrorMessage: nls.localize('schema.onEnterRules.beforeText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:						description: nls.localize('schema.onEnterRules.afterText', 'This rule will only execute if the text after the cursor matches this regular expression.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.afterText.pattern', 'The RegExp pattern for afterText.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.afterText.flags', 'The RegExp flags for afterText.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								patternErrorMessage: nls.localize('schema.onEnterRules.afterText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:						description: nls.localize('schema.onEnterRules.previousLineText', 'This rule will only execute if the text above the line matches this regular expression.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.previousLineText.pattern', 'The RegExp pattern for previousLineText.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.previousLineText.flags', 'The RegExp flags for previousLineText.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								patternErrorMessage: nls.localize('schema.onEnterRules.previousLineText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:						description: nls.localize('schema.onEnterRules.action', 'The action to execute.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.action.indent', "Describe what to do with the indentation"),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:									nls.localize('schema.onEnterRules.action.indent.none', "Insert new line and copy the previous line's indentation."),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:									nls.localize('schema.onEnterRules.action.indent.indent', "Insert new line and indent once (relative to the previous line's indentation)."),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:									nls.localize('schema.onEnterRules.action.indent.indentOutdent', "Insert two new lines:\n - the first one indented which will hold the cursor\n - the second one at the same indentation level"),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:									nls.localize('schema.onEnterRules.action.indent.outdent', "Insert new line and outdent once (relative to the previous line's indentation).")
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.action.appendText', 'Describes text to be appended after the new line and after the indentation.'),
src/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts:								description: nls.localize('schema.onEnterRules.action.removeText', 'Describes the number of characters to remove from the new line\'s indentation.'),
src/vs/workbench/contrib/codeEditor/electron-sandbox/selectionClipboard.ts:			label: nls.localize('actions.pasteSelectionClipboard', "Paste Selection Clipboard"),
src/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts:const EDITOR_WORD_WRAP = new RawContextKey<boolean>('editorWordWrap', false, nls.localize('editorWordWrap', 'Whether the editor is currently using word wrapping.'));
src/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts:			label: nls.localize('toggle.wordwrap', "View: Toggle Word Wrap"),
src/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts:		title: nls.localize('unwrapMinified', "Disable wrapping for this file"),
src/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts:		title: nls.localize('wrapMinified', "Enable wrapping for this file"),
src/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.ts:		title: nls.localize({ key: 'miToggleWordWrap', comment: ['&& denotes a mnemonic'] }, "&&Word Wrap"),
src/vs/workbench/contrib/codeEditor/browser/diffEditorHelper.ts:						nls.localize('hintTimeout', "The diff algorithm was stopped early (after {0} ms.)", this._diffEditor.maxComputationTime),
src/vs/workbench/contrib/codeEditor/browser/diffEditorHelper.ts:							label: nls.localize('removeTimeout', "Remove Limit"),
src/vs/workbench/contrib/codeEditor/browser/diffEditorHelper.ts:			this._helperWidget = this._instantiationService.createInstance(FloatingClickWidget, this._diffEditor.getModifiedEditor(), nls.localize('hintWhitespace', "Show Whitespace Differences"), null);
src/vs/workbench/contrib/codeEditor/browser/largeFileOptimizations.ts:				const message = nls.localize(
src/vs/workbench/contrib/codeEditor/browser/largeFileOptimizations.ts:						label: nls.localize('removeOptimizations', "Forcefully Enable Features"),
src/vs/workbench/contrib/codeEditor/browser/largeFileOptimizations.ts:								this._notificationService.info(nls.localize('reopenFilePrompt', "Please reopen file in order for this setting to take effect."));
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess.ts:					const label = localize('empty', 'No matching entries');
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess.ts:				value: localize('gotoSymbol', "Go to Symbol in Editor..."),
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess.ts:				mnemonicTitle: localize({ key: 'miGotoSymbolInEditor', comment: ['&& denotes a mnemonic'] }, "Go to &&Symbol in Editor..."),
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess.ts:	placeholder: localize('gotoSymbolQuickAccessPlaceholder', "Type the name of a symbol to go to."),
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess.ts:		{ description: localize('gotoSymbolQuickAccess', "Go to Symbol in Editor"), prefix: AbstractGotoSymbolQuickAccessProvider.PREFIX, commandId: GotoSymbolAction.ID },
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess.ts:		{ description: localize('gotoSymbolByCategoryQuickAccess', "Go to Symbol in Editor by Category"), prefix: AbstractGotoSymbolQuickAccessProvider.PREFIX_BY_CATEGORY }
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsOutline.ts:			accessibilityProvider: new DocumentSymbolAccessibilityProvider(localize('document', "Document Symbols")),
src/vs/workbench/contrib/comments/browser/commentReply.ts:					? (this._commentOptions?.placeHolder || nls.localize('reply', "Reply..."))
src/vs/workbench/contrib/comments/browser/commentReply.ts:					: (this._commentOptions?.placeHolder || nls.localize('newComment', "Type a new comment"));
src/vs/workbench/contrib/comments/browser/commentReply.ts:		this._reviewThreadReplyButton.title = this._commentOptions?.prompt || nls.localize('reply', "Reply...");
src/vs/workbench/contrib/comments/browser/commentReply.ts:		this._reviewThreadReplyButton.textContent = this._commentOptions?.prompt || nls.localize('reply', "Reply...");
src/vs/workbench/contrib/comments/browser/commentNode.ts:		}, nls.localize('commentToggleReaction', "Toggle Reaction")));
src/vs/workbench/contrib/comments/browser/commentNode.ts:							? nls.localize('commentToggleReactionError', "Toggling the comment reaction failed: {0}.", e.message)
src/vs/workbench/contrib/comments/browser/commentNode.ts:							: nls.localize('commentToggleReactionDefaultError', "Toggling the comment reaction failed");
src/vs/workbench/contrib/comments/browser/commentNode.ts:							? nls.localize('commentDeleteReactionError', "Deleting the comment reaction failed: {0}.", e.message)
src/vs/workbench/contrib/comments/browser/commentNode.ts:							: nls.localize('commentDeleteReactionDefaultError', "Deleting the comment reaction failed");
src/vs/workbench/contrib/comments/browser/commentNode.ts:							? nls.localize('commentAddReactionError', "Deleting the comment reaction failed: {0}.", e.message)
src/vs/workbench/contrib/comments/browser/commentNode.ts:							: nls.localize('commentAddReactionDefaultError', "Deleting the comment reaction failed");
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:const NLS_FIND_INPUT_LABEL = nls.localize('label.find', "Find");
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:const NLS_FIND_INPUT_PLACEHOLDER = nls.localize('placeholder.find', "Find (\u21C5 for history)");
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:const NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('label.previousMatchButton', "Previous Match");
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:const NLS_NEXT_MATCH_BTN_LABEL = nls.localize('label.nextMatchButton', "Next Match");
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:const NLS_CLOSE_BTN_LABEL = nls.localize('label.closeButton', "Close");
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:			return nls.localize('ariaSearchNoInput', "Enter search input");
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:				? nls.localize('ariaSearchNoResultEmpty', "{0} found", label)
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:				: nls.localize('ariaSearchNoResult', "{0} found for '{1}'", label, searchString);
src/vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget.ts:		return nls.localize('ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString);
src/vs/workbench/contrib/comments/browser/commentColors.ts:const resolvedCommentBorder = registerColor('editorCommentsWidget.resolvedBorder', { dark: disabledForeground, light: disabledForeground, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('resolvedCommentBorder', 'Color of borders and arrow for resolved comments.'));
src/vs/workbench/contrib/comments/browser/commentColors.ts:const unresolvedCommentBorder = registerColor('editorCommentsWidget.unresolvedBorder', { dark: peekViewBorder, light: peekViewBorder, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('unresolvedCommentBorder', 'Color of borders and arrow for unresolved comments.'));
src/vs/workbench/contrib/comments/browser/commentColors.ts:export const commentThreadRangeBackground = registerColor('editorCommentsWidget.rangeBackground', { dark: transparent(unresolvedCommentBorder, .1), light: transparent(unresolvedCommentBorder, .1), hcDark: transparent(unresolvedCommentBorder, .1), hcLight: transparent(unresolvedCommentBorder, .1) }, nls.localize('commentThreadRangeBackground', 'Color of background for comment ranges.'));
src/vs/workbench/contrib/comments/browser/commentColors.ts:export const commentThreadRangeBorder = registerColor('editorCommentsWidget.rangeBorder', { dark: transparent(unresolvedCommentBorder, .4), light: transparent(unresolvedCommentBorder, .4), hcDark: transparent(unresolvedCommentBorder, .4), hcLight: transparent(unresolvedCommentBorder, .4) }, nls.localize('commentThreadRangeBorder', 'Color of border for comment ranges.'));
src/vs/workbench/contrib/comments/browser/commentColors.ts:export const commentThreadRangeActiveBackground = registerColor('editorCommentsWidget.rangeActiveBackground', { dark: transparent(unresolvedCommentBorder, .1), light: transparent(unresolvedCommentBorder, .1), hcDark: transparent(unresolvedCommentBorder, .1), hcLight: transparent(unresolvedCommentBorder, .1) }, nls.localize('commentThreadActiveRangeBackground', 'Color of background for currently selected or hovered comment range.'));
src/vs/workbench/contrib/comments/browser/commentColors.ts:export const commentThreadRangeActiveBorder = registerColor('editorCommentsWidget.rangeActiveBorder', { dark: transparent(unresolvedCommentBorder, .4), light: transparent(unresolvedCommentBorder, .4), hcDark: transparent(unresolvedCommentBorder, .4), hcLight: transparent(unresolvedCommentBorder, .2) }, nls.localize('commentThreadActiveRangeBorder', 'Color of border for currently selected or hovered comment range.'));
src/vs/workbench/contrib/comments/browser/commentThreadHeader.ts:const collapseIcon = registerIcon('review-comment-collapse', Codicon.chevronUp, nls.localize('collapseIcon', 'Icon to collapse a review comment.'));
src/vs/workbench/contrib/comments/browser/commentThreadHeader.ts:		this._collapseAction = new Action('review.expand', nls.localize('label.collapse', "Collapse"), COLLAPSE_ACTION_CLASS, true, () => this._delegate.collapse());
src/vs/workbench/contrib/comments/browser/commentThreadHeader.ts:				label = nls.localize('startThread', "Start discussion");
src/vs/workbench/contrib/comments/browser/commentThreadBody.ts:			this._commentsElement.ariaLabel = nls.localize('commentThreadAria.withRange', "Comment thread with {0} comments on lines {1} through {2}. {3}.",
src/vs/workbench/contrib/comments/browser/commentThreadBody.ts:			this._commentsElement.ariaLabel = nls.localize('commentThreadAria', "Comment thread with {0} comments. {1}.",
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:			title: localize('title.template', "{0} ({1})", element.symbol.name, DocumentSymbolRenderer._symbolKindNames[element.symbol.kind])
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:			template.decoration.title = count === 1 ? localize('1.problem', "1 problem in this element") : localize('N.problem', "{0} problems in this element", count);
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:			template.decoration.title = localize('deep.problem', "Contains elements with problems");
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Array]: localize('Array', "array"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Boolean]: localize('Boolean', "boolean"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Class]: localize('Class', "class"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Constant]: localize('Constant', "constant"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Constructor]: localize('Constructor', "constructor"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Enum]: localize('Enum', "enumeration"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.EnumMember]: localize('EnumMember', "enumeration member"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Event]: localize('Event', "event"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Field]: localize('Field', "field"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.File]: localize('File', "file"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Function]: localize('Function', "function"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Interface]: localize('Interface', "interface"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Key]: localize('Key', "key"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Method]: localize('Method', "method"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Module]: localize('Module', "module"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Namespace]: localize('Namespace', "namespace"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Null]: localize('Null', "null"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Number]: localize('Number', "number"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Object]: localize('Object', "object"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Operator]: localize('Operator', "operator"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Package]: localize('Package', "package"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Property]: localize('Property', "property"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.String]: localize('String', "string"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Struct]: localize('Struct', "struct"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.TypeParameter]: localize('TypeParameter', "type parameter"),
src/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsTree.ts:		[SymbolKind.Variable]: localize('Variable', "variable"),
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts:			? localize('callFrom', "Calls from '{0}'", element.model.root.name)
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts:			: localize('callsTo', "Callers of '{0}'", element.model.root.name);
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts:		this.setTitle(localize('title.loading', "Loading..."));
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts:				? localize('empt.callsFrom', "No calls from '{0}'", model.root.name)
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyPeek.ts:				: localize('empt.callsTo', "No callers of '{0}'", model.root.name));
src/vs/workbench/contrib/comments/browser/commentGlyphWidget.ts:export const overviewRulerCommentingRangeForeground = registerColor('editorGutter.commentRangeForeground', { dark: listInactiveSelectionBackground, light: darken(listInactiveSelectionBackground, .05), hcDark: Color.white, hcLight: Color.black }, nls.localize('editorGutterCommentRangeForeground', 'Editor gutter decoration color for commenting ranges.'));
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				alert(nls.localize('emergencyConfOn', "Now changing the setting `editor.accessibilitySupport` to 'on'."));
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				alert(nls.localize('openingDocs', "Now opening the VS Code Accessibility documentation page."));
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:		let text = nls.localize('introMsg', "Thank you for trying out VS Code's accessibility options.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:		text += '\n\n' + nls.localize('status', "Status:");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				? nls.localize('changeConfigToOnMac', "To configure the editor to be permanently optimized for usage with a Screen Reader press Command+E now.")
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				: nls.localize('changeConfigToOnWinLinux', "To configure the editor to be permanently optimized for usage with a Screen Reader press Control+E now.")
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:						text += '\n\n - ' + nls.localize('auto_unknown', "The editor is configured to use platform APIs to detect when a Screen Reader is attached, but the current runtime does not support this.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:						text += '\n\n - ' + nls.localize('auto_on', "The editor has automatically detected a Screen Reader is attached.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:						text += '\n\n - ' + nls.localize('auto_off', "The editor is configured to automatically detect when a Screen Reader is attached, which is not the case at this time.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				text += '\n\n - ' + nls.localize('configuredOn', "The editor is configured to be permanently optimized for usage with a Screen Reader - you can change this by editing the setting `editor.accessibilitySupport`.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				text += '\n\n - ' + nls.localize('configuredOff', "The editor is configured to never be optimized for usage with a Screen Reader.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:		const NLS_TAB_FOCUS_MODE_ON = nls.localize('tabFocusModeOnMsg', "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:		const NLS_TAB_FOCUS_MODE_ON_NO_KB = nls.localize('tabFocusModeOnMsgNoKb', "Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:		const NLS_TAB_FOCUS_MODE_OFF = nls.localize('tabFocusModeOffMsg', "Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:		const NLS_TAB_FOCUS_MODE_OFF_NO_KB = nls.localize('tabFocusModeOffMsgNoKb', "Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				? nls.localize('openDocMac', "Press Command+H now to open a browser window with more VS Code information related to Accessibility.")
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:				: nls.localize('openDocWinLinux', "Press Control+H now to open a browser window with more VS Code information related to Accessibility.")
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:		text += '\n\n' + nls.localize('outroMsg', "You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.");
src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts:			title: { value: nls.localize('ShowAccessibilityHelpAction', "Show Accessibility Help"), original: 'Show Accessibility Help' },
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyTree.ts:		return localize('tree.aria', "Call Hierarchy");
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyTree.ts:			return localize('from', "calls from {0}", element.item.name);
src/vs/workbench/contrib/callHierarchy/browser/callHierarchyTree.ts:			return localize('to', "callers of {0}", element.item.name);
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess.ts:			title: { value: localize('gotoLine', "Go to Line/Column..."), original: 'Go to Line/Column...' },
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess.ts:	placeholder: localize('gotoLineQuickAccessPlaceholder', "Type the line number and optional column to go to (e.g. 42:5 for line 42 and column 5)."),
src/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess.ts:	helpEntries: [{ description: localize('gotoLineQuickAccess', "Go to Line/Column"), commandId: GotoLineAction.ID }]
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPreview.ts:		label: localize('default', "Other"),
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:			return localize('summary.0', "Made no edits");
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:				return localize('summary.nm', "Made {0} text edits in {1} files", textEditCount, textEditResources.size);
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:				return localize('summary.n0', "Made {0} text edits in one file", textEditCount);
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:			return localize('summary.textFiles', "Made {0} text edits in {1} files, also created or deleted {2} files", textEditCount, textEditResources.size, otherResources.size);
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:		const model = this._instaService.createInstance(BulkFileEdits, this._label || localize('workspaceEdit', "Workspace Edit"), this._code || 'undoredo.workspaceEdit', undoRedoGroup, undoRedoSource, confirmBeforeUndo, progress, this._token, edits);
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:		const model = this._instaService.createInstance(BulkTextEdits, this._label || localize('workspaceEdit', "Workspace Edit"), this._code || 'undoredo.workspaceEdit', this._editor, undoRedoGroup, undoRedoSource, progress, this._token, edits);
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:			return { ariaSummary: localize('nothing', "Made no edits"), isApplied: false };
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:		label = label || localize('fileOperation', "File operation");
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:		const reasonLabel = reason === ShutdownReason.CLOSE ? localize('closeTheWindow', "Close Window") : reason === ShutdownReason.LOAD ? localize('changeWorkspace', "Change Workspace") :
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:			reason === ShutdownReason.RELOAD ? localize('reloadTheWindow', "Reload Window") : localize('quit', "Quit");
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:			message: localize('areYouSureQuiteBulkEdit', "Are you sure you want to {0}? '{1}' is in progress.", reasonLabel.toLowerCase(), label),
src/vs/workbench/contrib/bulkEdit/browser/bulkEditService.ts:			description: localize('refactoring.autoSave', "Controls if files that were part of a refactoring are saved automatically"),
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:				localize('overlap', "Another refactoring is being previewed."),
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:				[localize('continue', "Continue"), localize('cancel', "Cancel")],
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:					detail: localize('detail', "Press 'Continue' to discard the previous refactoring and continue with the current refactoring."),
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			title: { value: localize('apply', "Apply Refactoring"), original: 'Apply Refactoring' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			category: { value: localize('cat', "Refactor Preview"), original: 'Refactor Preview' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			title: { value: localize('Discard', "Discard Refactoring"), original: 'Discard Refactoring' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			category: { value: localize('cat', "Refactor Preview"), original: 'Refactor Preview' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			title: { value: localize('toogleSelection', "Toggle Change"), original: 'Toggle Change' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			category: { value: localize('cat', "Refactor Preview"), original: 'Refactor Preview' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			title: { value: localize('groupByFile', "Group Changes By File"), original: 'Group Changes By File' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			category: { value: localize('cat', "Refactor Preview"), original: 'Refactor Preview' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			title: { value: localize('groupByType', "Group Changes By Type"), original: 'Group Changes By Type' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			category: { value: localize('cat', "Refactor Preview"), original: 'Refactor Preview' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			title: { value: localize('groupByType', "Group Changes By Type"), original: 'Group Changes By Type' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:			category: { value: localize('cat', "Refactor Preview"), original: 'Refactor Preview' },
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:const refactorPreviewViewIcon = registerIcon('refactor-preview-view-icon', Codicon.lightbulb, localize('refactorPreviewViewIcon', 'View icon of the refactor preview view.'));
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:	title: localize('panel', "Refactor Preview"),
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEdit.contribution.ts:	name: localize('panel', "Refactor Preview"),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:		localize('audioCues.enabled.auto', "Enable audio cue when a screen reader is attached."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:		localize('audioCues.enabled.on', "Enable audio cue."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:		localize('audioCues.enabled.off', "Disable audio cue.")
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.volume', "The volume of the audio cues in percent (0-100)."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.lineHasBreakpoint', "Plays a sound when the active line has a breakpoint."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.lineHasInlineSuggestion', "Plays a sound when the active line has an inline suggestion."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.lineHasError', "Plays a sound when the active line has an error."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.lineHasFoldedArea', "Plays a sound when the active line has a folded area that can be unfolded."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.lineHasWarning', "Plays a sound when the active line has a warning."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.onDebugBreak', "Plays a sound when the debugger stopped on a breakpoint."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.noInlayHints', "Plays a sound when trying to read a line with inlay hints that has no inlay hints."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.taskCompleted', "Plays a sound when a task completed."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.taskFailed', "Plays a sound when a task fails (non-zero exit code)."),
src/vs/workbench/contrib/audioCues/browser/audioCues.contribution.ts:			'description': localize('audioCues.terminalQuickFix', "Plays a sound when a terminal quick fixes are available"),
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:		btnConfirm.label = localize('ok', 'Apply');
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:		btnCancel.label = localize('cancel', 'Discard');
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:		this._message.innerText = localize('empty.msg', "Invoke a code action, like rename, to see a preview of its changes here.");
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:			message = localize('conflict.1', "Cannot apply refactoring because '{0}' has changed in the meantime.", this._labelService.getUriLabel(conflicts[0], { relative: true }));
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:			message = localize('conflict.N', "Cannot apply refactoring because {0} other files have changed in the meantime.", conflicts.length);
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:				label: localize('edt.title.del', "{0} (delete, refactor preview)", basename(fileElement.edit.uri)),
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:				typeLabel = localize('rename', "rename");
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:				typeLabel = localize('create', "create");
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:				label = localize('edt.title.2', "{0} ({1}, refactor preview)", basename(fileElement.edit.uri), typeLabel);
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditPane.ts:				label = localize('edt.title.1', "{0} (refactor preview)", basename(fileElement.edit.uri));
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:const _ctxHasCallHierarchyProvider = new RawContextKey<boolean>('editorHasCallHierarchyProvider', false, localize('editorHasCallHierarchyProvider', 'Whether a call hierarchy provider is available'));
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:const _ctxCallHierarchyVisible = new RawContextKey<boolean>('callHierarchyVisible', false, localize('callHierarchyVisible', 'Whether call hierarchy peek is currently showing'));
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:const _ctxCallHierarchyDirection = new RawContextKey<string>('callHierarchyDirection', undefined, { type: 'string', description: localize('callHierarchyDirection', 'Whether call hierarchy shows incoming or outgoing calls') });
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:				this._widget!.showMessage(localize('no.item', "No results"));
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			this._widget!.showMessage(localize('error', "Failed to show call hierarchy"));
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			title: { value: localize('title', "Peek Call Hierarchy"), original: 'Peek Call Hierarchy' },
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			title: { value: localize('title.incoming', "Show Incoming Calls"), original: 'Show Incoming Calls' },
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			icon: registerIcon('callhierarchy-incoming', Codicon.callIncoming, localize('showIncomingCallsIcons', 'Icon for incoming calls in the call hierarchy view.')),
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			title: { value: localize('title.outgoing', "Show Outgoing Calls"), original: 'Show Outgoing Calls' },
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			icon: registerIcon('callhierarchy-outgoing', Codicon.callOutgoing, localize('showOutgoingCallsIcon', 'Icon for outgoing calls in the call hierarchy view.')),
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			title: { value: localize('title.refocus', "Refocus Call Hierarchy"), original: 'Refocus Call Hierarchy' },
src/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.ts:			title: localize('close', 'Close'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.lineHasError.name', 'Error on Line'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.lineHasWarning.name', 'Warning on Line'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.lineHasFoldedArea.name', 'Folded Area on Line'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.lineHasBreakpoint.name', 'Breakpoint on Line'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.lineHasInlineSuggestion.name', 'Inline Suggestion on Line'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.terminalQuickFix.name', 'Terminal Quick Fix'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.onDebugBreak.name', 'Debugger Stopped on Breakpoint'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.noInlayHints', 'No Inlay Hints on Line'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.taskCompleted', 'Task Completed'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.taskFailed', 'Task Failed'),
src/vs/workbench/contrib/audioCues/browser/audioCueService.ts:		name: localize('audioCues.terminalBell', 'Terminal Bell'),
src/vs/editor/browser/coreCommands.ts:							description: nls.localize('stickydesc', "Stick to the end even when going to longer lines"),
src/vs/editor/browser/coreCommands.ts:							description: nls.localize('stickydesc', "Stick to the end even when going to longer lines"),
src/vs/editor/browser/coreCommands.ts:			status(nls.localize('removedCursor', "Removed secondary cursors"));
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:		return localize('bulkEdit', "Bulk Edit");
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:				return localize('aria.replace', "line {0}, replacing {1} with {2}", element.edit.textEdit.textEdit.range.startLineNumber, element.selecting, element.inserting);
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:				return localize('aria.del', "line {0}, removing {1}", element.edit.textEdit.textEdit.range.startLineNumber, element.selecting);
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:				return localize('aria.insert', "line {0}, inserting {1}", element.edit.textEdit.textEdit.range.startLineNumber, element.selecting);
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:				name: localize('rename.label', "{0} → {1}", this._labelService.getUriLabel(element.edit.uri, { relative: true }), this._labelService.getUriLabel(element.edit.newUri, { relative: true })),
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:			this._details.innerText = localize('detail.rename', "(renaming)");
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:				this._details.innerText = localize('detail.create', "(creating)");
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:				this._details.innerText = localize('detail.del', "(deleting)");
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:			title = localize('title', "{0} - {1}", metadata.label, metadata.description);
src/vs/workbench/contrib/audioCues/browser/commands.ts:				value: localize('audioCues.help', "Help: List Audio Cues"),
src/vs/workbench/contrib/audioCues/browser/commands.ts:				`${cue.name}${audioCueService.isEnabled(cue).get() ? '' : ' (' + localize('disabled', "Disabled") + ')'}`
src/vs/workbench/contrib/audioCues/browser/commands.ts:				tooltip: localize('audioCues.help.settings', 'Enable/Disable Audio Cue'),
src/vs/workbench/contrib/audioCues/browser/commands.ts:				placeHolder: localize('audioCues.help.placeholder', 'Select an audio cue to play'),
src/vs/editor/common/core/editorColorRegistry.ts:export const editorLineHighlight = registerColor('editor.lineHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hcDark: '#f38518', hcLight: contrastBorder }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorRangeHighlight = registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hcDark: null, hcLight: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/editor/common/core/editorColorRegistry.ts:export const editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'), true);
src/vs/editor/common/core/editorColorRegistry.ts:export const editorSymbolHighlight = registerColor('editor.symbolHighlightBackground', { dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/editor/common/core/editorColorRegistry.ts:export const editorSymbolHighlightBorder = registerColor('editor.symbolHighlightBorder', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('symbolHighlightBorder', 'Background color of the border around highlighted symbols.'), true);
src/vs/editor/common/core/editorColorRegistry.ts:export const editorCursorForeground = registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: Color.black, hcDark: Color.white, hcLight: '#0F4A85' }, nls.localize('caret', 'Color of the editor cursor.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorWhitespaces = registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hcDark: '#e3e4e229', hcLight: '#CCCCCC' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorIndentGuides = registerColor('editorIndentGuide.background', { dark: editorWhitespaces, light: editorWhitespaces, hcDark: editorWhitespaces, hcLight: editorWhitespaces }, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', { dark: editorWhitespaces, light: editorWhitespaces, hcDark: editorWhitespaces, hcLight: editorWhitespaces }, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorLineNumbers = registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));
src/vs/editor/common/core/editorColorRegistry.ts:const deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \'editorLineNumber.activeForeground\' instead.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', { dark: deprecatedEditorActiveLineNumber, light: deprecatedEditorActiveLineNumber, hcDark: deprecatedEditorActiveLineNumber, hcLight: deprecatedEditorActiveLineNumber }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorRuler = registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: Color.lightgrey, hcDark: Color.white, hcLight: '#292929' }, nls.localize('editorRuler', 'Color of the editor rulers.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorCodeLensForeground = registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#919191', hcDark: '#999999', hcLight: '#292929' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor CodeLens'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketMatchBackground = registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hcDark: '#0064001a', hcLight: '#0000' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketMatchBorder = registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hcDark: '#7f7f7f4d', hcLight: '#666666' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorOverviewRulerBackground = registerColor('editorOverviewRuler.background', null, nls.localize('editorOverviewRulerBackground', 'Background color of the editor overview ruler.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorGutter = registerColor('editorGutter.background', { dark: editorBackground, light: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: contrastBorder }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', { dark: Color.fromHex('#000a'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, "#000000c0" will render the code with 75% opacity. For high contrast themes, use the  \'editorUnnecessaryCode.border\' theme color to underline unnecessary code instead of fading it out.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const ghostTextBorder = registerColor('editorGhostText.border', { dark: null, light: null, hcDark: Color.fromHex('#fff').transparent(0.8), hcLight: Color.fromHex('#292929').transparent(0.8) }, nls.localize('editorGhostTextBorder', 'Border color of ghost text in the editor.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const ghostTextForeground = registerColor('editorGhostText.foreground', { dark: Color.fromHex('#ffffff56'), light: Color.fromHex('#0007'), hcDark: null, hcLight: null }, nls.localize('editorGhostTextForeground', 'Foreground color of the ghost text in the editor.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const ghostTextBackground = registerColor('editorGhostText.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorGhostTextBackground', 'Background color of the ghost text in the editor.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const overviewRulerRangeHighlight = registerColor('editorOverviewRuler.rangeHighlightForeground', { dark: rulerRangeDefault, light: rulerRangeDefault, hcDark: rulerRangeDefault, hcLight: rulerRangeDefault }, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
src/vs/editor/common/core/editorColorRegistry.ts:export const overviewRulerError = registerColor('editorOverviewRuler.errorForeground', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '#B5200D' }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningBorder, hcLight: editorWarningBorder }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoBorder, hcLight: editorInfoBorder }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketHighlightingForeground1 = registerColor('editorBracketHighlight.foreground1', { dark: '#FFD700', light: '#0431FAFF', hcDark: '#FFD700', hcLight: '#0431FAFF' }, nls.localize('editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketHighlightingForeground2 = registerColor('editorBracketHighlight.foreground2', { dark: '#DA70D6', light: '#319331FF', hcDark: '#DA70D6', hcLight: '#319331FF' }, nls.localize('editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketHighlightingForeground3 = registerColor('editorBracketHighlight.foreground3', { dark: '#179FFF', light: '#7B3814FF', hcDark: '#87CEFA', hcLight: '#7B3814FF' }, nls.localize('editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketHighlightingForeground4 = registerColor('editorBracketHighlight.foreground4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketHighlightingForeground5 = registerColor('editorBracketHighlight.foreground5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketHighlightingForeground6 = registerColor('editorBracketHighlight.foreground6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketHighlightingUnexpectedBracketForeground = registerColor('editorBracketHighlight.unexpectedBracket.foreground', { dark: new Color(new RGBA(255, 18, 18, 0.8)), light: new Color(new RGBA(255, 18, 18, 0.8)), hcDark: new Color(new RGBA(255, 50, 50, 1)), hcLight: '' }, nls.localize('editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideBackground1 = registerColor('editorBracketPairGuide.background1', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideBackground2 = registerColor('editorBracketPairGuide.background2', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideBackground3 = registerColor('editorBracketPairGuide.background3', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideBackground4 = registerColor('editorBracketPairGuide.background4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideBackground5 = registerColor('editorBracketPairGuide.background5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideBackground6 = registerColor('editorBracketPairGuide.background6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideActiveBackground1 = registerColor('editorBracketPairGuide.activeBackground1', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideActiveBackground2 = registerColor('editorBracketPairGuide.activeBackground2', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideActiveBackground3 = registerColor('editorBracketPairGuide.activeBackground3', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideActiveBackground4 = registerColor('editorBracketPairGuide.activeBackground4', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideActiveBackground5 = registerColor('editorBracketPairGuide.activeBackground5', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorBracketPairGuideActiveBackground6 = registerColor('editorBracketPairGuide.activeBackground6', { dark: '#00000000', light: '#00000000', hcDark: '#00000000', hcLight: '#00000000' }, nls.localize('editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorUnicodeHighlightBorder = registerColor('editorUnicodeHighlight.border', { dark: '#BD9B03', light: '#CEA33D', hcDark: '#ff0000', hcLight: '' }, nls.localize('editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.'));
src/vs/editor/common/core/editorColorRegistry.ts:export const editorUnicodeHighlightBackground = registerColor('editorUnicodeHighlight.background', { dark: '#bd9b0326', light: '#cea33d14', hcDark: '#00000000', hcLight: '' }, nls.localize('editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.'));
src/vs/editor/common/config/editorConfigurationSchema.ts:	title: nls.localize('editorConfigurationTitle', "Editor"),
src/vs/editor/common/config/editorConfigurationSchema.ts:			markdownDescription: nls.localize('tabSize', "The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`')
src/vs/editor/common/config/editorConfigurationSchema.ts:		// 	markdownDescription: nls.localize('indentSize', "The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			markdownDescription: nls.localize('insertSpaces', "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`')
src/vs/editor/common/config/editorConfigurationSchema.ts:			markdownDescription: nls.localize('detectIndentation', "Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.", '`#editor.tabSize#`', '`#editor.insertSpaces#`')
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('trimAutoWhitespace', "Remove trailing auto inserted whitespace.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('largeFileOptimizations', "Special handling for large files to disable certain memory intensive features.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('wordBasedSuggestions', "Controls whether completions should be computed based on words in the document.")
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.')
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('wordBasedSuggestionsMode', "Controls from which documents word based completions are computed.")
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\'s `semanticHighlighting` setting.')
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('semanticHighlighting.enabled', "Controls whether the semanticHighlighting is shown for the languages that support it.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			markdownDescription: nls.localize('stablePeek', "Keep peek editors open even when double clicking their content or when hitting `Escape`.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('maxTokenizationLineLength', "Lines above this length will not be tokenized for performance reasons")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'),
src/vs/editor/common/config/editorConfigurationSchema.ts:						description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')
src/vs/editor/common/config/editorConfigurationSchema.ts:						description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'),
src/vs/editor/common/config/editorConfigurationSchema.ts:						description: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')
src/vs/editor/common/config/editorConfigurationSchema.ts:						description: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('maxComputationTime', "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('maxFileSize', "Maximum file size in MB for which to compute diffs. Use 0 for no limit.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('sideBySide', "Controls whether the diff editor shows the diff side by side or inline.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('renderMarginRevertIcon', "When enabled, the diff editor shows arrows in its glyph margin to revert changes.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('ignoreTrimWhitespace', "When enabled, the diff editor ignores changes in leading or trailing whitespace.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('renderIndicators', "Controls whether the diff editor shows +/- indicators for added/removed changes.")
src/vs/editor/common/config/editorConfigurationSchema.ts:			description: nls.localize('codeLens', "Controls whether the editor shows CodeLens.")
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('wordWrap.off', "Lines will never wrap."),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('wordWrap.on', "Lines will wrap at the viewport width."),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('wordWrap.inherit', "Lines will wrap according to the {0} setting.", '`#editor.wordWrap#`'),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('diffAlgorithm.smart', "Uses the default diffing algorithm."),
src/vs/editor/common/config/editorConfigurationSchema.ts:				nls.localize('diffAlgorithm.experimental', "Uses an experimental diffing algorithm."),
src/vs/editor/browser/controller/textAreaHandler.ts:		this.textArea.setAttribute('aria-roledescription', nls.localize('editor', "editor"));
src/vs/editor/browser/controller/textAreaHandler.ts:			return nls.localize('accessibilityOffAriaLabel', "The editor is not accessible at this time. Press {0} for options.", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1');
src/vs/editor/common/cursor/cursor.ts:			// e.friendlyMessage = nls.localize('corrupt.commands', "Unexpected exception while executing command.");
src/vs/nls.mock.ts:export function localize(data: ILocalizeInfo | string, message: string, ...args: any[]): string {
src/vs/editor/common/config/editorOptions.ts:					nls.localize('accessibilitySupport.auto', "The editor will use platform APIs to detect when a Screen Reader is attached."),
src/vs/editor/common/config/editorOptions.ts:					nls.localize('accessibilitySupport.on', "The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled."),
src/vs/editor/common/config/editorOptions.ts:					nls.localize('accessibilitySupport.off', "The editor will never be optimized for usage with a Screen Reader."),
src/vs/editor/common/config/editorOptions.ts:				description: nls.localize('accessibilitySupport', "Controls whether the editor should run in a mode where it is optimized for screen readers.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('comments.insertSpace', "Controls whether a space character is inserted when commenting.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.')
src/vs/editor/common/config/editorOptions.ts:			{ description: nls.localize('emptySelectionClipboard', "Controls whether copying without a selection copies the current line.") }
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('find.cursorMoveOnType', "Controls whether the cursor should jump to find matches while typing.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.find.seedSearchStringFromSelection.never', 'Never seed search string from the editor selection.'),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.find.seedSearchStringFromSelection.always', 'Always seed search string from the editor selection, including word at cursor position.'),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.find.seedSearchStringFromSelection.selection', 'Only seed search string from the editor selection.')
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('find.seedSearchStringFromSelection', "Controls whether the search string in the Find Widget is seeded from the editor selection.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.find.autoFindInSelection.never', 'Never turn on Find in Selection automatically (default).'),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.find.autoFindInSelection.always', 'Always turn on Find in Selection automatically.'),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.find.autoFindInSelection.multiline', 'Turn on Find in Selection automatically when multiple lines of content are selected.')
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('find.autoFindInSelection', "Controls the condition for turning on Find in Selection automatically.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('find.globalFindClipboard', "Controls whether the Find Widget should read or modify the shared find clipboard on macOS."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('find.addExtraSpaceOnTop', "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('find.loop', "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.")
src/vs/editor/common/config/editorOptions.ts:						description: nls.localize('fontLigatures', "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."),
src/vs/editor/common/config/editorOptions.ts:						description: nls.localize('fontFeatureSettings', "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.")
src/vs/editor/common/config/editorOptions.ts:				description: nls.localize('fontLigaturesGeneral', "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."),
src/vs/editor/common/config/editorOptions.ts:				description: nls.localize('fontSize', "Controls the font size in pixels.")
src/vs/editor/common/config/editorOptions.ts:						errorMessage: nls.localize('fontWeightErrorMessage', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed.")
src/vs/editor/common/config/editorOptions.ts:				description: nls.localize('fontWeight', "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.gotoLocation.multiple.peek', 'Show peek view of the results (default)'),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a peek view'),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.gotoLocation.multiple.goto', 'Go to the primary result and enable peek-less navigation to others')
src/vs/editor/common/config/editorOptions.ts:					deprecationMessage: nls.localize('editor.gotoLocation.multiple.deprecated', "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.editor.gotoLocation.multipleDefinitions', "Controls the behavior the 'Go to Definition'-command when multiple target locations exist."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.editor.gotoLocation.multipleTypeDefinitions', "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.editor.gotoLocation.multipleDeclarations', "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.editor.gotoLocation.multipleImplemenattions', "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.editor.gotoLocation.multipleReferences', "Controls the behavior the 'Go to References'-command when multiple target locations exist."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('alternativeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('alternativeTypeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('alternativeDeclarationCommand', "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('alternativeImplementationCommand', "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('alternativeReferenceCommand', "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('hover.enabled', "Controls whether the hover is shown.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('hover.delay', "Controls the delay in milliseconds after which the hover is shown.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('hover.sticky', "Controls whether the hover should remain visible when mouse is moved over it.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('hover.above', "Prefer showing hovers above the line, if there's space.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('wrappingStrategy.simple', "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('wrappingStrategy.advanced', "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('wrappingStrategy', "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('codeActions', "Enables the code action lightbulb in the editor.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.stickyScroll', "Shows the nested current scopes during the scroll at the top of the editor.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.stickyScroll.', "Defines the maximum number of sticky lines to show.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('inlayHints.enable', "Enables the inlay hints in the editor."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.inlayHints.on', "Inlay hints are enabled"),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.inlayHints.onUnlessPressed', "Inlay hints are showing by default and hide when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.inlayHints.offUnlessPressed', "Inlay hints are hidden by default and show when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.inlayHints.off', "Inlay hints are disabled"),
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('inlayHints.fontSize', "Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.", '`#editor.fontSize#`', '`5`')
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('inlayHints.fontFamily', "Controls font family of inlay hints in the editor. When set to empty, the {0} is used.", '`#editor.fontFamily#`')
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('inlayHints.padding', "Enables the padding around the inlay hints in the editor.")
src/vs/editor/common/config/editorOptions.ts:			{ markdownDescription: nls.localize('lineHeight', "Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values.") }
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.enabled', "Controls whether the minimap is shown.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.autohide', "Controls whether the minimap is hidden automatically.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('minimap.size.proportional', "The minimap has the same size as the editor contents (and might scroll)."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('minimap.size.fill', "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('minimap.size.fit', "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.size', "Controls the size of the minimap.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.side', "Controls the side where to render the minimap.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.showSlider', "Controls when the minimap slider is shown.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.scale', "Scale of content drawn in the minimap: 1, 2 or 3.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.renderCharacters', "Render the actual characters on a line as opposed to color blocks.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('minimap.maxColumn', "Limit the width of the minimap to render at most a certain number of columns.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('padding.top', "Controls the amount of space between the top edge of the editor and the first line.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('padding.bottom', "Controls the amount of space between the bottom edge of the editor and the last line.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('parameterHints.enabled', "Enables a pop-up that shows parameter documentation and type information as you type.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('parameterHints.cycle', "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.")
src/vs/editor/common/config/editorOptions.ts:				enumDescriptions: [nls.localize('on', "Quick suggestions show inside the suggest widget"), nls.localize('inline', "Quick suggestions show as ghost text"), nls.localize('off', "Quick suggestions are disabled")]
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('quickSuggestions.strings', "Enable quick suggestions inside strings.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('quickSuggestions.comments', "Enable quick suggestions inside comments.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('quickSuggestions.other', "Enable quick suggestions outside of strings and comments.")
src/vs/editor/common/config/editorOptions.ts:			markdownDescription: nls.localize('quickSuggestions', "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '{0}'-setting which controls if suggestions are triggered by special characters.", `#editor.suggestOnTriggerCharacters#`)
src/vs/editor/common/config/editorOptions.ts:					nls.localize('lineNumbers.off', "Line numbers are not rendered."),
src/vs/editor/common/config/editorOptions.ts:					nls.localize('lineNumbers.on', "Line numbers are rendered as absolute number."),
src/vs/editor/common/config/editorOptions.ts:					nls.localize('lineNumbers.relative', "Line numbers are rendered as distance in lines to cursor position."),
src/vs/editor/common/config/editorOptions.ts:					nls.localize('lineNumbers.interval', "Line numbers are rendered every 10 lines.")
src/vs/editor/common/config/editorOptions.ts:				description: nls.localize('lineNumbers', "Controls the display of line numbers.")
src/vs/editor/common/config/editorOptions.ts:		const columnSchema: IJSONSchema = { type: 'number', description: nls.localize('rulers.size', "Number of monospace characters at which this editor ruler will render.") };
src/vs/editor/common/config/editorOptions.ts:									description: nls.localize('rulers.color', "Color of this editor ruler."),
src/vs/editor/common/config/editorOptions.ts:				description: nls.localize('rulers', "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('scrollbar.vertical.auto', "The vertical scrollbar will be visible only when necessary."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('scrollbar.vertical.visible', "The vertical scrollbar will always be visible."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('scrollbar.vertical.fit', "The vertical scrollbar will always be hidden."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('scrollbar.vertical', "Controls the visibility of the vertical scrollbar.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('scrollbar.horizontal.auto', "The horizontal scrollbar will be visible only when necessary."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('scrollbar.horizontal.visible', "The horizontal scrollbar will always be visible."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('scrollbar.horizontal.fit', "The horizontal scrollbar will always be hidden."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('scrollbar.horizontal', "Controls the visibility of the horizontal scrollbar.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('scrollbar.verticalScrollbarSize', "The width of the vertical scrollbar.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('scrollbar.horizontalScrollbarSize', "The height of the horizontal scrollbar.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('scrollbar.scrollByPage', "Controls whether clicks scroll by page or jump to click position.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('unicodeHighlight.nonBasicASCII', "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('unicodeHighlight.invisibleCharacters', "Controls whether characters that just reserve space or have no width at all are highlighted.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('unicodeHighlight.ambiguousCharacters', "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('unicodeHighlight.includeComments', "Controls whether characters in comments should also be subject to unicode highlighting.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('unicodeHighlight.includeStrings', "Controls whether characters in strings should also be subject to unicode highlighting.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('unicodeHighlight.allowedCharacters', "Defines allowed characters that are not being highlighted."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('unicodeHighlight.allowedLocales', "Unicode characters that are common in allowed locales are not being highlighted.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('inlineSuggest.enabled', "Controls whether to automatically show inline suggestions in the editor.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('bracketPairColorization.enabled', "Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.", '`#workbench.colorCustomizations#`')
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('bracketPairColorization.independentColorPoolPerBracketType', "Controls whether each bracket type has its own independent color pool.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.bracketPairs.true', "Enables bracket pair guides."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.bracketPairs.active', "Enables bracket pair guides only for the active bracket pair."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.bracketPairs.false', "Disables bracket pair guides."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.guides.bracketPairs', "Controls whether bracket pair guides are enabled or not.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.bracketPairsHorizontal.true', "Enables horizontal guides as addition to vertical bracket pair guides."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.bracketPairsHorizontal.active', "Enables horizontal guides only for the active bracket pair."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.bracketPairsHorizontal.false', "Disables horizontal bracket pair guides."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.guides.bracketPairsHorizontal', "Controls whether horizontal bracket pair guides are enabled or not.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.guides.highlightActiveBracketPair', "Controls whether the editor should highlight the active bracket pair.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.guides.indentation', "Controls whether the editor should render indent guides.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.highlightActiveIndentation.true', "Highlights the active indent guide."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.highlightActiveIndentation.always', "Highlights the active indent guide even if bracket guides are highlighted."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('editor.guides.highlightActiveIndentation.false', "Do not highlight the active indent guide."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('editor.guides.highlightActiveIndentation', "Controls whether the editor should highlight the active indent guide.")
src/vs/editor/common/config/editorOptions.ts:						nls.localize('suggest.insertMode.insert', "Insert suggestion without overwriting text right of the cursor."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('suggest.insertMode.replace', "Insert suggestion and overwrite text right of the cursor."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.insertMode', "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.filterGraceful', "Controls whether filtering and sorting suggestions accounts for small typos.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.localityBonus', "Controls whether sorting favors words that appear close to the cursor.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('suggest.shareSuggestSelections', "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.snippetsPreventQuickSuggestions', "Controls whether an active snippet prevents quick suggestions.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.showIcons', "Controls whether to show or hide icons in suggestions.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.showStatusBar', "Controls the visibility of the status bar at the bottom of the suggest widget.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.preview', "Controls whether to preview the suggestion outcome in the editor.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('suggest.showInlineDetails', "Controls whether suggest details show inline with the label or only in the details widget")
src/vs/editor/common/config/editorOptions.ts:					deprecationMessage: nls.localize('suggest.maxVisibleSuggestions.dep', "This setting is deprecated. The suggest widget can now be resized."),
src/vs/editor/common/config/editorOptions.ts:					deprecationMessage: nls.localize('deprecated', "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showMethods', "When enabled IntelliSense shows `method`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showFunctions', "When enabled IntelliSense shows `function`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showConstructors', "When enabled IntelliSense shows `constructor`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showDeprecated', "When enabled IntelliSense shows `deprecated`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.matchOnWordStartOnly', "When enabled IntelliSense filtering requires that the first character matches on a word start, e.g `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showFields', "When enabled IntelliSense shows `field`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showVariables', "When enabled IntelliSense shows `variable`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showClasss', "When enabled IntelliSense shows `class`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showStructs', "When enabled IntelliSense shows `struct`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showInterfaces', "When enabled IntelliSense shows `interface`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showModules', "When enabled IntelliSense shows `module`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showPropertys', "When enabled IntelliSense shows `property`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showEvents', "When enabled IntelliSense shows `event`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showOperators', "When enabled IntelliSense shows `operator`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showUnits', "When enabled IntelliSense shows `unit`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showValues', "When enabled IntelliSense shows `value`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showConstants', "When enabled IntelliSense shows `constant`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showEnums', "When enabled IntelliSense shows `enum`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showEnumMembers', "When enabled IntelliSense shows `enumMember`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showKeywords', "When enabled IntelliSense shows `keyword`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showTexts', "When enabled IntelliSense shows `text`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showColors', "When enabled IntelliSense shows `color`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showFiles', "When enabled IntelliSense shows `file`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showReferences', "When enabled IntelliSense shows `reference`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showCustomcolors', "When enabled IntelliSense shows `customcolor`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showFolders', "When enabled IntelliSense shows `folder`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showTypeParameters', "When enabled IntelliSense shows `typeParameter`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showSnippets', "When enabled IntelliSense shows `snippet`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showUsers', "When enabled IntelliSense shows `user`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('editor.suggest.showIssues', "When enabled IntelliSense shows `issues`-suggestions.")
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('selectLeadingAndTrailingWhitespace', "Whether leading and trailing whitespace should always be selected."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('wrappingIndent.none', "No indentation. Wrapped lines begin at column 1."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('wrappingIndent.same', "Wrapped lines get the same indentation as the parent."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('wrappingIndent.indent', "Wrapped lines get +1 indentation toward the parent."),
src/vs/editor/common/config/editorOptions.ts:						nls.localize('wrappingIndent.deepIndent', "Wrapped lines get +2 indentation toward the parent."),
src/vs/editor/common/config/editorOptions.ts:					description: nls.localize('wrappingIndent', "Controls the indentation of wrapped lines."),
src/vs/editor/common/config/editorOptions.ts:					markdownDescription: nls.localize('dropIntoEditor.enabled', "Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor)."),
src/vs/editor/common/config/editorOptions.ts:		{ markdownDescription: nls.localize('acceptSuggestionOnCommitCharacter', "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`; `) can be a commit character that accepts a suggestion and types that character.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('acceptSuggestionOnEnterSmart', "Only accept a suggestion with `Enter` when it makes a textual change."),
src/vs/editor/common/config/editorOptions.ts:			markdownDescription: nls.localize('acceptSuggestionOnEnter', "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.")
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('accessibilityPageSize', "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default."),
src/vs/editor/common/config/editorOptions.ts:		EditorOption.ariaLabel, 'ariaLabel', nls.localize('editorViewAccessibleLabel', "Editor content")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoClosingBrackets.languageDefined', "Use language configurations to determine when to autoclose brackets."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoClosingBrackets.beforeWhitespace', "Autoclose brackets only when the cursor is to the left of whitespace."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('autoClosingBrackets', "Controls whether the editor should automatically close brackets after the user adds an opening bracket.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoClosingDelete.auto', "Remove adjacent closing quotes or brackets only if they were automatically inserted."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('autoClosingDelete', "Controls whether the editor should remove adjacent closing quotes or brackets when deleting.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoClosingOvertype.auto', "Type over closing quotes or brackets only if they were automatically inserted."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('autoClosingOvertype', "Controls whether the editor should type over closing quotes or brackets.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoClosingQuotes.languageDefined', "Use language configurations to determine when to autoclose quotes."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoClosingQuotes.beforeWhitespace', "Autoclose quotes only when the cursor is to the left of whitespace."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('autoClosingQuotes', "Controls whether the editor should automatically close quotes after the user adds an opening quote.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoIndent.none', "The editor will not insert indentation automatically."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoIndent.keep', "The editor will keep the current line's indentation."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoIndent.brackets', "The editor will keep the current line's indentation and honor language defined brackets."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoIndent.advanced', "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoIndent.full', "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('autoIndent', "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoSurround.languageDefined', "Use language configurations to determine when to automatically surround selections."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoSurround.quotes', "Surround with quotes but not brackets."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('editor.autoSurround.brackets', "Surround with brackets but not quotes."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('autoSurround', "Controls whether the editor should automatically surround selections when typing quotes or brackets.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('stickyTabStops', "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('codeLens', "Controls whether the editor shows CodeLens.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('codeLensFontFamily', "Controls the font family for CodeLens.") }
src/vs/editor/common/config/editorOptions.ts:		markdownDescription: nls.localize('codeLensFontSize', "Controls the font size in pixels for CodeLens. When set to `0`, 90% of `#editor.fontSize#` is used.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('colorDecorators', "Controls whether the editor should render the inline color decorators and color picker.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('columnSelection', "Enable that the selection with the mouse and keys is doing column selection.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('copyWithSyntaxHighlighting', "Controls whether syntax highlighting should be copied into the clipboard.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('cursorBlinking', "Control the cursor animation style.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('cursorSmoothCaretAnimation', "Controls whether the smooth caret animation should be enabled.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('cursorStyle', "Controls the cursor style.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('cursorSurroundingLines', "Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('cursorSurroundingLinesStyle.default', "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('cursorSurroundingLinesStyle.all', "`cursorSurroundingLines` is enforced always.")
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('cursorSurroundingLinesStyle', "Controls when `cursorSurroundingLines` should be enforced.")
src/vs/editor/common/config/editorOptions.ts:		{ markdownDescription: nls.localize('cursorWidth', "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('dragAndDrop', "Controls whether the editor should allow moving selections via drag and drop.") }
src/vs/editor/common/config/editorOptions.ts:		{ markdownDescription: nls.localize('fastScrollSensitivity', "Scrolling speed multiplier when pressing `Alt`.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('folding', "Controls whether the editor has code folding enabled.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('foldingStrategy.auto', "Use a language-specific folding strategy if available, else the indentation-based one."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('foldingStrategy.indentation', "Use the indentation-based folding strategy."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('foldingStrategy', "Controls the strategy for computing folding ranges.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('foldingHighlight', "Controls whether the editor should highlight folded ranges.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('foldingImportsByDefault', "Controls whether the editor automatically collapses import ranges.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('foldingMaximumRegions', "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('unfoldOnClickAfterEndOfLine', "Controls whether clicking on the empty content after a folded line will unfold the line.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('fontFamily', "Controls the font family.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('formatOnPaste', "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('formatOnType', "Controls whether the editor should automatically format the line after typing.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('glyphMargin', "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('hideCursorInOverviewRuler', "Controls whether the cursor should be hidden in the overview ruler.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('letterSpacing', "Controls the letter spacing in pixels.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('linkedEditing', "Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('links', "Controls whether the editor should detect links and make them clickable.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('matchBrackets', "Highlight matching brackets.") }
src/vs/editor/common/config/editorOptions.ts:		{ markdownDescription: nls.localize('mouseWheelScrollSensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.") }
src/vs/editor/common/config/editorOptions.ts:		{ markdownDescription: nls.localize('mouseWheelZoom', "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('multiCursorMergeOverlapping', "Merge multiple cursors when they are overlapping.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('multiCursorModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('multiCursorModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
src/vs/editor/common/config/editorOptions.ts:			markdownDescription: nls.localize({
src/vs/editor/common/config/editorOptions.ts:				nls.localize('multiCursorPaste.spread', "Each cursor pastes a single line of the text."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('multiCursorPaste.full', "Each cursor pastes the full text.")
src/vs/editor/common/config/editorOptions.ts:			markdownDescription: nls.localize('multiCursorPaste', "Controls pasting when the line count of the pasted text matches the cursor count.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('occurrencesHighlight', "Controls whether the editor should highlight semantic symbol occurrences.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('overviewRulerBorder', "Controls whether a border should be drawn around the overview ruler.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('peekWidgetDefaultFocus.tree', "Focus the tree when opening peek"),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('peekWidgetDefaultFocus.editor', "Focus the editor when opening peek")
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('peekWidgetDefaultFocus', "Controls whether to focus the inline editor or the tree in the peek widget.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('definitionLinkOpensInPeek', "Controls whether the Go to Definition mouse gesture always opens the peek widget.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('quickSuggestionsDelay', "Controls the delay in milliseconds after which quick suggestions will show up.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('renameOnType', "Controls whether the editor auto renames on type."), markdownDeprecationMessage: nls.localize('renameOnTypeDeprecate', "Deprecated, use `editor.linkedEditing` instead.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('renderControlCharacters', "Controls whether the editor should render control characters."), restricted: true }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('renderFinalNewline', "Render last line number when the file ends with a newline.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('renderLineHighlight.all', "Highlights both the gutter and the current line."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('renderLineHighlight', "Controls how the editor should render the current line highlight.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('renderLineHighlightOnlyWhenFocus', "Controls if the editor should render the current line highlight only when the editor is focused.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('renderWhitespace.boundary', "Render whitespace characters except for single spaces between words."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('renderWhitespace.selection', "Render whitespace characters only on selected text."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('renderWhitespace.trailing', "Render only trailing whitespace characters."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('renderWhitespace', "Controls how the editor should render whitespace characters.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('roundedSelection', "Controls whether selections should have rounded corners.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('scrollBeyondLastColumn', "Controls the number of extra characters beyond which the editor will scroll horizontally.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('scrollBeyondLastLine', "Controls whether the editor will scroll beyond the last line.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('scrollPredominantAxis', "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.") }
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('selectionClipboard', "Controls whether the Linux primary clipboard should be supported."),
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('selectionHighlight', "Controls whether the editor should highlight matches similar to the selection.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('showFoldingControls.always', "Always show the folding controls."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('showFoldingControls.never', "Never show the folding controls and reduce the gutter size."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('showFoldingControls.mouseover', "Only show the folding controls when the mouse is over the gutter."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('showFoldingControls', "Controls when the folding controls on the gutter are shown.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('showUnused', "Controls fading out of unused code.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('showDeprecated', "Controls strikethrough deprecated variables.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('snippetSuggestions.top', "Show snippet suggestions on top of other suggestions."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('snippetSuggestions.bottom', "Show snippet suggestions below other suggestions."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('snippetSuggestions.inline', "Show snippets suggestions with other suggestions."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('snippetSuggestions.none', "Do not show snippet suggestions."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('snippetSuggestions', "Controls whether snippets are shown with other suggestions and how they are sorted.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('smoothScrolling', "Controls whether the editor will scroll using an animation.") }
src/vs/editor/common/config/editorOptions.ts:		{ markdownDescription: nls.localize('suggestFontSize', "Font size for the suggest widget. When set to {0}, the value of {1} is used.", '`0`', '`#editor.fontSize#`') }
src/vs/editor/common/config/editorOptions.ts:		{ markdownDescription: nls.localize('suggestLineHeight', "Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.", '`0`', '`#editor.lineHeight#`') }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('suggestOnTriggerCharacters', "Controls whether suggestions should automatically show up when typing trigger characters.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('suggestSelection.first', "Always select the first suggestion."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('suggestSelection.recentlyUsed', "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('suggestSelection.recentlyUsedByPrefix', "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('suggestSelection', "Controls how suggestions are pre-selected when showing the suggest list.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('tabCompletion.on', "Tab complete will insert the best matching suggestion when pressing tab."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('tabCompletion.off', "Disable tab completions."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('tabCompletion.onlySnippets', "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('tabCompletion', "Enables tab completions.")
src/vs/editor/common/config/editorOptions.ts:				nls.localize('unusualLineTerminators.auto', "Unusual line terminators are automatically removed."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('unusualLineTerminators.off', "Unusual line terminators are ignored."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('unusualLineTerminators.prompt', "Unusual line terminators prompt to be removed."),
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize('unusualLineTerminators', "Remove unusual line terminators that might cause problems.")
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('useTabStops', "Inserting and deleting whitespace follows tab stops.") }
src/vs/editor/common/config/editorOptions.ts:		{ description: nls.localize('wordSeparators', "Characters that will be used as word separators when doing word related navigations or operations.") }
src/vs/editor/common/config/editorOptions.ts:				nls.localize('wordWrap.off', "Lines will never wrap."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize('wordWrap.on', "Lines will wrap at the viewport width."),
src/vs/editor/common/config/editorOptions.ts:				nls.localize({
src/vs/editor/common/config/editorOptions.ts:				nls.localize({
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize({
src/vs/editor/common/config/editorOptions.ts:			markdownDescription: nls.localize({
src/vs/code/electron-main/main.ts:							localize('secondInstanceAdmin', "A second instance of {0} is already running as administrator.", productService.nameShort),
src/vs/code/electron-main/main.ts:							localize('secondInstanceAdminDetail', "Please close the other instance and try again."),
src/vs/code/electron-main/main.ts:						localize('secondInstanceNoResponse', "Another instance of {0} is running but not responding", productService.nameShort),
src/vs/code/electron-main/main.ts:						localize('secondInstanceNoResponseDetail', "Please close all other instances and try again."),
src/vs/code/electron-main/main.ts:				localize('startupDataDirError', "Unable to write program user data."),
src/vs/code/electron-main/main.ts:				localize('startupUserDataAndExtensionsDirErrorDetail', "{0}\n\nPlease make sure the following directories are writeable:\n\n{1}", toErrorMessage(error), directories.join('\n')),
src/vs/code/electron-main/main.ts:			buttons: [mnemonicButtonLabel(localize({ key: 'close', comment: ['&& denotes a mnemonic'] }, "&&Close"))],
src/vs/base/node/zip.ts:		return Promise.reject(new Error(nls.localize('invalid file', "Error extracting {0}. Invalid file.", fileName)));
src/vs/base/node/zip.ts:				e(new ExtractError('Incomplete', new Error(nls.localize('incompleteExtract', "Incomplete. Found {0} of {1} entries", extractedEntriesCount, zipfile.entryCount))));
src/vs/base/node/zip.ts:			zipfile.once('close', () => e(new Error(nls.localize('notFound', "{0} not found inside zip.", filePath))));
src/vs/code/electron-main/app.ts:					mnemonicButtonLabel(localize({ key: 'open', comment: ['&& denotes a mnemonic'] }, "&&Yes")),
src/vs/code/electron-main/app.ts:					mnemonicButtonLabel(localize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&No")),
src/vs/code/electron-main/app.ts:				message: localize('confirmOpenMessage', "An external application wants to open '{0}' in {1}. Do you want to open this file or folder?", getPathLabel(uri, { os: OS, tildify: this.environmentMainService }), this.productService.nameShort),
src/vs/code/electron-main/app.ts:				detail: localize('confirmOpenDetail', "If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press 'No'"),
src/vs/base/common/errorMessage.ts:		return nls.localize('stackTrace.format', "{0}: {1}", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));
src/vs/base/common/errorMessage.ts:		return nls.localize('nodeExceptionMessage', "A system error occurred ({0})", exception.message);
src/vs/base/common/errorMessage.ts:	return exception.message || nls.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
src/vs/base/common/errorMessage.ts:		return nls.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
src/vs/base/common/errorMessage.ts:			return nls.localize('error.moreErrors', "{0} ({1} errors in total)", msg, errors.length);
src/vs/base/common/errorMessage.ts:	return nls.localize('error.defaultMessage', "An unknown error occurred. Please consult the log for more details.");
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.InvalidSymbol: return localize('error.invalidSymbol', 'Invalid symbol');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.InvalidNumberFormat: return localize('error.invalidNumberFormat', 'Invalid number format');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.PropertyNameExpected: return localize('error.propertyNameExpected', 'Property name expected');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.ValueExpected: return localize('error.valueExpected', 'Value expected');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.ColonExpected: return localize('error.colonExpected', 'Colon expected');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.CommaExpected: return localize('error.commaExpected', 'Comma expected');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.CloseBraceExpected: return localize('error.closeBraceExpected', 'Closing brace expected');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.CloseBracketExpected: return localize('error.closeBracketExpected', 'Closing bracket expected');
src/vs/base/common/jsonErrorMessages.ts:		case ParseErrorCode.EndOfFileExpected: return localize('error.endOfFileExpected', 'End of file expected');
src/vs/base/browser/ui/actionbar/actionViewItems.ts:				title = nls.localize({ key: 'titleLabel', comment: ['action title', 'action keybinding'] }, "{0} ({1})", title, this.options.keybinding);
src/vs/base/common/platform.ts:		nls.localize({ key: 'ensureLoaderPluginIsLoaded', comment: ['{Locked}'] }, '_')
src/vs/base/browser/ui/splitview/paneview.ts:		this._ariaHeaderLabel = localize('viewSection', "{0} Section", options.title);
src/vs/base/browser/ui/menu/menubar.ts:		const label = this.isCompact ? nls.localize('mAppMenu', 'Application Menu') : nls.localize('mMore', 'More');
src/vs/base/browser/ui/tree/treeDefaults.ts:		super('vs.tree.collapse', nls.localize('collapse all', "Collapse All"), 'collapse-all', enabled);
src/vs/base/browser/ui/selectBox/selectBoxCustom.ts:				getWidgetAriaLabel: () => localize({ key: 'selectBox', comment: ['Behave like native select dropdown element.'] }, "Select Box"),
src/vs/base/browser/ui/toolbar/toolbar.ts:		title = title || nls.localize('moreActions', "More Actions...");
src/vs/base/browser/ui/tree/abstractTree.ts:			title: localize('filter', "Filter"),
src/vs/base/browser/ui/tree/abstractTree.ts:		this.findInput.inputBox.setPlaceHolder(mode === TreeFindMode.Filter ? localize('type to filter', "Type to filter") : localize('type to search', "Type to search"));
src/vs/base/browser/ui/tree/abstractTree.ts:			label: localize('type to search', "Type to search"),
src/vs/base/browser/ui/tree/abstractTree.ts:		const closeAction = this._register(new Action('close', localize('close', "Close"), 'codicon codicon-close', true, () => this.dispose()));
src/vs/base/browser/ui/tree/abstractTree.ts:				this.widget?.showMessage({ type: MessageType.WARNING, content: localize('not found', "No elements found.") });
src/vs/base/browser/ui/iconLabel/iconLabelHover.ts:				this.show(localize('iconLabel.loading', "Loading..."), focus);
src/vs/base/browser/ui/keybindingLabel/keybindingLabel.ts:		dom.append(parent, this.createKeyElement(localize('unbound', "Unbound")));
src/vs/base/browser/ui/findinput/findInputToggles.ts:const NLS_CASE_SENSITIVE_TOGGLE_LABEL = nls.localize('caseDescription', "Match Case");
src/vs/base/browser/ui/findinput/findInputToggles.ts:const NLS_WHOLE_WORD_TOGGLE_LABEL = nls.localize('wordsDescription', "Match Whole Word");
src/vs/base/browser/ui/findinput/findInputToggles.ts:const NLS_REGEX_TOGGLE_LABEL = nls.localize('regexDescription', "Use Regular Expression");
src/vs/base/browser/ui/dropdown/dropdownActionViewItem.ts:			this.dropdownMenuActionViewItem = new DropdownMenuActionViewItem(this._register(new Action('dropdownAction', nls.localize('moreActions', "More Actions..."))), menuActionsProvider, this.contextMenuProvider, { classNames: ['dropdown', ...Codicon.dropDownButton.classNamesArray, ...menuActionClassNames] });
src/vs/base/browser/ui/dialog/dialog.ts:			this.buttons = [nls.localize('ok', "OK")];
src/vs/base/browser/ui/dialog/dialog.ts:		const typeLabel = nls.localize('dialogInfoMessage', 'Info');
src/vs/base/browser/ui/dialog/dialog.ts:				nls.localize('dialogErrorMessage', 'Error');
src/vs/base/browser/ui/dialog/dialog.ts:				nls.localize('dialogWarningMessage', 'Warning');
src/vs/base/browser/ui/dialog/dialog.ts:				nls.localize('dialogPendingMessage', 'In Progress');
src/vs/base/browser/ui/dialog/dialog.ts:				const action = this._register(new Action('dialog.close', nls.localize('dialogClose', "Close Dialog"), Codicon.dialogClose.classNames, true, async () => {
src/vs/base/browser/ui/inputbox/inputBox.ts:			alertText = nls.localize('alertErrorMessage', "Error: {0}", this.message.content);
src/vs/base/browser/ui/inputbox/inputBox.ts:			alertText = nls.localize('alertWarningMessage', "Warning: {0}", this.message.content);
src/vs/base/browser/ui/inputbox/inputBox.ts:			alertText = nls.localize('alertInfoMessage', "Info: {0}", this.message.content);
src/vs/base/browser/ui/inputbox/inputBox.ts:		const NLS_PLACEHOLDER_HISTORY_HINT = nls.localize({ key: 'history.inputbox.hint', comment: ['Text will be prefixed with \u21C5 plus a single space, then used as a hint where input field keeps history'] }, "for history");
src/vs/base/common/keybindingLabels.ts:		ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"),
src/vs/base/common/keybindingLabels.ts:		shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"),
src/vs/base/common/keybindingLabels.ts:		altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"),
src/vs/base/common/keybindingLabels.ts:		metaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, "Windows"),
src/vs/base/common/keybindingLabels.ts:		ctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"),
src/vs/base/common/keybindingLabels.ts:		shiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"),
src/vs/base/common/keybindingLabels.ts:		altKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"),
src/vs/base/common/keybindingLabels.ts:		metaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, "Super"),
src/vs/base/common/keybindingLabels.ts:		ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
src/vs/base/common/keybindingLabels.ts:		shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
src/vs/base/common/keybindingLabels.ts:		altKey: nls.localize({ key: 'optKey.long', comment: ['This is the long form for the Alt/Option key on the keyboard'] }, "Option"),
src/vs/base/common/keybindingLabels.ts:		metaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, "Command"),
src/vs/base/common/keybindingLabels.ts:		ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
src/vs/base/common/keybindingLabels.ts:		shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
src/vs/base/common/keybindingLabels.ts:		altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"),
src/vs/base/common/keybindingLabels.ts:		metaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, "Windows"),
src/vs/base/common/keybindingLabels.ts:		ctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"),
src/vs/base/common/keybindingLabels.ts:		shiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"),
src/vs/base/common/keybindingLabels.ts:		altKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"),
src/vs/base/common/keybindingLabels.ts:		metaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, "Super"),
src/vs/base/browser/ui/button/button.ts:		this.dropdownButton.element.title = localize("button dropdown more actions", 'More Actions...');
src/vs/base/browser/ui/findinput/findInput.ts:const NLS_DEFAULT_LABEL = nls.localize('defaultLabel', "input");
src/vs/base/common/date.ts:		return localize('date.fromNow.in', 'in {0}', fromNow(new Date().getTime() + seconds * 1000, false));
src/vs/base/common/date.ts:		return localize('date.fromNow.now', 'now');
src/vs/base/common/date.ts:					? localize('date.fromNow.seconds.singular.ago.fullWord', '{0} second ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.seconds.singular.ago', '{0} sec ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.seconds.plural.ago.fullWord', '{0} seconds ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.seconds.plural.ago', '{0} secs ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.seconds.singular.fullWord', '{0} second', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.seconds.singular', '{0} sec', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.seconds.plural.fullWord', '{0} seconds', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.seconds.plural', '{0} secs', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.minutes.singular.ago.fullWord', '{0} minute ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.minutes.singular.ago', '{0} min ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.minutes.plural.ago.fullWord', '{0} minutes ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.minutes.plural.ago', '{0} mins ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.minutes.singular.fullWord', '{0} minute', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.minutes.singular', '{0} min', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.minutes.plural.fullWord', '{0} minutes', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.minutes.plural', '{0} mins', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.hours.singular.ago.fullWord', '{0} hour ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.hours.singular.ago', '{0} hr ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.hours.plural.ago.fullWord', '{0} hours ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.hours.plural.ago', '{0} hrs ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.hours.singular.fullWord', '{0} hour', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.hours.singular', '{0} hr', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.hours.plural.fullWord', '{0} hours', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.hours.plural', '{0} hrs', value);
src/vs/base/common/date.ts:				? localize('date.fromNow.days.singular.ago', '{0} day ago', value)
src/vs/base/common/date.ts:				: localize('date.fromNow.days.plural.ago', '{0} days ago', value);
src/vs/base/common/date.ts:				? localize('date.fromNow.days.singular', '{0} day', value)
src/vs/base/common/date.ts:				: localize('date.fromNow.days.plural', '{0} days', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.weeks.singular.ago.fullWord', '{0} week ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.weeks.singular.ago', '{0} wk ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.weeks.plural.ago.fullWord', '{0} weeks ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.weeks.plural.ago', '{0} wks ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.weeks.singular.fullWord', '{0} week', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.weeks.singular', '{0} wk', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.weeks.plural.fullWord', '{0} weeks', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.weeks.plural', '{0} wks', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.months.singular.ago.fullWord', '{0} month ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.months.singular.ago', '{0} mo ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.months.plural.ago.fullWord', '{0} months ago', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.months.plural.ago', '{0} mos ago', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.months.singular.fullWord', '{0} month', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.months.singular', '{0} mo', value);
src/vs/base/common/date.ts:					? localize('date.fromNow.months.plural.fullWord', '{0} months', value)
src/vs/base/common/date.ts:					: localize('date.fromNow.months.plural', '{0} mos', value);
src/vs/base/common/date.ts:				? localize('date.fromNow.years.singular.ago.fullWord', '{0} year ago', value)
src/vs/base/common/date.ts:				: localize('date.fromNow.years.singular.ago', '{0} yr ago', value);
src/vs/base/common/date.ts:				? localize('date.fromNow.years.plural.ago.fullWord', '{0} years ago', value)
src/vs/base/common/date.ts:				: localize('date.fromNow.years.plural.ago', '{0} yrs ago', value);
src/vs/base/common/date.ts:				? localize('date.fromNow.years.singular.fullWord', '{0} year', value)
src/vs/base/common/date.ts:				: localize('date.fromNow.years.singular', '{0} yr', value);
src/vs/base/common/date.ts:				? localize('date.fromNow.years.plural.fullWord', '{0} years', value)
src/vs/base/common/date.ts:				: localize('date.fromNow.years.plural', '{0} yrs', value);
src/vs/base/browser/ui/findinput/replaceInput.ts:const NLS_DEFAULT_LABEL = nls.localize('defaultLabel', "input");
src/vs/base/browser/ui/findinput/replaceInput.ts:const NLS_PRESERVE_CASE_LABEL = nls.localize('label.preserveCaseToggle', "Preserve Case");
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:		templateData.name.textContent = localize('name', "Process Name");
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:		templateData.CPU.textContent = localize('cpu', "CPU (%)");
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:		templateData.PID.textContent = localize('pid', "PID");
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:		templateData.memory.textContent = localize('memory', "Memory (MB)");
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:				label: localize('killProcess', "Kill Process"),
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:				label: localize('forceKillProcess', "Force Kill Process"),
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:			label: localize('copy', "Copy"),
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:			label: localize('copyAll', "Copy All"),
src/vs/code/electron-sandbox/processExplorer/processExplorerMain.ts:				label: localize('debug', "Debug"),
src/vs/base/common/actions.ts:		super(EmptySubmenuAction.ID, nls.localize('submenu.empty', '(empty)'), undefined, false);
src/vs/base/parts/quickinput/browser/quickInput.ts:	tooltip: localize('quickInput.back', "Back"),
src/vs/base/parts/quickinput/browser/quickInput.ts:	protected static readonly noPromptMessage = localize('inputModeEntry', "Press 'Enter' to confirm your input or 'Escape' to cancel");
src/vs/base/parts/quickinput/browser/quickInput.ts:			return localize('quickInput.steps', "{0}/{1}", this.step, this.totalSteps);
src/vs/base/parts/quickinput/browser/quickInput.ts:	private static readonly DEFAULT_ARIA_LABEL = localize('quickInputBox.ariaLabel', "Type to narrow down results.");
src/vs/base/parts/quickinput/browser/quickInput.ts:			? localize('inputModeEntryDescription', "{0} (Press 'Enter' to confirm or 'Escape' to cancel)", prompt)
src/vs/base/parts/quickinput/browser/quickInput.ts:		checkAll.setAttribute('aria-label', localize('quickInput.checkAll', "Toggle all checkboxes"));
src/vs/base/parts/quickinput/browser/quickInput.ts:		const visibleCount = new CountBadge(visibleCountContainer, { countFormat: localize({ key: 'quickInput.visibleCount', comment: ['This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.'] }, "{0} Results") });
src/vs/base/parts/quickinput/browser/quickInput.ts:		const count = new CountBadge(countContainer, { countFormat: localize({ key: 'quickInput.countSelected', comment: ['This tells the user how many items are selected in a list of items to select from. The items can be anything.'] }, "{0} Selected") });
src/vs/base/parts/quickinput/browser/quickInput.ts:		ok.label = localize('ok', "OK");
src/vs/base/parts/quickinput/browser/quickInput.ts:		customButton.label = localize('custom', "Custom");
src/vs/base/parts/quickinput/browser/quickInput.ts:		backButton.tooltip = backKeybindingLabel ? localize('quickInput.backWithKeybinding', "Back ({0})", backKeybindingLabel) : localize('quickInput.back', "Back");
src/vs/base/parts/quickinput/browser/quickInputList.ts:		return localize('quickInput', "Quick Input");
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:const sendSystemInfoLabel = escape(localize('sendSystemInfo', "Include my system information"));
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:const sendProcessInfoLabel = escape(localize('sendProcessInfo', "Include my currently running processes"));
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:const sendWorkspaceInfoLabel = escape(localize('sendWorkspaceInfo', "Include my workspace metadata"));
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:const sendExtensionsLabel = escape(localize('sendExtensions', "Include my enabled extensions"));
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:const sendExperimentsLabel = escape(localize('sendExperiments', "Include A/B experiment info"));
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:const reviewGuidanceLabel = localize( // intentionally not escaped because of its embedded tags
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:	<div id="english" class="input-group hidden">${escape(localize('completeInEnglish', "Please complete the form in English."))}</div>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<label class="inline-label" for="issue-type">${escape(localize('issueTypeLabel', "This is a"))}</label>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<label class="inline-label" for="issue-source">${escape(localize('issueSourceLabel', "File on"))} <span class="required-input">*</span></label>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<div id="issue-source-empty-error" class="validation-error hidden" role="alert">${escape(localize('issueSourceEmptyValidation', "An issue source is required."))}</div>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<div id="problem-source-help-text" class="instructions hidden">${escape(localize('disableExtensionsLabelText', "Try to reproduce the problem after {0}. If the problem only reproduces when extensions are active, it is likely an issue with an extension."))
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:		.replace('{0}', `<span tabIndex=0 role="button" id="disableExtensions" class="workbenchCommand">${escape(localize('disableExtensions', "disabling all extensions and reloading the window"))}</span>`)}
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:				<label class="inline-label" for="extension-selector">${escape(localize('chooseExtension', "Extension"))} <span class="required-input">*</span></label>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:				<div id="extension-selection-validation-error" class="validation-error hidden" role="alert">${escape(localize('extensionWithNonstandardBugsUrl', "The issue reporter is unable to create issues for this extension. Please visit {0} to report an issue."))
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:					${escape(localize('extensionWithNoBugsUrl', "The issue reporter is unable to create issues for this extension, as it does not specify a URL for reporting issues. Please check the marketplace page of this extension to see if other instructions are available."))}
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<label class="inline-label" for="issue-title">${escape(localize('issueTitleLabel', "Title"))} <span class="required-input">*</span></label>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<input id="issue-title" type="text" class="inline-form-control" placeholder="${escape(localize('issueTitleRequired', "Please enter a title."))}" required>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<div id="issue-title-empty-error" class="validation-error hidden" role="alert">${escape(localize('titleEmptyValidation', "A title is required."))}</div>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<div id="issue-title-length-validation-error" class="validation-error hidden" role="alert">${escape(localize('titleLengthValidation', "The title is too long."))}</div>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:			<textarea name="description" id="description" placeholder="${escape(localize('details', "Please enter details."))}" required></textarea>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:		<div id="description-empty-error" class="validation-error hidden" role="alert">${escape(localize('descriptionEmptyValidation', "A description is required."))}</div>
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:				(<a href="#" class="showInfo">${escape(localize('show', "show"))}</a>)
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:				(<a href="#" class="showInfo">${escape(localize('show', "show"))}</a>)
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:				(<a href="#" class="showInfo">${escape(localize('show', "show"))}</a>)
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:				(<a href="#" class="showInfo">${escape(localize('show', "show"))}</a>)
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:				(<a href="#" class="showInfo">${escape(localize('show', "show"))}</a>)
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:						label.textContent = localize('hide', "hide");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:						label.textContent = localize('show', "show");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:				this.previewButton.label = localize('createOnGitHub', "Create on GitHub");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:				this.previewButton.label = localize('previewOnGitHub', "Preview on GitHub");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			this.previewButton.label = localize('loadingData', "Loading data...");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:					message.textContent = localize('rateLimited', "GitHub query limit exceeded. Please wait.");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			issuesText.textContent = localize('similarIssues', "Similar issues");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:					issueStateLabel.textContent = issue.state === 'open' ? localize('open', "Open") : localize('closed', "Closed");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:					issueState.title = issue.state === 'open' ? localize('open', "Open") : localize('closed', "Closed");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			message.textContent = localize('noSimilarIssues', "No similar issues found");
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			makeOption(IssueType.Bug, localize('bugReporter', "Bug Report")),
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			makeOption(IssueType.FeatureRequest, localize('featureRequest', "Feature Request")),
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			makeOption(IssueType.PerformanceIssue, localize('performanceIssue', "Performance Issue")),
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:		sourceSelect.append(this.makeOption('', localize('selectSource', "Select source"), true));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:		sourceSelect.append(this.makeOption('vscode', localize('vscode', "Visual Studio Code"), false));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:		sourceSelect.append(this.makeOption('extension', localize('extension', "An extension"), false));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			sourceSelect.append(this.makeOption('marketplace', localize('marketplace', "Extensions marketplace"), false));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			sourceSelect.append(this.makeOption('', localize('unknown', "Don't know"), false));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			reset(descriptionTitle, localize('stepsToReproduce', "Steps to Reproduce") + ' ', $('span.required-input', undefined, '*'));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			reset(descriptionSubtitle, localize('bugDescription', "Share the steps needed to reliably reproduce the problem. Please include actual and expected results. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub."));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			reset(descriptionTitle, localize('stepsToReproduce', "Steps to Reproduce") + ' ', $('span.required-input', undefined, '*'));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			reset(descriptionSubtitle, localize('performanceIssueDesciption', "When did this performance issue happen? Does it occur on startup or after a specific series of actions? We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub."));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			reset(descriptionTitle, localize('description', "Description") + ' ', $('span.required-input', undefined, '*'));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			reset(descriptionSubtitle, localize('featureRequestDescription', "Please describe the feature you would like to see. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub."));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:					resolve(baseUrl + `&body=${encodeURIComponent(localize('pasteData', "We have written the needed data into your clipboard because it was too large to send. Please paste."))}`);
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:				reset(target, localize('disabledExtensions', "Extensions are disabled"));
src/vs/code/electron-sandbox/issue/issueReporterMain.ts:			target.textContent = experimentInfo ? experimentInfo : localize('noCurrentExperiments', "No current experiments.");
extensions/markdown-language-features/server/src/server.ts:				title: localize('organizeLinkDefAction.title', "Organize link definitions"),
extensions/debug-server-ready/src/extension.ts:				const errMsg = localize('server.ready.nocapture.error', "Format uri ('{0}') uses a substitution placeholder but pattern did not capture anything.", format);
extensions/debug-server-ready/src/extension.ts:				const errMsg = localize('server.ready.placeholder.error', "Format uri ('{0}') must contain exactly one substitution placeholder.", format);
extensions/debug-auto-launch/src/extension.ts:	[State.Disabled]: localize('status.text.auto.attach.disabled', 'Auto Attach: Disabled'),
extensions/debug-auto-launch/src/extension.ts:	[State.Always]: localize('status.text.auto.attach.always', 'Auto Attach: Always'),
extensions/debug-auto-launch/src/extension.ts:	[State.Smart]: localize('status.text.auto.attach.smart', 'Auto Attach: Smart'),
extensions/debug-auto-launch/src/extension.ts:	[State.OnlyWithFlag]: localize('status.text.auto.attach.withFlag', 'Auto Attach: With Flag'),
extensions/debug-auto-launch/src/extension.ts:	[State.Disabled]: localize('debug.javascript.autoAttach.disabled.label', 'Disabled'),
extensions/debug-auto-launch/src/extension.ts:	[State.Always]: localize('debug.javascript.autoAttach.always.label', 'Always'),
extensions/debug-auto-launch/src/extension.ts:	[State.Smart]: localize('debug.javascript.autoAttach.smart.label', 'Smart'),
extensions/debug-auto-launch/src/extension.ts:	[State.OnlyWithFlag]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.Disabled]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.Always]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.Smart]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.OnlyWithFlag]: localize(
extensions/debug-auto-launch/src/extension.ts:const TEXT_TOGGLE_WORKSPACE = localize('scope.workspace', 'Toggle auto attach in this workspace');
extensions/debug-auto-launch/src/extension.ts:const TEXT_TOGGLE_GLOBAL = localize('scope.global', 'Toggle auto attach on this machine');
extensions/debug-auto-launch/src/extension.ts:const TEXT_TEMP_DISABLE = localize('tempDisable.disable', 'Temporarily disable auto attach in this session');
extensions/debug-auto-launch/src/extension.ts:const TEXT_TEMP_ENABLE = localize('tempDisable.enable', 'Re-enable auto attach');
extensions/debug-auto-launch/src/extension.ts:const TEXT_TEMP_DISABLE_LABEL = localize('tempDisable.suffix', 'Auto Attach: Disabled');
extensions/debug-auto-launch/src/extension.ts:		statusItem.name = localize('status.name.auto.attach', "Debug Auto Attach");
extensions/debug-auto-launch/src/extension.ts:		statusItem.tooltip = localize('status.tooltip.auto.attach', "Automatically attach to node.js processes in debug mode");
build/lib/nls.js:        // `nls.localize(...)` calls
build/lib/nls.ts:		// `nls.localize(...)` calls
