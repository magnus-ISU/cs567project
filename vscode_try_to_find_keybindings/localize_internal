data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]
{ key: 'miCut', comment: ['&& denotes a mnemonic'] }, "Cu&&t"
'actions.clipboard.cutLabel', "Cut"
'actions.clipboard.cutLabel', "Cut"
'actions.clipboard.cutLabel', "Cut"
{ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, "&&Copy"
'actions.clipboard.copyLabel', "Copy"
'actions.clipboard.copyLabel', "Copy"
'actions.clipboard.copyLabel', "Copy"
'copy as', "Copy As"), original: 'Copy As', }, group: '2_ccp', order: 3 }
'copy as', "Copy As"), original: 'Copy As', }, group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 }
'share', "Share"), original: 'Share', }, group: '11_share', order: -1 }
{ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, "&&Paste"
'actions.clipboard.pasteLabel', "Paste"
'actions.clipboard.pasteLabel', "Paste"
'actions.clipboard.pasteLabel', "Paste"
'actions.clipboard.copyWithSyntaxHighlightingLabel', "Copy With Syntax Highlighting"
'showLensOnLine', "Show CodeLens Commands For Current Line"
'comment.line', "Toggle Line Comment"
{ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, "&&Toggle Line Comment"
'comment.line.add', "Add Line Comment"
'comment.line.remove', "Remove Line Comment"
'comment.block', "Toggle Block Comment"
{ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, "Toggle &&Block Comment"
'InPlaceReplaceAction.previous.label', "Replace with Previous Value"
'InPlaceReplaceAction.next.label', "Replace with Next Value"
'indentationToSpaces', "Convert Indentation to Spaces"
'indentationToTabs', "Convert Indentation to Tabs"
'configuredTabSize', "Configured Tab Size"
{ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, "Select Tab Size for Current File"), activeItem: picks[autoFocusIndex] }
'indentUsingTabs', "Indent Using Tabs"
'indentUsingSpaces', "Indent Using Spaces"
'detectIndentation', "Detect Indentation from Content"
'editor.reindentlines', "Reindent Lines"
'editor.reindentselectedlines', "Reindent Selected Lines"
'symbolIcon.arrayForeground', 'The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.booleanForeground', 'The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.classForeground', 'The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.colorForeground', 'The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.constantForeground', 'The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.constructorForeground', 'The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.enumeratorForeground', 'The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.enumeratorMemberForeground', 'The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.eventForeground', 'The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.fieldForeground', 'The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.fileForeground', 'The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.folderForeground', 'The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.functionForeground', 'The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.interfaceForeground', 'The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.keyForeground', 'The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.keywordForeground', 'The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.methodForeground', 'The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.moduleForeground', 'The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.namespaceForeground', 'The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.nullForeground', 'The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.numberForeground', 'The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.objectForeground', 'The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.operatorForeground', 'The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.packageForeground', 'The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.propertyForeground', 'The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.referenceForeground', 'The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.snippetForeground', 'The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.stringForeground', 'The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.structForeground', 'The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.textForeground', 'The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.typeParameterForeground', 'The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.unitForeground', 'The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'symbolIcon.variableForeground', 'The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget.')
'showNextInlineSuggestion', "Next"
'showPreviousInlineSuggestion', "Previous"
'acceptInlineSuggestion', "Accept"
'inlineSuggestionFollows', "Suggestion:"
'aria.alert.snippet', "Accepting '{0}' made {1} additional edits", item.textLabel, item.completion.additionalTextEdits.length
'suggest.trigger.label', "Trigger Suggest"
'accept.insert', "Insert"
'accept.insert', "Insert"
'accept.replace', "Replace"
'accept.replace', "Replace"
'accept.insert', "Insert"
'detail.more', "show less"
'detail.less', "show more"
'suggest.reset.label', "Reset Suggest Widget Size"
'suggestMoreInfoIcon', 'Icon for more information in the suggest widget.')
'readMore', "Read More"
'forceRetokenize', "Developer: Force Retokenize"
'ddd', '{0} ({1})', this._action.label, StatusBarViewItem.symbolPrintEnter(kb)
'editorSuggestWidgetBackground', 'Background color of the suggest widget.')
'editorSuggestWidgetBorder', 'Border color of the suggest widget.')
'editorSuggestWidgetForeground', 'Foreground color of the suggest widget.')
'editorSuggestWidgetSelectedForeground', 'Foreground color of the selected entry in the suggest widget.')
'editorSuggestWidgetSelectedIconForeground', 'Icon foreground color of the selected entry in the suggest widget.')
'editorSuggestWidgetSelectedBackground', 'Background color of the selected entry in the suggest widget.')
'editorSuggestWidgetHighlightForeground', 'Color of the match highlights in the suggest widget.')
'editorSuggestWidgetFocusHighlightForeground', 'Color of the match highlights in the suggest widget when an item is focused.')
'editorSuggestWidgetStatusForeground', 'Foreground color of the suggest widget status.')
'suggestWidget.loading', "Loading..."
'suggestWidget.noSuggestions', "No suggestions."
'suggest', "Suggest"
'label.full', '{0}{1}, {2}', label, detail, description
'label.detail', '{0}{1}', label, detail
'label.desc', '{0}, {1}', label, description
'ariaCurrenttSuggestionReadDetails', "{0}, docs: {1}", label, docs
'suggestWidgetHasSelection', "Whether any suggestion is focused")
'suggestWidgetDetailsVisible', "Whether suggestion details are visible")
'suggestWidgetMultipleSuggestions', "Whether there are multiple suggestions to pick from")
'suggestionMakesTextEdit', "Whether inserting the current suggestion yields in a change or has everything already been typed")
'acceptSuggestionOnEnter', "Whether suggestions are inserted when pressing Enter")
'suggestionHasInsertAndReplaceRange', "Whether the current suggestion has insert and replace behaviour")
'suggestionInsertMode', "Whether the default behaviour is to insert or replace") }
'suggestionCanResolve', "Whether the current suggestion supports to resolve further details")
'wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true
'wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true
'wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.')
'wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.')
'overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true
'overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true
'wordHighlight.next.label', "Go to Next Symbol Highlight"
'wordHighlight.previous.label', "Go to Previous Symbol Highlight"
'wordHighlight.trigger.label', "Trigger Symbol Highlight"
{ key: 'toggle.tabMovesFocus', comment: ['Turn on/off use of tab key for moving focus around VS Code'] }, "Toggle Tab Key Moves Focus"
'toggle.tabMovesFocus.on', "Pressing Tab will now move focus to the next focusable element")
'toggle.tabMovesFocus.off', "Pressing Tab will now insert the tab character")
'deleteInsideWord', "Delete Word"
'inlineSuggestionVisible', "Whether an inline suggestion is visible")
'inlineSuggestionHasIndentation', "Whether the inline suggestion starts with whitespace")
'inlineSuggestionHasIndentationLessThanTabSize', "Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab")
'action.inlineSuggest.showNext', "Show Next Inline Suggestion"
'action.inlineSuggest.showPrevious', "Show Previous Inline Suggestion"
'action.inlineSuggest.trigger', "Trigger Inline Suggestion"
'details.close', "Close"
'loading', "Loading..."
'unusualLineTerminators.title', "Unusual Line Terminators"
'unusualLineTerminators.message', "Detected unusual line terminators"
'unusualLineTerminators.detail', "The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).\n\nIt is recommended to remove them from the file. This can be configured via `editor.unusualLineTerminators`.", basename(model.uri)
'unusualLineTerminators.fix', "Remove Unusual Line Terminators"
'unusualLineTerminators.ignore', "Ignore"
'toggleStickyScroll', "Toggle Sticky Scroll"
'mitoggleStickyScroll', "&&Toggle Sticky Scroll"
'stickyScroll', "Sticky Scroll"
'miStickyScroll', "&&Sticky Scroll"
'expandLineSelection', "Expand Line Selection"
'warningIcon', 'Icon shown with a warning message in the extensions editor.')
'unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters', 'This document contains many non-basic ASCII unicode characters'
'unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters', 'This document contains many ambiguous unicode characters'
'unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters', 'This document contains many invisible unicode characters'
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					reason = nls.localize(
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					reason = nls.localize(
src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.ts:					reason = nls.localize(
'unicodeHighlight.adjustSettings', 'Adjust settings'
'unicodeHighlight.disableHighlightingInComments.shortLabel', 'Disable Highlight In Comments'
'action.unicodeHighlight.disableHighlightingInComments', 'Disable highlighting of characters in comments'
'unicodeHighlight.disableHighlightingInStrings.shortLabel', 'Disable Highlight In Strings'
'action.unicodeHighlight.disableHighlightingInStrings', 'Disable highlighting of characters in strings'
'unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel', 'Disable Ambiguous Highlight'
'action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters', 'Disable highlighting of ambiguous characters'
'unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel', 'Disable Invisible Highlight'
'action.unicodeHighlight.disableHighlightingOfInvisibleCharacters', 'Disable highlighting of invisible characters'
'unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel', 'Disable Non ASCII Highlight'
'action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters', 'Disable highlighting of non basic ASCII characters'
'action.unicodeHighlight.showExcludeOptions', "Show Exclude Options"
'unicodeHighlight.excludeInvisibleCharFromBeingHighlighted', 'Exclude {0} (invisible character) from being highlighted', codePointToHex(codePoint)
'unicodeHighlight.excludeCharFromBeingHighlighted', 'Exclude {0} from being highlighted', `${codePointToHex(codePoint)} "${char}"`
"unicodeHighlight.allowCommonCharactersInLanguage", "Allow unicode characters that are more common in the language \"{0}\".", locale
'unicodeHighlight.configureUnicodeHighlightOptions', 'Configure Unicode Highlight Options'
'hint.dbl', "Double click to insert"))], false, 10001)
'links.navigate.kb.meta.mac', "cmd + click"
'links.navigate.kb.meta', "ctrl + click"
'links.navigate.kb.alt.mac', "option + click"
'links.navigate.kb.alt', "alt + click"
'hint.defAndCommand', 'Go to Definition ({0}), right click for more', kb)
'hint.def', 'Go to Definition ({0})', kb)
'hint.cmd', "Execute Command")}](${asCommandLink(part.part.command)} "${part.part.command.title}") (${kb})`, { isTrusted: true }
'inSnippetMode', "Whether the editor in current in snippet mode")
'hasNextTabstop', "Whether there is a next tab stop when in snippet mode")
'hasPrevTabstop', "Whether there is a previous tab stop when in snippet mode")
'next', 'Go to next placeholder...'
'smartSelect.expand', "Expand Selection"
{ key: 'miSmartSelectGrow', comment: ['&& denotes a mnemonic'] }, "&&Expand Selection"
'smartSelect.shrink', "Shrink Selection"
{ key: 'miSmartSelectShrink', comment: ['&& denotes a mnemonic'] }, "&&Shrink Selection"
'Saturday', "Saturday"
'SaturdayShort', "Sat"
'December', "December"
'DecemberShort', "Dec"
'editor.simple.readonly', "Cannot edit in read-only input"), this.editor.getPosition()
'editor.readonly', "Cannot edit in read-only editor"), this.editor.getPosition()
src/vs/editor/contrib/hover/browser/hover.ts:			label: nls.localize({
src/vs/editor/contrib/hover/browser/hover.ts:			label: nls.localize({
'renameInputVisible', "Whether the rename input widget is visible")
'renameAriaLabel', "Rename input. Type new name and press Enter to commit.")
{ key: 'label', comment: ['placeholders are keybindings, e.g "F2 to Rename, Shift+F2 to Preview"'] }, "{0} to Rename, {1} to Preview", this._keybindingService.lookupKeybinding(accept)?.getLabel(), this._keybindingService.lookupKeybinding(preview)?.getLabel()
'no result', "No result.")), token
'resolveRenameLocationFailed', "An unknown error occurred while resolving rename location"), position
'label', "Renaming '{0}' to '{1}'", loc?.text, inputFieldResult.newName
'quotableLabel', "Renaming {0} to {1}", loc?.text, inputFieldResult.newName
'aria', "Successfully renamed '{0}' to '{1}'. Summary: {2}", loc!.text, inputFieldResult.newName, result.ariaSummary)
'rename.failedApply', "Rename failed to apply edits")
'rename.failed', "Rename failed to compute edits")
'rename.label', "Rename Symbol"
'enablePreview', "Enable/disable the ability to preview changes before renaming"
'cannotRunGotoLine', "Open a text editor first to go to a line."
'gotoLineColumnLabel', "Go to line {0} and character {1}.", lineNumber, column
'gotoLineLabel', "Go to line {0}.", lineNumber
'gotoLineLabelEmptyWithLimit', "Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.", position.lineNumber, position.column, lineCount
'gotoLineLabelEmpty', "Current Line: {0}, Character: {1}. Type a line number to navigate to.", position.lineNumber, position.column
'modesContentHover.loading', "Loading..."))], false, 2000
'stopped rendering', "Rendering paused for long line for performance reasons. This can be configured via `editor.stopRenderingLineAfter`."
'too many characters', "Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`."
'cannotRunGotoSymbolWithoutEditor', "To go to a symbol, first open a text editor with symbol information.")
'cannotRunGotoSymbolWithoutSymbolProvider', "The active text editor does not provide symbol information.")
'noMatchingSymbolResults', "No matching editor symbols")
'noSymbolResults', "No editor symbols")
'openToBottom', "Open to the Bottom"
'symbols', "symbols ({0})", filteredSymbolPicks.length
'property', "properties ({0})"
'method', "methods ({0})"
'function', "functions ({0})"
'_constructor', "constructors ({0})"
'variable', "variables ({0})"
'class', "classes ({0})"
'struct', "structs ({0})"
'event', "events ({0})"
'operator', "operators ({0})"
'interface', "interfaces ({0})"
'namespace', "namespaces ({0})"
'package', "packages ({0})"
'typeParameter', "type parameters ({0})"
'modules', "modules ({0})"
'property', "properties ({0})"
'enum', "enumerations ({0})"
'enumMember', "enumeration members ({0})"
'string', "strings ({0})"
'file', "files ({0})"
'array', "arrays ({0})"
'number', "numbers ({0})"
'boolean', "booleans ({0})"
'object', "objects ({0})"
'key', "keys ({0})"
'field', "fields ({0})"
'constant', "constants ({0})"
'messageVisible', 'Whether the editor is currently showing an inline message')
'inReferenceSearchEditor', "Whether the current code editor is embedded inside peek")
'label.close', "Close"), Codicon.close.classNames, true, (
'peekViewTitleBackground', 'Background color of the peek view title area.')
'peekViewTitleForeground', 'Color of the peek view title.')
'peekViewTitleInfoForeground', 'Color of the peek view title info.')
'peekViewBorder', 'Color of the peek view borders and arrow.')
'peekViewResultsBackground', 'Background color of the peek view result list.')
'peekViewResultsMatchForeground', 'Foreground color for line nodes in the peek view result list.')
'peekViewResultsFileForeground', 'Foreground color for file nodes in the peek view result list.')
'peekViewResultsSelectionBackground', 'Background color of the selected entry in the peek view result list.')
'peekViewResultsSelectionForeground', 'Foreground color of the selected entry in the peek view result list.')
'peekViewEditorBackground', 'Background color of the peek view editor.')
'peekViewEditorGutterBackground', 'Background color of the gutter in the peek view editor.')
'peekViewResultsMatchHighlight', 'Match highlight color in the peek view result list.')
'peekViewEditorMatchHighlight', 'Match highlight color in the peek view editor.')
'peekViewEditorMatchHighlightBorder', 'Match highlight border in the peek view editor.')
'cursorsAdded', "Cursors added: {0}", cursorPositions
'mutlicursor.insertAbove', "Add Cursor Above"
{ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, "&&Add Cursor Above"
'mutlicursor.insertBelow', "Add Cursor Below"
{ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, "A&&dd Cursor Below"
'mutlicursor.insertAtEndOfEachLineSelected', "Add Cursors to Line Ends"
{ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, "Add C&&ursors to Line Ends"
'mutlicursor.addCursorsToBottom', "Add Cursors To Bottom"
'mutlicursor.addCursorsToTop', "Add Cursors To Top"
'addSelectionToNextFindMatch', "Add Selection To Next Find Match"
{ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, "Add &&Next Occurrence"
'addSelectionToPreviousFindMatch', "Add Selection To Previous Find Match"
{ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, "Add P&&revious Occurrence"
'moveSelectionToNextFindMatch', "Move Last Selection To Next Find Match"
'moveSelectionToPreviousFindMatch', "Move Last Selection To Previous Find Match"
'selectAllOccurrencesOfFindMatch', "Select All Occurrences of Find Match"
{ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, "Select All &&Occurrences"
'changeAll.label', "Change All Occurrences"
'mutlicursor.focusNextCursor', "Focus Next Cursor"
'mutlicursor.focusNextCursor.description', "Focuses the next cursor"
'mutlicursor.focusPreviousCursor', "Focus Previous Cursor"
'mutlicursor.focusPreviousCursor.description', "Focuses the previous cursor"
'parameterHintsNextIcon', 'Icon for show next parameter hint.')
'parameterHintsPreviousIcon', 'Icon for show previous parameter hint.')
'hint', "{0}, hint", labelToAnnounce)
'editorHoverWidgetHighlightForeground', 'Foreground color of the active item in the parameter hint.')
'view problem', "View Problem"
'noQuickFixes', "No quick fixes available"
'checkingForQuickFixes', "Checking for quick fixes..."), 200)
'noQuickFixes', "No quick fixes available"
'quick fixes', "Quick Fix..."
'parameterHints.trigger.label', "Trigger Parameter Hints"
'invalid.url', 'Failed to open this link because it is not well-formed: {0}', link.url!.toString())
'missing.url', 'Failed to open this link because its target is missing.')
'links.navigate.executeCmd', 'Execute command'
'links.navigate.follow', 'Follow link'
'links.navigate.kb.meta.mac', "cmd + click"
'links.navigate.kb.meta', "ctrl + click"
'links.navigate.kb.alt.mac', "option + click"
'links.navigate.kb.alt', "alt + click"
'tooltip.explanation', "Execute command {0}", commandId
'label', "Open Link"
'lines.copyUp', "Copy Line Up"
{ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, "&&Copy Line Up"
'lines.copyDown', "Copy Line Down"
{ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, "Co&&py Line Down"
'duplicateSelection', "Duplicate Selection"
{ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, "&&Duplicate Selection"
'lines.moveUp', "Move Line Up"
{ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, "Mo&&ve Line Up"
'lines.moveDown', "Move Line Down"
{ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, "Move &&Line Down"
'lines.sortAscending', "Sort Lines Ascending"
'lines.sortDescending', "Sort Lines Descending"
'lines.deleteDuplicates', "Delete Duplicate Lines"
'lines.trimTrailingWhitespace', "Trim Trailing Whitespace"
'lines.delete', "Delete Line"
'lines.indent', "Indent Line"
'lines.outdent', "Outdent Line"
'lines.insertBefore', "Insert Line Above"
'lines.insertAfter', "Insert Line Below"
'lines.deleteAllLeft', "Delete All Left"
'lines.deleteAllRight', "Delete All Right"
'lines.joinLines', "Join Lines"
'editor.transpose', "Transpose characters around the cursor"
'editor.transformToUppercase', "Transform to Uppercase"
'editor.transformToLowercase', "Transform to Lowercase"
'editor.transformToTitlecase', "Transform to Title Case"
'editor.transformToSnakecase', "Transform to Snake Case"
'editor.transformToKebabcase', 'Transform to Kebab Case'
'linkedEditing.label', "Start Linked Editing"
'editorLinkedEditingBackground', 'Background color when the editor auto renames on type.')
'preferredcodeActionWithKb', "Show Code Actions. Preferred Quick Fix Available ({0})", this._preferredKbLabel
'codeActionWithKb', "Show Code Actions ({0})", this._quickFixKbLabel
'codeAction', "Show Code Actions"
'applyCodeActionFailed', "An unknown error occurred while applying the code action")
'codeActionMenuVisible', "Whether the code action list widget is visible")
'codeAction.widget.id.more', 'More Actions...') }
'codeAction.widget.id.quickfix', 'Quick Fix...'
'codeAction.widget.id.extract', 'Extract...'
'codeAction.widget.id.inline', 'Inline...'
'codeAction.widget.id.convert', 'Rewrite...'
'codeAction.widget.id.move', 'Move...'
'codeAction.widget.id.surround', 'Surround With...'
'codeAction.widget.id.source', 'Source Action...'
{ key: 'label', comment: ['placeholders are keybindings, e.g "F2 to Apply, Shift+F2 to Preview"'] }, "{0} to Apply, {1} to Preview", this.keybindingService.lookupKeybinding(acceptSelectedCodeActionCommand)?.getLabel(), this.keybindingService.lookupKeybinding(previewSelectedCodeActionCommand)?.getLabel()
{ key: 'customCodeActionWidget.labels', comment: ['Code action labels for accessibility.'] }, "{0}, Disabled Reason: {1}", label, element.action.action.disabled
{ key: 'customCodeActionWidget', comment: ['A Code Action Option'] }, "Code Action Widget"
'hideMoreCodeActions', 'Hide Disabled'
'showMoreCodeActions', 'Show Disabled'
'showCodeActionHeaders', "Enable/disable showing group headers in the code action menu."
'formatDocument.label', "Format Document"
'formatSelection.label', "Format Selection"
'hint11', "Made 1 formatting edit on line {0}", startLineNumber)
'hintn1', "Made {0} formatting edits on line {1}", edits.length, startLineNumber)
'hint1n', "Made 1 formatting edit between lines {0} and {1}", startLineNumber, endLineNumber)
'hintnn', "Made {0} formatting edits between lines {1} and {2}", edits.length, startLineNumber, endLineNumber)
'editor.action.refactor.noneMessage.preferred.kind', "No preferred refactorings for '{0}' available", userArgs.kind
'editor.action.refactor.noneMessage.kind', "No refactorings for '{0}' available", userArgs.kind
'editor.action.refactor.noneMessage.preferred', "No preferred refactorings available"
'editor.action.refactor.noneMessage', "No refactorings available"
'args.schema.kind', "Kind of the code action to run."
'args.schema.apply', "Controls when the returned actions are applied."
'args.schema.apply.first', "Always apply the first returned code action."
'args.schema.apply.ifSingle', "Apply the first returned code action if it is the only one."
'args.schema.apply.never', "Do not apply the returned code actions."
'args.schema.preferred', "Controls if only preferred code actions should be returned."
'quickfix.trigger.label', "Quick Fix..."
'editor.action.quickFix.noneMessage', "No code actions available"), undefined, undefined, false, CodeActionTriggerSource.QuickFix
'editor.action.codeAction.noneMessage.preferred.kind', "No preferred code actions for '{0}' available", userArgs.kind
'editor.action.codeAction.noneMessage.kind', "No code actions for '{0}' available", userArgs.kind
'editor.action.codeAction.noneMessage.preferred', "No preferred code actions available"
'editor.action.codeAction.noneMessage', "No code actions available"
'refactor.label', "Refactor..."
'refactor.preview.label', "Refactor with Preview..."
'source.label', "Source Action..."
'editor.action.source.noneMessage.preferred.kind', "No preferred source actions for '{0}' available", userArgs.kind
'editor.action.source.noneMessage.kind', "No source actions for '{0}' available", userArgs.kind
'editor.action.source.noneMessage.preferred', "No preferred source actions available"
'editor.action.source.noneMessage', "No source actions available"
'organizeImports.label', "Organize Imports"
'editor.action.organize.noneMessage', "No organize imports action available"
'fixAll.label', "Fix All"
'fixAll.noneMessage', "No fix all action available"
'autoFix.label', "Auto Fix..."
'editor.action.autoFix.noneMessage', "No auto fixes available"
'hideCodeActionWidget.title', "Hide code action widget"
'selectPrevCodeAction.title', "Select previous code action"
'selectNextCodeAction.title', "Select next code action"
'acceptSelected.title', "Accept selected code action"
'previewSelected.title', "Preview selected code action"
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize(
src/vs/editor/contrib/gotoSymbol/browser/referencesModel.ts:			return localize(
'aria.fileReferences.1', "1 symbol in {0}, full path {1}", basename(this.uri), this.uri.fsPath
'aria.fileReferences.N', "{0} symbols in {1}, full path {2}", len, basename(this.uri), this.uri.fsPath
'aria.result.0', "No results found"
'aria.result.1', "Found 1 symbol in {0}", this.references[0].uri.fsPath
'aria.result.n1', "Found {0} symbols in {1}", this.references.length, this.groups[0].uri.fsPath
'aria.result.nm', "Found {0} symbols in {1} files", this.references.length, this.groups.length
'dropProgressTitle', "Running drop handlers..."
'missingPreviewMessage', "no preview available"), PLAINTEXT_LANGUAGE_ID, TextModel.DEFAULT_CREATION_OPTIONS, null, this._undoRedoService, this._languageService, this._languageConfigurationService
'noResults', "No results"
'peekView.alternateTitle', "References")
'hasSymbols', "Whether there are symbol locations that can be navigated via keyboard-only.")
'location.kb', "Symbol {0} of {1}, {2} for next", this._currentIdx + 1, this._currentModel!.references.length, kb.getLabel()
'location', "Symbol {0} of {1}", this._currentIdx + 1, this._currentModel!.references.length
'referencesCount', "{0} references", len)
'referenceCount', "{0} reference", len)
'treeAriaLabel', "References"
'referenceSearchVisible', "Whether reference peek is visible, like 'Peek References' or 'Peek Definition'")
'labelLoading', "Loading...")
'metaTitle.N', "{0} ({1})", this._model.title, this._model.references.length)
'peek.submenu', "Peek"
'def.title', 'Definitions')
'noResultWord', "No definition found for '{0}'", info.word
'generic.noResults', "No definition found"
'actions.goToDecl.label', "Go to Definition"
{ key: 'miGotoDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Definition"
'actions.goToDeclToSide.label', "Open Definition to the Side"
'actions.previewDecl.label', "Peek Definition"
'decl.title', 'Declarations')
'decl.noResultWord', "No declaration found for '{0}'", info.word
'decl.generic.noResults', "No declaration found"
'actions.goToDeclaration.label', "Go to Declaration"
{ key: 'miGotoDeclaration', comment: ['&& denotes a mnemonic'] }, "Go to &&Declaration"
'decl.noResultWord', "No declaration found for '{0}'", info.word
'decl.generic.noResults', "No declaration found"
'actions.peekDecl.label', "Peek Declaration"
'typedef.title', 'Type Definitions')
'goToTypeDefinition.noResultWord', "No type definition found for '{0}'", info.word
'goToTypeDefinition.generic.noResults', "No type definition found"
'actions.goToTypeDefinition.label', "Go to Type Definition"
{ key: 'miGotoTypeDefinition', comment: ['&& denotes a mnemonic'] }, "Go to &&Type Definition"
'actions.peekTypeDefinition.label', "Peek Type Definition"
'impl.title', 'Implementations')
'goToImplementation.noResultWord', "No implementation found for '{0}'", info.word
'goToImplementation.generic.noResults', "No implementation found"
'actions.goToImplementation.label', "Go to Implementations"
{ key: 'miGotoImplementation', comment: ['&& denotes a mnemonic'] }, "Go to &&Implementations"
'actions.peekImplementation.label', "Peek Implementations"
'references.no', "No references found for '{0}'", info.word
'references.noGeneric', "No references found"
'goToReferences.label', "Go to References"
{ key: 'miGotoReference', comment: ['&& denotes a mnemonic'] }, "Go to &&References"
'ref.title', 'References')
'references.action.label', "Peek References"
'ref.title', 'References')
'label.generic', "Go to Any Symbol"
'generic.title', 'Locations')
'generic.noResult', "No results for '{0}'", info.word
'ref.title', 'References')))
'cancellableOperation', 'Whether the editor runs a cancellable operation, e.g. like \'Peek References\'')
'multipleResults', "Click to show {0} definitions.", results.length)
'unfoldAction.label', "Unfold"
'unFoldRecursivelyAction.label', "Unfold Recursively"
'foldAction.label', "Fold"
'toggleFoldAction.label', "Toggle Fold"
'foldRecursivelyAction.label', "Fold Recursively"
'foldAllBlockComments.label', "Fold All Block Comments"
'foldAllMarkerRegions.label', "Fold All Regions"
'unfoldAllMarkerRegions.label', "Unfold All Regions"
'foldAllExcept.label', "Fold All Regions Except Selected"
'unfoldAllExcept.label', "Unfold All Regions Except Selected"
'foldAllAction.label', "Fold All"
'unfoldAllAction.label', "Unfold All"
'gotoParentFold.label', "Go to Parent Fold"
'gotoPreviousFold.label', "Go to Previous Folding Range"
'gotoNextFold.label', "Go to Next Folding Range"
'createManualFoldRange.label', "Create Manual Folding Range from Selection"
'removeManualFoldingRanges.label', "Remove Manual Folding Ranges"
'foldLevelAction.label', "Fold Level {0}", i
'foldBackgroundBackground', "Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations."), true
'editorGutter.foldingControlForeground', 'Color of the folding control in the editor gutter.')
'foldingExpandedIcon', 'Icon for expanded ranges in the editor glyph margin.')
'foldingCollapsedIcon', 'Icon for collapsed ranges in the editor glyph margin.')
'foldingManualCollapedIcon', 'Icon for manually collapsed ranges in the editor glyph margin.')
'foldingManualExpandedIcon', 'Icon for manually expanded ranges in the editor glyph margin.')
'findSelectionIcon', 'Icon for \'Find in Selection\' in the editor find widget.')
'findCollapsedIcon', 'Icon to indicate that the editor find widget is collapsed.')
'findExpandedIcon', 'Icon to indicate that the editor find widget is expanded.')
'findReplaceIcon', 'Icon for \'Replace\' in the editor find widget.')
'findReplaceAllIcon', 'Icon for \'Replace All\' in the editor find widget.')
'findPreviousMatchIcon', 'Icon for \'Find Previous\' in the editor find widget.')
'findNextMatchIcon', 'Icon for \'Find Next\' in the editor find widget.')
'label.find', "Find"
'placeholder.find', "Find"
'label.previousMatchButton', "Previous Match"
'label.nextMatchButton', "Next Match"
'label.toggleSelectionFind', "Find in Selection"
'label.closeButton', "Close"
'label.replace', "Replace"
'placeholder.replace', "Replace"
'label.replaceButton', "Replace"
'label.replaceAllButton', "Replace All"
'label.toggleReplaceButton', "Toggle Replace"
'title.matchesCountLimit', "Only the first {0} results are highlighted, but all find operations work on the entire text.", MATCHES_LIMIT
'label.matchesLocation', "{0} of {1}"
'label.noResults', "No results"
'ariaSearchNoResultEmpty', "{0} found", label
'ariaSearchNoResult', "{0} found for '{1}'", label, searchString
'ariaSearchNoResultWithLineNum', "{0} found for '{1}', at {2}", label, searchString, currentMatch.startLineNumber + ':' + currentMatch.startColumn
'ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString
src/vs/editor/contrib/find/browser/findWidget.ts:						nls.localize('ctrlEnter.keybindingChanged',
'markerAction.next.label', "Go to Next Problem (Error, Warning, Info)"
'nextMarkerIcon', 'Icon for goto next marker.')
'markerAction.previous.label', "Go to Previous Problem (Error, Warning, Info)"
'previousMarkerIcon', 'Icon for goto previous marker.')
'markerAction.nextInFiles.label', "Go to Next Problem in Files (Error, Warning, Info)"
{ key: 'miGotoNextProblem', comment: ['&& denotes a mnemonic'] }, "Next &&Problem"
'markerAction.previousInFiles.label', "Go to Previous Problem in Files (Error, Warning, Info)"
{ key: 'miGotoPreviousProblem', comment: ['&& denotes a mnemonic'] }, "Previous &&Problem"
'startFindAction', "Find"
{ key: 'miFind', comment: ['&& denotes a mnemonic'] }, "&&Find"
'actions.find.isRegexOverride', 'Overrides "Use Regular Expression" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False'
'actions.find.wholeWordOverride', 'Overrides "Match Whole Word" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False'
'actions.find.matchCaseOverride', 'Overrides "Math Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False'
'actions.find.preserveCaseOverride', 'Overrides "Preserve Case" flag.\nThe flag will not be saved for the future.\n0: Do Nothing\n1: True\n2: False'
'startFindWithArgsAction', "Find With Arguments"
'startFindWithSelectionAction', "Find With Selection"
'findNextMatchAction', "Find Next"
'findPreviousMatchAction', "Find Previous"
'nextSelectionMatchFindAction', "Find Next Selection"
'previousSelectionMatchFindAction', "Find Previous Selection"
'startReplace', "Replace"
{ key: 'miReplace', comment: ['&& denotes a mnemonic'] }, "&&Replace"
'EditorFontZoomIn.label', "Editor Font Zoom In"
'EditorFontZoomOut.label', "Editor Font Zoom Out"
'EditorFontZoomReset.label', "Editor Font Zoom Reset"
'Error', "Error"
'Warning', "Warning"
'Info', "Info"
'Hint', "Hint"
'marker aria', "{0} at {1}. ", severityLabel, marker.startLineNumber + ':' + marker.startColumn
'problems', "{0} of {1} problems", markerIdx, markerCount
'change', "{0} of {1} problem", markerIdx, markerCount
'editorMarkerNavigationError', 'Editor marker navigation widget error color.')
'editorMarkerNavigationErrorHeaderBackground', 'Editor marker navigation widget error heading background.')
'editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.')
'editorMarkerNavigationWarningBackground', 'Editor marker navigation widget warning heading background.')
'editorMarkerNavigationInfo', 'Editor marker navigation widget info color.')
'editorMarkerNavigationInfoHeaderBackground', 'Editor marker navigation widget info heading background.')
'editorMarkerNavigationBackground', 'Editor marker navigation widget background.')
'context.minimap.minimap', "Minimap"
'context.minimap.renderCharacters', "Render Characters"
'context.minimap.size', "Vertical size"
'context.minimap.size.proportional', "Proportional"
'context.minimap.size.fill', "Fill"
'context.minimap.size.fit', "Fit"
'context.minimap.slider', "Slider"
'context.minimap.slider.mouseover', "Mouse Over"
'context.minimap.slider.always', "Always"
'action.showContextMenu.label', "Show Editor Context Menu"
'clickToToggleColorOptions', "Click to toggle color options (rgb/hsl/hex)"
'pasteProgressTitle', "Running paste handlers..."
'pasteActions', "Enable/disable running edits from extensions on paste."
'caret.moveLeft', "Move Selected Text Left"
'caret.moveRight', "Move Selected Text Right"
'cursor.undo', "Cursor Undo"
'cursor.redo', "Cursor Redo"
'overviewRulerBracketMatchForeground', 'Overview ruler marker color for matching brackets.')
'smartSelect.jumpBracket', "Go to Bracket"
'smartSelect.selectToBracket', "Select to Bracket"
{ key: 'miGoToBracket', comment: ['&& denotes a mnemonic'] }, "Go to &&Bracket"
'transposeLetters.label', "Transpose Letters"
'selectionAnchor', "Selection Anchor")
'anchorSet', "Anchor set at {0}:{1}", position.lineNumber, position.column)
'setSelectionAnchor', "Set Selection Anchor"
'goToSelectionAnchor', "Go to Selection Anchor"
'selectFromAnchorToCursor', "Select from Anchor to Cursor"
'cancelSelectionAnchor', "Cancel Selection Anchor"
'host', "The host name or IP address the server should listen to. If not set, defaults to 'localhost'."
'port', "The port the server should listen to. If 0 is passed a random free port is picked. If a range in the format num-num is passed, a free port from the range (end inclusive) is selected."
'socket-path', "The path to a socket file for the server to listen to."
'connection-token', "A secret that must be included with all requests."
'connection-token-file', "Path to a file that contains the connection token."
'without-connection-token', "Run without a connection token. Only use this if the connection is secured by other means."
'acceptLicenseTerms', "If set, the user accepts the server license terms and the server will be started without a user prompt."
'serverDataDir', "Specifies the directory that server data is kept in."
'telemetry-level', "Sets the initial telemetry level. Valid levels are: 'off', 'crash', 'error' and 'all'. If not specified, the server will send telemetry until a client connects, it will then use the clients telemetry setting. Setting this to 'off' is equivalent to --disable-telemetry"
'default-folder', 'The workspace folder to open when no input is specified in the browser URL. A relative or absolute path resolved against the current working directory.'
'default-workspace', 'The workspace to open when no input is specified in the browser URL. A relative or absolute path resolved against the current working directory.'
'start-server', "Start the server when installing or uninstalling extensions. To be used in combination with 'install-extension', 'install-builtin-extension' and 'uninstall-extension'."
{ key: 'sayHello', comment: ['Welcomes user'] }, 'hello {0}', name
info: ILocalizeInfo, message: string, ...args: (string | number | boolean | undefined | null)[]
'sayHello', 'hello {0}', name
key: string, message: string, ...args: (string | number | boolean | undefined | null)[]
data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]

{ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")
'workspaceOpenedMessage', "Unable to save workspace '{0}'", basename(workspacePath)
'workspaceOpenedDetail', "The workspace is already opened in another window. Please close that window first and then try again."
'terminal-history-restored', "History restored"
'launchFail.cwdNotDirectory', "Starting directory (cwd) \"{0}\" is not a directory", this._initialCwd.toString()
'launchFail.cwdDoesNotExist', "Starting directory (cwd) \"{0}\" does not exist", this._initialCwd.toString()
'launchFail.executableDoesNotExist', "Path to shell executable \"{0}\" does not exist", slc.executable
'launchFail.executableIsNotFileOrSymlink', "Path to shell executable \"{0}\" is not a file or a symlink", slc.executable
'codeWorkspace', "Code Workspace"
'newWindow', "New Window"
'newWindowDesc', "Opens a new window"
'recentFolders', "Recent Folders"
'untitledWorkspace', "Untitled (Workspace)"
'workspaceName', "{0} (Workspace)", filename), description: this.renderJumpListPathDescription(workspace.configPath
'trusted', "Trusted"
'untrusted', "Restricted Mode"
'terminalAutomaticProfile', 'Automatically detect the default'
'terminalProfile.args', 'An optional set of arguments to run the shell executable with.'
'terminalProfile.overrideName', 'Controls whether or not the profile name overrides the auto detected one.'
'terminalProfile.icon', 'A codicon ID to associate with the terminal icon.'
'terminalProfile.color', 'A theme color ID to associate with the terminal icon.'
'terminalProfile.env', "An object with environment variables that will be added to the terminal profile process. Set to `null` to delete environment variables from the base environment."
'terminalProfile.path', 'A single path to a shell executable or an array of paths that will be used as fallbacks when one fails.'
'terminalAutomationProfile.path', 'A single path to a shell executable.'
'terminal.integrated.shell.linux.deprecation', "This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in {0} and setting its profile name as the default in {1}. This will currently take priority over the new profiles settings but that will change in the future.", '`#terminal.integrated.profiles.linux#`', '`#terminal.integrated.defaultProfile.linux#`'
'terminal.integrated.shell.osx.deprecation', "This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in {0} and setting its profile name as the default in {1}. This will currently take priority over the new profiles settings but that will change in the future.", '`#terminal.integrated.profiles.osx#`', '`#terminal.integrated.defaultProfile.osx#`'
'terminal.integrated.shell.windows.deprecation', "This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in {0} and setting its profile name as the default in {1}. This will currently take priority over the new profiles settings but that will change in the future.", '`#terminal.integrated.profiles.windows#`', '`#terminal.integrated.defaultProfile.windows#`'
'terminal.integrated.automationShell.linux.deprecation', "This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with {0}. This will currently take priority over the new automation profile settings but that will change in the future.", '`#terminal.integrated.automationProfile.linux#`'
'terminal.integrated.automationShell.osx.deprecation', "This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with {0}. This will currently take priority over the new automation profile settings but that will change in the future.", '`#terminal.integrated.automationProfile.osx#`'
'terminal.integrated.automationShell.windows.deprecation', "This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with {0}. This will currently take priority over the new automation profile settings but that will change in the future.", '`#terminal.integrated.automationProfile.windows#`'
'terminalIntegratedConfigurationTitle', "Integrated Terminal"
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize({
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize({
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize({
'terminal.integrated.automationProfile.linux', "The terminal profile to use on Linux for automation-related terminal usage like tasks and debug. This setting will currently be ignored if {0} (now deprecated) is set.", '`terminal.integrated.automationShell.linux`'
'terminal.integrated.automationProfile.osx', "The terminal profile to use on macOS for automation-related terminal usage like tasks and debug. This setting will currently be ignored if {0} (now deprecated) is set.", '`terminal.integrated.automationShell.osx`'
'terminal.integrated.automationProfile.windows', "The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if {0} (now deprecated) is set.", '`terminal.integrated.automationShell.windows`'
'terminal.integrated.shell.linux', "The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
'terminal.integrated.shell.osx', "The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
'terminal.integrated.shell.windows', "The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
'terminal.integrated.shellArgs.linux', "The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
'terminal.integrated.shellArgs.osx', "The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
'terminal.integrated.shellArgs.windows', "The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
'terminal.integrated.shellArgs.windows', "The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
'terminal.integrated.shellArgs.windows.string', "The command line arguments in [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6) to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)."
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize(
'terminalProfile.windowsSource', 'A profile source that will auto detect the paths to the shell. Note that non-standard executable locations are not supported and must be created manually in a new profile.'
'terminalProfile.windowsExtensionIdentifier', 'The extension that contributed this profile.'
'terminalProfile.windowsExtensionId', 'The id of the extension terminal'
'terminalProfile.windowsExtensionTitle', 'The name of the extension terminal'
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize(
'terminalProfile.osxExtensionIdentifier', 'The extension that contributed this profile.'
'terminalProfile.osxExtensionId', 'The id of the extension terminal'
'terminalProfile.osxExtensionTitle', 'The name of the extension terminal'
src/vs/platform/terminal/common/terminalPlatformConfiguration.ts:			markdownDescription: localize(
'terminalProfile.linuxExtensionIdentifier', 'The extension that contributed this profile.'
'terminalProfile.linuxExtensionId', 'The id of the extension terminal'
'terminalProfile.linuxExtensionTitle', 'The name of the extension terminal'
'terminal.integrated.useWslProfiles', 'Controls whether or not WSL distros are shown in the terminal dropdown'
'terminal.integrated.inheritEnv', "Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows."
'terminal.integrated.persistentSessionScrollback', "Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `#terminal.integrated.scrollback#`."
'terminal.integrated.showLinkHover', "Whether to show hovers for links in the terminal output."
'terminal.integrated.confirmIgnoreProcesses', "A set of process names to ignore when using the {0} setting.", '`terminal.integrated.confirmOnKill`'
'terminalIntegratedConfigurationTitle', "Integrated Terminal"
'terminal.integrated.defaultProfile.linux', "The default profile used on Linux. This setting will currently be ignored if either {0} or {1} are set.", '`terminal.integrated.shell.linux`', '`terminal.integrated.shellArgs.linux`'
'terminal.integrated.defaultProfile.osx', "The default profile used on macOS. This setting will currently be ignored if either {0} or {1} are set.", '`terminal.integrated.shell.osx`', '`terminal.integrated.shellArgs.osx`'
'terminal.integrated.defaultProfile.windows', "The default profile used on Windows. This setting will currently be ignored if either {0} or {1} are set.", '`terminal.integrated.shell.windows`', '`terminal.integrated.shellArgs.windows`'
{ key: 'reopen', comment: ['&& denotes a mnemonic'] }, "&&Reopen")
{ key: 'wait', comment: ['&& denotes a mnemonic'] }, "&&Keep Waiting")
{ key: 'close', comment: ['&& denotes a mnemonic'] }, "&&Close")
'appStalled', "The window is not responding"
'appStalledDetail', "You can reopen or close the window or keep waiting."
'doNotRestoreEditors', "Don't restore editors"
'appGone', "The window terminated unexpectedly"
'appGoneDetails', "The window terminated unexpectedly (reason: '{0}', code: '{1}')", details.reason, details.exitCode ?? '<unknown>'
{ key: 'reopen', comment: ['&& denotes a mnemonic'] }, "&&Reopen")
{ key: 'close', comment: ['&& denotes a mnemonic'] }, "&&Close")
'appGoneDetail', "We are sorry for the inconvenience. You can reopen the window to continue where you left off."
'doNotRestoreEditors', "Don't restore editors"
'hiddenMenuBar', "You can still access the menu bar by pressing the Alt-key.")
{ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")
'uriInvalidTitle', "URI can not be opened"
'pathNotExistDetail', "The path '{0}' does not exist on this computer.", getPathLabel(uri, { os: OS, tildify: this.environmentMainService })
'uriInvalidDetail', "The URI '{0}' is not valid and can not be opened.", uri.toString(true)
'telemetry.telemetryLevelMd', "Controls {0} telemetry, first-party extension telemetry and participating third-party extension telemetry. Some third party extensions might not respect this setting. Consult the specific extension's documentation to be sure. Telemetry helps us better understand how {0} is performing, where improvements need to be made, and how features are being used.", product.nameLong
"telemetry.docsStatement", "Read more about the [data we collect]({0}).", 'https://aka.ms/vscode-telemetry'
"telemetry.docsAndPrivacyStatement", "Read more about the [data we collect]({0}) and our [privacy statement]({1}).", 'https://aka.ms/vscode-telemetry', product.privacyStatementUrl
'telemetry.restart', 'A full restart of the application is necessary for crash reporting changes to take effect.'
'telemetry.crashReports', "Crash Reports"
'telemetry.errors', "Error Telemetry"
'telemetry.usage', "Usage Data"
'telemetry.telemetryLevel.tableDescription', "The following table outlines the data sent with each setting:"
'telemetry.telemetryLevel.deprecated', "****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*"
'telemetryConfigurationTitle', "Telemetry"
'telemetry.telemetryLevel.default', "Sends usage data, errors, and crash reports."
'telemetry.telemetryLevel.error', "Sends general error telemetry and crash reports."
'telemetry.telemetryLevel.crash', "Sends OS level crash reports."
'telemetry.telemetryLevel.off', "Disables all product telemetry."
'telemetryConfigurationTitle', "Telemetry"
'telemetry.enableTelemetry', "Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made.", product.nameLong
'telemetry.enableTelemetryMd', "Enable diagnostic data to be collected. This helps us to better understand how {0} is performing and where improvements need to be made. [Read more]({1}) about what we collect and our privacy statement.", product.nameLong, product.privacyStatementUrl
'enableTelemetryDeprecated', "If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the {0} setting.", `\`#${TELEMETRY_SETTING_ID}#\``
'updateConfigurationTitle', "Update"
'updateMode', "Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service."
'none', "Disable updates."
'manual', "Disable automatic background update checks. Updates will be available if you manually check for updates."
'start', "Check for updates only on startup. Disable automatic background update checks."
'default', "Enable automatic update checks. Code will check for updates automatically and periodically."
'updateMode', "Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service."
'deprecated', "This setting is deprecated, please use '{0}' instead.", 'update.mode'
'enableWindowsBackgroundUpdatesTitle', "Enable Background Updates on Windows"
'enableWindowsBackgroundUpdates', "Enable to download and install new VS Code versions in the background on Windows."
'showReleaseNotes', "Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service."
'defaultProfile', "Default"), this.environmentService.userRoamingDataHome
'remoteTunnelService.authorizing', 'Authorizing'))
{ key: 'incompatible', comment: ['This is an error while syncing a resource that its local version is not compatible with its remote version.'] }, "Cannot sync {0} as its local version {1} is not compatible with its remote version {2}", this.resource, this.version, remoteUserData.syncData.version), UserDataSyncErrorCode.IncompatibleLocalContent, this.resource
'incompatible sync data', "Cannot parse sync data as it is not compatible with the current version."), UserDataSyncErrorCode.IncompatibleRemoteContent, this.resource
'errorInvalidSettings', "Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it."), UserDataSyncErrorCode.LocalInvalidContent, this.resource
'errorInvalidSettings', "Unable to sync keybindings because the content in the file is not valid. Please open the file and correct it."), UserDataSyncErrorCode.LocalInvalidContent, this.resource
'errorInvalidSettings', "Unable to sync settings as there are errors/warning in settings file."), UserDataSyncErrorCode.LocalInvalidContent, this.resource
'settings sync', "Settings Sync"
'settingsSync.keybindingsPerPlatform', "Synchronize keybindings for each platform."
'settingsSync.ignoredExtensions', "List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`."
'app.extension.identifier.errorMessage', "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'."
'settingsSync.ignoredSettings', "Configure settings to be ignored while synchronizing."
'error incompatible', "Cannot read machines data as the current version is incompatible. Please update {0} and try again.", this.productService.nameLong)
'default service changed', "Cannot sync because default service has changed"), UserDataSyncErrorCode.DefaultServiceChanged
'service changed', "Cannot sync because sync service has changed"), UserDataSyncErrorCode.ServiceChanged
'turned off', "Cannot sync because syncing is turned off in the cloud"), UserDataSyncErrorCode.TurnedOff
'default service changed', "Cannot sync because default service has changed"), UserDataSyncErrorCode.DefaultServiceChanged
'service changed', "Cannot sync because sync service has changed"), UserDataSyncErrorCode.ServiceChanged
'session expired', "Cannot sync because current session is expired"), UserDataSyncErrorCode.SessionExpired
'turned off machine', "Cannot sync because syncing is turned off on this machine from another machine."), UserDataSyncErrorCode.TurnedOff
'incompatible sync data', "Cannot parse sync data as it is not compatible with the current version."), UserDataSyncErrorCode.IncompatibleRemoteContent, syncResource
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
'confirmWorkspace', "Would you like to undo '{0}' across all files?", element.label
{ key: 'ok', comment: ['{0} denotes a number that is > 1'] }, "Undo in {0} Files", editStackSnapshot.editStacks.length
'nok', "Undo this File"
'cancel', "Cancel"
src/vs/platform/undoRedo/common/undoRedoService.ts:			const message = nls.localize(
'confirmDifferentSource', "Would you like to undo '{0}'?", element.label
'confirmDifferentSource.yes', "Yes"
'confirmDifferentSource.no', "No"
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:				nls.localize(
src/vs/platform/undoRedo/common/undoRedoService.ts:			const message = nls.localize(
'iconDefinition.fontId', 'The id of the font to use. If not set, the font that is defined first is used.'
'iconDefinition.fontCharacter', 'The font character associated with the icon definition.'
'widgetClose', 'Icon for the close action in widgets.')
'previousChangeIcon', 'Icon for goto previous editor location.')
'nextChangeIcon', 'Icon for goto next editor location.')
'schema.token.errors', 'Valid token selectors have the form (*|tokenType)(.tokenModifier)*(:tokenLanguage)?.'
'schema.token.settings', 'Colors and styles for the token.'
'schema.token.foreground', 'Foreground color for the token.'
'schema.token.background.warning', 'Token background colors are currently not supported.'
'schema.token.fontStyle', 'Sets the all font styles of the rule: \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. All styles that are not listed are unset. The empty string unsets all styles.'
'schema.fontStyle.error', 'Font style must be \'italic\', \'bold\', \'underline\' or \'strikethrough\' or a combination. The empty string unsets all styles.'
'schema.token.fontStyle.none', 'None (clear inherited style)'
'schema.token.bold', 'Sets or unsets the font style to bold. Note, the presence of \'fontStyle\' overrides this setting.'
'schema.token.italic', 'Sets or unsets the font style to italic. Note, the presence of \'fontStyle\' overrides this setting.'
'schema.token.underline', 'Sets or unsets the font style to underline. Note, the presence of \'fontStyle\' overrides this setting.'
'schema.token.strikethrough', 'Sets or unsets the font style to strikethrough. Note, the presence of \'fontStyle\' overrides this setting.'
'comment', "Style for comments."), [['comment']]
'string', "Style for strings."), [['string']]
'keyword', "Style for keywords."), [['keyword.control']]
'number', "Style for numbers."), [['constant.numeric']]
'regexp', "Style for expressions."), [['constant.regexp']]
'operator', "Style for operators."), [['keyword.operator']]
'namespace', "Style for namespaces."), [['entity.name.namespace']]
'type', "Style for types."), [['entity.name.type'], ['support.type']]
'struct', "Style for structs."), [['entity.name.type.struct']]
'class', "Style for classes."), [['entity.name.type.class'], ['support.class']]
'interface', "Style for interfaces."), [['entity.name.type.interface']]
'enum', "Style for enums."), [['entity.name.type.enum']]
'typeParameter', "Style for type parameters."), [['entity.name.type.parameter']]
'function', "Style for functions"), [['entity.name.function'], ['support.function']]
'member', "Style for member functions"), [], 'method', 'Deprecated use `method` instead'
'method', "Style for method (member functions)"), [['entity.name.function.member'], ['support.function']]
'macro', "Style for macros."), [['entity.name.function.preprocessor']]
'variable', "Style for variables."), [['variable.other.readwrite'], ['entity.name.variable']]
'parameter', "Style for parameters."), [['variable.parameter']]
'property', "Style for properties."), [['variable.other.property']]
'enumMember', "Style for enum members."), [['variable.other.enummember']]
'event', "Style for events."), [['variable.other.event']]
'decorator', "Style for decorators & annotations."), [['entity.name.decorator'], ['entity.name.function']]
'labels', "Style for labels. "), undefined
'declaration', "Style for all symbol declarations."), undefined
'documentation', "Style to use for references in documentation."), undefined
'static', "Style to use for symbols that are static."), undefined
'abstract', "Style to use for symbols that are abstract."), undefined
'deprecated', "Style to use for symbols that are deprecated."), undefined
'modification', "Style to use for write accesses."), undefined
'async', "Style to use for symbols that are async."), undefined
'readonly', "Style to use for symbols that are readonly."), undefined
'foreground', "Overall foreground color. This color is only used if not overridden by a component.")
'disabledForeground', "Overall foreground for disabled elements. This color is only used if not overridden by a component.")
'errorForeground', "Overall foreground color for error messages. This color is only used if not overridden by a component.")
'descriptionForeground', "Foreground color for description text providing additional information, for example for a label.")
'iconForeground', "The default color for icons in the workbench.")
'focusBorder', "Overall border color for focused elements. This color is only used if not overridden by a component.")
'contrastBorder', "An extra border around elements to separate them from others for greater contrast.")
'activeContrastBorder', "An extra border around active elements to separate them from others for greater contrast.")
'selectionBackground', "The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.")
'textSeparatorForeground', "Color for text separators.")
'textLinkForeground', "Foreground color for links in text.")
'textLinkActiveForeground', "Foreground color for links in text when clicked on and on mouse hover.")
'textPreformatForeground', "Foreground color for preformatted text segments.")
'textBlockQuoteBackground', "Background color for block quotes in text.")
'textBlockQuoteBorder', "Border color for block quotes in text.")
'textCodeBlockBackground', "Background color for code blocks in text.")
'widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.')
'inputBoxBackground', "Input box background.")
'inputBoxForeground', "Input box foreground.")
'inputBoxBorder', "Input box border.")
'inputBoxActiveOptionBorder', "Border color of activated options in input fields.")
'inputOption.hoverBackground', "Background color of activated options in input fields.")
'inputOption.activeBackground', "Background hover color of options in input fields.")
'inputOption.activeForeground', "Foreground color of activated options in input fields.")
'inputPlaceholderForeground', "Input box foreground color for placeholder text.")
'inputValidationInfoBackground', "Input validation background color for information severity.")
'inputValidationInfoForeground', "Input validation foreground color for information severity.")
'inputValidationInfoBorder', "Input validation border color for information severity.")
'inputValidationWarningBackground', "Input validation background color for warning severity.")
'inputValidationWarningForeground', "Input validation foreground color for warning severity.")
'inputValidationWarningBorder', "Input validation border color for warning severity.")
'inputValidationErrorBackground', "Input validation background color for error severity.")
'inputValidationErrorForeground', "Input validation foreground color for error severity.")
'inputValidationErrorBorder', "Input validation border color for error severity.")
'dropdownBackground', "Dropdown background.")
'dropdownListBackground', "Dropdown list background.")
'dropdownForeground', "Dropdown foreground.")
'dropdownBorder', "Dropdown border.")
'buttonForeground', "Button foreground color.")
'buttonSeparator', "Button separator color.")
'buttonBackground', "Button background color.")
'buttonHoverBackground', "Button background color when hovering.")
'buttonBorder', "Button border color.")
'buttonSecondaryForeground', "Secondary button foreground color.")
'buttonSecondaryBackground', "Secondary button background color.")
'buttonSecondaryHoverBackground', "Secondary button background color when hovering.")
'badgeBackground', "Badge background color. Badges are small information labels, e.g. for search results count.")
'badgeForeground', "Badge foreground color. Badges are small information labels, e.g. for search results count.")
'scrollbarShadow', "Scrollbar shadow to indicate that the view is scrolled.")
'scrollbarSliderBackground', "Scrollbar slider background color.")
'scrollbarSliderHoverBackground', "Scrollbar slider background color when hovering.")
'scrollbarSliderActiveBackground', "Scrollbar slider background color when clicked on.")
'progressBarBackground', "Background color of the progress bar that can show for long running operations.")
'editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true
'editorError.foreground', 'Foreground color of error squigglies in the editor.')
'errorBorder', 'Border color of error boxes in the editor.')
'editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true
'editorWarning.foreground', 'Foreground color of warning squigglies in the editor.')
'warningBorder', 'Border color of warning boxes in the editor.')
'editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true
'editorInfo.foreground', 'Foreground color of info squigglies in the editor.')
'infoBorder', 'Border color of info boxes in the editor.')
'editorHint.foreground', 'Foreground color of hint squigglies in the editor.')
'hintBorder', 'Border color of hint boxes in the editor.')
'sashActiveBorder', "Border color of active sashes.")
'editorBackground', "Editor background color.")
'editorForeground', "Editor default foreground color.")
'editorStickyScrollBackground', "Sticky scroll background color for the editor")
'editorStickyScrollHoverBackground', "Sticky scroll on hover background color for the editor")
'editorWidgetBackground', 'Background color of editor widgets, such as find/replace.')
'editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.')
'editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.')
'editorWidgetResizeBorder', "Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.")
'pickerBackground', "Quick picker background color. The quick picker widget is the container for pickers like the command palette.")
'pickerForeground', "Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.")
'pickerTitleBackground', "Quick picker title background color. The quick picker widget is the container for pickers like the command palette.")
'pickerGroupForeground', "Quick picker color for grouping labels.")
'pickerGroupBorder', "Quick picker color for grouping borders.")
'keybindingLabelBackground', "Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.")
'keybindingLabelForeground', "Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.")
'keybindingLabelBorder', "Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.")
'keybindingLabelBottomBorder', "Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.")
'editorSelectionBackground', "Color of the editor selection.")
'editorSelectionForeground', "Color of the selected text for high contrast.")
'editorInactiveSelection', "Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."), true
'editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true
'editorSelectionHighlightBorder', "Border color for regions with the same content as the selection.")
'editorFindMatch', "Color of the current search match.")
'findMatchHighlight', "Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."), true
'findRangeHighlight', "Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true
'editorFindMatchBorder', "Border color of the current search match.")
'findMatchHighlightBorder', "Border color of the other search matches.")
'findRangeHighlightBorder', "Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true
'searchEditor.queryMatch', "Color of the Search Editor query matches.")
'searchEditor.editorFindMatchBorder', "Border color of the Search Editor query matches.")
'hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true
'hoverBackground', 'Background color of the editor hover.')
'hoverForeground', 'Foreground color of the editor hover.')
'hoverBorder', 'Border color of the editor hover.')
'statusBarBackground', "Background color of the editor hover status bar.")
'activeLinkForeground', 'Color of active links.')
'editorInlayHintForeground', 'Foreground color of inline hints')
'editorInlayHintBackground', 'Background color of inline hints')
'editorInlayHintForegroundTypes', 'Foreground color of inline hints for types')
'editorInlayHintBackgroundTypes', 'Background color of inline hints for types')
'editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters')
'editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters')
'editorLightBulbForeground', "The color used for the lightbulb actions icon.")
'editorLightBulbAutoFixForeground', "The color used for the lightbulb auto fix actions icon.")
'diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true
'diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true
'diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true
'diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true
'diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.')
'diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.')
'diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.')
'diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.')
'diffEditorInsertedOutline', 'Outline color for the text that got inserted.')
'diffEditorRemovedOutline', 'Outline color for text that got removed.')
'diffEditorBorder', 'Border color between the two text editors.')
'diffDiagonalFill', "Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.")
'listFocusBackground', "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.")
'listFocusForeground', "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.")
'listFocusOutline', "List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.")
'listFocusAndSelectionOutline', "List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.")
'listActiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.")
'listActiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.")
'listActiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.")
'listInactiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.")
'listInactiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.")
'listInactiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.")
'listInactiveFocusBackground', "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.")
'listInactiveFocusOutline', "List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.")
'listHoverBackground', "List/Tree background when hovering over items using the mouse.")
'listHoverForeground', "List/Tree foreground when hovering over items using the mouse.")
'listDropBackground', "List/Tree drag and drop background when moving items around using the mouse.")
'highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.')
'listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.')
'invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.')
'listErrorForeground', 'Foreground color of list items containing errors.')
'listWarningForeground', 'Foreground color of list items containing warnings.')
'listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.')
'listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.')
'listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.')
'listFilterWidgetShadow', 'Shadown color of the type filter widget in lists and trees.')
'listFilterMatchHighlight', 'Background color of the filtered match.')
'listFilterMatchHighlightBorder', 'Border color of the filtered match.')
'treeIndentGuidesStroke', "Tree stroke color for the indentation guides.")
'tableColumnsBorder', "Table border color between columns.")
'tableOddRowsBackgroundColor', "Background color for odd table rows.")
'listDeemphasizedForeground', "List/Tree foreground color for items that are deemphasized. ")
'checkbox.background', "Background color of checkbox widget.")
'checkbox.select.background', "Background color of checkbox widget when the element it's in is selected.")
'checkbox.foreground', "Foreground color of checkbox widget.")
'checkbox.border', "Border color of checkbox widget.")
'checkbox.select.border', "Border color of checkbox widget when the element it's in is selected.")
'quickInput.list.focusBackground deprecation', "Please use quickInputList.focusBackground instead")
'quickInput.listFocusForeground', "Quick picker foreground color for the focused item.")
'quickInput.listFocusIconForeground', "Quick picker icon foreground color for the focused item.")
'quickInput.listFocusBackground', "Quick picker background color for the focused item.")
'menuBorder', "Border color of menus.")
'menuForeground', "Foreground color of menu items.")
'menuBackground', "Background color of menu items.")
'menuSelectionForeground', "Foreground color of the selected menu item in menus.")
'menuSelectionBackground', "Background color of the selected menu item in menus.")
'menuSelectionBorder', "Border color of the selected menu item in menus.")
'menuSeparatorBackground', "Color of a separator menu item in menus.")
'toolbarHoverBackground', "Toolbar background when hovering over actions using the mouse")
'toolbarHoverOutline', "Toolbar outline when hovering over actions using the mouse")
'toolbarActiveBackground', "Toolbar background when holding the mouse over actions")
'snippetTabstopHighlightBackground', "Highlight background color of a snippet tabstop.")
'snippetTabstopHighlightBorder', "Highlight border color of a snippet tabstop.")
'snippetFinalTabstopHighlightBackground', "Highlight background color of the final tabstop of a snippet.")
'snippetFinalTabstopHighlightBorder', "Highlight border color of the final tabstop of a snippet.")
'breadcrumbsFocusForeground', "Color of focused breadcrumb items.")
'breadcrumbsBackground', "Background color of breadcrumb items.")
'breadcrumbsFocusForeground', "Color of focused breadcrumb items.")
'breadcrumbsSelectedForeground', "Color of selected breadcrumb items.")
'breadcrumbsSelectedBackground', "Background color of breadcrumb item picker.")
'mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true
'mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true
'mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true
'mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true
'mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true
'mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true
'mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.')
'overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.')
'overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.')
'overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.')
'overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true
'overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true
'minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true
'minimapSelectionOccurrenceHighlight', 'Minimap marker color for repeating editor selections.'), true
'minimapSelectionHighlight', 'Minimap marker color for the editor selection.'), true
'minimapError', 'Minimap marker color for errors.')
'overviewRuleWarning', 'Minimap marker color for warnings.')
'minimapBackground', "Minimap background color.")
'minimapForegroundOpacity', 'Opacity of foreground elements rendered in the minimap. For example, "#000000c0" will render the elements with 75% opacity.')
'minimapSliderBackground', "Minimap slider background color.")
'minimapSliderHoverBackground', "Minimap slider background color when hovering.")
'minimapSliderActiveBackground', "Minimap slider background color when clicked on.")
'problemsErrorIconForeground', "The color used for the problems error icon.")
'problemsWarningIconForeground', "The color used for the problems warning icon.")
'problemsInfoIconForeground', "The color used for the problems info icon.")
'chartsForeground', "The foreground color used in charts.")
'chartsLines', "The color used for horizontal lines in charts.")
'chartsRed', "The red color used in chart visualizations.")
'chartsBlue', "The blue color used in chart visualizations.")
'chartsYellow', "The yellow color used in chart visualizations.")
'chartsOrange', "The orange color used in chart visualizations.")
'chartsGreen', "The green color used in chart visualizations.")
'chartsPurple', "The purple color used in chart visualizations.")
'httpConfigurationTitle', "HTTP"
'proxy', "The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables."
'strictSSL', "Controls whether the proxy server certificate should be verified against the list of supplied CAs."
'proxyAuthorization', "The value to send as the `Proxy-Authorization` header for every network request."
'proxySupportOff', "Disable proxy support for extensions."
'proxySupportOn', "Enable proxy support for extensions."
'proxySupportFallback', "Enable proxy support for extensions, fall back to request options, when no proxy found."
'proxySupportOverride', "Enable proxy support for extensions, override request options."
'proxySupport', "Use the proxy support for extensions."
'systemCertificates', "Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)"
'resolveShellEnvTimeout', "Unable to resolve your shell environment in a reasonable time. Please review your shell configuration."))
'resolveShellEnvError', "Unable to resolve your shell environment: {0}", toErrorMessage(error)))
'resolveShellEnvExitError', "Unexpected exit code from spawned shell (code {0}, signal {1})", code, signal))
'commandPickAriaLabelWithKeybinding', "{0}, {1}", commandPick.label, keybinding.getAriaLabel()
'recentlyUsed', "recently used") }
'morecCommands', "other commands") }
'canNotRun', "Command '{0}' resulted in an error ({1})", commandPick.label, toErrorMessage(error))
"terminal.commands.pinned", 'pinned') }
'pinnedCommand', "Pinned command"
'helpPickAriaLabel', "{0}, {1}", label, helpEntry.description
'workbenchConfigurationTitle', "Workbench"
'multiSelectModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."
'multiSelectModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
src/vs/platform/list/browser/listService.ts:			description: localize({
src/vs/platform/list/browser/listService.ts:			description: localize({
'horizontalScrolling setting', "Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication."
'tree indent setting', "Controls tree indentation in pixels."
'render tree indent guides', "Controls whether the tree should render indent guides."
'list smoothScrolling setting', "Controls whether lists and trees have smooth scrolling."
'Mouse Wheel Scroll Sensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events."
'Fast Scroll Sensitivity', "Scrolling speed multiplier when pressing `Alt`."
'defaultFindModeSettingKey.highlight', "Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements."
'defaultFindModeSettingKey.filter', "Filter elements when searching."
'defaultFindModeSettingKey', "Controls the default find mode for lists and trees in the workbench."
'keyboardNavigationSettingKey.simple', "Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes."
'keyboardNavigationSettingKey.highlight', "Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements."
'keyboardNavigationSettingKey.filter', "Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input."
'keyboardNavigationSettingKey', "Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter."
'keyboardNavigationSettingKeyDeprecated', "Please use 'workbench.list.defaultFindMode' instead."
'expand mode', "Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable."
'warnEscalation', "{0} will now prompt with 'osascript' for Administrator privileges to install the shell command.", this.productService.nameShort
{ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")
{ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")
'cantCreateBinFolder', "Unable to install the shell command '{0}'.", source)
'warnEscalationUninstall', "{0} will now prompt with 'osascript' for Administrator privileges to uninstall the shell command.", this.productService.nameShort
{ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")
{ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")
'cantUninstall', "Unable to uninstall the shell command '{0}'.", source)
'sourceMissing', "Unable to find shell script in '{0}'", target)
'local', "Local"), rootProcess: await listProcesses(process.pid) }
'issueReporterWriteToClipboard', "There is too much data to send to GitHub directly. The data will be copied to the clipboard, please paste it into the GitHub issue page that is opened."
{ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")
{ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")
'confirmCloseIssueReporter', "Your input will not be saved. Are you sure you want to close this window?"
{ key: 'yes', comment: ['&& denotes a mnemonic'] }, "&&Yes")
{ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")
'issueReporter', "Issue Reporter"
'processExplorer', "Process Explorer"
'trace.message', "Successfully created the trace file"
'trace.detail', "Please create an issue and manually attach the following file:\n{0}", path
{ key: 'trace.ok', comment: ['&& denotes a mnemonic'] }, "&&OK")
{ key: 'miNewWindow', comment: ['&& denotes a mnemonic'] }, "New &&Window")), click: () => this.windowsMainService.openEmptyWindow({ context: OpenContext.DOCK }) })
{ key: 'mFile', comment: ['&& denotes a mnemonic'] }, "&&File")), submenu: fileMenu }
{ key: 'mEdit', comment: ['&& denotes a mnemonic'] }, "&&Edit")), submenu: editMenu }
{ key: 'mSelection', comment: ['&& denotes a mnemonic'] }, "&&Selection")), submenu: selectionMenu }
{ key: 'mView', comment: ['&& denotes a mnemonic'] }, "&&View")), submenu: viewMenu }
{ key: 'mGoto', comment: ['&& denotes a mnemonic'] }, "&&Go")), submenu: gotoMenu }
{ key: 'mRun', comment: ['&& denotes a mnemonic'] }, "&&Run")), submenu: debugMenu }
{ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, "&&Terminal")), submenu: terminalMenu }
'mWindow', "Window")), submenu: windowMenu, role: 'window' }
{ key: 'mHelp', comment: ['&& denotes a mnemonic'] }, "&&Help")), submenu: helpMenu, role: 'help' }
'mAbout', "About {0}", this.productService.nameLong), 'workbench.action.showAboutDialog'
{ key: 'miPreferences', comment: ['&& denotes a mnemonic'] }, "&&Preferences")), submenu: preferencesMenu }
'mServices', "Services"), role: 'services', submenu: servicesMenu }
'mHide', "Hide {0}", this.productService.nameLong), role: 'hide', accelerator: 'Command+H' }
'mHideOthers', "Hide Others"), role: 'hideOthers', accelerator: 'Command+Alt+H' }
'mShowAll', "Show All"), role: 'unhide' }
'miQuit', "Quit {0}", this.productService.nameLong), click: async (item, window, event
{ key: 'quit', comment: ['&& denotes a mnemonic'] }, "&&Quit")
{ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&Cancel")
'quitMessage', "Are you sure you want to quit?"
'mMinimize', "Minimize"), role: 'minimize', accelerator: 'Command+M', enabled: this.windowsMainService.getWindowCount() > 0 }
'mZoom', "Zoom"), role: 'zoom', enabled: this.windowsMainService.getWindowCount() > 0 }
'mBringToFront', "Bring All to Front"), role: 'front', enabled: this.windowsMainService.getWindowCount() > 0 }
{ key: 'miSwitchWindow', comment: ['&& denotes a mnemonic'] }, "Switch &&Window..."), 'workbench.action.switchWindow'
'mNewTab', "New Tab"), 'workbench.action.newWindowTab')
'mShowPreviousTab', "Show Previous Tab"), 'workbench.action.showPreviousWindowTab', 'selectPreviousTab')
'mShowNextTab', "Show Next Tab"), 'workbench.action.showNextWindowTab', 'selectNextTab')
'mMoveTabToNewWindow', "Move Tab to New Window"), 'workbench.action.moveWindowTabToNewWindow', 'moveTabToNewWindow')
'mMergeAllWindows', "Merge All Windows"), 'workbench.action.mergeAllWindowTabs', 'mergeAllWindows')
'miCheckForUpdates', "Check for &&Updates...")), click: () => setTimeout((
'miCheckingForUpdates', "Checking for Updates..."), enabled: false }
'miDownloadUpdate', "D&&ownload Available Update")), click: (
'miDownloadingUpdate', "Downloading Update..."), enabled: false }
'miInstallUpdate', "Install &&Update...")), click: (
'miInstallingUpdate', "Installing Update..."), enabled: false }
'miRestartToUpdate', "Restart to &&Update")), click: (
'sev.error', "Error"
'sev.warning', "Warning"
'sev.info', "Info"
'open', 'open'
'close', 'close'
'find', 'find'
'currentDisplayLanguage', " (Current)"
'first.chord', "({0}) was pressed. Waiting for second key of chord...", keypressLabel)
'missing.chord', "The key combination ({0}, {1}) is not a command.", this._currentChord.label, keypressLabel), { hideAfter: 10 * 1000 /* 10s */ }
'multipleValues', "Option '{0}' is defined more than once. Using value '{1}'.", id, val)
'emptyValue', "Option '{0}' requires a non empty value. Ignoring the option.", id)
'deprecatedArgument', "Option '{0}' is deprecated: {1}", deprecatedOption, message)
'unknownSubCommandOption', "Warning: '{0}' is not in the list of known options for subcommand '{1}'", id, command)
'unknownOption', "Warning: '{0}' is not in the list of known options, but still passed to Electron/Chromium.", id)
'gotoValidation', "Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`."))
'optionsUpperCase', "Options"
'extensionsManagement', "Extensions Management"
'troubleshooting', "Troubleshooting"
'cliDataDir', "Directory where CLI metadata should be stored."
'diff', "Compare two files with each other."
'merge', "Perform a three-way merge by providing paths for two modified versions of a file, the common origin of both modified versions and the output file to save merge results."
'add', "Add folder(s) to the last active window."
'goto', "Open a file at the path on the specified line and character position."
'newWindow', "Force to open a new window."
'reuseWindow', "Force to open a file or folder in an already opened window."
'wait', "Wait for the files to be closed before returning."
'locale', "The locale to use (e.g. en-US or zh-TW)."
'userDataDir', "Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code."
'profileName', "Opens the provided folder or workspace with the given profile and associates the profile with the workspace. If the profile does not exist, a new empty one is created. A folder or workspace must be provided for the profile to take effect."
'help', "Print usage."
'extensionHomePath', "Set the root path for extensions."
'listExtensions', "List the installed extensions."
'showVersions', "Show versions of installed extensions, when using --list-extensions."
'category', "Filters installed extensions by provided category, when using --list-extensions."
'installExtension', "Installs or updates an extension. The argument is either an extension id or a path to a VSIX. The identifier of an extension is '${publisher}.${name}'. Use '--force' argument to update to latest version. To install a specific version provide '@${version}'. For example: 'vscode.csharp@1.2.3'."
'install prerelease', "Installs the pre-release version of the extension, when using --install-extension"
'uninstallExtension', "Uninstalls an extension."
'experimentalApis', "Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually."
'version', "Print version."
'verbose', "Print verbose output (implies --wait)."
'log', "Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'. You can also configure the log level of an extension by passing extension id and log level in the following format: '${publisher}.${name}:${logLevel}'. For example: 'vscode.csharp:trace'. Can receive one or more such entries."
'status', "Print process usage and diagnostics information."
'prof-startup', "Run CPU profiler during startup."
'disableExtensions', "Disable all installed extensions."
'disableExtension', "Disable an extension."
'turn sync', "Turn sync on or off."
'inspect-extensions', "Allow debugging and profiling of extensions. Check the developer tools for the connection URI."
'inspect-brk-extensions', "Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI."
'disableGPU', "Disable GPU hardware acceleration."
'maxMemory', "Max memory size for a window (in Mbytes)."
'telemetry', "Shows all telemetry events which VS code collects."
'deprecated.useInstead', 'Use {0} instead.', optionId)
'paths', 'paths'
'options', "options")}]${inputFiles}`
'stdinWindows', "To read output from another program, append '-' (e.g. 'echo Hello World | {0} -')", executableName)
'stdinUnix', "To read from stdin, append '-' (e.g. 'ps aux | grep code | {0} -')", executableName)
'subcommands', "Subcommands")
'unknownCommit', "Unknown commit"
'unknownError', "Unknown Error"), FileSystemProviderErrorCode.Unknown
'sizeB', "{0}B", size.toFixed(0)
'sizeKB', "{0}KB", (size / ByteSize.KB).toFixed(2)
'sizeMB', "{0}MB", (size / ByteSize.MB).toFixed(2)
'sizeGB', "{0}GB", (size / ByteSize.GB).toFixed(2)
'sizeTB', "{0}TB", (size / ByteSize.TB).toFixed(2)
'fileExists', "File already exists"), FileSystemProviderErrorCode.FileExists
'fileNotExists', "File does not exist"), FileSystemProviderErrorCode.FileNotFound
'moveError', "Unable to move '{0}' into '{1}' ({2}).", basename(fromFilePath), basename(dirname(toFilePath)), error.toString())
'copyError', "Unable to copy '{0}' into '{1}' ({2}).", basename(fromFilePath), basename(dirname(toFilePath)), error.toString())
'fileCopyErrorPathCase', "'File cannot be copied to same path with different path case"), FileSystemProviderErrorCode.FileExists
'fileCopyErrorExists', "File at target already exists"), FileSystemProviderErrorCode.FileExists
'invalidPath', "Unable to resolve filesystem provider with relative file path '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_INVALID_PATH
'noProviderFound', "No file system provider found for resource '{0}'", resource.toString()
'fileNotFoundError', "Unable to resolve nonexistent file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_NOT_FOUND
'fileExists', "Unable to create file '{0}' that already exists when overwrite flag is not set", this.resourceForError(resource)), FileOperationResult.FILE_MODIFIED_SINCE, options
'err.write', "Unable to write file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString()), toFileOperationResult(error), options
'writeFailedUnlockUnsupported', "Unable to unlock file '{0}' because provider does not support it.", this.resourceForError(resource))
'fileIsDirectoryWriteError', "Unable to write file '{0}' that is actually a directory", this.resourceForError(resource)), FileOperationResult.FILE_IS_DIRECTORY, options
'fileModifiedError', "File Modified Since"), FileOperationResult.FILE_MODIFIED_SINCE, options
'err.read', "Unable to read file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString()
'err.read', "Unable to read file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString()), toFileOperationResult(error), options
'err.read', "Unable to read file '{0}' ({1})", this.resourceForError(resource), ensureFileSystemProviderError(error).toString()), toFileOperationResult(error), options
'fileIsDirectoryReadError', "Unable to read file '{0}' that is actually a directory", this.resourceForError(resource)), FileOperationResult.FILE_IS_DIRECTORY, options
'fileNotModifiedError', "File not modified since"), stat, options
'fileTooLargeError', "Unable to read file '{0}' that is too large to open", this.resourceForError(resource)), tooLargeErrorResult
'unableToMoveCopyError1', "Unable to copy when source '{0}' is same as target '{1}' with different path case on a case insensitive file system", this.resourceForError(source), this.resourceForError(target))
'unableToMoveCopyError2', "Unable to move/copy when source '{0}' is parent of target '{1}'.", this.resourceForError(source), this.resourceForError(target))
'unableToMoveCopyError3', "Unable to move/copy '{0}' because target '{1}' already exists at destination.", this.resourceForError(source), this.resourceForError(target)), FileOperationResult.FILE_MOVE_CONFLICT
'unableToMoveCopyError4', "Unable to move/copy '{0}' into '{1}' since a file would replace the folder it is contained in.", this.resourceForError(source), this.resourceForError(target))
'mkdirExistsError', "Unable to create folder '{0}' that already exists but is not a directory", this.resourceForError(directory))
'deleteFailedTrashUnsupported', "Unable to delete file '{0}' via trash because provider does not support it.", this.resourceForError(resource))
'deleteFailedNotFound', "Unable to delete nonexistent file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_NOT_FOUND
'deleteFailedNonEmptyFolder', "Unable to delete non-empty folder '{0}'.", this.resourceForError(resource))
'err.readonly', "Unable to modify readonly file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_PERMISSION_DENIED
'err.readonly', "Unable to modify readonly file '{0}'", this.resourceForError(resource)), FileOperationResult.FILE_PERMISSION_DENIED
'trashFailed', "Failed to move '{0}' to the trash", basename(filePath)), FileSystemProviderErrorCode.Unknown
'suggestWidgetVisible', "Whether suggestion are visible")
'fileNotExists', "File does not exist"), FileSystemProviderErrorCode.FileNotFound
'fileIsDirectory', "File is Directory"), FileSystemProviderErrorCode.FileIsADirectory
'fileNotDirectory', "File is not a directory"), FileSystemProviderErrorCode.FileNotADirectory
'dirIsNotEmpty', "Directory is not empty"), FileSystemProviderErrorCode.Unknown
'internal', "Internal error occurred in IndexedDB File System Provider. ({0})", message), FileSystemProviderErrorCode.Unknown
'fileSystemRenameError', "Rename is only supported for files."), FileSystemProviderErrorCode.Unavailable
'fileSystemNotAllowedError', "Insufficient permissions. Please retry and allow the operation.")
'console.title', "VS Code Console"
'mac.terminal.script.failed', "Script '{0}' failed with exit code {1}", script, code))
'mac.terminal.type.not.supported', "'{0}' not supported", terminalApp))
'press.any.key', "Press any key to continue..."
'linux.term.failed', "'{0}' failed with exit code {1}", exec, code))
'ext.term.app.not.found', "can't find terminal application '{0}'", err['path'])
'invalidManifest', "VSIX invalid: package.json is not a JSON file.")
'notFound', "Extension '{0}' not found.", id
'useId', "Make sure you use the full extension ID, including the publisher, e.g.: {0}", 'ms-dotnettools.csharp'
'listFromLocation', "Extensions installed on {0}:", this.location)
'installingExtensions', "Installing extensions...")
'alreadyInstalled-checkAndUpdate', "Extension '{0}' v{1} is already installed. Use '--force' option to update to latest version or provide '@<version>' to install a specific version, for example: '{2}@1.2.3'.", id, installedExtension.manifest.version, id)
'alreadyInstalled', "Extension '{0}' is already installed.", `${id}@${version}`)
'installation failed', "Failed Installing Extensions: {0}", failed.join(', '))
'successVsixInstall', "Extension '{0}' was successfully installed.", basename(vsix))
'cancelVsixInstall', "Cancelled installing extension '{0}'.", basename(vsix))
'alreadyInstalled', "Extension '{0}' is already installed.", version ? `${id}@${version}` : id)
'updateMessage', "Updating the extension '{0}' to the version {1}", id, galleryExtension.version)
'installing builtin ', "Installing builtin extension '{0}'...", id)
'installing', "Installing extension '{0}'...", id)
'successInstall', "Extension '{0}' v{1} was successfully installed.", id, local.manifest.version)
'cancelInstall', "Cancelled installing extension '{0}'.", id)
'forceDowngrade', "A newer version of extension '{0}' v{1} is already installed. Use '--force' option to downgrade to older version.", newer.identifier.id, newer.manifest.version, manifest.version)
'builtin', "Extension '{0}' is a Built-in extension and cannot be uninstalled", id)
'forceUninstall', "Extension '{0}' is marked as a Built-in extension by user. Please use '--force' option to uninstall it.", id)
'uninstalling', "Uninstalling {0}...", id)
'successUninstallFromLocation', "Extension '{0}' was successfully uninstalled from {1}!", id, this.location)
'successUninstall', "Extension '{0}' was successfully uninstalled!", id)
'notInstalled', "Extension '{0}' is not installed.", id
'MarketPlaceDisabled', "Marketplace is not enabled"), ExtensionManagementErrorCode.Internal
'malicious extension', "Can't install '{0}' extension since it was reported to be problematic.", extension.identifier.id), ExtensionManagementErrorCode.Malicious
'incompatible platform', "The '{0}' extension is not available in {1} for {2}.", extension.identifier.id, this.productService.nameLong, TargetPlatformToString(targetPlatform)), ExtensionManagementErrorCode.IncompatibleTargetPlatform
'notFoundCompatiblePrereleaseDependency', "Can't install pre-release version of '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.IncompatiblePreRelease
'notFoundReleaseExtension', "Can't install release version of '{0}' extension because it has no release version.", extension.identifier.id), ExtensionManagementErrorCode.ReleaseVersionNotFound
'notFoundCompatibleDependency', "Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.Incompatible
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:				return nls.localize('singleDependentError', "Cannot uninstall '{0}' extension. '{1}' extension depends on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:				return nls.localize('twoDependentsError', "Cannot uninstall '{0}' extension. '{1}' and '{2}' extensions depend on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			return nls.localize('multipleDependentsError', "Cannot uninstall '{0}' extension. '{1}', '{2}' and other extension depend on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			return nls.localize('singleIndirectDependentError', "Cannot uninstall '{0}' extension . It includes uninstalling '{1}' extension and '{2}' extension depends on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:			return nls.localize('twoIndirectDependentsError', "Cannot uninstall '{0}' extension. It includes uninstalling '{1}' extension and '{2}' and '{3}' extensions depend on this.",
src/vs/platform/extensionManagement/common/abstractExtensionManagementService.ts:		return nls.localize('multipleIndirectDependentsError', "Cannot uninstall '{0}' extension. It includes uninstalling '{1}' extension and '{2}', '{3}' and other extensions depend on this.",
'missingNLSKey', "Couldn't find message for key {0}.", messageKey)}`
'extensions', "Extensions"
'preferences', "Preferences"
{ key: 'exeRecommended', comment: ['Placeholder string is the name of the software that is installed.'] }, "You have {0} installed on your system. Do you want to install the recommended extensions for it?", tips[0].exeFriendlyName
'incompatible', "Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.", getGalleryExtensionId(manifest.publisher, manifest.name), this.productService.version)
'MarketPlaceDisabled', "Marketplace is not enabled")
'Not a Marketplace extension', "Only Marketplace Extensions can be reinstalled")
'removeError', "Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.", toErrorMessage(e))
'errorDeleting', "Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again", extensionPath, extensionKey.id), ExtensionManagementErrorCode.Delete
'renameError', "Unknown error while renaming {0} to {1}", extractPath, renamePath), error.code || ExtensionManagementErrorCode.Rename
'cannot read', "Cannot read the extension from {0}", location.path)
'quitCode', "Unable to install the extension. Please Quit and Start VS Code before reinstalling."), ExtensionManagementErrorCode.Internal
'exitCode', "Unable to install the extension. Please Exit and Start VS Code before reinstalling."), ExtensionManagementErrorCode.Internal
'restartCode', "Please restart VS Code before reinstalling {0}.", this.manifest.displayName || this.manifest.name)
'restartCode', "Please restart VS Code before reinstalling {0}.", this.manifest.displayName || this.manifest.name)
'extensionDescription.publisher', "property publisher must be of type `string`.")]
'extensionDescription.name', "property `{0}` is mandatory and must be of type `string`", 'name')]
'extensionDescription.version', "property `{0}` is mandatory and must be of type `string`", 'version')]
'extensionDescription.engines', "property `{0}` is mandatory and must be of type `object`", 'engines')]
'extensionDescription.engines.vscode', "property `{0}` is mandatory and must be of type `string`", 'engines.vscode')]
'extensionDescription.extensionDependencies', "property `{0}` can be omitted or must be of type `string[]`", 'extensionDependencies')]
'extensionDescription.activationEvents1', "property `{0}` can be omitted or must be of type `string[]`", 'activationEvents')]
'extensionDescription.activationEvents2', "properties `{0}` and `{1}` must both be specified or must both be omitted", 'activationEvents', 'main')]
'extensionDescription.extensionKind', "property `{0}` can be defined only if property `main` is also defined.", 'extensionKind')]
'extensionDescription.main1', "property `{0}` can be omitted or must be of type `string`", 'main')]
'extensionDescription.main2', "Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.", mainLocation.path, extensionLocation.path)]
'extensionDescription.main3', "properties `{0}` and `{1}` must both be specified or must both be omitted", 'activationEvents', 'main')]
'extensionDescription.browser1', "property `{0}` can be omitted or must be of type `string`", 'browser')]
'extensionDescription.browser2', "Expected `browser` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.", browserLocation.path, extensionLocation.path)]
'extensionDescription.browser3', "properties `{0}` and `{1}` must both be specified or must both be omitted", 'activationEvents', 'browser')]
'notSemver', "Extension version is not semver compatible.")]
'versionSyntax', "Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.", requestedVersion)
'versionSpecificity1', "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.", requestedVersion)
'versionSpecificity2', "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.", requestedVersion)
'versionMismatch', "Extension is not compatible with Code {0}. Extension requires: {1}.", currentVersion, requestedVersion)
'showMore', "Show more ({0})", renderOverflowingCharCount(overflowingCharCount))
'overflow.chars', "{0} chars", n
'fileTooLarge', "File is too large to open as untitled editor. Please upload it first into the file explorer and then try again.")
'fileTooLargeForHeapError', "To open a file of this size, you need to restart and allow to use more memory"), FileSystemProviderErrorCode.FileExceedsMemoryLimit
'fileTooLargeError', "File is too large to open"), FileSystemProviderErrorCode.FileTooLarge
'fileReadFail', "Cannot read file {0}: {1}.", manifestLocation.path, error.message))
'jsonParseFail', "Failed to parse {0}: [{1}, {2}] {3}.", manifestLocation.path, e.offset, e.length, getParseErrorMessage(e.error)))
'jsonParseInvalidType', "Invalid manifest file {0}: Not an JSON object.", manifestLocation.path))
'jsonsParseReportErrors', "Failed to parse {0}: {1}.", localizedMessages.default?.path, getParseErrorMessage(error.error)))
'jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localizedMessages.default?.path))
'jsonsParseReportErrors', "Failed to parse {0}: {1}.", localized?.path, getParseErrorMessage(error.error)))
'jsonInvalidFormat', "Invalid format {0}: JSON object expected.", localized?.path))
'open', "Open") }, window
'openFolder', "Open Folder") }, window
'openFile', "Open File") }, window
'openWorkspaceTitle', "Open Workspace from File"
{ key: 'openWorkspace', comment: ['&& denotes a mnemonic'] }, "&&Open")
'moreFile', "...1 additional file not shown")
'moreFiles', "...{0} additional files not shown", fileNamesOrResources.length - MAX_CONFIRM_FILES)
'isMac', "Whether the operating system is macOS")
'isLinux', "Whether the operating system is Linux")
'isWindows', "Whether the operating system is Windows")
'isWeb', "Whether the platform is a web browser")
'isMacNative', "Whether the operating system is macOS on a non-browser platform")
'isIOS', "Whether the operating system is iOS")
'isMobile', "Whether the platform is a mobile web browser")
'productQualityType', "Quality type of VS Code")
'inputFocus', "Whether keyboard focus is inside an input box")
'getContextKeyInfo', "A command that returns information about context keys"
"noSelection", "No selection"
"singleSelectionRange", "Line {0}, Column {1} ({2} selected)"
"singleSelection", "Line {0}, Column {1}"
"multiSelectionRange", "{0} selections ({1} characters selected)"
"multiSelection", "{0} selections"
"emergencyConfOn", "Now changing the setting `accessibilitySupport` to 'on'."
"openingDocs", "Now opening the Editor Accessibility documentation page."
"readonlyDiffEditor", " in a read-only pane of a diff editor."
"editableDiffEditor", " in a pane of a diff editor."
"readonlyEditor", " in a read-only code editor"
"editableEditor", " in a code editor"
"changeConfigToOnMac", "To configure the editor to be optimized for usage with a Screen Reader press Command+E now."
"changeConfigToOnWinLinux", "To configure the editor to be optimized for usage with a Screen Reader press Control+E now."
"auto_on", "The editor is configured to be optimized for usage with a Screen Reader."
"auto_off", "The editor is configured to never be optimized for usage with a Screen Reader, which is not the case at this time."
"tabFocusModeOnMsg", "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}."
"tabFocusModeOnMsgNoKb", "Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding."
"tabFocusModeOffMsg", "Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}."
"tabFocusModeOffMsgNoKb", "Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding."
"openDocMac", "Press Command+H now to open a browser window with more information related to editor accessibility."
"openDocWinLinux", "Press Control+H now to open a browser window with more information related to editor accessibility."
"outroMsg", "You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape."
"showAccessibilityHelpAction", "Show Accessibility Help"
'inspectTokens', "Developer: Inspect Tokens"
'gotoLineActionLabel', "Go to Line/Column..."
'helpQuickAccess', "Show all Quick Access Providers"
'quickCommandActionLabel', "Command Palette"
'quickCommandActionHelp', "Show And Run Commands"
'quickOutlineActionLabel', "Go to Symbol..."
'quickOutlineByCategoryActionLabel', "Go to Symbol by Category..."
'editorViewAccessibleLabel', "Editor content"
'accessibilityHelpMessage', "Press Alt+F1 for Accessibility Options."
'toggleHighContrast', "Toggle High Contrast Theme"
'bulkEditServiceSummary', "Made {0} edits in {1} files"
'defaultLanguageConfigurationOverrides.title', "Default Language Configuration Overrides"
'defaultLanguageConfiguration.description', "Configure settings to be overridden for the {0} language.", plainKey
'overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."
'overrideSettings.errorMessage', "This setting does not support per-language configuration."
'overrideSettings.defaultDescription', "Configure editor settings to be overridden for a language."
'overrideSettings.errorMessage', "This setting does not support per-language configuration."
'config.property.empty', "Cannot register an empty property"
'config.property.languageDefault', "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.", property
'config.property.duplicate', "Cannot register '{0}'. This property is already registered.", property
'config.policy.duplicate', "Cannot register '{0}'. The associated policy {1} is already registered with {2}.", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name)
'hide.label', 'Hide \'{0}\'', title
'view', "View"
'help', "Help"
'test', "Test"
'preferences', "Preferences"
{ key: 'developer', comment: ['A developer on Code itself or someone diagnosing issues in Code'] }, "Developer"
'title', 'Reset All Menus'
'edit', "Typing"), 'undoredo.textBufferEdit', this._model, beforeCursorState
'titleAndKb', "{0} ({1})", tooltip, keybindingLabel
'titleAndKb', "{0} ({1})", altTooltip, altKeybindingLabel
'titleAndKbAndAlt', "{0}\n[{1}] {2}", title, UILabelProvider.modifierLabels[OS].altKey, altTitleSection
'diffReviewInsertIcon', 'Icon for \'Insert\' in diff review.')
'diffReviewRemoveIcon', 'Icon for \'Remove\' in diff review.')
'diffReviewCloseIcon', 'Icon for \'Close\' in diff review.')
'label.close', "Close"), 'close-diff-review ' + ThemeIcon.asClassName(diffReviewCloseIcon), true, async () => this.hide()), { label: false, icon: true }
'no_lines_changed', "no lines changed"
'one_line_changed', "1 line changed"
'more_lines_changed', "{0} lines changed", lines
src/vs/editor/browser/widget/diffReview.ts:		header.setAttribute('aria-label', nls.localize({
'blankLine', "blank"
{ key: 'unchangedLine', comment: ['The placeholders are contents of the line and should not be translated.'] }, "{0} unchanged line {1}", lineContent, originalLine
'equalLine', "{0} original line {1} modified line {2}", lineContent, originalLine, modifiedLine
'insertLine', "+ {0} modified line {1}", lineContent, modifiedLine
'deleteLine', "- {0} original line {1}", lineContent, originalLine
'editor.action.diffReview.next', "Go to Next Difference"
'editor.action.diffReview.prev', "Go to Previous Difference"
'hide', "Hide"
'resetThisMenu', "Reset Menu"
'plainText.alias', "Plain Text"
'diff.clipboard.copyDeletedLinesContent.label', "Copy deleted lines"
'diff.clipboard.copyDeletedLinesContent.single.label', "Copy deleted line")
'diff.clipboard.copyChangedLinesContent.label', "Copy changed lines"
'diff.clipboard.copyChangedLinesContent.single.label', "Copy changed line")
'diff.clipboard.copyDeletedLineContent.label', "Copy deleted line ({0})", diff.originalStartLineNumber
'diff.clipboard.copyChangedLineContent.label', "Copy changed line ({0})", diff.originalStartLineNumber
'diff.inline.revertChange.label', "Revert this change"), undefined, true, async (
'diff.clipboard.copyDeletedLineContent.label', "Copy deleted line ({0})", diff.originalStartLineNumber + currentLineNumberOffset
'diff.clipboard.copyChangedLineContent.label', "Copy changed line ({0})", diff.originalStartLineNumber + currentLineNumberOffset
'cursors.maximum', "The number of cursors has been limited to {0}.", CursorsController.MAX_CURSOR_COUNT)
'editorTextFocus', "Whether the editor text has focus (cursor is blinking)")
'editorFocus', "Whether the editor or an editor widget has focus (e.g. focus is in the find widget)")
'textInputFocus', "Whether an editor or a rich text input has focus (cursor is blinking)")
'editorReadonly', "Whether the editor is read only")
'inDiffEditor', "Whether the context is a diff editor")
'editorColumnSelection', "Whether `editor.columnSelection` is enabled")
'editorHasSelection', "Whether the editor has text selected")
'editorHasMultipleSelections', "Whether the editor has multiple selections")
'editorTabMovesFocus', "Whether `Tab` will move focus out of the editor")
'editorHoverVisible', "Whether the editor hover is visible")
'inCompositeEditor', "Whether the editor is part of a larger editor (e.g. notebooks)")
'editorLangId', "The language identifier of the editor")
'editorHasCompletionItemProvider', "Whether the editor has a completion item provider")
'editorHasCodeActionsProvider', "Whether the editor has a code actions provider")
'editorHasCodeLensProvider', "Whether the editor has a code lens provider")
'editorHasDefinitionProvider', "Whether the editor has a definition provider")
'editorHasDeclarationProvider', "Whether the editor has a declaration provider")
'editorHasImplementationProvider', "Whether the editor has an implementation provider")
'editorHasTypeDefinitionProvider', "Whether the editor has a type definition provider")
'editorHasHoverProvider', "Whether the editor has a hover provider")
'editorHasDocumentHighlightProvider', "Whether the editor has a document highlight provider")
'editorHasDocumentSymbolProvider', "Whether the editor has a document symbol provider")
'editorHasReferenceProvider', "Whether the editor has a reference provider")
'editorHasRenameProvider', "Whether the editor has a rename provider")
'editorHasSignatureHelpProvider', "Whether the editor has a signature help provider")
'editorHasInlayHintsProvider', "Whether the editor has an inline hints provider")
'editorHasDocumentFormattingProvider', "Whether the editor has a document formatting provider")
'editorHasDocumentSelectionFormattingProvider', "Whether the editor has a document selection formatting provider")
'editorHasMultipleDocumentFormattingProvider', "Whether the editor has multiple document formatting providers")
'editorHasMultipleDocumentSelectionFormattingProvider', "Whether the editor has multiple document selection formatting providers")
'newTab', "New Window Tab"
'showPreviousTab', "Show Previous Window Tab"
'showNextWindowTab', "Show Next Window Tab"
'moveWindowTabToNewWindow', "Move Window Tab to New Window"
'mergeAllWindowTabs', "Merge All Windows"
'toggleWindowTabsBar', "Toggle Window Tabs Bar"
{ key: 'miExit', comment: ['&& denotes a mnemonic'] }, "E&&xit"
'windowConfigurationTitle', "Window"
'window.openWithoutArgumentsInNewWindow.on', "Open a new empty window."
'window.openWithoutArgumentsInNewWindow.off', "Focus the last active running instance."
'openWithoutArgumentsInNewWindow', "Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option)."
'window.reopenFolders.preserve', "Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows."
'window.reopenFolders.all', "Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line)."
'window.reopenFolders.folders', "Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line)."
'window.reopenFolders.one', "Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line)."
'window.reopenFolders.none', "Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear."
'restoreWindows', "Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running."
'restoreFullscreen', "Controls whether a window should restore to full screen mode if it was exited in full screen mode."
'zoomLevel', "Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity."
'window.newWindowDimensions.default', "Open new windows in the center of the screen."
'window.newWindowDimensions.inherit', "Open new windows with same dimension as last active one."
'window.newWindowDimensions.offset', "Open new windows with same dimension as last active one with an offset position."
'window.newWindowDimensions.maximized', "Open new windows maximized."
'window.newWindowDimensions.fullscreen', "Open new windows in full screen mode."
'newWindowDimensions', "Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing."
'closeWhenEmpty', "Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders."
'window.doubleClickIconToClose', "If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `#window.titleBarStyle#` is set to `custom`."
'titleBarStyle', "Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply."
'windowControlsOverlay', "Use window controls provided by the platform instead of our HTML-based window controls. Changes require a full restart to apply."
'dialogStyle', "Adjust the appearance of dialog windows."
'window.nativeTabs', "Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured."
'window.nativeFullScreen', "Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen."
'window.clickThroughInactive', "If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element."
'experimentalUseSandbox', "Experimental: When enabled, the window will have sandbox mode enabled via Electron API."
'telemetryConfigurationTitle', "Telemetry"
'telemetry.enableCrashReporting', "Enable crash reports to be collected. This helps us improve stability. \nThis option requires restart to take effect."
'enableCrashReporterDeprecated', "If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the {0} setting.", `\`#${TELEMETRY_SETTING_ID}#\``
'keyboardConfigurationTitle', "Keyboard"
'touchbar.enabled', "Enables the macOS touchbar buttons on the keyboard if available."
'touchbar.ignored', 'A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).'
'argv.locale', 'The display Language to use. Picking a different language requires the associated language pack to be installed.'
'argv.disableHardwareAcceleration', 'Disables hardware acceleration. ONLY change this option if you encounter graphic issues.'
'argv.forceColorProfile', 'Allows to override the color profile to use. If you experience colors appear badly, try to set this to `srgb` and restart.'
'argv.enableCrashReporter', 'Allows to disable crash reporting, should restart the app if the value is changed.'
'argv.crashReporterId', 'Unique id used for correlating crash reports sent from this app instance.'
'argv.enebleProposedApi', "Enable proposed APIs for a list of extension ids (such as \`vscode.git\`). Proposed APIs are unstable and subject to breaking without warning at any time. This should only be set for extension development and testing purposes."
'argv.logLevel', "Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'."
'argv.force-renderer-accessibility', 'Forces the renderer to be accessible. ONLY change this if you are using a screen reader on Linux. On other platforms the renderer will automatically be accessible. This flag is automatically set if you have editor.accessibilitySupport: on.'
'diffInsertIcon', 'Line decoration for inserts in the diff editor.')
'diffRemoveIcon', 'Line decoration for removals in the diff editor.')
'diff-aria-navigation-tip', ' use Shift + F7 to navigate changes'
"diff.tooLarge", "Cannot compare files because one file is too large.")
'remote', "Remote"
'browser', "Browser"
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			return localize('singleDependentError', "Cannot uninstall extension '{0}'. Extension '{1}' depends on this.",
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:			return localize('twoDependentsError', "Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.",
src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts:		return localize('multipleDependentsError', "Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.",
'Manifest is not found', "Installing Extension {0} failed: Manifest is not found.", gallery.displayName || gallery.name)
'cannot be installed', "Cannot install the '{0}' extension because it is not available in this setup.", gallery.displayName || gallery.name)
'install extensions', "Install Extensions"
'install', "Install"
'install and do no sync', "Install (Do not sync)"
'cancel', "Cancel"
'install single extension', "Would you like to install and synchronize '{0}' extension across your devices?", extensions[0].displayName
'install multiple extensions', "Would you like to install and synchronize extensions across your devices?"
'extensionInstallWorkspaceTrustMessage', "Enabling this extension requires a trusted workspace."
'extensionInstallWorkspaceTrustButton', "Trust Workspace & Install"
'extensionInstallWorkspaceTrustContinueButton', "Install"
'extensionInstallWorkspaceTrustManageButton', "Learn More"
'VS Code for Web', "{0} for the Web", this.productService.nameLong
'limited support', "'{0}' has limited functionality in {1}.", extension.displayName || extension.identifier.id, productName
'non web extensions detail', "Contains extensions which are not supported."
'cancel', "Cancel"
'cancel', "Cancel"
'non web extensions', "'{0}' contains extensions which are not supported in {1}.", extension.displayName || extension.identifier.id, productName
'cancel', "Cancel"
'remote extension host Log', "Remote Extension Host"), file: logFile, log: true }
'overwritingExtension', "Overwriting extension {0} with {1}.", extension.extensionLocation.fsPath, systemExtension.extensionLocation.fsPath)
'overwritingExtension', "Overwriting extension {0} with {1}.", extension.extensionLocation.fsPath, userExtension.extensionLocation.fsPath)
'extensionUnderDevelopment', "Loading development extension at {0}", developedExtension.extensionLocation.fsPath)
'ui', "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine."
'workspace', "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."
'vscode.extension.engines', "Engine compatibility."
'vscode.extension.engines.vscode', 'For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5.'
'vscode.extension.publisher', 'The publisher of the VS Code extension.'
'vscode.extension.displayName', 'The display name for the extension used in the VS Code gallery.'
'vscode.extension.categories', 'The categories used by the VS Code gallery to categorize the extension.'
'vscode.extension.category.languages.deprecated', 'Use \'Programming  Languages\' instead'
'vscode.extension.galleryBanner', 'Banner used in the VS Code marketplace.'
'vscode.extension.galleryBanner.color', 'The banner color on the VS Code marketplace page header.'
'vscode.extension.galleryBanner.theme', 'The color theme for the font used in the banner.'
'vscode.extension.contributes', 'All contributions of the VS Code extension represented by this package.'
'vscode.extension.preview', 'Sets the extension to be flagged as a Preview in the Marketplace.'
'vscode.extension.enableProposedApi.deprecated', 'Use `enabledApiProposals` instead.'
'vscode.extension.enabledApiProposals', 'Enable API proposals to try them out. Only valid **during development**. Extensions **cannot be published** with this property. For more details visit: https://code.visualstudio.com/api/advanced-topics/using-proposed-api'
'vscode.extension.activationEvents', 'Activation events for the VS Code extension.'
'vscode.extension.activationEvents.onWebviewPanel', 'An activation event emmited when a webview is loaded of a certain viewType'
'vscode.extension.activationEvents.onLanguage', 'An activation event emitted whenever a file that resolves to the specified language gets opened.'
'vscode.extension.activationEvents.onCommand', 'An activation event emitted whenever the specified command gets invoked.'
'vscode.extension.activationEvents.onDebug', 'An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.'
'vscode.extension.activationEvents.onDebugInitialConfigurations', 'An activation event emitted whenever a "launch.json" needs to be created (and all provideDebugConfigurations methods need to be called).'
'vscode.extension.activationEvents.onDebugDynamicConfigurations', 'An activation event emitted whenever a list of all debug configurations needs to be created (and all provideDebugConfigurations methods for the "dynamic" scope need to be called).'
'vscode.extension.activationEvents.onDebugResolve', 'An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).'
'vscode.extension.activationEvents.onDebugAdapterProtocolTracker', 'An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed.'
'vscode.extension.activationEvents.workspaceContains', 'An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.'
'vscode.extension.activationEvents.onStartupFinished', 'An activation event emitted after the start-up finished (after all `*` activated extensions have finished activating).'
'vscode.extension.activationEvents.onTaskType', 'An activation event emitted whenever tasks of a certain type need to be listed or resolved.'
'vscode.extension.activationEvents.onFileSystem', 'An activation event emitted whenever a file or folder is accessed with the given scheme.'
'vscode.extension.activationEvents.onEditSession', 'An activation event emitted whenever an edit session is accessed with the given scheme.'
'vscode.extension.activationEvents.onSearch', 'An activation event emitted whenever a search is started in the folder with the given scheme.'
'vscode.extension.activationEvents.onView', 'An activation event emitted whenever the specified view is expanded.'
'vscode.extension.activationEvents.onUri', 'An activation event emitted whenever a system-wide Uri directed towards this extension is open.'
'vscode.extension.activationEvents.onOpenExternalUri', 'An activation event emitted whenever a external uri (such as an http or https link) is being opened.'
'vscode.extension.activationEvents.onCustomEditor', 'An activation event emitted whenever the specified custom editor becomes visible.'
'vscode.extension.activationEvents.onNotebook', 'An activation event emitted whenever the specified notebook document is opened.'
'vscode.extension.activationEvents.onAuthenticationRequest', 'An activation event emitted whenever sessions are requested from the specified authentication provider.'
'vscode.extension.activationEvents.onRenderer', 'An activation event emitted whenever a notebook output renderer is used.'
'vscode.extension.activationEvents.onTerminalProfile', 'An activation event emitted when a specific terminal profile is launched.'
'vscode.extension.activationEvents.onWalkthrough', 'An activation event emitted when a specified walkthrough is opened.'
'vscode.extension.activationEvents.star', 'An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.'
'vscode.extension.badges', 'Array of badges to display in the sidebar of the Marketplace\'s extension page.'
'vscode.extension.badges.url', 'Badge image URL.'
'vscode.extension.badges.href', 'Badge link.'
'vscode.extension.badges.description', 'Badge description.'
'vscode.extension.markdown', "Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard."
'vscode.extension.qna', "Controls the Q&A link in the Marketplace. Set to marketplace to enable the default Marketplace Q & A site. Set to a string to provide the URL of a custom Q & A site. Set to false to disable Q & A altogether."
'vscode.extension.extensionDependencies', 'Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.'
'vscode.extension.contributes.extensionPack', "A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp."
'extensionKind', "Define the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions run on the remote."
'extensionKind.ui', "Define an extension which can run only on the local machine when connected to remote window."
'extensionKind.workspace', "Define an extension which can run only on the remote machine when connected remote window."
'extensionKind.ui-workspace', "Define an extension which can run on either side, with a preference towards running on the local machine."
'extensionKind.workspace-ui', "Define an extension which can run on either side, with a preference towards running on the remote machine."
'extensionKind.empty', "Define an extension which cannot run in a remote context, neither on the local, nor on the remote machine."
'vscode.extension.capabilities', "Declare the set of supported capabilities by the extension."
'vscode.extension.capabilities.virtualWorkspaces', "Declares whether the extension should be enabled in virtual workspaces. A virtual workspace is a workspace which is not backed by any on-disk resources. When false, this extension will be automatically disabled in virtual workspaces. Default is true."
'vscode.extension.capabilities.virtualWorkspaces.supported', "Declares the level of support for virtual workspaces by the extension."
'vscode.extension.capabilities.virtualWorkspaces.supported.limited', "The extension will be enabled in virtual workspaces with some functionality disabled."
'vscode.extension.capabilities.virtualWorkspaces.supported.true', "The extension will be enabled in virtual workspaces with all functionality enabled."
'vscode.extension.capabilities.virtualWorkspaces.supported.false', "The extension will not be enabled in virtual workspaces."
'vscode.extension.capabilities.virtualWorkspaces.description', "A description of how virtual workspaces affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."
'vscode.extension.capabilities.untrustedWorkspaces', 'Declares how the extension should be handled in untrusted workspaces.'
'vscode.extension.capabilities.untrustedWorkspaces.supported', "Declares the level of support for untrusted workspaces by the extension."
'vscode.extension.capabilities.untrustedWorkspaces.supported.limited', "The extension will be enabled in untrusted workspaces with some functionality disabled."
'vscode.extension.capabilities.untrustedWorkspaces.supported.true', "The extension will be enabled in untrusted workspaces with all functionality enabled."
'vscode.extension.capabilities.untrustedWorkspaces.supported.false', "The extension will not be enabled in untrusted workspaces."
'vscode.extension.capabilities.untrustedWorkspaces.restrictedConfigurations', "A list of configuration keys contributed by the extension that should not use workspace values in untrusted workspaces."
'vscode.extension.capabilities.untrustedWorkspaces.description', "A description of how workspace trust affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."
'vscode.extension.contributes.sponsor', "Specify the location from where users can sponsor your extension."
'vscode.extension.contributes.sponsor.url', "URL from where users can sponsor your extension. It must be a valid URL with a HTTP or HTTPS protocol. Example value: https://github.com/sponsors/nvaccess"
'vscode.extension.scripts.prepublish', 'Script executed before the package is published as a VS Code extension.'
'vscode.extension.scripts.uninstall', 'Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.'
'vscode.extension.icon', 'The path to a 128x128 pixel icon.'
src/vs/workbench/services/extensions/common/extensionsRegistry.ts:			description: nls.localize({
'product.extensionEnabledApiProposals', "API proposals that the respective extensions can freely use."
'integrity.prompt', "Your {0} installation appears to be corrupt. Please reinstall.", this.productService.nameShort
'integrity.moreInformation', "More Information"
'integrity.dontShowAgain', "Don't Show Again"
'cancel', "Cancel")], { cancelId: 1 }
'measureExtHostLatency', "Measure Extension Host Latency"
'not a web extension', "Cannot add '{0}' because this extension is not a web extension.", manifest.displayName || manifest.name)
'openInstalledWebExtensionsResource', "Open Installed Web Extensions Resource"
'looping', "The following extensions contain dependency loops and have been disabled: {0}", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')
'extensionTestError', "No extension host found that can launch the test runner at {0}.", this._environmentService.extensionTestsLocationURI.toString()
'extensionService.autoRestart', "The remote extension host terminated unexpectedly. Restarting..."), { hideAfter: 5000 }
'extensionService.crash', "Remote Extension host terminated unexpectedly 3 times within the last 5 minutes."
'restart', "Restart Remote Extension Host"
'extensionHost.startupFailDebug', "Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue."
'extensionHost.startupFail', "Extension host did not start in 10 seconds, that might be a problem."
'reloadWindow', "Reload Window"
'extension host Log', "Extension Host"), file: this._extensionHostLogFile, log: true }
'extensionHost.error', "Error from the extension host: {0}", errorMessage)
'join.extensionDevelopment', "Terminating extension debug session") }
'confirmUrl', "Allow an extension to open this URI?", extensionId
'rememberConfirmUrl', "Don't ask again for this extension."
'open', "&&Open"
'installAndHandle', "Extension '{0}' is not installed. Would you like to install the extension and open this URL?", galleryExtension.displayName || galleryExtension.name
'install and open', "&&Install and Open"
'Installing', "Installing Extension '{0}'...", galleryExtension.displayName || galleryExtension.name
'enableAndHandle', "Extension '{0}' is disabled. Would you like to enable the extension and open the URL?", extension.manifest.displayName || extension.manifest.name
'enableAndReload', "&&Enable and Open"
'reloadAndHandle', "Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?", extension.manifest.displayName || extension.manifest.name
'reloadAndOpen', "&&Reload Window and Open"
'manage', "Manage Authorized Extension URIs..."
'extensions', "Extensions"
'no', 'There are currently no authorized extension URIs.') }]
'extensionsDisabled', "All installed extensions are temporarily disabled."
'Reload', "Reload and Enable Extensions"
'cannot disable language pack extension', "Cannot change enablement of {0} extension because it contributes language packs.", extension.manifest.displayName || extension.identifier.id)
'cannot disable auth extension', "Cannot change enablement {0} extension because Settings Sync depends on it.", extension.manifest.displayName || extension.identifier.id)
'cannot change enablement environment', "Cannot change enablement of {0} extension because it is enabled in environment", extension.manifest.displayName || extension.identifier.id)
'cannot change disablement environment', "Cannot change enablement of {0} extension because it is disabled in environment", extension.manifest.displayName || extension.identifier.id)
'cannot change enablement virtual workspace', "Cannot change enablement of {0} extension because it does not support virtual workspaces", extension.manifest.displayName || extension.identifier.id)
'cannot change enablement extension kind', "Cannot change enablement of {0} extension because of its extension kind", extension.manifest.displayName || extension.identifier.id)
'cannot change enablement dependency', "Cannot enable '{0}' extension because it depends on '{1}' extension that cannot be enabled", extension.manifest.displayName || extension.identifier.id, dependency.manifest.displayName || dependency.identifier.id)
'noWorkspace', "No workspace.")
'cannot disable auth extension in workspace', "Cannot change enablement of {0} extension in workspace because it contributes authentication providers", extension.manifest.displayName || extension.identifier.id)
'name', "Worker Extension Host"), file: this._extensionHostLogFile, log: true }
'bisect.singular', "Extension Bisect is active and has disabled 1 extension. Check if you can still reproduce the problem and proceed by selecting from these options."
'bisect.plural', "Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.", this._extensionBisectService.disabledCount
'title.start', "Start Extension Bisect"
'msg.start', "Extension Bisect"
'detail.start', "Extension Bisect will use binary search to find an extension that causes a problem. During the process the window reloads repeatedly (~{0} times). Each time you must confirm if you are still seeing problems.", 2 + Math.log2(extensions.length) | 0
'msg2', "Start Extension Bisect"
'title.isBad', "Continue Extension Bisect"
'done.msg', "Extension Bisect"
'done.detail2', "Extension Bisect is done but no extension has been identified. This might be a problem with {0}.", productService.nameShort
'done.msg', "Extension Bisect"
'done', "Continue"
'done.detail', "Extension Bisect is done and has identified {0} as the extension causing the problem.", done.id
'done.disbale', "Keep this extension disabled"
'bisect', "Extension Bisect is active and has disabled {0} extensions. Check if you can still reproduce the problem and proceed by selecting from these options.", bisectService.disabledCount
'msg.next', "Extension Bisect"
'next.cancel', "Cancel"
'title.stop', "Stop Extension Bisect"
'looping', "The following extensions contain dependency loops and have been disabled: {0}", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')
'extensionService.versionMismatchCrash', "Extension host cannot start: version mismatch."
'relaunch', "Relaunch VS Code"
'extensionService.autoRestart', "The extension host terminated unexpectedly. Restarting..."), { hideAfter: 5000 }
'extensionService.crash', "Extension host terminated unexpectedly 3 times within the last 5 minutes."
'devTools', "Open Developer Tools"
'restart', "Restart Extension Host"
'getEnvironmentFailure', "Could not fetch remote environment") }
'looping', "The following extensions contain dependency loops and have been disabled: {0}", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')
'enableResolver', "Extension '{0}' is required to open the remote window.\nOK to enable?", recommendation.friendlyName
'enable', 'Enable and Reload'
'installResolver', "Extension '{0}' is required to open the remote window.\nDo you want to install the extension?", recommendation.friendlyName
'install', 'Install and Reload'
'resolverExtensionNotFound', "`{0}` not found on marketplace")
'restartExtensionHost', "Restart Extension Host"
'extensionCache.invalid', "Extensions have been modified on disk. Please reload the window."
'reloadWindow', "Reload Window"
'saveParticipants', "Saving '{0}'", model.name
'no authentication providers', "Settings sync cannot be turned on because there are no authentication providers available.")
'no account', "No account available")
'no account', "No account available")
'sync in progress', "Settings Sync is being turned on. Would you like to cancel it?"
'settings sync', "Settings Sync"
{ key: 'yes', comment: ['&& denotes a mnemonic'] }, "&&Yes"
{ key: 'no', comment: ['&& denotes a mnemonic'] }, "&&No"
'sync turned on', "{0} is turned on", SYNC_TITLE)
'turning on', "Turning on...") }
'resolving conflicts', "Resolving conflicts...") }
'syncing...', "Turning on...") }
'conflicts detected', "Conflicts Detected"
'show conflicts', "Show Conflicts"
'replace local', "Replace Local"
'replace remote', "Replace Remote"
'cancel', "Cancel"
'resolve', "Please resolve conflicts to turn on..."
'reset', "This will clear your data in the cloud and stop sync on all your devices."
'reset title', "Clear"
{ key: 'resetButton', comment: ['&& denotes a mnemonic'] }, "&&Reset"
'choose account placeholder', "Select an account to sign in"
'signed in', "Signed in") }
'last used', "Last Used with Sync"
'others', "Others") }
'sign in using account', "Sign in with {0}", providerName), authenticationProvider }
'successive auth failures', "Settings sync is suspended because of successive authorization failures. Please sign in again to continue synchronizing"
'sign in', "Sign in"), undefined, true, () => this.signIn()
'textFileCreate.source', "File Encoding Changed")
'settings', "Settings"
'keybindings', "Keyboard Shortcuts"
'snippets', "User Snippets"
'tasks', "User Tasks"
'extensions', "Extensions"
'ui state label', "UI State"
'profiles', "Profiles"
'sync category', "Settings Sync"
'syncViewIcon', 'View icon of the Settings Sync view.')
'textFileCreate.source', "File Created")
'textFileOverwrite.source', "File Replaced")
'textFileModelDecorations', "Text File Model Decorations"
'readonlyAndDeleted', "Deleted, Read Only"
'readonly', "Read Only"
'deleted', "Deleted"
'fileBinaryError', "File seems to be binary and cannot be opened as text"), TextFileOperationResult.FILE_IS_BINARY, options
'confirmOverwrite', "'{0}' already exists. Do you want to replace it?", basename(resource)
'irreversible', "A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.", basename(resource), basename(dirname(resource))
{ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"
{ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", model.name, toErrorMessage(error, false))
'save', "Save")
'doNotSave', "Don't Save")
'cancel', "Cancel"
'saveWorkspaceMessage', "Do you want to save your workspace configuration as a file?"
'saveWorkspaceDetail', "Save your workspace if you plan to open it again."
'workspaceOpenedMessage', "Unable to save workspace '{0}'", basename(workspaceUri)
'workspaceOpenedDetail', "The workspace is already opened in another window. Please close that window first and then try again."
'saveParticipants', "Saving '{0}'", workingCopy.name
'undoRedo.source', "Undo / Redo")
'join.fileWorkingCopyManager', "Saving working copies") })
'default.source', "File Saved")
'moved.source', "File Moved")
'renamed.source', "File Renamed")
'join.workingCopyHistory', "Saving local history") }
'staleSaveError', "Failed to save '{0}': The content of the file is newer. Do you want to overwrite the file with your changes?", this.name
'overwrite', "Overwrite"), run: () => this.save({ ignoreModifiedSince: true }) })
'discard', "Discard"), run: () => this.revert() })
'overwriteElevatedSudo', "Overwrite as Sudo..."
'saveElevatedSudo', "Retry as Sudo..."
'overwrite', "Overwrite"), run: () => this.save({ writeUnlock: true, reason: SaveReason.EXPLICIT }) })
'retry', "Retry"), run: () => this.save({ reason: SaveReason.EXPLICIT }) })
'saveAs', "Save As..."
'discard', "Discard"), run: () => this.revert() })
'readonlySaveErrorAdmin', "Failed to save '{0}': File is read-only. Select 'Overwrite as Admin' to retry as administrator.", this.name
'readonlySaveErrorSudo', "Failed to save '{0}': File is read-only. Select 'Overwrite as Sudo' to retry as superuser.", this.name
'readonlySaveError', "Failed to save '{0}': File is read-only. Select 'Overwrite' to attempt to make it writeable.", this.name
'permissionDeniedSaveError', "Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.", this.name
'permissionDeniedSaveErrorSudo', "Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.", this.name
{ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", this.name, toErrorMessage(error, false)
'join.workingCopyBackups', "Backup working copies") })
'backupTrackerBackupFailed', "The following editors with unsaved changes could not be saved to the back up location."), remainingDirtyWorkingCopies, backupError
'backupTrackerConfirmFailed', "The following editors with unsaved changes could not be saved or reverted."), remainingDirtyWorkingCopies, error
'backupErrorDetails', "Try saving or reverting the editors with unsaved changes first and then try again."
'backupBeforeShutdownMessage', "Backing up editors with unsaved changes is taking a bit longer..."
'backupBeforeShutdownDetail', "Click 'Cancel' to stop waiting and to save or revert editors with unsaved changes."
'saveBeforeShutdown', "Saving editors with unsaved changes is taking a bit longer...")
'revertBeforeShutdown', "Reverting editors with unsaved changes is taking a bit longer...")
'discardBackupsBeforeShutdown', "Discarding backups is taking a bit longer...")
'fileWorkingCopyCreate.source', "File Created")
'fileWorkingCopyReplace.source', "File Replaced")
'fileWorkingCopyDecorations', "File Working Copy Decorations"
'readonlyAndDeleted', "Deleted, Read Only"
'readonly', "Read Only"
'deleted', "Deleted"
'confirmOverwrite', "'{0}' already exists. Do you want to replace it?", basename(resource)
'irreversible', "A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.", basename(resource), basename(dirname(resource))
{ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"
'workspaceTrustEditorInputName', "Workspace Trust"
'join.textFiles', "Saving text files") })
'views log', "Views"), file: getViewsLogFile(environmentService), log: true }
'globalViewsStateStorageId', "Views visibility customizations in {0} view container", viewContainerName
'reload message when removed', "The current profile has been removed. Please reload to switch back to default profile")
'reload message when removed', "The current profile has been removed. Please reload to switch back to default profile")
'cannotRenameDefaultProfile', "Cannot rename the default profile")
'cannotDeleteDefaultProfile', "Cannot delete the default profile")
'reload message', "Switching a profile requires reloading VS Code."
'reload button', "&&Reload"
'views customizations', "Views Customizations"
'hideView', "Hide '{0}'", viewDescriptor.name
'resetViewLocation', "Reset Location"
'schema.folderExpanded', 'The folder icon for expanded folders. The expanded folder icon is optional. If not set, the icon defined for folder will be shown.'
'schema.folder', 'The folder icon for collapsed folders, and if folderExpanded is not set, also for expanded folders.'
'schema.file', 'The default file icon, shown for all files that don\'t match any extension, filename or language id.'
'schema.folderNames', 'Associates folder names to icons. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'
'schema.folderName', 'The ID of the icon definition for the association.'
'schema.folderNamesExpanded', 'Associates folder names to icons for expanded folders. The object key is the folder name, not including any path segments. No patterns or wildcards are allowed. Folder name matching is case insensitive.'
'schema.folderNameExpanded', 'The ID of the icon definition for the association.'
'schema.fileExtensions', 'Associates file extensions to icons. The object key is the file extension name. The extension name is the last segment of a file name after the last dot (not including the dot). Extensions are compared case insensitive.'
'schema.fileExtension', 'The ID of the icon definition for the association.'
'schema.fileNames', 'Associates file names to icons. The object key is the full file name, but not including any path segments. File name can include dots and a possible file extension. No patterns or wildcards are allowed. File name matching is case insensitive.'
'schema.fileName', 'The ID of the icon definition for the association.'
'schema.languageIds', 'Associates languages to icons. The object key is the language id as defined in the language contribution point.'
'schema.languageId', 'The ID of the icon definition for the association.'
'schema.fonts', 'Fonts that are used in the icon definitions.'
'schema.id', 'The ID of the font.'
'schema.id.formatError', 'The ID must only contain letter, numbers, underscore and minus.'
'schema.src', 'The location of the font.'
'schema.font-path', 'The font path, relative to the current file icon theme file.'
'schema.font-format', 'The format of the font.'
'schema.font-weight', 'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'
'schema.font-style', 'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'
'schema.font-size', 'The default size of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-size for valid values.'
'schema.iconDefinitions', 'Description of all icons that can be used when associating files to icons.'
'schema.iconDefinition', 'An icon definition. The object key is the ID of the definition.'
'schema.iconPath', 'When using a SVG or PNG: The path to the image. The path is relative to the icon set file.'
'schema.fontCharacter', 'When using a glyph font: The character in the font to use.'
'schema.fontColor', 'When using a glyph font: The color to use.'
'schema.fontSize', 'When using a font: The font size in percentage to the text font. If not set, defaults to the size in the font definition.'
'schema.fontId', 'When using a font: The id of the font. If not set, defaults to the first font definition.'
'schema.light', 'Optional associations for file icons in light color themes.'
'schema.highContrast', 'Optional associations for file icons in high contrast color themes.'
'schema.hidesExplorerArrows', 'Configures whether the file explorer\'s arrows should be hidden when this theme is active.'
'schema.showLanguageModeIcons', 'Configures whether the default language icons should be used if the theme does not define an icon for a language.'
'save', "Save")
'saveWorkspace', "Save Workspace"
'errorInvalidTaskConfiguration', "Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again."
'errorWorkspaceConfigurationFileDirty', "Unable to write into workspace configuration file because the file has unsaved changes. Please save it and try again."
'openWorkspaceConfigurationFile', "Open Workspace Configuration"
'contributes.semanticTokenTypes', 'Contributes semantic token types.'
'contributes.semanticTokenTypes.id', 'The identifier of the semantic token type'
'contributes.semanticTokenTypes.id.format', 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*'
'contributes.semanticTokenTypes.superType', 'The super type of the semantic token type'
'contributes.semanticTokenTypes.superType.format', 'Super types should be in the form letterOrDigit[_-letterOrDigit]*'
'contributes.color.description', 'The description of the semantic token type'
'contributes.semanticTokenModifiers', 'Contributes semantic token modifiers.'
'contributes.semanticTokenModifiers.id', 'The identifier of the semantic token modifier'
'contributes.semanticTokenModifiers.id.format', 'Identifiers should be in the form letterOrDigit[_-letterOrDigit]*'
'contributes.semanticTokenModifiers.description', 'The description of the semantic token modifier'
'contributes.semanticTokenScopes', 'Contributes semantic token scope maps.'
'contributes.semanticTokenScopes.languages', 'Lists the languge for which the defaults are.'
'contributes.semanticTokenScopes.scopes', 'Maps a semantic token (described by semantic token selector) to one or more textMate scopes used to represent that token.'
'invalid.id', "'configuration.{0}.id' must be defined and can not be empty", extensionPoint)
'invalid.id.format', "'configuration.{0}.id' must follow the pattern letterOrDigit[-_letterOrDigit]*", extensionPoint)
'invalid.superType.format', "'configuration.{0}.superType' must follow the pattern letterOrDigit[-_letterOrDigit]*", extensionPoint)
'invalid.description', "'configuration.{0}.description' must be defined and can not be empty", extensionPoint)
'invalid.semanticTokenTypeConfiguration', "'configuration.semanticTokenType' must be an array")
'invalid.semanticTokenModifierConfiguration', "'configuration.semanticTokenModifier' must be an array")
'invalid.semanticTokenScopes.configuration', "'configuration.semanticTokenScopes' must be an array")
'invalid.semanticTokenScopes.language', "'configuration.semanticTokenScopes.language' must be a string")
'invalid.semanticTokenScopes.scopes', "'configuration.semanticTokenScopes.scopes' must be defined as an object")
'invalid.semanticTokenScopes.scopes.value', "'configuration.semanticTokenScopes.scopes' values must be an array of strings")
'invalid.semanticTokenScopes.scopes.selector', "configuration.semanticTokenScopes.scopes': Problems parsing selector {0}.", selectorString)
'schema.id', 'The ID of the font.'
'schema.id.formatError', 'The ID must only contain letters, numbers, underscore and minus.'
'schema.src', 'The location of the font.'
'schema.font-path', 'The font path, relative to the current product icon theme file.'
'schema.font-format', 'The format of the font.'
'schema.font-weight', 'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'
'schema.font-style', 'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'
'schema.iconDefinitions', 'Association of icon name to a font character.'
'vscode.extension.contributes.grammars', 'Contributes textmate tokenizers.'
'vscode.extension.contributes.grammars.language', 'Language identifier for which this syntax is contributed to.'
'vscode.extension.contributes.grammars.scopeName', 'Textmate scope name used by the tmLanguage file.'
'vscode.extension.contributes.grammars.path', 'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \'./syntaxes/\'.'
'vscode.extension.contributes.grammars.embeddedLanguages', 'A map of scope name to language id if this grammar contains embedded languages.'
'vscode.extension.contributes.grammars.tokenTypes', 'A map of scope name to token types.'
'vscode.extension.contributes.grammars.injectTo', 'List of language scope names to which this grammar is injected to.'
'vscode.extension.contributes.grammars.balancedBracketScopes', 'Defines which scope names contain balanced brackets.'
'vscode.extension.contributes.grammars.unbalancedBracketScopes', 'Defines which scope names do not contain balanced brackets.'
'defaultProfileIcon', 'Icon for Default Profile.')
'name', "Profile name"
'save profile as', "Create from Current Profile..."
'profiles.importing', "{0}: Importing...", PROFILES_CATEGORY.value
'imported profile', "{0}: Imported successfully.", PROFILES_CATEGORY.value)
'profiles.applying', "{0}: Applying...", PROFILES_CATEGORY.value
'applied profile', "{0}: Applied successfully.", PROFILES_CATEGORY.value)
'contributes.color', 'Contributes extension defined themable colors'
'contributes.color.id', 'The identifier of the themable color'
'contributes.color.id.format', 'Identifiers must only contain letters, digits and dots and can not start with a dot'
'contributes.color.description', 'The description of the themable color'
'contributes.defaults.light', 'The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'
'contributes.defaults.dark', 'The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'
'contributes.defaults.highContrast', 'The default color for high contrast dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `dark` color is used as default for high contrast dark themes.'
'contributes.defaults.highContrastLight', 'The default color for high contrast light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `light` color is used as default for high contrast light themes.'
'invalid.colorConfiguration', "'configuration.colors' must be a array")
'invalid.default.colorType', "{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.", name)
'invalid.id', "'configuration.colors.id' must be defined and can not be empty")
'invalid.id.format', "'configuration.colors.id' must only contain letters, digits and dots and can not start with a dot")
'invalid.description', "'configuration.colors.description' must be defined and can not be empty")
'invalid.defaults', "'configuration.colors.defaults' must be defined and must contain 'light' and 'dark'")
'invalid.defaults.highContrast', "If defined, 'configuration.colors.defaults.highContrast' must be a string.")
'invalid.defaults.highContrastLight', "If defined, 'configuration.colors.defaults.highContrastLight' must be a string.")
'colorTheme', "Specifies the color theme used in the workbench."
'colorThemeError', "Theme is unknown or not installed."
{ key: 'preferredDarkColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme for dark OS appearance when `#{0}#` is enabled.', ThemeSettings.DETECT_COLOR_SCHEME
'colorThemeError', "Theme is unknown or not installed."
{ key: 'preferredLightColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme for light OS appearance when `#{0}#` is enabled.', ThemeSettings.DETECT_COLOR_SCHEME
'colorThemeError', "Theme is unknown or not installed."
{ key: 'preferredHCDarkColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme used in high contrast dark mode when `#{0}#` is enabled.', ThemeSettings.DETECT_HC
'colorThemeError', "Theme is unknown or not installed."
{ key: 'preferredHCLightColorTheme', comment: ['`#{0}#` will become a link to an other setting. Do not remove backtick or #'] }, 'Specifies the preferred color theme used in high contrast light mode when `#{0}#` is enabled.', ThemeSettings.DETECT_HC
'colorThemeError', "Theme is unknown or not installed."
'detectColorScheme', 'If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `#{0}#` is used, for light `#{1}#`.', ThemeSettings.PREFERRED_DARK_THEME, ThemeSettings.PREFERRED_LIGHT_THEME
'workbenchColors', "Overrides colors from the currently selected color theme."
'iconTheme', "Specifies the file icon theme used in the workbench or 'null' to not show any file icons."
'noIconThemeLabel', 'None'
'noIconThemeDesc', 'No file icons'
'iconThemeError', "File icon theme is unknown or not installed."
'productIconTheme', "Specifies the product icon theme used."
'defaultProductIconThemeLabel', 'Default'
'defaultProductIconThemeDesc', 'Default'
'productIconThemeError', "Product icon theme is unknown or not installed."
'autoDetectHighContrast', "If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `#{0}#` and `#{1}#`", ThemeSettings.PREFERRED_HC_DARK_THEME, ThemeSettings.PREFERRED_HC_LIGHT_THEME
'editorColors.comments', "Sets the colors and styles for comments")
'editorColors.strings', "Sets the colors and styles for strings literals.")
'editorColors.keywords', "Sets the colors and styles for keywords.")
'editorColors.numbers', "Sets the colors and styles for number literals.")
'editorColors.types', "Sets the colors and styles for type declarations and references.")
'editorColors.functions', "Sets the colors and styles for functions declarations and references.")
'editorColors.variables', "Sets the colors and styles for variables declarations and references.")
'editorColors.textMateRules', 'Sets colors and styles using textmate theming rules (advanced).'
'editorColors.semanticHighlighting', 'Whether semantic highlighting should be enabled for this theme.'
'editorColors.semanticHighlighting.deprecationMessage', 'Use `enabled` in `editor.semanticTokenColorCustomizations` setting instead.'
'editorColors.semanticHighlighting.deprecationMessageMarkdown', 'Use `enabled` in `#editor.semanticTokenColorCustomizations#` setting instead.'
'editorColors', "Overrides editor syntax colors and font style from the currently selected color theme."
'editorColors.semanticHighlighting.enabled', 'Whether semantic highlighting is enabled or disabled for this theme'
'editorColors.semanticHighlighting.rules', 'Semantic token styling rules for this theme.'
'semanticTokenColors', "Overrides editor semantic token color and styles from the currently selected color theme."
'schema.token.settings', 'Colors and styles for the token.'
'schema.token.foreground', 'Foreground color for the token.'
'schema.token.background.warning', 'Token background colors are currently not supported.'
'schema.token.fontStyle', 'Font style of the rule: \'italic\', \'bold\', \'underline\', \'strikethrough\' or a combination. The empty string unsets inherited settings.'
'schema.fontStyle.error', 'Font style must be \'italic\', \'bold\', \'underline\', \'strikethrough\' or a combination or the empty string.'
'schema.token.fontStyle.none', 'None (clear inherited style)'
'schema.properties.name', 'Description of the rule.'
'schema.properties.scope', 'Scope selector against which this rule matches.'
'schema.workbenchColors', 'Colors in the workbench'
'schema.tokenColors.path', 'Path to a tmTheme file (relative to the current file).'
'schema.colors', 'Colors for syntax highlighting'
'schema.supportsSemanticHighlighting', 'Whether semantic highlighting should be enabled for this theme.'
'schema.semanticTokenColors', 'Colors for semantic tokens'
'contributes.icons', 'Contributes extension defined themable icons'
'contributes.icon.id', 'The identifier of the themable icon'
'contributes.icon.id.format', 'Identifiers can only contain letters, digits and minuses and need to consist of at least two segments in the form `component-iconname`.'
'contributes.icon.description', 'The description of the themable icon'
'contributes.icon.default.fontPath', 'The path of the icon font that defines the icon.'
'contributes.icon.default.fontCharacter', 'The character for the icon in the icon font.'
'contributes.icon.default', 'The default of the icon. Either a reference to an extisting ThemeIcon or an icon in an icon font.'
'invalid.icons.configuration', "'configuration.icons' must be an object with the icon names as properties.")
'invalid.icons.id.format', "'configuration.icons' keys represent the icon id and can only contain letter, digits and minuses. They need to consist of at least two segments in the form `component-iconname`.")
'invalid.icons.description', "'configuration.icons.description' must be defined and can not be empty")
'invalid.icons.default.fontPath.extension', "Expected `contributes.icons.default.fontPath` to have file extension 'woff', woff2' or 'ttf', is '{0}'.", format)
'invalid.icons.default.fontPath.path', "Expected `contributes.icons.default.fontPath` ({0}) to be included inside extension's folder ({0}).", iconFontLocation.path, extensionLocation.path)
'invalid.icons.default', "'configuration.icons.default' must be either a reference to the id of an other theme icon (string) or a icon definition (object) with properties `fontPath` and `fontCharacter`.")
'error.cannotparseicontheme', "Problems parsing file icons file: {0}", errors.map(e => getParseErrorMessage(e.error)).join(', ')))
'error.invalidformat', "Invalid format for file icons theme file: Object expected."))
'vscode.extension.contributes.themes', 'Contributes textmate color themes.'
'vscode.extension.contributes.themes.id', 'Id of the color theme as used in the user settings.'
'vscode.extension.contributes.themes.label', 'Label of the color theme as shown in the UI.'
'vscode.extension.contributes.themes.uiTheme', 'Base theme defining the colors around the editor: \'vs\' is the light color theme, \'vs-dark\' is the dark color theme. \'hc-black\' is the dark high contrast theme, \'hc-light\' is the light high contrast theme.'
'vscode.extension.contributes.themes.path', 'Path of the tmTheme file. The path is relative to the extension folder and is typically \'./colorthemes/awesome-color-theme.json\'.'
'vscode.extension.contributes.iconThemes', 'Contributes file icon themes.'
'vscode.extension.contributes.iconThemes.id', 'Id of the file icon theme as used in the user settings.'
'vscode.extension.contributes.iconThemes.label', 'Label of the file icon theme as shown in the UI.'
'vscode.extension.contributes.iconThemes.path', 'Path of the file icon theme definition file. The path is relative to the extension folder and is typically \'./fileicons/awesome-icon-theme.json\'.'
'vscode.extension.contributes.productIconThemes', 'Contributes product icon themes.'
'vscode.extension.contributes.productIconThemes.id', 'Id of the product icon theme as used in the user settings.'
'vscode.extension.contributes.productIconThemes.label', 'Label of the product icon theme as shown in the UI.'
'vscode.extension.contributes.productIconThemes.path', 'Path of the product icon theme definition file. The path is relative to the extension folder and is typically \'./producticons/awesome-product-icon-theme.json\'.'
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:			log?.error(nls.localize(
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:				log?.error(nls.localize(
src/vs/workbench/services/themes/common/themeExtensionPoints.ts:				log?.error(nls.localize(
'invalid.path.1', "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.", this.themesExtPoint.name, themeLocation.path, extensionLocation.path)
'profiles', "Profiles"
'profile', "Profile"
'alreadyDebugging', "Already Logging.")
'stop', "Stop"
'progress1', "Preparing to log TM Grammar parsing. Press Stop when finished."
'progress2', "Now logging TM Grammar parsing. Press Stop when finished."
'invalid.language', "Unknown language in `contributes.{0}.language`. Provided value: {1}", grammarsExtPoint.name, String(syntax.language))
'invalid.scopeName', "Expected string in `contributes.{0}.scopeName`. Provided value: {1}", grammarsExtPoint.name, String(syntax.scopeName))
'invalid.path.0', "Expected string in `contributes.{0}.path`. Provided value: {1}", grammarsExtPoint.name, String(syntax.path))
'invalid.injectTo', "Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}", grammarsExtPoint.name, JSON.stringify(syntax.injectTo))
'invalid.embeddedLanguages', "Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}", grammarsExtPoint.name, JSON.stringify(syntax.embeddedLanguages))
'invalid.tokenTypes', "Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}", grammarsExtPoint.name, JSON.stringify(syntax.tokenTypes))
'invalid.path.1', "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.", grammarsExtPoint.name, grammarLocation.path, extensionLocation.path)
'error.parseicondefs', "Problems processing product icons definitions in {0}:\n{1}", location.toString(), warnings.join('\n'))
'defaultTheme', 'Default'), DEFAULT_PRODUCT_ICON_THEME_SETTING_VALUE
'error.cannotparseicontheme', "Problems parsing product icons file: {0}", parseErrors.map(e => getParseErrorMessage(e.error)).join(', ')))
'error.invalidformat', "Invalid format for product icons theme file: Object expected."))
'error.missingProperties', "Invalid format for product icons theme file: Must contain iconDefinitions and fonts."))
'error.fontWeight', 'Invalid font weight in font \'{0}\'. Ignoring setting.', font.id)
'error.fontStyle', 'Invalid font style in font \'{0}\'. Ignoring setting.', font.id)
'error.fontSrc', 'Invalid font source in font \'{0}\'. Ignoring source.', font.id)
'error.noFontSrc', 'No valid font source in font \'{0}\'. Ignoring font definition.', font.id)
'error.fontId', 'Missing or invalid font id \'{0}\'. Skipping font definition.', font.id)
'error.icon.font', 'Skipping icon definition \'{0}\'. Unknown font.', iconId)
'error.icon.fontCharacter', 'Skipping icon definition \'{0}\'. Unknown fontCharacter.', iconId)
'error.cannotloadtheme', "Unable to load {0}: {1}", themeData.location?.toString(), error.message)
'vscode.extension.contributes.resourceLabelFormatters', 'Contributes resource label formatting rules.'
'vscode.extension.contributes.resourceLabelFormatters.scheme', 'URI scheme on which to match the formatter on. For example "file". Simple glob patterns are supported.'
'vscode.extension.contributes.resourceLabelFormatters.authority', 'URI authority on which to match the formatter on. Simple glob patterns are supported.'
'vscode.extension.contributes.resourceLabelFormatters.formatting', "Rules for formatting uri resource labels."
'vscode.extension.contributes.resourceLabelFormatters.label', "Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme}, ${authority} and ${authoritySuffix} are supported as variables."
'vscode.extension.contributes.resourceLabelFormatters.separator', "Separator to be used in the uri label display. '/' or '\' as an example."
'vscode.extension.contributes.resourceLabelFormatters.stripPathStartingSeparator', "Controls whether `${path}` substitutions should have starting separator characters stripped."
'vscode.extension.contributes.resourceLabelFormatters.tildify', "Controls if the start of the uri label should be tildified when possible."
'vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix', "Suffix appended to the workspace label."
'untitledWorkspace', "Untitled (Workspace)"
'temporaryWorkspace', "Workspace"
'workspaceNameVerbose', "{0} (Workspace)", this.getUriLabel(joinPath(dirname(workspaceUri), filename))
'workspaceName', "{0} (Workspace)", filename
'errorSearchText', "Unable to search with Web Worker text searcher"
'errorSearchFile', "Unable to search with Web Worker file searcher"
'error.cannotparsejson', "Problems parsing JSON theme file: {0}", errors.map(e => getParseErrorMessage(e.error)).join(', ')))
'error.invalidformat', "Invalid format for JSON theme file: Object expected."))
{ key: 'error.invalidformat.colors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, "Problem parsing color theme file: {0}. Property 'colors' is not of type 'object'.", themeLocation.toString()))
{ key: 'error.invalidformat.tokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, "Problem parsing color theme file: {0}. Property 'tokenColors' should be either an array specifying colors or a path to a TextMate theme file", themeLocation.toString()))
{ key: 'error.invalidformat.semanticTokenColors', comment: ['{0} will be replaced by a path. Values in quotes should not be translated.'] }, "Problem parsing color theme file: {0}. Property 'semanticTokenColors' contains a invalid selector", themeLocation.toString()))
'error.plist.invalidformat', "Problem parsing tmTheme file: {0}. 'settings' is not array."))
'error.cannotparse', "Problems parsing tmTheme file: {0}", e.message))
'error.cannotload', "Problems loading tmTheme file {0}: {1}", themeLocation.toString(), error.message))
'tunnel.source.user', "User Forwarded"
'tunnel.source.auto', "Auto Forwarded"
src/vs/workbench/services/remote/common/remoteExplorerService.ts:		const mismatchString = nls.localize('remote.localPortMismatch.single', "Local port {0} could not be used for forwarding to remote port {1}.\n\nThis usually happens when there is already another process using local port {0}.\n\nPort number {2} has been used instead.",
'tunnel.staticallyForwarded', "Statically Forwarded"
'search.noWorkspaceWithName', "Workspace folder does not exist: {0}", probableWorkspaceFolderName
'progress.text2', "{0}: {1}", progressTitle, progressMessage
'progress.title3', "[{0}] {1}: {2}", source, progressTitle, progressMessage
'progress.title2', "[{0}]: {1}", source, progressTitle
'progress.title2', "[{0}]: {1}", source, progressMessage
'status.progress', "Progress Message"
'cancel', "Cancel"), undefined, true
'dismiss', "Dismiss")
'devTools', "Open Developer Tools"
'directUrl', "Open in browser"
'connectionError', "Failed to connect to the remote extension host server (Error: {0})", err ? err.message : ''
'default', "Default"
'extension', "Extension"
'user', "User"
'cat.title', "{0}: {1}", category, title
'cat.title', "{0}: {1}", category, title
'option', "option"), word)
'meta', "meta"), word)
'commonlyUsed', "Commonly Used"
'defaultKeybindingsHeader', "Override key bindings by placing them into your key bindings file."
'openFolderFirst', "Open a folder or workspace first to create workspace or folder settings.")
'emptyKeybindingsHeader', "Place your key bindings in this file to override the defaults"
'defaultKeybindings', "Default Keybindings"), description: '' }
'defaultKeybindings', "Default Keybindings") }
'fail.createSettings', "Unable to create '{0}' ({1}).", this.labelService.getUriLabel(resource, { relative: true }), getErrorMessage(error2))
'connectionError', "An unexpected error occurred that requires a reload of this page."
'reload', "Reload"
'connectionErrorDetail', "The workbench failed to connect to the server (Error: {0})", err ? err.message : ''
'validations.booleanIncorrectType', 'Incorrect type. Expected "boolean".')
'validations.expectedNumeric', "Value must be a number.")
'validations.stringIncorrectEnumOptions', 'The enum options should be strings, but there is a non-string option. Please file an issue with the extension author.')
'validations.stringIncorrectType', 'Incorrect type. Expected "string".')
'invalidTypeError', "Setting has an invalid type, expected {0}. Fix in JSON.", JSON.stringify(type)
'validations.maxLength', "Value must be {0} or fewer characters long.", prop.maxLength
'validations.minLength', "Value must be {0} or more characters long.", prop.minLength
'validations.regex', "Value must match regex `{0}`.", prop.pattern
'validations.colorFormat', "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."
'validations.uriEmpty', "URI expected."
'validations.uriMissing', "URI is expected."
'validations.uriSchemeMissing', "URI with a scheme is expected."
src/vs/workbench/services/preferences/common/preferencesValidation.ts:			message: nls.localize('validations.invalidStringEnumValue', "Value is not accepted. Valid values: {0}.",
'validations.exclusiveMax', "Value must be strictly less than {0}.", exclusiveMax
'validations.exclusiveMin', "Value must be strictly greater than {0}.", exclusiveMin
'validations.max', "Value must be less than or equal to {0}.", prop.maximum
'validations.min', "Value must be greater than or equal to {0}.", prop.minimum
'validations.multipleOf', "Value must be a multiple of {0}.", prop.multipleOf
'validations.expectedInteger', "Value must be an integer."
'validations.arrayIncorrectType', 'Incorrect type. Expected an array.'
'validations.stringArrayUniqueItems', 'Array has duplicate items'
'validations.stringArrayMinItem', 'Array must have at least {0} items', prop.minItems
'validations.stringArrayMaxItem', 'Array must have at most {0} items', prop.maxItems
'validations.stringArrayIncorrectType', 'Incorrect type. Expected a string array.'
src/vs/workbench/services/preferences/common/preferencesValidation.ts:									nls.localize(
src/vs/workbench/services/preferences/common/preferencesValidation.ts:								message += nls.localize(
'validations.objectIncorrectType', 'Incorrect type. Expected an object.')
'validations.objectPattern', 'Property {0} is not allowed.\n', key)
'keybindingsInputName', "Keyboard Shortcuts"
'settingsEditor2InputName', "Settings"
'neverShowAgain', "Don't Show Again"
'neverShowAgain', "Don't Show Again"
'lifecycleVeto', "Changes that you made may not be saved. Please check press 'Cancel' and try again."
'canNavigateBack', "Whether it is possible to navigate back in editor history"))).bindTo(this.contextKeyService
'canNavigateForward', "Whether it is possible to navigate forward in editor history"))).bindTo(this.contextKeyService
'canNavigateBackInNavigationLocations', "Whether it is possible to navigate back in editor navigation locations history"))).bindTo(this.contextKeyService
'canNavigateForwardInNavigationLocations', "Whether it is possible to navigate forward in editor navigation locations history"))).bindTo(this.contextKeyService
'canNavigateToLastNavigationLocation', "Whether it is possible to navigate to the last editor navigation location"))).bindTo(this.contextKeyService
'canNavigateBackInEditLocations', "Whether it is possible to navigate back in editor edit locations history"))).bindTo(this.contextKeyService
'canNavigateForwardInEditLocations', "Whether it is possible to navigate forward in editor edit locations history"))).bindTo(this.contextKeyService
'canNavigateToLastEditLocation', "Whether it is possible to navigate to the last editor edit location"))).bindTo(this.contextKeyService
'canReopenClosedEditor', "Whether it is possible to reopen the last closed editor"))).bindTo(this.contextKeyService
'vscode.extension.contributes.languages', 'Contributes language declarations.'
'vscode.extension.contributes.languages.id', 'ID of the language.'
'vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'
'vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'
'vscode.extension.contributes.languages.filenames', 'File names associated to the language.'
'vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'
'vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'
'vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'
'vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'
'vscode.extension.contributes.languages.icon', 'A icon to use as file icon, if no icon theme provides one for the language.'
'vscode.extension.contributes.languages.icon.light', 'Icon path when a light theme is used'
'vscode.extension.contributes.languages.icon.dark', 'Icon path when a dark theme is used'
'invalid', "Invalid `contributes.{0}`. Expected an array.", languagesExtPoint.name)
'invalid.empty', "Empty value for `contributes.{0}`", languagesExtPoint.name)
'require.id', "property `{0}` is mandatory and must be of type `string`", 'id')
'opt.extensions', "property `{0}` can be omitted and must be of type `string[]`", 'extensions')
'opt.filenames', "property `{0}` can be omitted and must be of type `string[]`", 'filenames')
'opt.firstLine', "property `{0}` can be omitted and must be of type `string`", 'firstLine')
'opt.configuration', "property `{0}` can be omitted and must be of type `string`", 'configuration')
'opt.aliases', "property `{0}` can be omitted and must be of type `string[]`", 'aliases')
'opt.mimetypes', "property `{0}` can be omitted and must be of type `string[]`", 'mimetypes')
'opt.icon', "property `{0}` can be omitted and must be of type `object` with properties `{1}` and `{2}` of type `string`", 'icon', 'light', 'dark')
'missing.keyboardlayout', 'Fail to find matching keyboard layout'
'keyboardLayoutMissing.configure', "Configure"
'neverAgain', "Don't Show Again"
'keyboardConfigurationTitle', "Keyboard"
'keyboard.layout.config', "Control the keyboard layout used in web."
'errorKeybindingsFileDirty', "Unable to write because the keybindings configuration file has unsaved changes. Please save it first and then try again."))
'parseErrors', "Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again."))
'errorInvalidConfiguration', "Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again."))
'emptyKeybindingsHeader', "Place your key bindings in this file to override the defaults"
'notFoundCompatiblePrereleaseDependency', "Can't install pre-release version of '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.IncompatiblePreRelease
'notFoundReleaseExtension', "Can't install release version of '{0}' extension because it has no release version.", extension.identifier.id), ExtensionManagementErrorCode.ReleaseVersionNotFound
'notFoundCompatibleDependency', "Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.Incompatible
'local', "Local"
'remote', "Remote"
'select for remove', "Remove extension recommendation from")
'select for add', "Add extension recommendation to")
'select for remove', "Remove extension recommendation from")
'select for add', "Add extension recommendation to")
'workspace folder', "Workspace Folder"
'workspace', "Workspace"
'nonempty', "expected non-empty value.")
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'command')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'key')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'when')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'mac')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'linux')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'win')
'vscode.extension.contributes.keybindings.command', 'Identifier of the command to run when keybinding is triggered.'
'vscode.extension.contributes.keybindings.args', "Arguments to pass to the command to execute."
'vscode.extension.contributes.keybindings.key', 'Key or key sequence (separate keys with plus-sign and sequences with space, e.g. Ctrl+O and Ctrl+L L for a chord).'
'vscode.extension.contributes.keybindings.mac', 'Mac specific key or key sequence.'
'vscode.extension.contributes.keybindings.linux', 'Linux specific key or key sequence.'
'vscode.extension.contributes.keybindings.win', 'Windows specific key or key sequence.'
'vscode.extension.contributes.keybindings.when', 'Condition when the key is active.'
'vscode.extension.contributes.keybindings', "Contributes keybindings."
src/vs/workbench/services/keybinding/browser/keybindingService.ts:			collector.error(nls.localize(
'unboundCommands', "Here are other available commands: "
'keybindings.json.title', "Keybindings configuration"
'keybindings.json.key', "Key or key sequence (separated by space)"
'keybindings.json.command', "Name of the command to execute"
'keybindings.json.when', "Condition when the key is active."
'keybindings.json.args', "Arguments to pass to the command to execute."
'keyboardConfigurationTitle', "Keyboard"
'dispatch', "Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`."
'menus.commandPalette', "The Command Palette"
'menus.touchBar', "The touch bar (macOS only)"
'menus.editorTitle', "The editor title menu"
'menus.editorTitleRun', "Run submenu inside the editor title menu"
'menus.editorContext', "The editor context menu"
'menus.editorContextCopyAs', "'Copy as' submenu in the editor context menu"
'menus.editorContextShare', "'Share' submenu in the editor context menu"
'menus.explorerContext', "The file explorer context menu"
'menus.editorTabContext', "The editor tabs context menu"
'menus.debugCallstackContext', "The debug callstack view context menu"
'menus.debugVariablesContext', "The debug variables view context menu"
'menus.debugToolBar', "The debug toolbar menu"
'menus.home', "The home indicator context menu (web only)"
'menus.opy', "'Copy as' submenu in the top level Edit menu"
'menus.scmTitle', "The Source Control title menu"
'menus.scmSourceControl', "The Source Control menu"
'menus.resourceStateContext', "The Source Control resource state context menu"
'menus.resourceFolderContext', "The Source Control resource folder context menu"
'menus.resourceGroupContext', "The Source Control resource group context menu"
'menus.changeTitle', "The Source Control inline change menu"
'menus.statusBarRemoteIndicator', "The remote indicator menu in the status bar"
'view.viewTitle', "The contributed view title menu"
'view.itemContext', "The contributed view item context menu"
'commentThread.title', "The contributed comment thread title menu"
'commentThread.actions', "The contributed comment thread context menu, rendered as buttons below the comment editor"
'commentThread.titleContext', "The contributed comment thread title's peek context menu, rendered as a right click menu on the comment thread's peek title."
'comment.title', "The contributed comment title menu"
'comment.actions', "The contributed comment context menu, rendered as buttons below the comment editor"
'comment.commentContext', "The contributed comment context menu, rendered as a right click menu on the an individual comment in the comment thread's peek view."
'notebook.toolbar', "The contributed notebook toolbar menu"
'notebook.kernelSource', "The contributed notebook kernel sources menu"
'notebook.cell.title', "The contributed notebook cell title menu"
'notebook.cell.execute', "The contributed notebook cell execution menu"
'interactive.toolbar', "The contributed interactive toolbar menu"
'interactive.cell.title', "The contributed interactive cell title menu"
'testing.item.context', "The contributed test item menu"
'testing.item.gutter.title', "The menu for a gutter decoration for a test item"
'menus.extensionContext', "The extension context menu"
'view.timelineTitle', "The Timeline view title menu"
'view.timelineContext', "The Timeline view item context menu"
'view.tunnelContext', "The Ports view item context menu"
'view.tunnelOriginInline', "The Ports view item origin inline menu"
'view.tunnelPortInline', "The Ports view item port inline menu"
'file.newFile', "The 'New File...' quick pick, shown on welcome page and File menu."
'webview.context', "The webview context menu"
'menus.share', "Share submenu shown in the top level File menu."
'inlineCompletions.actions', "The actions shown when hovering on an inline completion"
'merge.toolbar', "The prominent button in an editor, overlays its content"
'menus.mergeEditorResult', "The result toolbar of the merge editor"
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'command')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'alt')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'when')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'group')
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'submenu')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'when')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'group')
'requirearray', "submenu items must be an array")
'require', "submenu items must be an object")
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'id')
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'label')
'vscode.extension.contributes.menuItem.command', 'Identifier of the command to execute. The command must be declared in the \'commands\'-section'
'vscode.extension.contributes.menuItem.alt', 'Identifier of an alternative command to execute. The command must be declared in the \'commands\'-section'
'vscode.extension.contributes.menuItem.when', 'Condition which must be true to show this item'
'vscode.extension.contributes.menuItem.group', 'Group into which this item belongs'
'vscode.extension.contributes.menuItem.submenu', 'Identifier of the submenu to display in this item.'
'vscode.extension.contributes.menuItem.when', 'Condition which must be true to show this item'
'vscode.extension.contributes.menuItem.group', 'Group into which this item belongs'
'vscode.extension.contributes.submenu.id', 'Identifier of the menu to display as a submenu.'
'vscode.extension.contributes.submenu.label', 'The label of the menu item which leads to this submenu.'
{ key: 'vscode.extension.contributes.submenu.icon', comment: ['do not translate or change `\\$(zap)`, \\ in front of $ is important.'] }, '(Optional) Icon which is used to represent the submenu in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\$(zap)`'
'vscode.extension.contributes.submenu.icon.light', 'Icon path when a light theme is used'
'vscode.extension.contributes.submenu.icon.dark', 'Icon path when a dark theme is used'
'vscode.extension.contributes.menus', "Contributes menu items to the editor"
'proposed', "Proposed API, requires `enabledApiProposal: [\"{0}\"]` - {1}", menu.proposed, menu.description
'vscode.extension.contributes.submenus', "Contributes submenu items to the editor"
'nonempty', "expected non-empty value.")
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'command')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'precondition')
'opticon', "property `icon` can be omitted or must be either a string or a literal like `{dark, light}`")
'requireStringOrObject', "property `{0}` is mandatory and must be of type `string` or `object`", propertyName)
'requirestring', "property `{0}` is mandatory and must be of type `string`", propertyName)
'requirestrings', "properties `{0}` and `{1}` are mandatory and must be of type `string`", `${propertyName}.value`, `${propertyName}.original`)
'vscode.extension.contributes.commandType.command', 'Identifier of the command to execute'
'vscode.extension.contributes.commandType.title', 'Title by which the command is represented in the UI'
'vscode.extension.contributes.commandType.shortTitle', '(Optional) Short title by which the command is represented in the UI. Menus pick either `title` or `shortTitle` depending on the context in which they show commands.'
'vscode.extension.contributes.commandType.category', '(Optional) Category string by which the command is grouped in the UI'
'vscode.extension.contributes.commandType.precondition', '(Optional) Condition which must be true to enable the command in the UI (menu and keybindings). Does not prevent executing the command by other means, like the `executeCommand`-api.'
{ key: 'vscode.extension.contributes.commandType.icon', comment: ['do not translate or change `\\$(zap)`, \\ in front of $ is important.'] }, '(Optional) Icon which is used to represent the command in the UI. Either a file path, an object with file paths for dark and light themes, or a theme icon references, like `\\$(zap)`'
'vscode.extension.contributes.commandType.icon.light', 'Icon path when a light theme is used'
'vscode.extension.contributes.commandType.icon.dark', 'Icon path when a dark theme is used'
'vscode.extension.contributes.commands', "Contributes commands to the command palette."
'dup', "Command `{0}` appears multiple times in the `commands` section.", userFriendlyCommand.command)
'submenuId.invalid.id', "`{0}` is not a valid submenu identifier", submenuInfo.id)
'submenuId.duplicate.id', "The `{0}` submenu was already previously registered.", submenuInfo.id)
'submenuId.invalid.label', "`{0}` is not a valid submenu label", submenuInfo.label)
'proposedAPI.invalid', "{0} is a proposed menu identifier. It requires 'package.json#enabledApiProposals: [\"{1}\"]' and is only available when running out of dev or with the following command line switch: --enable-proposed-api {2}", entry[0], menu.proposed, extension.description.identifier.value)
'missing.command', "Menu item references a command `{0}` which is not defined in the 'commands' section.", menuItem.command)
'missing.altCommand', "Menu item references an alt-command `{0}` which is not defined in the 'commands' section.", menuItem.alt)
'dupe.command', "Menu item references the same command as default and alt-command")
'unsupported.submenureference', "Menu item references a submenu for a menu which doesn't have submenu support.")
'missing.submenu', "Menu item references a submenu `{0}` which is not defined in the 'submenus' section.", menuItem.submenu)
'submenuItem.duplicate', "The `{0}` submenu was already contributed to the `{1}` menu.", menuItem.submenu, entry[0])
'editorResolver.conflictingDefaults', 'There are multiple default editors available for the resource.'
'editorResolver.configureDefault', 'Configure Default'
'editorResolver.keepDefault', 'Keep {0}', editorName
'promptOpenWith.currentlyActive', "Active"
'promptOpenWith.currentDefault', "Default"
'promptOpenWith.currentDefaultAndActive', "Active and Default"
'promptOpenWith.configureDefault', "Configure default editor for '{0}'...", `*${extname(resource)}`
'promptOpenWith.updateDefaultPlaceHolder', "Select new default editor for '{0}'", `*${extname(resource)}`
'promptOpenWith.placeHolder', "Select editor for '{0}'", basename(resource)
'closeWindow', "Close Window"
{ key: 'miCloseWindow', comment: ['&& denotes a mnemonic'] }, "Clos&&e Window"
'zoomIn', "Zoom In"
{ key: 'miZoomIn', comment: ['&& denotes a mnemonic'] }, "&&Zoom In"
'zoomOut', "Zoom Out"
{ key: 'miZoomOut', comment: ['&& denotes a mnemonic'] }, "&&Zoom Out"
'zoomReset', "Reset Zoom"
{ key: 'miZoomReset', comment: ['&& denotes a mnemonic'] }, "&&Reset Zoom"
'close', "Close Window"
'close', "Close Window"
'switchWindowPlaceHolder', "Select a window to switch to"
'windowDirtyAriaLabel', "{0}, window with unsaved changes", window.title
'current', "Current Window"
'switchWindow', "Switch Window..."
'quickSwitchWindow', "Quick Switch Window..."
'editor.editorAssociations', "Configure glob patterns to editors (e.g. `\"*.hex\": \"hexEditor.hexEdit\"`). These have precedence over the default behavior."
'pickFolderAndOpen', "Can't open folders, try adding a folder to the workspace instead.")
'pickFolderAndOpen', "Can't open folders, try adding a folder to the workspace instead.")
'pickWorkspaceAndOpen', "Can't open workspaces, try adding a folder to the workspace instead.")
'openFiles', "Open Files..."
'learnMore', "Learn More"
'unsupportedBrowserMessage', "Opening Local Folders is Unsupported"
'unsupportedBrowserDetail', "Your browser doesn't support opening local folders.\nYou can either open single files or open a remote repository."
'shellCommand', "Shell Command"
'install', "Install '{0}' command in PATH", product.applicationName
'successIn', "Shell command '{0}' successfully installed in PATH.", productService.applicationName)
'uninstall', "Uninstall '{0}' command from PATH", product.applicationName
'successFrom', "Shell command '{0}' successfully uninstalled from PATH.", productService.applicationName)
'saveChangesDetail', "Your changes will be lost if you don't save them."
'saveChangesMessage', "Do you want to save the changes you made to {0}?", typeof fileNamesOrResources[0] === 'string' ? fileNamesOrResources[0] : resources.basename(fileNamesOrResources[0])
'saveChangesMessages', "Do you want to save the changes to the following {0} files?", fileNamesOrResources.length
{ key: 'save', comment: ['&& denotes a mnemonic'] }, "&&Save"
{ key: 'dontSave', comment: ['&& denotes a mnemonic'] }, "Do&&n't Save"
'cancel', "Cancel"
'openFileOrFolder.title', 'Open File or Folder'
'openFile.title', 'Open File'
'openFolder.title', 'Open Folder'
'openWorkspace.title', 'Open Workspace from File'
'filterName.workspace', 'Workspace'
'saveFileAs.title', 'Save As'
'saveAsTitle', "Save As"
'allFiles', "All Files"
'noExt', "No Extension"
'toggleDevTools', "Toggle Developer Tools"
'configureRuntimeArguments', "Configure Runtime Arguments"
'toggleSharedProcess', "Toggle Shared Process"
'reloadWindowWithExtensionsDisabled', "Reload With Extensions Disabled"
'openLocalFile', "Open Local File..."
'saveLocalFile', "Save Local File..."
'openLocalFolder', "Open Local Folder..."
'openLocalFileFolder', "Open Local..."
'remoteFileDialog.notConnectedToRemote', 'File system provider for {0} is not available.', defaultUri.toString())
'remoteFileDialog.local', 'Show Local'
'remoteFileDialog.badPath', 'The path does not exist.'
'remoteFileDialog.cancel', 'Cancel'
'remoteFileDialog.invalidPath', 'Please enter a valid path.'
'remoteFileDialog.validateFolder', 'The folder already exists. Please use a new file name.'
'remoteFileDialog.validateExisting', '{0} already exists. Are you sure you want to overwrite it?', resources.basename(uri)
'remoteFileDialog.validateBadFilename', 'Please enter a valid file name.'
'remoteFileDialog.validateCreateDirectory', 'The folder {0} does not exist. Would you like to create it?', resources.basename(resources.dirname(uri))
'remoteFileDialog.validateNonexistentDir', 'Please enter a path that exists.'
'remoteFileDialog.validateNonexistentDir', 'Please enter a path that exists.'
'remoteFileDialog.windowsDriveLetter', 'Please start the path with a drive letter.'
'remoteFileDialog.validateFileOnly', 'Please select a file.'
'remoteFileDialog.validateFolderOnly', 'Please select a folder.'
'errorInvalidFile', "Unable to write into the file. Please open the file to correct errors/warnings in the file and try again."
'errorFileDirty', "Unable to write into the file because the file has unsaved changes. Please save the file and try again."
'configurationDefaults.description', 'Contribute defaults for configurations'
'experimental', "Experiments") }]
'bubbleTitle', "Contains emphasized items"
'canNotResolveFile', "Variable {0} can not be resolved. Please open an editor.", match))
'canNotResolveFolderForFile', "Variable {0}: can not find workspace folder of '{1}'.", match, paths.basename(filePath))
'canNotFindFolder', "Variable {0} can not be resolved. No such folder '{1}'.", match, argument)
'canNotResolveWorkspaceFolderMultiRoot', "Variable {0} can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.", match)
'canNotResolveWorkspaceFolder', "Variable {0} can not be resolved. Please open a folder.", match)
'missingEnvVarName', "Variable {0} can not be resolved because no environment variable name is given.", match)
'configNotFound', "Variable {0} can not be resolved because setting '{1}' not found.", match, argument)
'configNoString', "Variable {0} can not be resolved because '{1}' is a structured value.", match, argument)
'missingConfigName', "Variable {0} can not be resolved because no settings name is given.", match)
'extensionNotInstalled', "Variable {0} can not be resolved because the extension {1} is not installed.", match, argument)
'missingExtensionName', "Variable {0} can not be resolved because no extension name is given.", match)
'canNotResolveUserHome', "Variable {0} can not be resolved. UserHome path is not defined", match)
'canNotResolveLineNumber', "Variable {0} can not be resolved. Make sure to have a line selected in the active editor.", match)
'canNotResolveSelectedText', "Variable {0} can not be resolved. Make sure to have some text selected in the active editor.", match)
'noValueForCommand', "Variable {0} can not be resolved because the command has no value.", match)
'commandVariable.noStringType', "Cannot substitute command variable '{0}' because command did not return a result of type string.", commandId)
'inputVariable.noInputSection', "Variable '{0}' must be defined in an '{1}' section of the debug or task configuration.", variable, 'input'))
'inputVariable.missingAttribute', "Input variable '{0}' is of type '{1}' and must include '{2}'.", variable, info.type, attrName)
'inputVariable.defaultInputValue', "(Default)"
'inputVariable.command.noStringType', "Cannot substitute input variable '{0}' because command '{1}' did not return a result of type string.", variable, info.command)
'inputVariable.unknownType', "Input variable '{0}' can only be of type 'promptString', 'pickString', or 'command'.", variable)
'inputVariable.undefinedVariable', "Undefined input variable '{0}' encountered. Remove or define '{0}' to continue.", variable))
'openTasksConfiguration', "Open Tasks Configuration"
'openLaunchConfiguration', "Open Launch Configuration"
'open', "Open Settings"
'openTasksConfiguration', "Open Tasks Configuration"
'openLaunchConfiguration', "Open Launch Configuration"
'saveAndRetry', "Save and Retry"
'saveAndRetry', "Save and Retry"
'open', "Open Settings"
'errorPolicyConfiguration', "Unable to write {0} because it is configured in system policy.", operation.key
'errorUnknownKey', "Unable to write to {0} because {1} is not a registered configuration.", this.stringifyTarget(target), operation.key
'errorInvalidWorkspaceConfigurationApplication', "Unable to write {0} to Workspace Settings. This setting can be written only into User settings.", operation.key
'errorInvalidWorkspaceConfigurationMachine', "Unable to write {0} to Workspace Settings. This setting can be written only into User settings.", operation.key
'errorInvalidFolderConfiguration', "Unable to write to Folder Settings because {0} does not support the folder resource scope.", operation.key
'errorInvalidUserTarget', "Unable to write to User Settings because {0} does not support for global scope.", operation.key
'errorInvalidWorkspaceTarget', "Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.", operation.key
'errorInvalidFolderTarget', "Unable to write to Folder Settings because no resource is provided."
'errorInvalidResourceLanguageConfiguration', "Unable to write to Language Settings because {0} is not a resource language setting.", operation.key
'errorNoWorkspaceOpened', "Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.", this.stringifyTarget(target)
'errorInvalidTaskConfiguration', "Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again."
'errorInvalidLaunchConfiguration', "Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again."
'errorInvalidConfiguration', "Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again."
'errorInvalidRemoteConfiguration', "Unable to write into remote user settings. Please open the remote user settings to correct errors/warnings in it and try again."
'errorInvalidConfigurationWorkspace', "Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again."
'errorInvalidConfigurationFolder', "Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.", workspaceFolderName
'errorTasksConfigurationFileDirty', "Unable to write into tasks configuration file because the file has unsaved changes. Please save it first and then try again."
'errorLaunchConfigurationFileDirty', "Unable to write into launch configuration file because the file has unsaved changes. Please save it first and then try again."
'errorConfigurationFileDirty', "Unable to write into user settings because the file has unsaved changes. Please save the user settings file first and then try again."
'errorRemoteConfigurationFileDirty', "Unable to write into remote user settings because the file has unsaved changes. Please save the remote user settings file first and then try again."
'errorConfigurationFileDirtyWorkspace', "Unable to write into workspace settings because the file has unsaved changes. Please save the workspace settings file first and then try again."
'errorConfigurationFileDirtyFolder', "Unable to write into folder settings because the file has unsaved changes. Please save the '{0}' folder settings file first and then try again.", workspaceFolderName
'errorTasksConfigurationFileModifiedSince', "Unable to write into tasks configuration file because the content of the file is newer."
'errorLaunchConfigurationFileModifiedSince', "Unable to write into launch configuration file because the content of the file is newer."
'errorConfigurationFileModifiedSince', "Unable to write into user settings because the content of the file is newer."
'errorRemoteConfigurationFileModifiedSince', "Unable to write into remote user settings because the content of the file is newer."
'errorConfigurationFileModifiedSinceWorkspace', "Unable to write into workspace settings because the content of the file is newer."
'errorConfigurationFileModifiedSinceFolder', "Unable to write into folder settings because the content of the file is newer."
'errorUnknown', "Unable to write to {0} because of an internal error.", this.stringifyTarget(target)
'userTarget', "User Settings"
'remoteUserTarget', "Remote User Settings"
'workspaceTarget', "Workspace Settings"
'folderTarget', "Folder Settings"
'clipboardError', "Unable to read from the browser's clipboard. Please make sure you have granted access for this website to read from the clipboard."
'retry', "Retry"
'learnMore', "Learn More"
'authentication.id', 'The id of the authentication provider.'
'authentication.label', 'The human readable name of the authentication provider.'
{ key: 'authenticationExtensionPoint', comment: [`'Contributes' means adds here`] }, 'Contributes authentication'
'authentication.Placeholder', "No accounts requested yet..."
'authentication.missingId', 'An authentication contribution must specify an id.')
'authentication.missingLabel', 'An authentication contribution must specify a label.')
'authentication.idConflict', "This authentication id '{0}' has already been registered", provider.id)
'loading', "Loading..."
'sign in', "Sign in requested")
'confirmAuthenticationAccess', "The extension '{0}' wants to access the {1} account '{2}'.", extensionName, providerName, accountName
'cancel', "Cancel"
'useOtherAccount', "Sign in to another account"
src/vs/workbench/services/authentication/browser/authenticationService.ts:			quickPick.title = nls.localize(
'getSessionPlateholder', "Select an account for '{0}' to use or Esc to cancel", extensionName
src/vs/workbench/services/authentication/browser/authenticationService.ts:				title: nls.localize({
src/vs/workbench/services/authentication/browser/authenticationService.ts:				title: nls.localize({
'deprecatedVariables', "'env.', 'config.' and 'command.' are deprecated, use 'env:', 'config:' and 'command:' instead."
{ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, "&&Yes")
'cancelButton', "Cancel")
src/vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts:			return localize({ key: 'aboutDetail', comment: ['Electron, Chromium, Node.js and V8 are product names that need no translation'] },
'okButton', "OK"
{ key: 'copy', comment: ['&& denotes a mnemonic'] }, "&&Copy")
{ key: 'miUndo', comment: ['&& denotes a mnemonic'] }, "&&Undo"
'undo', "Undo"
{ key: 'miRedo', comment: ['&& denotes a mnemonic'] }, "&&Redo"
'redo', "Redo"
{ key: 'miSelectAll', comment: ['&& denotes a mnemonic'] }, "&&Select All"
'selectAll', "Select All"
'join.closeStorage', "Saving UI state") }))
'JsonSchema.input.id', "The input's id is used to associate an input with a variable of the form ${input:id}."
'JsonSchema.input.type', "The type of user input prompt to use."
'JsonSchema.input.description', "The description is shown when the user is prompted for input."
'JsonSchema.input.default', "The default value for the input."
'JsonSchema.inputs', 'User inputs. Used for defining user input prompts, such as free string input or a choice from several options.'
'JsonSchema.input.type.promptString', "The 'promptString' type opens an input box to ask the user for input."
'JsonSchema.input.password', "Controls if a password input is shown. Password input hides the typed text."
'JsonSchema.input.type.pickString', "The 'pickString' type shows a selection list."
'JsonSchema.input.options', "An array of strings that defines the options for a quick pick."
'JsonSchema.input.pickString.optionLabel', "Label for the option."
'JsonSchema.input.pickString.optionValue', "Value for the option."
'JsonSchema.input.type.command', "The 'command' type executes a command."
'JsonSchema.input.command.command', "The command to execute for this input variable."
'JsonSchema.input.command.args', "Optional arguments passed to the command."
'JsonSchema.input.command.args', "Optional arguments passed to the command."
'JsonSchema.input.command.args', "Optional arguments passed to the command."
'learnMore', "Learn More"
'keychainWriteError', "Writing login information to the keychain failed with error '{0}'.", message
'troubleshooting', "Troubleshooting Guide"
'proxyAuthRequired', "Proxy Authentication Required"
{ key: 'loginButton', comment: ['&& denotes a mnemonic'] }, "&&Log In"
{ key: 'cancelButton', comment: ['&& denotes a mnemonic'] }, "&&Cancel"
'username', "Username"
'password', "Password"
'proxyDetail', "The proxy {0} requires a username and password.", `${payload.authInfo.host}:${payload.authInfo.port}`
'rememberCredentials', "Remember my credentials"
'quitMessage', "Are you sure you want to exit?")
'closeWindowMessage', "Are you sure you want to close the window?"
{ key: 'exitButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Exit")
{ key: 'closeWindowButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Close Window"
'doNotAskAgain', "Do not ask me again"
'shutdownErrorDetail', "Error: {0}", toErrorMessage(error)
'willShutdownDetail', "The following operations are still running: \n{0}", pendingJoiners.map(joiner => `- ${joiner.label}`).join('\n')
'shutdownErrorClose', "An unexpected error prevented the window to close"
'shutdownErrorQuit', "An unexpected error prevented the application to quit"
'shutdownErrorReload', "An unexpected error prevented the window to reload"
'shutdownErrorLoad', "An unexpected error prevented to change the workspace"
'shutdownTitleClose', "Closing the window is taking a bit longer..."
'shutdownTitleQuit', "Quitting the application is taking a bit longer..."
'shutdownTitleReload', "Reloading the window is taking a bit longer..."
'shutdownTitleLoad', "Changing the workspace is taking a bit longer..."
'shutdownForceClose', "Close Anyway"
'shutdownForceQuit', "Quit Anyway"
'shutdownForceReload', "Reload Anyway"
'shutdownForceLoad', "Change Anyway"
'loaderCycle', "There is a dependency cycle in the AMD modules that needs to be resolved!")
'runningAsRoot', "It is not recommended to run {0} as root user.", this.productService.nameShort)
'appRootWarning.banner', "Files you store within the installation folder ('{0}') may be OVERWRITTEN or DELETED IRREVERSIBLY without warning at update time.", this.labelService.getUriLabel(installLocationUri)
'windows 7 eol', "{0} on Windows 7 will no longer receive any further updates.", this.productService.nameLong
'learnMore', "Learn More"
'tunnel.forwardedPortsViewEnabled', "Whether the Ports view is enabled.")
'remote.tunnelsView.addPort', "Add Port"
'tunnelPrivacy.private', "Private"
'tunnel.portColumn.label', "Port"
'tunnel.portColumn.tooltip', "The label and remote port number of the forwarded port."
'tunnel.addressColumn.label', "Local Address"
'tunnel.addressColumn.tooltip', "The address that the forwarded port is available at locally."
'portsLink.followLinkAlt.mac', "option + click"
'portsLink.followLinkAlt', "alt + click"
'portsLink.followLinkCmd', "cmd + click"
'portsLink.followLinkCtrl', "ctrl + click"
'tunnel.processColumn.label', "Running Process"
'tunnel.processColumn.tooltip', "The command line of the process that is using the port."
'tunnel.originColumn.label', "Origin"
'tunnel.originColumn.tooltip', "The source that a forwarded port originates from. Can be an extension, user forwarded, statically forwarded, or automatically forwarded."
'tunnel.privacyColumn.label', "Visibility"
'tunnel.privacyColumn.tooltip', "The availability of the forwarded port."
'remote.tunnelsView.input', "Press Enter to confirm or Escape to cancel."
'tunnelView.runningProcess.inacessable', "Process information unavailable"
'remote.tunnel.tooltipForwarded', "Remote port {0}:{1} forwarded to local address {2}. ", this.remoteHost, this.remotePort, this.localAddress
'remote.tunnel.tooltipCandidate', "Remote port {0}:{1} not forwarded. ", this.remoteHost, this.remotePort
'tunnel.iconColumn.running', "Port has running process."
'tunnel.iconColumn.notRunning', "No running process."
'remote.tunnel.tooltipName', "Port labeled {0}. ", this.name
'tunnelPrivacy.unknown', "Unknown"
'tunnelPrivacy.private', "Private"
'tunnel.focusContext', "Whether the Ports view has focus.")
'remote.tunnel', "Ports"
'tunnelView', "Tunnel View"
'remote.tunnel.label', "Set Port Label"
'remote.tunnelsView.labelPlaceholder', "Port label"
'remote.tunnelsView.portNumberValid', "Forwarded port should be a number or a host:port."
'remote.tunnelsView.portNumberToHigh', "Port number must be \u2265 0 and < {0}.", maxPortNumber
'remote.tunnelView.inlineElevationMessage', "May Require Sudo"
'remote.tunnelView.alreadyForwarded', "Port is already forwarded"
'remote.tunnel.forward', "Forward a Port"
'remote.tunnel.forwardItem', "Forward Port"
'remote.tunnel.forwardPrompt', "Port number or address (eg. 3000 or 10.10.10.10:2000)."
'remote.tunnel.forwardError', "Unable to forward {0}:{1}. The host may not be available or that remote port may already be forwarded", host, port)
'remote.tunnel.closeNoPorts', "No ports currently forwarded. Try running the {0} command", ForwardPortAction.LABEL.value
'remote.tunnel.close', "Stop Forwarding Port"
'remote.tunnel.closePlaceholder', "Choose a port to stop forwarding") }
'remote.tunnel.open', "Open in Browser"
'remote.tunnel.openPreview', "Preview in Editor"
'remote.tunnel.openCommandPalette', "Open Port in Browser"
'remote.tunnel.openCommandPaletteNone', "No ports currently forwarded. Open the Ports view to get started."
'remote.tunnel.openCommandPaletteView', "Open the Ports view..."
'remote.tunnel.openCommandPalettePick', "Choose the port to open") }
'remote.tunnel.copyAddressInline', "Copy Local Address"
'remote.tunnel.copyAddressCommandPalette', "Copy Forwarded Port Address"
'remote.tunnel.copyAddressPlaceholdter', "Choose a forwarded port") }
'remote.tunnel.changeLocalPort', "Change Local Address Port"
'remote.tunnel.changeLocalPortNumber', "The local port {0} is not available. Port number {1} has been used instead", value, newForward.tunnelLocalPort ?? newForward.localAddress)
'remote.tunnelsView.changePort', "New local port"
'remote.tunnel.protocolHttp', "HTTP"
'remote.tunnel.protocolHttps', "HTTPS"
'tunnelContext.privacyMenu', "Port Visibility"
'tunnelContext.protocolMenu', "Change Port Protocol"
'portWithRunningProcess.foreground', "The color of the icon for a port that has an associated running process.")
'tunnelPrivacy.private', "Private"
'tunnelPrivacy.public', "Public"
'timelineViewIcon', 'View icon of the timeline view.')
'timelineOpenIcon', 'Icon for the open timeline action.')
'timelineConfigurationTitle', "Timeline"
'timeline.pageSize', "The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view."
'timeline.pageOnScroll', "Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list."
'files.openTimeline', "Open Timeline"
'timelineFilter', 'Icon for the filter timeline action.')
'filterTimeline', "Filter Timeline"
'tree.aria', "Type Hierarchy"
'supertypes', "supertypes of {0}", element.item.name
'subtypes', "subtypes of {0}", element.item.name
'supertypes', "Supertypes of '{0}'", element.model.root.name
'subtypes', "Subtypes of '{0}'", element.model.root.name
'title.loading', "Loading...")
'empt.supertypes', "No supertypes of '{0}'", model.root.name
'empt.subtypes', "No subtypes of '{0}'", model.root.name)
'releaseNotesInputName', "Release Notes: {0}", version
'unassigned', "unassigned"
'showReleaseNotes', "Show Release Notes"
'mshowReleaseNotes', "Show &&Release Notes"
'update.noReleaseNotesOnline', "This version of {0} does not have release notes online", productService.nameLong)
'checkForUpdates', "Check for Updates..."
'downloadUpdate', "Download Update"
'installUpdate', "Install Update"
'restartToUpdate', "Restart to Update"
'openDownloadPage', "Download {0}", product.nameLong
'applyUpdate', "Apply Update..."
'pickUpdate', "Apply Update"
{ key: 'updateButton', comment: ['&& denotes a mnemonic'] }, "&&Update")
'update.noReleaseNotesOnline', "This version of {0} does not have release notes online", productService.nameLong)
'read the release notes', "Welcome to {0} v{1}! Would you like to read the Release Notes?", productService.nameLong, productService.version
'releaseNotes', "Release Notes"
'updateIsReady', "New {0} update available.", this.productService.nameShort)
'checkingForUpdates', "Checking for Updates...")
'downloading', "Downloading...")
'updating', "Updating...")
'update service', "Update Service"
'noUpdatesAvailable', "There are currently no updates available."
'thereIsUpdateAvailable', "There is an available update."
'download update', "Download Update"
'later', "Later"
'releaseNotes', "Release Notes"
'updateAvailable', "There's an update available: {0} {1}", this.productService.nameLong, update.productVersion
'installUpdate', "Install Update"
'later', "Later"
'releaseNotes', "Release Notes"
'updateNow', "Update Now"
'later', "Later"
'releaseNotes', "Release Notes"
'updateAvailableAfterRestart', "Restart {0} to apply the latest update.", this.productService.nameLong
'checkForUpdates', "Check for Updates..."
'checkingForUpdates', "Checking for Updates..."
'download update_1', "Download Update (1)"
'DownloadingUpdate', "Downloading Update..."
'installUpdate...', "Install Update... (1)"
'installingUpdate', "Installing Update..."
'restartToUpdate', "Restart to Update (1)"
'switchToStable', "Switch to Stable Version..."
'relaunchMessage', "Changing the version requires a reload to take effect"
'relaunchDetailInsiders', "Press the reload button to switch to the Insiders version of VS Code."
'relaunchDetailStable', "Press the reload button to switch to the Stable version of VS Code."
'reload', "&&Reload"
'selectSyncService.message', "Choose the settings sync service to use after changing the version"
'use insiders', "Insiders"
'use stable', "Stable (current)"
'cancel', "Cancel"
'selectSyncService.detail', "The Insiders version of VS Code will synchronize your settings, keybindings, extensions, snippets and UI State using separate insiders settings sync service by default."
'timeline.loadMore', "Load more"
'timeline', "Timeline"
'timeline.editorCannotProvideTimeline', "The active editor cannot provide timeline information."
'timeline.noTimelineInfo', "No timeline information was provided."
'timeline.editorCannotProvideTimeline', "The active editor cannot provide timeline information."
'timeline.aria.item', "{0}: {1}", element.relativeTimeFullWord ?? '', element.label
'timeline', "Timeline"
'timeline.loading', "Loading timeline for {0}...", file
'timelineRefresh', 'Icon for the refresh timeline action.')
'timelinePin', 'Icon for the pin timeline action.')
'timelineUnpin', 'Icon for the unpin timeline action.')
'refresh', "Refresh"
'timeline', "Timeline"
'timeline.toggleFollowActiveEditorCommand.follow', "Pin the Current Timeline"
'timeline', "Timeline"
'timeline.toggleFollowActiveEditorCommand.unfollow', "Unpin the Current Timeline"
'timeline', "Timeline"
'workspaceTrustEnabledCtx', "Whether the workspace trust feature is enabled.")
'workspaceTrustedCtx', "Whether the current workspace has been trusted by the user.")
'workspaceFound', "This folder contains a workspace file '{0}'. Do you want to open it? [Learn more]({1}) about workspace files.", workspaceFile, 'https://go.microsoft.com/fwlink/?linkid=2025315'
'openWorkspace', "Open Workspace"
'workspacesFound', "This folder contains multiple workspace files. Do you want to open one? [Learn more]({0}) about workspace files.", 'https://go.microsoft.com/fwlink/?linkid=2025315'
'selectWorkspace', "Select Workspace"
'selectToOpen', "Select a workspace to open") }
'openWorkspace', "Open Workspace"
'alreadyOpen', "This workspace is already open.")
'openLooseFileWorkspaceDetails', "You are trying to open untrusted files in a workspace which is trusted."
'openLooseFileWindowDetails', "You are trying to open untrusted files in a window which is trusted."
'openLooseFileLearnMore', "If you don't trust the authors of these files, we recommend to open them in Restricted Mode in a new window as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more."
'openLooseFileMesssage', "Do you trust the authors of these files?"
'cancel', "Cancel"
'openLooseFileWorkspaceCheckbox', "Remember my decision for all workspaces"
'workspaceTrust', "Do you trust the authors of the files in this workspace?"
'folderTrust', "Do you trust the authors of the files in this folder?"
'immediateTrustRequestMessage', "A feature you are trying to use may be a security risk if you do not trust the source of the files or folders you currently have open."
'grantFolderTrustButton', "Trust Folder & Continue"
'manageWorkspaceTrustButton', "Manage"
'cancelWorkspaceTrustButton', "Cancel"), type: 'Cancel' }
'immediateTrustRequestLearnMore', "If you don't trust the authors of these files, we do not recommend continuing as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more.")
'addWorkspaceFolderMessage', "Do you trust the authors of the files in this folder?"
'no', 'No'
'addWorkspaceFolderDetail', "You are adding files that are not currently trusted to a trusted workspace. Do you trust the authors of these new files?"
'workspaceTrust', "Do you trust the authors of the files in this workspace?"
'folderTrust', "Do you trust the authors of the files in this folder?"
'checkboxString', "Trust the authors of all files in the parent folder '{0}'", name
'trustWorkspaceOptionDescription', "Trust workspace and enable all features"
'dontTrustWorkspaceOptionDescription', "Browse workspace in restricted mode"
'workspaceStartupTrustDetails', "{0} provides features that may automatically execute files in this workspace.", this.productService.nameShort
'folderStartupTrustDetails', "{0} provides features that may automatically execute files in this folder.", this.productService.nameShort
'startupTrustRequestLearnMore', "If you don't trust the authors of these files, we recommend to continue in restricted mode as the files may be malicious. See [our docs](https://aka.ms/vscode-workspace-trust) to learn more."
'restrictedModeBannerManage', "Manage"
'restrictedModeBannerLearnMore', "Learn More"
'restrictedModeBannerAriaLabelWindow', "Restricted Mode is intended for safe code browsing. Trust this window to enable all features. Use navigation keys to access banner actions."
'restrictedModeBannerAriaLabelFolder', "Restricted Mode is intended for safe code browsing. Trust this folder to enable all features. Use navigation keys to access banner actions."
'restrictedModeBannerAriaLabelWorkspace', "Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features. Use navigation keys to access banner actions."
'restrictedModeBannerMessageWindow', "Restricted Mode is intended for safe code browsing. Trust this window to enable all features."
'restrictedModeBannerMessageFolder', "Restricted Mode is intended for safe code browsing. Trust this folder to enable all features."
'restrictedModeBannerMessageWorkspace', "Restricted Mode is intended for safe code browsing. Trust this workspace to enable all features."
'status.ariaTrustedWindow', "This window is trusted."
'status.ariaUntrustedWindow', "Restricted Mode: Some features are disabled because this window is not trusted."
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					value: localize(
'status.ariaTrustedFolder', "This folder is trusted."
'status.ariaUntrustedFolder', "Restricted Mode: Some features are disabled because this folder is not trusted."
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					value: localize(
'status.ariaTrustedWorkspace', "This workspace is trusted."
'status.ariaUntrustedWorkspace', "Restricted Mode: Some features are disabled because this workspace is not trusted."
src/vs/workbench/contrib/workspace/browser/workspace.contribution.ts:					value: localize(
'status.WorkspaceTrust', "Workspace Trust"
'workspaceTrustEditor', "Workspace Trust Editor"
'workspacesCategory', "Workspaces"
'configureWorkspaceTrust', "Configure Workspace Trust"
'manageWorkspaceTrust', "Manage Workspace Trust"
'securityConfigurationTitle', "Security"
'workspace.trust.description', "Controls whether or not workspace trust is enabled within VS Code."
'workspace.trust.startupPrompt.description', "Controls when the startup prompt to trust a workspace is shown."
'workspace.trust.startupPrompt.always', "Ask for trust every time an untrusted workspace is opened."
'workspace.trust.startupPrompt.once', "Ask for trust the first time an untrusted workspace is opened."
'workspace.trust.startupPrompt.never', "Do not ask for trust when an untrusted workspace is opened."
'workspace.trust.banner.description', "Controls when the restricted mode banner is shown."
'workspace.trust.banner.always', "Show the banner every time an untrusted workspace is open."
'workspace.trust.banner.untilDismissed', "Show the banner when an untrusted workspace is opened until dismissed."
'workspace.trust.banner.never', "Do not show the banner when an untrusted workspace is open."
'workspace.trust.untrustedFiles.description', "Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `#{0}#`.", WORKSPACE_TRUST_EMPTY_WINDOW
'workspace.trust.untrustedFiles.prompt', "Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again."
'workspace.trust.untrustedFiles.open', "Always allow untrusted files to be introduced to a trusted workspace without prompting."
'workspace.trust.untrustedFiles.newWindow', "Always open untrusted files in a separate window in restricted mode without prompting."
'workspace.trust.emptyWindow.description', "Controls whether or not the empty window is trusted by default within VS Code. When used with `#{0}#`, you can enable the full functionality of VS Code without prompting in an empty window.", WORKSPACE_TRUST_UNTRUSTED_FILES
'move second side bar right', "Move Secondary Side Bar Right"), run: () => this.commandService.executeCommand(ToggleSidebarPositionAction.ID) }
'hide second side bar', "Hide Secondary Side Bar"), run: () => this.commandService.executeCommand(ToggleAuxiliaryBarAction.ID) }
'editorWalkThrough.title', "Editor Playground"
'editorWalkThrough', "Interactive Editor Playground"
'remote.category', "Remote"
'remote.showMenu', "Show Remote Menu"
'remote.close', "Close Remote Connection"
{ key: 'miCloseRemote', comment: ['&& denotes a mnemonic'] }, "Close Re&&mote Connection"
'remote.install', "Install Remote Development Extensions"
'host.open', "Opening Remote..."), undefined, true /* progress */
'host.reconnecting', "Reconnecting to {0}...", truncate(hostLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH))}`, undefined, undefined, true
'disconnectedFrom', "Disconnected from {0}", truncate(hostLabel, RemoteStatusIndicator.REMOTE_STATUS_LABEL_MAX_LENGTH))}`
{ key: 'host.tooltip', comment: ['{0} is a remote host name, e.g. Dev Container'] }, "Editing on {0}", hostLabel)
{ key: 'workspace.tooltip', comment: ['{0} is a remote workspace name, e.g. GitHub'] }, "Editing on {0}", workspaceLabel)
src/vs/workbench/contrib/remote/browser/remoteIndicator.ts:					tooltip.appendMarkdown(nls.localize(
'noHost.tooltip', "Open a Remote Window")
'remoteHost', "Remote Host"
'closeRemoteConnection.title', 'Close Remote Connection'
'reloadWindow', 'Reload Window'
'closeVirtualWorkspace.title', 'Close Remote Workspace'
'installRemotes', "Install Additional Remote Extensions..."
'remoteActions', "Select an option to open a Remote Window"
'walkThrough.editor.label', "Playground"
{ key: 'miPlayground', comment: ['&& denotes a mnemonic'] }, "Editor Playgrou&&nd"
'ports', "Ports"
'nForwardedPorts', "{0} forwarded ports", n)
'remote.forwardedPorts.statusbarTextNone', "No Ports Forwarded"
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:			tooltip = nls.localize('remote.forwardedPorts.statusbarTooltip', "Forwarded Ports: {0}",
'status.forwardedPorts', "Forwarded Ports"
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:		return nls.localize('remote.tunnelsView.automaticForward', "Your application running on port {0} is available.  ",
src/vs/workbench/contrib/remote/browser/remoteExplorer.ts:		return nls.localize(
'remote.tunnelsView.elevationMessage', "You'll need to run as superuser to use port {0} locally.  ", tunnel.tunnelRemotePort
'remote.tunnelsView.elevationButton', "Use Port {0} as Sudo...", tunnel.tunnelRemotePort
'editorHasTypeHierarchyProvider', 'Whether a type hierarchy provider is available')
'typeHierarchyVisible', 'Whether type hierarchy peek is currently showing')
'typeHierarchyDirection', 'whether type hierarchy shows super types or subtypes') }
'no.item', "No results")
'error', "Failed to show type hierarchy")
'title', "Peek Type Hierarchy"
'title.supertypes', "Show Supertypes"
'title.subtypes', "Show Subtypes"
'title.refocusTypeHierarchy', "Refocus Type Hierarchy"
'close', 'Close'
'getStartedIcon', 'Getting started icon in the remote explorer view.')
'documentationIcon', 'Documentation icon in the remote explorer view.')
'feedbackIcon', 'Feedback icon in the remote explorer view.')
'reviewIssuesIcon', 'Review issue icon in the remote explorer view.')
'reportIssuesIcon', 'Report issue icon in the remote explorer view.')
'remoteExplorerViewIcon', 'View icon of the remote explorer view.')
'portsViewIcon', 'View icon of the remote ports view.')
'portIcon', 'Icon representing a remote port.')
'privatePortIcon', 'Icon representing a private remote port.')
'forwardPortIcon', 'Icon for the forward action.')
'stopForwardIcon', 'Icon for the stop forwarding action.')
'openBrowserIcon', 'Icon for the open browser action.')
'openPreviewIcon', 'Icon for the open preview action.')
'copyAddressIcon', 'Icon for the copy local address action.')
'labelPortIcon', 'Icon for the label port action.')
'forwardedPortWithoutProcessIcon', 'Icon for forwarded ports that don\'t have a running process.')
'forwardedPortWithProcessIcon', 'Icon for forwarded ports that do have a running process.')
'walkThrough.unboundCommand', "unbound"
'walkThrough.gitNotFound', "It looks like Git is not installed on your system.")
'walkThrough.embeddedEditorBackground', 'Background color for the embedded editors on the Interactive Playground.')
'shieldIcon', 'Icon for workspace trust ion the banner.')
'checkListIcon', 'Icon for the checkmark in the workspace trust editor.')
'xListIcon', 'Icon for the cross in the workspace trust editor.')
'folderPickerIcon', 'Icon for the pick folder icon in the workspace trust editor.')
'editIcon', 'Icon for the edit folder icon in the workspace trust editor.')
'removeIcon', 'Icon for the remove folder icon in the workspace trust editor.')
'hostColumnLabel', "Host"
'pathColumnLabel', "Path"
'trustedFolderAriaLabel', "{0}, trusted", this.labelService.getUriLabel(item.uri)
'trustedFolderWithHostAriaLabel', "{0} on {1}, trusted", this.labelService.getUriLabel(item.uri), hostLabel
'trustedFoldersAndWorkspaces', "Trusted Folders & Workspaces"
'addButton', "Add Folder") })
'addButton', "Add Folder"
'trustUri', "Trust Folder"
'selectTrustedUri', "Select Folder To Trust"
'trustedFoldersDescription', "You trust the following folders, their subfolders, and workspace files."
'noTrustedFoldersDescriptions', "You haven't trusted any folders or workspace files yet."
'trustAll', "You will trust all repositories on {0}.", getHostLabel(this.labelService, item)
'trustOrg', "You will trust all repositories and forks under '{0}' on {1}.", segments[0], getHostLabel(this.labelService, item)
'invalidTrust', "You cannot trust individual folders within a repository.", path
'trustUri', "Trust Folder"
'selectTrustedUri', "Select Folder To Trust"
'editTrustedUri', "Edit Path"
'pickerTrustedUri', "Open File Picker"
'deleteTrustedUri', "Delete Path"
'localAuthority', "Local"
'trustedUnsettableWindow', "This window is trusted"
'trustedHeaderWindow', "You trust this window"
'trustedHeaderFolder', "You trust this folder"
'trustedHeaderWorkspace', "You trust this workspace"
'untrustedHeader', "You are in Restricted Mode"
'untrustedWorkspace', "In Restricted Mode"
'trustedWindowSubtitle', "You trust the authors of the files in the current window. All features are enabled:"
'untrustedWindowSubtitle', "You do not trust the authors of the files in the current window. The following features are disabled:"
'untrustedWorkspace', "In Restricted Mode"
'trustedFolderSubtitle', "You trust the authors of the files in the current folder. All features are enabled:"
'untrustedFolderSubtitle', "You do not trust the authors of the files in the current folder. The following features are disabled:"
'untrustedWorkspace', "In Restricted Mode"
'trustedWorkspaceSubtitle', "You trust the authors of the files in the current workspace. All features are enabled:"
'untrustedWorkspaceSubtitle', "You do not trust the authors of the files in the current workspace. The following features are disabled:"
'trustedDescription', "All features are enabled because trust has been granted to the workspace."
'untrustedDescription', "{0} is in a restricted mode intended for safe code browsing.", this.productService.nameShort
{ key: 'workspaceTrustEditorHeaderActions', comment: ['Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)'] }, "[Configure your settings]({0}) or [learn more](https://aka.ms/vscode-workspace-trust).", `command:workbench.trust.configure`
'root element label', "Manage Workspace Trust")}:  ${this.headerContainer.innerText}`
'trustedFoldersAndWorkspaces', "Trusted Folders & Workspaces"
'trustedTasks', "Tasks are allowed to run"
'trustedDebugging', "Debugging is enabled"
'trustedExtensions', "All extensions are enabled"
'trustedTasks', "Tasks are allowed to run"
'trustedDebugging', "Debugging is enabled"
'trustedSettings', "All workspace settings are applied"
'trustedExtensions', "All extensions are enabled"
'untrustedTasks', "Tasks are not allowed to run"
'untrustedDebugging', "Debugging is disabled"
{ key: 'untrustedExtensions', comment: ['Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)'] }, "[{0} extensions]({1}) are disabled or have limited functionality", numExtensions, `command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`)
'untrustedTasks', "Tasks are not allowed to run"
'untrustedDebugging', "Debugging is disabled"
'no untrustedSettings', "Workspace settings requiring trust are not applied")
{ key: 'untrustedExtensions', comment: ['Please ensure the markdown link syntax is not broken up with whitespace [text block](link block)'] }, "[{0} extensions]({1}) are disabled or have limited functionality", numExtensions, `command:${LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID}`)
'trustButton', "Trust"), undefined, true, async (
'trustMessage', "Trust the authors of all files in the current folder or its parent '{0}'.", name
'trustParentButton', "Trust Parent"), undefined, true, async (
'dontTrustButton', "Don't Trust"), undefined, true, async (
'untrustedFolderReason', "This folder is trusted via the bolded entries in the the trusted folders below."
'trustedForcedReason', "This window is trusted by nature of the workspace that is opened."
'RemoteHelpInformationExtPoint', 'Contributes help information for Remote'
'RemoteHelpInformationExtPoint.getStarted', "The url, or a command that returns the url, to your project's Getting Started page"
'RemoteHelpInformationExtPoint.documentation', "The url, or a command that returns the url, to your project's documentation page"
'RemoteHelpInformationExtPoint.feedback', "The url, or a command that returns the url, to your project's feedback reporter"
'RemoteHelpInformationExtPoint.issues', "The url, or a command that returns the url, to your project's issues list"
'remote.help.getStarted', "Get Started"
'remote.help.documentation', "Read Documentation"
'remote.help.feedback', "Provide Feedback"
'remote.help.issues', "Review Issues"
'remote.help.report', "Report Issue"
'pickRemoteExtension', "Select url to open") }
'remote.help', "Help and feedback"
'remotehelp', "Remote Help"
'remote.explorer', "Remote Explorer"
'remote.explorer', "Remote Explorer"
'reconnectionWaitOne', "Attempting to reconnect in {0} second...", remainingTime)
'reconnectionWaitMany', "Attempting to reconnect in {0} seconds...", remainingTime)
'reconnectNow', "Reconnect Now"
'reloadWindow', "Reload Window"
'connectionLost', "Connection Lost")
'reconnectionRunning', "Disconnected. Attempting to reconnect...")
'cancel', "Cancel")], { cancelId: 1, custom: true }
'ViewsWelcomeExtensionPoint.proposedAPI', "The viewsWelcome contribution in '{0}' requires 'enabledApiProposals: [\"contribViewsWelcome\"]' in order to use the 'group' proposed property.", contribution.description.identifier.value)
'contributes.viewsWelcome', "Contributed views welcome content. Welcome content will be rendered in tree based views whenever they have no meaningful content to display, ie. the File Explorer when no folder is open. Such content is useful as in-product documentation to drive users to use certain features before they are available. A good example would be a `Clone Repository` button in the File Explorer welcome view."
'contributes.viewsWelcome.view', "Contributed welcome content for a specific view."
'contributes.viewsWelcome.view.view', "Target view identifier for this welcome content. Only tree based views are supported."
'contributes.viewsWelcome.view.view', "Target view identifier for this welcome content. Only tree based views are supported."
'contributes.viewsWelcome.view.contents', "Welcome content to be displayed. The format of the contents is a subset of Markdown, with support for links only."
'contributes.viewsWelcome.view.when', "Condition when the welcome content should be displayed."
'contributes.viewsWelcome.view.group', "Group to which this welcome content belongs. Proposed API."
'contributes.viewsWelcome.view.enablement', "Condition when the welcome content buttons and command links should be enabled."
'welcomeAriaLabel', "Overview of how to get up to speed with your editor."
'pickWalkthroughs', "Open Walkthrough...") }
'getStarted', "Get Started"))
'checkboxTitle', "When checked, this page will be shown on startup."
'welcomePage.showOnStartup', "Show welcome page on startup")
{ key: 'gettingStarted.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Editing evolved")
'welcomePage.openFolderWithPath', "Open folder {0} with path {1}", name, parentPath)
'recent', "Recent"
'noRecents', "You have no recent folders,"
'openFolder', "open a folder")
'toStart', "to start.")
'show more recents', "Show All Recent Folders {0}", this.getKeybindingLabel(OpenRecentAction.ID)
'showAll', "More..."))
'start', "Start"
'new', "New"))
{ key: 'newItems', comment: ['Shown when a list of items has changed based on an update from a remote source'] }, "Updated"))
'close', "Hide"
'closeAriaLabel', "Hide"
'walkthroughs', "Walkthroughs"
'showAll', "More...")
'gettingStarted.allStepsComplete', "All {0} steps complete!", stats.stepsComplete
'gettingStarted.someStepsComplete', "{0} of {1} steps complete", stats.stepsComplete, stats.stepsTotal
'gettingStarted.keyboardTip', 'Tip: Use keyboard shortcut '), $('span.keybinding', {}, keybindingLabel))
'imageShowing', "Image showing {0}", step.media.altText) }
'allDone', "Mark Done")
'nextOne', "Next Section"), $('span.codicon.codicon-arrow-small-right')
'privacy statement', "privacy statement"
'optOut', "opt out"
src/vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.ts:		const text = localize({ key: 'footer', comment: ['fist substitution is "vs code", second is "privacy statement", third is "opt out".'] },
'Built-In', "Built-In"
'Create', "Create"
'welcome.newFile', "New File..."
'newFileTitle', "New File..."
'newFilePlaceholder', "Select File Type or Enter File Name..."
'file', "File"
'notebook', "Notebook"
'change keybinding', "Configure Keybinding"
'miNewFileWithName', "Create New File ({0})", val
'miNewFile2', "Text File"
'getStarted', "Get Started"
'light', "Light")
'dark', "Dark")
'HighContrast', "Dark High Contrast")
'HighContrastLight', "Light High Contrast")
'seeMore', "See More Themes...")
'builtin', "Built-In"
'developer', "Developer"
'resetWelcomePageWalkthroughProgress', "Reset Welcome Page Walkthrough Progress"
'default', "Default")
'jupyter', "Jupyter")
'colab', "Colab")
'getting-started-setup-icon', "Icon used for the setup category of welcome page")
'getting-started-beginner-icon', "Icon used for the beginner category of welcome page")
'getting-started-intermediate-icon', "Icon used for the intermediate category of welcome page")
'gettingStarted.newFile.title', "New File..."
'gettingStarted.newFile.description', "Open a new untitled file, notebook, or custom editor."
'gettingStarted.newFolder.title', "New Folder..."
'gettingStarted.newFolder.description', "Create a folder from a Git repo or an extension contributed template folder"
'gettingStarted.openMac.title', "Open..."
'gettingStarted.openMac.description', "Open a file or folder to start working"
'gettingStarted.openFile.title', "Open File..."
'gettingStarted.openFile.description', "Open a file to start working"
'gettingStarted.openFolder.title', "Open Folder..."
'gettingStarted.openFolder.description', "Open a folder to start working"
'gettingStarted.openFolder.title', "Open Folder..."
'gettingStarted.openFolder.description', "Open a folder to start working"
'gettingStarted.topLevelGitClone.title', "Clone Git Repository..."
'gettingStarted.topLevelGitClone.description', "Clone a remote repository to a local folder"
'gettingStarted.topLevelGitOpen.title', "Open Repository..."
'gettingStarted.topLevelGitOpen.description', "Connect to a remote repository or pull request to browse, search, edit, and commit"
'gettingStarted.topLevelShowWalkthroughs.title', "Open a Walkthrough..."
'gettingStarted.topLevelShowWalkthroughs.description', "View a walkthrough on the editor or an extension"
'gettingStarted.topLevelVideoTutorials.title', "Watch Video Tutorials"
'gettingStarted.topLevelVideoTutorials.description', "Watch our series of short & practical video tutorials for VS Code's key features."
'gettingStarted.topLevelVideoTutorials.title', "Watch Video Tutorials"
'gettingStarted.topLevelVideoTutorials.description', "Watch our series of short & practical video tutorials for VS Code's key features."
'gettingStarted.setup.title', "Get Started with VS Code"
'gettingStarted.setup.description', "Discover the best customizations to make VS Code yours."
'gettingStarted.pickColor.title', "Choose the look you want"
'titleID', "Browse Color Themes"), 'command:workbench.action.selectTheme')
'gettingStarted.settingsSync.title', "Sync to and from other devices"
'enableSync', "Enable Settings Sync"), 'command:workbench.userDataSync.actions.turnOn')
'gettingStarted.commandPalette.title', "One shortcut to access everything"
'commandPalette', "Open Command Palette"), 'command:workbench.action.showCommands')
'gettingStarted.extensions.title', "Limitless extensibility"
'browsePopular', "Browse Popular Web Extensions"), 'command:workbench.extensions.action.showPopularExtensions')
'gettingStarted.findLanguageExts.title', "Rich support for all your languages"
'browseLangExts', "Browse Language Extensions"), 'command:workbench.extensions.action.showLanguageExtensions')
'gettingStarted.setup.OpenFolder.title', "Open up your code"
'pickFolder', "Pick a Folder"), 'command:workbench.action.files.openFileFolder')
'gettingStarted.setup.OpenFolder.title', "Open up your code"
'pickFolder', "Pick a Folder"), 'command:workbench.action.files.openFolder')
'gettingStarted.quickOpen.title', "Quickly navigate between your files"
'quickOpen', "Quick Open a File"), 'command:toSide:workbench.action.quickOpen')
'gettingStarted.setupWeb.title', "Get Started with VS Code in the Web"
'gettingStarted.setupWeb.description', "Discover the best customizations to make VS Code in the Web yours."
'gettingStarted.pickColor.title', "Choose the look you want"
'titleID', "Browse Color Themes"), 'command:workbench.action.selectTheme')
'gettingStarted.settingsSync.title', "Sync to and from other devices"
'enableSync', "Enable Settings Sync"), 'command:workbench.userDataSync.actions.turnOn')
'gettingStarted.commandPalette.title', "One shortcut to access everything"
'commandPalette', "Open Command Palette"), 'command:workbench.action.showCommands')
'gettingStarted.menuBar.title', "Just the right amount of UI"
'toggleMenuBar', "Toggle Menu Bar"), 'command:workbench.action.toggleMenuBar')
'gettingStarted.extensions.title', "Limitless extensibility"
'browsePopular', "Browse Popular Web Extensions"), 'command:workbench.extensions.action.showPopularExtensions')
'gettingStarted.findLanguageExts.title', "Rich support for all your languages"
'browseLangExts', "Browse Language Extensions"), 'command:workbench.extensions.action.showLanguageExtensions')
'gettingStarted.setup.OpenFolder.title', "Open up your code"
'openRepository', "Open Repository"), 'command:remoteHub.openRepository')
'gettingStarted.quickOpen.title', "Quickly navigate between your files"
'quickOpen', "Quick Open a File"), 'command:toSide:workbench.action.quickOpen')
'gettingStarted.beginner.title', "Learn the Fundamentals"
'gettingStarted.beginner.description', "Jump right into VS Code and get an overview of the must-have features."
'gettingStarted.playground.title', "Redefine your editing skills"
'openEditorPlayground', "Open Editor Playground"), 'command:toSide:workbench.action.showInteractivePlayground')
'gettingStarted.terminal.title', "Convenient built-in terminal"
'showTerminal', "Show Terminal Panel"), 'command:workbench.action.terminal.toggleTerminal')
'gettingStarted.extensions.title', "Limitless extensibility"
'browseRecommended', "Browse Recommended Extensions"), 'command:workbench.extensions.action.showRecommendedExtensions')
'gettingStarted.settings.title', "Tune your settings"
'tweakSettings', "Tweak my Settings"), 'command:toSide:workbench.action.openSettings')
'gettingStarted.workspaceTrust.title', "Safely browse and edit code"
'enableTrust', "enable trust"), 'command:toSide:workbench.action.manageTrustedDomain')
'gettingStarted.videoTutorial.title', "Lean back and learn"
'watch', "Watch Tutorial"), 'https://aka.ms/vscode-getting-started-video')
'gettingStarted.intermediate.title', "Boost your Productivity"
'gettingStarted.intermediate.description', "Optimize your development workflow with these tips & tricks."
'gettingStarted.splitview.title', "Side by side editing"
'splitEditor', "Split Editor"), 'command:workbench.action.splitEditor')
'gettingStarted.debug.title', "Watch your code in action"
'runProject', "Run your Project"), 'command:workbench.action.debug.selectandstart')
'gettingStarted.scm.title', "Track your code with Git"
'cloneRepo', "Clone Repository"), 'command:git.clone')
'gettingStarted.scm.title', "Track your code with Git"
'initRepo', "Initialize Git Repository"), 'command:git.init')
'gettingStarted.scm.title', "Track your code with Git"
'openSCM', "Open Source Control"), 'command:workbench.view.scm')
'gettingStarted.installGit.title', "Install Git"
'installGit', "Install Git"), 'https://aka.ms/vscode-install-git')
'gettingStarted.tasks.title', "Automate your project tasks"
'runTasks', "Run Auto-detected Tasks"), 'command:workbench.action.tasks.runTask')
'gettingStarted.shortcuts.title', "Customize your shortcuts"
'keyboardShortcuts', "Keyboard Shortcuts"), 'command:toSide:workbench.action.openGlobalKeybindings')
'gettingStarted.notebook.title', "Customize Notebooks"
'gettingStarted.notebookProfile.title', "Select the layout for your notebooks"
'gettingStarted.notebookProfile.description', "Get notebooks to feel just the way you prefer"
'gettingStartedUnchecked', "Used to represent walkthrough steps which have not been completed")
'gettingStartedChecked', "Used to represent walkthrough steps which have been completed")
'title', "Title"
'walkthroughs', "Contribute walkthroughs to help users getting started with your extension."
'walkthroughs.id', "Unique identifier for this walkthrough."
'walkthroughs.title', "Title of walkthrough."
'walkthroughs.icon', "Relative path to the icon of the walkthrough. The path is relative to the extension location. If not specified, the icon defaults to the extension icon if available."
'walkthroughs.description', "Description of walkthrough."
'walkthroughs.featuredFor', "Walkthroughs that match one of these glob patterns appear as 'featured' in workspaces with the specified files. For example, a walkthrough for TypeScript projects might specify `tsconfig.json` here."
'walkthroughs.when', "Context key expression to control the visibility of this walkthrough."
'walkthroughs.steps', "Steps to complete as part of this walkthrough."
'walkthroughs.steps.id', "Unique identifier for this step. This is used to keep track of which steps have been completed."
'walkthroughs.steps.title', "Title of step."
'walkthroughs.steps.description.interpolated', "Description of step. Supports ``preformatted``, __italic__, and **bold** text. Use markdown-style links for commands or external links: {0}, {1}, or {2}. Links on their own line will be rendered as buttons.", `[${titleTranslated}](command:myext.command)`, `[${titleTranslated}](command:toSide:myext.command)`, `[${titleTranslated}](https://aka.ms)`
'walkthroughs.steps.button.deprecated.interpolated', "Deprecated. Use markdown links in the description instead, i.e. {0}, {1}, or {2}", `[${titleTranslated}](command:myext.command)`, `[${titleTranslated}](command:toSide:myext.command)`, `[${titleTranslated}](https://aka.ms)`
'walkthroughs.steps.media', "Media to show alongside this step, either an image or markdown content."
'pathDeprecated', "Deprecated. Please use `image` or `markdown` instead"
'walkthroughs.steps.media.image.path.string', "Path to an image - or object consisting of paths to light, dark, and hc images - relative to extension directory. Depending on context, the image will be displayed from 400px to 800px wide, with similar bounds on height. To support HIDPI displays, the image will be rendered at 1.5x scaling, for example a 900 physical pixels wide image will be displayed as 600 logical pixels wide."
'walkthroughs.steps.media.image.path.dark.string', "Path to the image for dark themes, relative to extension directory."
'walkthroughs.steps.media.image.path.light.string', "Path to the image for light themes, relative to extension directory."
'walkthroughs.steps.media.image.path.hc.string', "Path to the image for hc themes, relative to extension directory."
'walkthroughs.steps.media.image.path.hcLight.string', "Path to the image for hc light themes, relative to extension directory."
'walkthroughs.steps.media.altText', "Alternate text to display when the image cannot be loaded or in screen readers."
'walkthroughs.steps.media.image.path.svg', "Path to an svg, color tokens are supported in variables to support theming to match the workbench."
'walkthroughs.steps.media.altText', "Alternate text to display when the image cannot be loaded or in screen readers."
'pathDeprecated', "Deprecated. Please use `image` or `markdown` instead"
'walkthroughs.steps.media.markdown.path', "Path to the markdown document, relative to extension directory."
'walkthroughs.steps.completionEvents', "Events that should trigger this step to become checked off. If empty or not defined, the step will check off when any of the step's buttons or links are clicked; if the step has no buttons or links it will check on when it is selected."
'walkthroughs.steps.completionEvents.onCommand', 'Check off step when a given command is executed anywhere in VS Code.'
'walkthroughs.steps.completionEvents.onLink', 'Check off step when a given link is opened via a walkthrough step.'
'walkthroughs.steps.completionEvents.onView', 'Check off step when a given view is opened'
'walkthroughs.steps.completionEvents.onSettingChanged', 'Check off step when a given setting is changed'
'walkthroughs.steps.completionEvents.onContext', 'Check off step when a context key expression is true.'
'walkthroughs.steps.completionEvents.extensionInstalled', 'Check off step when an extension with the given id is installed. If the extension is already installed, the step will start off checked.'
'walkthroughs.steps.completionEvents.stepSelected', 'Check off step as soon as it is selected.'
'walkthroughs.steps.doneOn', "Signal to mark step as complete."
'walkthroughs.steps.doneOn.deprecation', "doneOn is deprecated. By default steps will be checked off when their buttons are clicked, to configure further use completionEvents"
'walkthroughs.steps.oneOn.command', "Mark step done when the specified command is executed."
'walkthroughs.steps.when', "Context key expression to control the visibility of this step."
'welcomePage.background', 'Background color for the Welcome page.')
'welcomePage.tileBackground', 'Background color for the tiles on the Get Started page.')
'welcomePage.tileHoverBackground', 'Hover background color for the tiles on the Get Started.')
'welcomePage.tileShadow', 'Shadow color for the Welcome page walkthrough category buttons.')
'welcomePage.progress.background', 'Foreground color for the Welcome page progress bars.')
'welcomePage.progress.foreground', 'Background color for the Welcome page progress bars.')
'miGetStarted', "Get Started"
'getStarted', "Get Started"
'getStarted', "Get Started"
'welcome.goBack', "Go Back"
'welcome.markStepComplete', "Mark Step Complete"
'welcome.markStepInomplete', "Mark Step Incomplete"
'welcome.showAllWalkthroughs', "Open Walkthrough..."
'pickWalkthroughs', 'Select a walkthrough to open'
'workspacePlatform', "The platform of the current workspace, which in remote or serverless contexts may be different from the platform of the UI")
'workbench.welcomePage.walkthroughs.openOnInstall', "When enabled, an extension's walkthrough will open upon install of the extension."
'workbench.welcomePage.videoTutorials', "When enabled, the get started page has additional links to video tutorials."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.none' }, "Start without an editor."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.welcomePage' }, "Open the Welcome page, with content to aid in getting started with VS Code and extensions."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.readme' }, "Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.newUntitledFile' }, "Open a new untitled file (only applies when opening an empty window)."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.welcomePageInEmptyWorkbench' }, "Open the Welcome page when opening an empty workbench."
'workbench.startupEditor', "Controls which editor is shown at startup, if none are restored from the previous session."
'deprecationMessage', "Deprecated, use the global `workbench.reduceMotion`."
'workbench.welcomePage.preferReducedMotion', "When enabled, reduce motion in welcome page."
'welcomeOverlay.explorer', "File explorer"
'welcomeOverlay.search', "Search across files"
'welcomeOverlay.git', "Source code management"
'welcomeOverlay.debug', "Launch and debug"
'welcomeOverlay.extensions', "Manage extensions"
'welcomeOverlay.watermark', "Command Hints"
'welcomeOverlay.problems', "View errors and warnings"
'welcomeOverlay.terminal', "Toggle integrated terminal"
'welcomeOverlay.openfile', "File Properties"
'welcomeOverlay.commandPalette', "Find and run all commands"
'welcomeOverlay.notifications', "Show notifications"
'welcomeOverlay', "User Interface Overview"
'hideWelcomeOverlay', "Hide Interface Overview"
'openToolsLabel', "Open Webview Developer Tools"
'iframeWebviewAlert', "Using standard dev tools to debug iframe based webview")
'editor.action.webvieweditor.showFind', "Show find"
'editor.action.webvieweditor.hideFind', "Stop find"
'editor.action.webvieweditor.findNext', 'Find next'
'editor.action.webvieweditor.findPrevious', 'Find previous'
'refreshWebviewLabel', "Reload Webviews"
'fatalErrorMessage', "Error loading webview: {0}", e.message)
'webview.editor.label', "webview editor")
'save profile as', "Create from Current Profile..."
'name', "Profile name"
'save profile as', "Create from Current Profile..."
'profileExists', "Profile with name {0} already exists.", value
'create empty profile', "Create an Empty Profile..."
'name', "Profile name"
'create and enter empty profile', "Create an Empty Profile..."
'profileExists', "Profile with name {0} already exists.", value
'create profile', "Create..."
'create profile title', "{0}: Create...", PROFILES_CATEGORY.value) }
'create temporary profile', "Create a Temporary Profile"
'rename profile', "Rename..."
'select profile to rename', 'Rename {0}', profile.name
'profileExists', "Profile with name {0} already exists.", value
'current', "Current"
'rename specific profile', "Rename Profile..."
'pick profile to rename', "Select Profile to Rename"
'delete profile', "Delete..."
'current', "Current"
'delete specific profile', "Delete Profile..."
'pick profile to delete', "Select Profiles to Delete"
'mange', "Manage..."
'switch profile', "Switch..."
'pick profile', "Select Profile") }
'cleanup profile', "Cleanup Profiles"
'reset workspaces', "Reset Workspace Profiles Associations"
'remotes', 'Switch Remote') }
'remote.explorer.switch', "Switch Remote"
'watermark.showCommands', "Show All Commands"
'watermark.quickAccess', "Go to File"
'watermark.openFile', "Open File"
'watermark.openFolder', "Open Folder"
'watermark.openFileFolder', "Open File or Folder"
'watermark.openRecent', "Open Recent"
'watermark.newUntitledFile', "New Untitled File"
'watermark.findInFiles', "Find in Files"
{ key: 'watermark.toggleTerminal', comment: ['toggle is a verb here'] }, "Toggle Terminal"
'watermark.startDebugging', "Start Debugging"
{ key: 'watermark.toggleFullscreen', comment: ['toggle is a verb here'] }, "Toggle Full Screen"), id: 'workbench.action.toggleFullScreen', when: TerminalContextKeys.processSupported.toNegated(
'watermark.showSettings', "Show Settings"), id: 'workbench.action.openSettings', when: TerminalContextKeys.processSupported.toNegated(
'tips.enabled', "When enabled, will show the watermark tips when no editor is open."
'Open Backup folder', "Open Local Backups Folder"
'no backups', "Local backups folder does not exist")
'cut', "Cut"
'copy', "Copy"
'paste', "Paste"
'conflicts', "Conflicts"
'synced machines', "Synced Machines"
'workbench.actions.sync.editMachineName', "Edit Name"
'workbench.actions.sync.turnOffSyncOnMachine', "Turn off Settings Sync"
'local sync activity title', "Sync Activity (Local)"
'workbench.actions.sync.resolveResourceRef', "Show raw JSON sync data"
'workbench.actions.sync.compareWithLocal', "Compare with Local"
{ key: 'rightResourceName', comment: ['local as in file in disk'] }, "{0} (Local)", basename(localResource))
'workbench.actions.sync.replaceCurrent', "Restore"
{ key: 'confirm replace', comment: ['A confirmation message to replace current user data (settings, extensions, keybindings, snippets) with selected version'] }, "Would you like to replace your current {0} with selected?", getSyncAreaLabel(syncResource)
'troubleshoot', "Troubleshoot"
'reset', "Reset Synced Data"), undefined, true, () => this.userDataSyncWorkbenchService.resetSyncedData()
'sideBySideLabels', "{0} ↔ {1}", `${basename(resource)} (${fromNow(syncResourceHandle.previous!.created, true)})`, `${basename(resource)} (${fromNow(syncResourceHandle.created, true)})`
{ key: 'current', comment: ['Represents current machine'] }, "Current"
'no machines', "No Machines"
{ key: 'current', comment: ['Current machine'] }, "Current"
'not found', "machine not found with id: {0}", machineIds.join(','))
'turn off sync on multiple machines', "Are you sure you want to turn off sync on selected machines?"
'turn off sync on machine', "Are you sure you want to turn off sync on {0}?", machinesToDisable[0].name
{ key: 'turn off', comment: ['&& denotes a mnemonic'] }, "&&Turn off"
'placeholder', "Enter the name of the machine"
'not found', "machine not found with id: {0}", machineId)
'valid message', "Machine name should be unique and not empty"))
'sync logs', "Logs"
'last sync states', "Last Synced Remotes"
{ key: 'current', comment: ['Represents current log file'] }, "Current"
{ key: 'local too many requests - reload', comment: ['Settings Sync is the name of the feature'] }, "Settings sync is suspended temporarily because the current device is making too many requests. Please reload {0} to resume.", this.productService.nameLong
{ key: 'local too many requests - restart', comment: ['Settings Sync is the name of the feature'] }, "Settings sync is suspended temporarily because the current device is making too many requests. Please restart {0} to resume.", this.productService.nameLong
'show sync logs', "Show Log"), undefined, true, () => this.commandService.executeCommand(SHOW_SYNC_LOG_COMMAND_ID)
'restart', "Restart"), undefined, true, () => this.hostService.restart()
'operationId', "Operation Id: {0}", error.operationId
{ key: 'server too many requests', comment: ['Settings Sync is the name of the feature'] }, "Settings sync is disabled because the current device is making too many requests. Please wait for 10 minutes and turn on sync."
'settings sync', "Settings Sync. Operation Id: {0}", error.operationId
'show sync logs', "Show Log"), undefined, true, () => this.commandService.executeCommand(SHOW_SYNC_LOG_COMMAND_ID)
src/vs/workbench/contrib/url/browser/trustedDomainsValidator.ts:				localize(
'open', 'Open'
'copy', 'Copy'
'cancel', 'Cancel'
'configureTrustedDomains', 'Configure Trusted Domains'
'trustedDomain.manageTrustedDomain', 'Manage Trusted Domains'
'trustedDomain.trustDomain', 'Trust {0}', domainToConfigure
'trustedDomain.trustAllPorts', 'Trust {0} on all ports', base
'trustedDomain.trustSubDomain', 'Trust {0} and all its subdomains', domainEnd
'trustedDomain.trustAllDomains', 'Trust all domains (disables link protection)'
'trustedDomain.manageTrustedDomains', 'Manage Trusted Domains'
'turn on sync with category', "{0}: Turn On...", SYNC_TITLE
'stop sync', "{0}: Turn Off", SYNC_TITLE
'configure sync', "{0}: Configure...", SYNC_TITLE
'showConflicts', "{0}: Show Conflicts", SYNC_TITLE
'sync now', "{0}: Sync Now", SYNC_TITLE
'syncing', "syncing"
'synced with time', "synced {0}", fromNow(userDataSyncService.lastSyncTime, true)
'sync settings', "{0}: Show Settings", SYNC_TITLE
'show synced data', "{0}: Show Synced Data", SYNC_TITLE
'conflicts detected', "Unable to sync due to conflicts in {0}. Please resolve them to continue.", conflictsArea.toLowerCase()
'replace remote', "Replace Remote"
'replace local', "Replace Local"
'show conflicts', "Show Conflicts"
'accept failed', "Error while accepting changes. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`)
'accept failed', "Error while accepting changes. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`)
'session expired', "Settings sync was turned off because current session is expired, please sign in again to turn on sync."
'turn on sync', "Turn on Settings Sync..."), undefined, true, () => this.turnOn()
'turned off', "Settings sync was turned off from another device, please turn on sync again."
'turn on sync', "Turn on Settings Sync..."), undefined, true, () => this.turnOn()
'too large', "Disabled syncing {0} because size of the {1} file to sync is larger than {2}. Please open the file and reduce the size and enable sync", sourceArea.toLowerCase(), sourceArea.toLowerCase(), '100kb'), error
'error upgrade required', "Settings sync is disabled because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.", this.productService.version, this.productService.commit
'operationId', "Operation Id: {0}", error.operationId
'error reset required', "Settings sync is disabled because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync."
'reset', "Clear Data in Cloud..."), undefined, true, () => this.userDataSyncWorkbenchService.resetSyncedData()
'show synced data action', "Show Synced Data"), undefined, true, () => this.userDataSyncWorkbenchService.showSyncActivity()
'service switched to insiders', "Settings Sync has been switched to insiders service"
'service switched to stable', "Settings Sync has been switched to stable service"
'using separate service', "Settings sync now uses a separate service, more information is available in the [Settings Sync Documentation](https://aka.ms/vscode-settings-sync-help#_syncing-stable-versus-insiders)."
'service changed and turned off', "Settings sync was turned off because {0} now uses a separate service. Please turn on sync again.", this.productService.nameLong
'turn on sync', "Turn on Settings Sync..."), undefined, true, () => this.turnOn()
'operationId', "Operation Id: {0}", error.operationId
'open file', "Open {0} File", getSyncAreaLabel(resource)
'errorInvalidConfiguration', "Unable to sync {0} because the content in the file is not valid. Please open the file and correct it.", errorArea.toLowerCase()
'open file', "Open {0} File", errorArea
'has conflicts', "{0}: Conflicts Detected", SYNC_TITLE)
'turning on syncing', "Turning on Settings Sync...")
'sign in to sync', "Sign in to Sync Settings")
'no authentication providers', "No authentication providers are available.")
'too large while starting sync', "Settings sync cannot be turned on because size of the {0} file to sync is larger than {1}. Please open the file and reduce the size and turn on sync", getSyncAreaLabel(e.resource).toLowerCase(), '100kb'), e
'error upgrade required while starting sync', "Settings sync cannot be turned on because the current version ({0}, {1}) is not compatible with the sync service. Please update before turning on sync.", this.productService.version, this.productService.commit
'operationId', "Operation Id: {0}", e.operationId
'error reset required while starting sync', "Settings sync cannot be turned on because your data in the cloud is older than that of the client. Please clear your data in the cloud before turning on sync."
'reset', "Clear Data in Cloud..."), undefined, true, () => this.userDataSyncWorkbenchService.resetSyncedData()
'show synced data action', "Show Synced Data"), undefined, true, () => this.userDataSyncWorkbenchService.showSyncActivity()
'auth failed', "Error while turning on Settings Sync: Authentication failed.")
'turn on failed with user data sync error', "Error while turning on Settings Sync. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`)
{ key: 'turn on failed', comment: ['Substitution is for error reason'] }, "Error while turning on Settings Sync. {0}", getErrorMessage(e))
'sign in and turn on', "Sign in & Turn on"
'configure and turn on sync detail', "Please sign in to synchronize your data across devices."
'per platform', "for each platform"
'configure sync', "{0}: Configure...", SYNC_TITLE
'configure sync placeholder', "Choose what to sync"
'turn off sync confirmation', "Do you want to turn off sync?"
'turn off sync detail', "Your settings, keybindings, extensions, snippets and UI State will no longer be synced."
{ key: 'turn off', comment: ['&& denotes a mnemonic'] }, "&&Turn off"
'turn off sync everywhere', "Turn off sync on all your devices and clear the data from the cloud."
'switchSyncService.title', "{0}: Select Service", SYNC_TITLE
'switchSyncService.description', "Ensure you are using the same settings sync service when syncing with multiple environments"
'default', "Default"
'insiders', "Insiders"
'stable', "Stable"
'global activity turn on sync', "Turn on Settings Sync..."
'global activity turn on sync', "Turn on Settings Sync..."
'global activity turn on sync', "Turn on Settings Sync..."
'turnin on sync', "Turning on Settings Sync..."
'cancel turning on sync', "Cancel"
'sign in global', "Sign in to Sync Settings"
'sign in accounts', "Sign in to Sync Settings (1)"
'resolveConflicts_global', "{0}: Show Conflicts ({1})", SYNC_TITLE, this.getConflictsCount()
'sync is on', "Settings Sync is On"
'workbench.action.showSyncRemoteBackup', "Show Synced Data"
'turn off failed', "Error while turning off Settings Sync. Please check [logs]({0}) for more details.", `command:${SHOW_SYNC_LOG_COMMAND_ID}`)
'configure', "Configure..."
'show sync log title', "{0}: Show Log", SYNC_TITLE
'show sync log toolrip', "Show Log"
'complete merges title', "Complete Merge"
'workbench.actions.syncData.reset', "Clear Data in Cloud..."
'openUrl', "Open URL"
'urlToOpen', "URL to open") }
'workbench.trustedDomains.promptInTrustedWorkspace', "When enabled, trusted domain prompts will appear when opening links in trusted workspaces."
'show view', "Show {0}", localizedTitle
'toggle view', "Toggle {0}", localizedTitle
'show view', "Show {0}", localizedTitle
'toggle view', "Toggle {0}", localizedTitle
{ key: 'focus view', comment: ['{0} indicates the name of the view to be focused.'] }, "Focus on {0} View", viewDescriptor.name
'resetViewLocation', "Reset Location"
'viewPaneContainerExpandedIcon', 'Icon for an expanded view pane container.')
'viewPaneContainerCollapsedIcon', 'Icon for a collapsed view pane container.')
'viewToolbarAriaLabel', "{0} actions", this.title
'context.activeWebviewId', "The viewType of the currently active webview panel."
'explanation', "Please go through each entry and merge to resolve conflicts."
{ key: 'workbench.actions.sync.openConflicts', comment: ['This is an action title to show the conflicts between local and remote version of resources'] }, "Show Conflicts"
'workbench.actions.sync.acceptRemote', "Accept Remote"
'workbench.actions.sync.acceptLocal', "Accept Local"
{ key: 'remoteResourceName', comment: ['remote as in file in cloud'] }, "{0} (Remote)", basename(conflictToOpen.remoteResource)
'localResourceName', "{0} (Local)", basename(conflictToOpen.remoteResource)
'Theirs', 'Theirs'
'Yours', 'Yours'
{ key: 'leftResourceName', comment: ['remote as in file in cloud'] }, "{0} (Remote)", basename(leftResource)
{ key: 'rightResourceName', comment: ['local as in file in disk'] }, "{0} (Local)", basename(rightResource)
'sideBySideLabels', "{0} ↔ {1}", leftResourceName, rightResourceName
'sideBySideDescription', "Settings Sync"
'accept remote', "Accept Remote"
'accept local', "Accept Local"
'unchecked', 'Unchecked'
'workbench.experimental.profiles.enabled', "Controls whether to enable the Profiles preview feature."
'manageProfiles', "{0} ({1})", PROFILES_TTILE.value, that.userDataProfileService.currentProfile.name
'manageProfiles', "{0} ({1})", PROFILES_TTILE.value, that.userDataProfileService.currentProfile.name
'change short name profile', "Change Short Name ({0})...", themeIcon?.id ?? shortName
'change short name', "Change Short Name..."
'invalid codicon', "Invalid codicon. Please use a valid codicon id."
'invalid short name', "Short name should be at most 2 characters long."
'rename profile', "Rename ({0})...", that.userDataProfileService.currentProfile.name
'export profile', "Export ({0})...", that.userDataProfileService.currentProfile.name
'export profile dialog', "Save Profile"
'export success', "{0}: Exported successfully.", PROFILES_CATEGORY.value)
'export profile in share', "Export Profile ({0})...", that.userDataProfileService.currentProfile.name
'import profile', "Import..."
'import profile title', "Import Settings from a Profile"
'confiirmation message', "This will replace your current settings. Are you sure you want to continue?"
'import from file', "Import from profile file"
'import from url', "Import from URL"
'import profile quick pick title', "Import Settings from a Profile"
'import profile placeholder', "Provide profile URL or select profile file to import"
'import profile dialog', "Import Profile"
'import profile share', "Import Profile...",
'more filters', "More Filters..."
'no-dataprovider', "There is no data provider registered that can provide view data."
'treeView.enableCollapseAll', "Whether the the tree view with id {0} enables collapse all.", this.id)
'treeView.enableRefresh', "Whether the tree view with id {0} enables refresh.", this.id)
'refresh', "Refresh"
'collapseAll', "Collapse All"
'treeView.toggleCollapseAll', "Whether collapse all is toggled for the tree view with id {0}.", this.id)
'command-error', 'Error running command {1}: {0}. This is likely caused by the extension that contributes {1}.', e.error.message, e.action.id)
'hide', "Hide '{0}'", name), undefined, true
'focusStatusBar', "Focus Status Bar"
'userIsSudo', "[Superuser]"
'devExtensionWindowTitlePrefix', "[Extension Development Host]"
'focusTitleBar', "Focus Title Bar"
'toggle.commandCenter', 'Command Center'), 1
'toggle.layout', 'Layout Controls'), 2
'hideStatusBar', "Hide Status Bar"), run: () => this.instantiationService.invokeFunction(accessor => new ToggleStatusbarVisibilityAction().run(accessor)) })
'statusbar.hidden', "Status bar entries visibility customizations"
'testConfigurationTitle', "Testing"
'testing.autoRun.mode', "Controls which tests are automatically run."
'testing.autoRun.mode.allInWorkspace', "Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed."
'testing.autoRun.mode.onlyPreviouslyRun', "Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed."
'testing.autoRun.delay', "How long to wait, in milliseconds, after a test is marked as outdated and starting a new run."
'testing.automaticallyOpenPeekView', "Configures when the error peek view is automatically opened."
'testing.automaticallyOpenPeekView.failureAnywhere', "Open automatically no matter where the failure is."
'testing.automaticallyOpenPeekView.failureInVisibleDocument', "Open automatically when a test fails in a visible document."
'testing.automaticallyOpenPeekView.never', "Never automatically open."
'testing.automaticallyOpenPeekViewDuringAutoRun', "Controls whether to automatically open the peek view during auto-run mode."
'testing.followRunningTest', 'Controls whether the running test should be followed in the test explorer view'
'testing.defaultGutterClickAction', 'Controls the action to take when left-clicking on a test decoration in the gutter.'
'testing.defaultGutterClickAction.run', 'Run the test.'
'testing.defaultGutterClickAction.debug', 'Debug the test.'
'testing.defaultGutterClickAction.contextMenu', 'Open the context menu for more options.'
'testing.gutterEnabled', 'Controls whether test decorations are shown in the editor gutter.'
'testing.saveBeforeTest', 'Control whether save all dirty editors before running a test.'
'testing.openTesting.neverOpen', 'Never automatically open the testing view'
'testing.openTesting.openOnTestStart', 'Open the testing view when tests start'
'testing.openTesting.openOnTestFailure', 'Open the testing view on any test failure'
'testing.openTesting', "Controls when the testing view should open."
'testing.alwaysRevealTestOnStateChange', "Always reveal the executed test when `#testing.followRunningTest#` is on. If this setting is turned off, only failed tests will be revealed."
'testTrust', "Running tests may execute code in your workspace."
'testError', 'An error occurred attempting to run tests: {0}', errs.join(' '))
'testing.canRefresh', 'Indicates whether any test controller has an attached refresh handler.') }
'testing.isRefreshing', 'Indicates whether any test controller is currently refreshing tests.') }
'testing.hasDebuggableTests', 'Indicates whether any test controller has registered a debug configuration') }
'testing.hasRunnableTests', 'Indicates whether any test controller has registered a run configuration') }
'testing.hasCoverableTests', 'Indicates whether any test controller has registered a coverage configuration') }
'testing.hasNonDefaultConfig', 'Indicates whether any test controller has registered a non-default configuration') }
'testing.hasConfigurableConfig', 'Indicates whether any test configuration can be configured') }
'testing.peekItemType', 'Type of the item in the output peek view. Either a "test", "message", "task", or "result".'
'testing.controllerId', 'Controller ID of the current test item'
'testing.testId', 'ID of the current test item, set when creating or opening menus on test items'
'testing.testItemHasUri', 'Boolean indicating whether the test item has a URI defined'
'testing.testItemIsHidden', 'Boolean indicating whether the test item is hidden'
{ key: 'mFile', comment: ['&& denotes a mnemonic'] }, "&&File"
{ key: 'mEdit', comment: ['&& denotes a mnemonic'] }, "&&Edit"
{ key: 'mSelection', comment: ['&& denotes a mnemonic'] }, "&&Selection"
{ key: 'mView', comment: ['&& denotes a mnemonic'] }, "&&View"
{ key: 'mGoto', comment: ['&& denotes a mnemonic'] }, "&&Go"
{ key: 'mTerminal', comment: ['&& denotes a mnemonic'] }, "&&Terminal"
{ key: 'mHelp', comment: ['&& denotes a mnemonic'] }, "&&Help"
'mPreferences', "Preferences"
'menubar.customTitlebarAccessibilityNotification', "Accessibility support is enabled for you. For the most accessible experience, we recommend the custom title bar style."
'goToSetting', "Open Settings"
'focusMenu', "Focus Application Menu"
{ key: 'checkForUpdates', comment: ['&& denotes a mnemonic'] }, "Check for &&Updates..."), undefined, true, (
'checkingForUpdates', "Checking for Updates..."), undefined, false
{ key: 'download now', comment: ['&& denotes a mnemonic'] }, "D&&ownload Update"), undefined, true, (
'DownloadingUpdate', "Downloading Update..."), undefined, false
{ key: 'installUpdate...', comment: ['&& denotes a mnemonic'] }, "Install &&Update..."), undefined, true, (
'installingUpdate', "Installing Update..."), undefined, false
{ key: 'restartToUpdate', comment: ['&& denotes a mnemonic'] }, "Restart to &&Update"), undefined, true, (
'views', "Views"
'viewMoveUp', "Move View Up"
'viewMoveLeft', "Move View Left"
'viewMoveDown', "Move View Down"
'viewMoveRight', "Move View Right"
'viewsMove', "Move Views"
'runFinished', 'Test run at {0}', new Date().toLocaleString()
'testState.errored', 'Errored'
'testState.failed', 'Failed'
'testState.passed', 'Passed'
'testState.queued', 'Queued'
'testState.running', 'Running'
'testState.skipped', 'Skipped'
'testState.unset', 'Not yet run'
src/vs/workbench/contrib/testing/common/constants.ts:export const labelForTestInState = (label: string, state: TestResultState) => localize({
'testGroup.debug', 'Debug'
'testGroup.run', 'Run'
'testGroup.coverage', 'Coverage'
'manageExtensionIcon', 'Icon for the \'Manage\' action in the theme selection quick pick.')
'themes.selectMarketplaceTheme', "Type to Search More. Select to Install. Up/Down Keys to Preview"
'installing extensions', "Installing Extension {0}...", galleryExtension.displayName
'selectTheme.label', "Color Theme"
'installColorThemes', "Install Additional Color Themes..."
'browseColorThemes', "Browse Additional Color Themes..."
'themes.selectTheme', "Select Color Theme (Up/Down Keys to Preview)"
'themes.category.light', "light themes")
'themes.category.dark', "dark themes")
'themes.category.hc', "high contrast themes")
'selectIconTheme.label', "File Icon Theme"
'installIconThemes', "Install Additional File Icon Themes..."
'themes.selectIconTheme', "Select File Icon Theme (Up/Down Keys to Preview)"
'fileIconThemeCategory', 'file icon themes'
'noIconThemeDesc', 'Disable File Icons'
'selectProductIconTheme.label', "Product Icon Theme"
'installProductIconThemes', "Install Additional Product Icon Themes..."
'browseProductIconThemes', "Browse Additional Product Icon Themes..."
'themes.selectProductIconTheme', "Select Product Icon Theme (Up/Down Keys to Preview)"
'productIconThemeCategory', 'product icon themes'
'defaultProductIconThemeLabel', 'Default'
'manage extension', "Manage Extension"
'generateColorTheme.label', "Generate Color Theme From Current Settings"
'toggleLightDarkThemes.label', "Toggle between Light/Dark Themes"
{ key: 'miSelectColorTheme', comment: ['&& denotes a mnemonic'] }, "&&Color Theme"
{ key: 'miSelectIconTheme', comment: ['&& denotes a mnemonic'] }, "File &&Icon Theme"
{ key: 'miSelectProductIconTheme', comment: ['&& denotes a mnemonic'] }, "&&Product Icon Theme"
'selectTheme.label', "Color Theme"
'themes.selectIconTheme.label', "File Icon Theme"
'themes.selectProductIconTheme.label', "Product Icon Theme"
'label.dfl', "Search"
'label1', "{0} {1}", prefix, label
'label2', "{0} {1}", label, suffix
'title', "Search {0} ({1}) \u2014 {2}", windowTitle.workspaceName, kb, windowTitle.value
'title2', "Search {0} \u2014 {1}", windowTitle.workspaceName, windowTitle.value
'commandCenter-foreground', "Foreground color of the command center"
'commandCenter-activeForeground', "Active foreground color of the command center"
'commandCenter-inactiveForeground', "Foreground color of the command center when the window is inactive"
'commandCenter-background', "Background color of the command center"
'commandCenter-activeBackground', "Active background color of the command center"
'commandCenter-border', "Border color of the command center"
'commandCenter-activeBorder', "Active border color of the command center"
'commandCenter-inactiveBorder', "Border color of the command center when the window is inactive"
'workbench.action.terminal.newLocal', "Create New Integrated Terminal (Local)"), original: 'Create New Integrated Terminal (Local
'testProgress.runningInitial', 'Running tests...'
'testProgress.running', 'Running tests, {0}/{1} passed ({2}%)', passed, totalWillBeRun, percent.toPrecision(3)
'testProgressWithSkip.running', 'Running tests, {0}/{1} tests passed ({2}%, {3} skipped)', passed, totalWillBeRun, percent.toPrecision(3), skipped
'testProgress.completed', '{0}/{1} tests passed ({2}%)', passed, runSoFar, percent.toPrecision(3)
'testProgressWithSkip.completed', '{0}/{1} tests passed ({2}%, {3} skipped)', passed, runSoFar, percent.toPrecision(3), skipped
'testOutputTerminalTitleWithDate', 'Test Output at {0}', friendlyDate(result.completedAt ?? Date.now())
'testOutputTerminalTitle', 'Test Output'
'testNoRunYet', '\r\nNo tests have been run, yet.\r\n'))
'runNoOutout', 'The test run did not record any output.')}\x1b[0m`
'runFinished', 'Test run finished at {0}', completedAt.toLocaleString()
'terminal', "Terminal"
'terminal.new', "New Terminal"
'doNotShowAgain', 'Do Not Show Again'
'currentSessionCategory', 'current session'
'previousSessionCategory', 'previous session'
'workbench.action.terminal.focus', "Focus Terminal"
'killTerminal', "Kill Terminal"
'killTerminal.short', "Kill"
'moveToEditor', "Move Terminal into Editor Area"
'workbench.action.terminal.moveToTerminalPanel', "Move Terminal into Panel"
'workbench.action.terminal.changeIcon', "Change Icon..."
'workbench.action.terminal.changeColor', "Change Color..."
'splitTerminal', "Split Terminal"
'splitTerminal.short', "Split"
'unsplitTerminal', "Unsplit Terminal"
'workbench.action.terminal.rename', "Rename..."
'workbench.action.terminal.sizeToContentWidthInstance', "Toggle Size to Content Width"
'testConfigurationUi.pick', 'Pick a test profile to use'
'updateTestConfiguration', 'Update Test Configuration'
'terminal.integrated.a11yPromptLabel', 'Terminal input'
'terminal.integrated.a11yTooMuchOutput', 'Too much output to announce, navigate to rows manually to read'
'terminalTypeTask', "Task"
'terminalTypeLocal', "Local"
'bellStatus', "Bell"
'keybindingHandling', "Some keybindings don't go to the terminal by default and are handled by {0} instead.", this._productService.nameLong
'configureTerminalSettings', "Configure Terminal Settings"
'terminal.integrated.copySelection.noSelection', 'The terminal has no selection to copy')
'preview', "Preview:"
'confirmMoveTrashMessageFilesAndDirectories', "Are you sure you want to paste {0} lines of text into the terminal?", textForLines.length
{ key: 'multiLinePasteButton', comment: ['&& denotes a mnemonic'] }, "&&Paste"
'doNotAskAgain', "Do not ask me again"
'disconnectStatus', "Lost connection to process"
'workspaceNotTrustedCreateTerminal', "Cannot launch a terminal process in an untrusted workspace") }
'workspaceNotTrustedCreateTerminalCwd', "Cannot launch a terminal process in an untrusted workspace with cwd {0} and userHome {1}", this._cwd, this._userHome
'launchFailed.exitCodeOnlyShellIntegration', 'Disabling shell integration in user settings might help.'
'shellIntegration.learnMore', "Learn more about shell integration"
'shellIntegration.openSettings', "Open user settings"
'terminal.requestTrust', "Creating a terminal process requires executing code"
'terminalTextBoxAriaLabelNumberAndTitle', "Terminal {0}, {1}", terminalId, title
'terminalTextBoxAriaLabel', "Terminal {0}", terminalId
'terminalNavigationMode', "Use {0} and {1} to navigate the terminal buffer", navigateUpKeybinding, navigateDownKeybinding
'setTerminalDimensionsColumn', "Set Fixed Dimensions: Column"
'setTerminalDimensionsRow', "Set Fixed Dimensions: Row"
'terminalStaleTextBoxAriaLabel', "Terminal {0} environment is stale, run the 'Show Environment Information' command for more information", this._instanceId)
'launchFailed.exitCodeAndCommandLine', "The terminal process \"{0}\" failed to launch (exit code: {1}).", commandLine, code
'launchFailed.exitCodeOnly', "The terminal process failed to launch (exit code: {0}).", code
'terminated.exitCodeAndCommandLine', "The terminal process \"{0}\" terminated with exit code: {1}.", commandLine, code
'terminated.exitCodeOnly', "The terminal process terminated with exit code: {0}.", code
'launchFailed.errorMessage', "The terminal process failed to launch: {0}.", innerMessage
'testing', "Testing"
'terminal.useMonospace', "Use 'monospace'"
'terminal.monospaceOnly', "The terminal only supports monospace fonts. Be sure to restart VS Code if this is a newly installed font."), choices
'terminals', 'Open Terminals.'), optionsAsChildren: true }
'terminalConnectingLabel', "Starting..."
'terminalViewIcon', 'View icon of the terminal view.')
'renameTerminalIcon', 'Icon for rename in the terminal quick menu.')
'killTerminalIcon', 'Icon for killing a terminal instance.')
'newTerminalIcon', 'Icon for creating a new terminal instance.')
'configureTerminalProfileIcon', 'Icon for creating a new terminal profile.')
'terminalDecorationMark', 'Icon for a terminal decoration mark.')
'terminalDecorationIncomplete', 'Icon for a terminal decoration of a command that was incomplete.')
'terminalDecorationError', 'Icon for a terminal decoration of a command that errored.')
'terminalDecorationSuccess', 'Icon for a terminal decoration of a command that was successful.')
'terminalCommandHistoryRemove', 'Icon for removing a terminal command from command history.')
'terminalCommandHistoryOutput', 'Icon for viewing output of a terminal command.')
'terminalCommandHistoryFuzzySearch', 'Icon for toggling fuzzy search of command history.')
"terminal.rerunCommand", 'Rerun Command'
"terminal.copyCommand", 'Copy Command'
"terminal.copyOutput", 'Copy Output'
"terminal.copyOutputAsHtml", 'Copy Output as HTML'
"terminal.configureCommandDecorations", 'Configure Command Decorations'
"terminal.learnShellIntegration", 'Learn About Shell Integration'
'toggleVisibility', 'Toggle visibility'
'toggleVisibility', 'Toggle visibility'
'gutter', 'Gutter command decorations'
'overviewRuler', 'Overview ruler command decorations'
'peekTestOutout', 'Peek Test Output')}](command:vscode.peekTestError?${args})`
'expected.title', 'Expected'
'actual.title', 'Actual'
'testing.gutterMsg.contextMenu', 'Click for test options'
'testing.gutterMsg.debug', 'Click to debug tests, right click for more options'
'testing.gutterMsg.run', 'Click to run tests, right click for more options'
'run test', 'Run Test'), undefined, undefined, (
'debug test', 'Debug Test'), undefined, undefined, (
'testing.runUsing', 'Execute Using Profile...'), undefined, undefined, async (
'peek failure', 'Peek Error'
'reveal test', 'Reveal in Test Explorer'
'run all test', 'Run All Tests'), undefined, undefined, () => this.defaultRun())
'debug all test', 'Debug All Tests'), undefined, undefined, () => this.defaultDebug())
'terminalInputAriaLabel', "Type terminal name. Press Enter to confirm or Escape to cancel."
'terminal.tabs', "Terminal tabs"
src/vs/workbench/contrib/terminal/browser/terminalTabsList.ts:			ariaLabel = localize({
src/vs/workbench/contrib/terminal/browser/terminalTabsList.ts:			ariaLabel = localize({
'terminalService.terminalCloseConfirmationSingular', "Do you want to terminate the active terminal session?"
'terminalService.terminalCloseConfirmationPlural', "Do you want to terminate the {0} active terminal sessions?", this.instances.length
'terminate', "Terminate"
'localTerminalVirtualWorkspace', "This shell is open to a {0}local{1} folder, NOT to the virtual folder", '\x1b[3m', '\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true }
'localTerminalRemote', "This shell is running on your {0}local{1} machine, NOT on the connected remote machine", '\x1b[3m', '\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true }
'terminalQuickFixWithKb', "Show Quick Fixes ({0})", kb.getLabel()
'quickFix.command', 'Run: {0}', quickFix.command
'quickFix.opener', 'Open: {0}', quickFix.uri.toString()
'yes', "Yes"
'no', "No"
'dontShowAgain', "Don't Show Again"
'terminal.slowRendering', 'Terminal GPU acceleration appears to be slow on your computer. Would you like to switch to disable it which may improve performance? [Read more about terminal settings](https://code.visualstudio.com/docs/editor/integrated-terminal#_changing-how-the-terminal-is-rendered).'
"workbench.action.terminal.newplus", "Create New Terminal"
"workbench.action.terminal.newWithProfilePlus", "Create New Terminal With Profile"
'renameTerminal', "Rename Terminal"
'moveTabsRight', "Move Tabs Right"), undefined, undefined, async (
'moveTabsLeft', "Move Tabs Left"), undefined, undefined, async (
'hideTabs', "Hide Tabs"), undefined, undefined, async (
'shellIntegration.enabled', "Shell integration activated"
'launchFailed.exitCodeOnlyShellIntegration', "The terminal process failed to launch. Disabling shell integration with terminal.integrated.shellIntegration.enabled might help."
'shellIntegration.activationFailed', "Shell integration failed to activate"
'testing.iconFailed', "Color for the 'failed' icon in the test explorer.")
'testing.iconErrored', "Color for the 'Errored' icon in the test explorer.")
'testing.iconPassed', "Color for the 'passed' icon in the test explorer.")
'testing.runAction', "Color for 'run' icons in the editor.")
'testing.iconQueued', "Color for the 'Queued' icon in the test explorer.")
'testing.iconUnset', "Color for the 'Unset' icon in the test explorer.")
'testing.iconSkipped', "Color for the 'Skipped' icon in the test explorer.")
'testing.peekBorder', 'Color of the peek view borders and arrow.')
'testing.peekBorder', 'Color of the peek view borders and arrow.')
'testing.message.error.decorationForeground', 'Text color of test error messages shown inline in the editor.'
'testing.message.error.marginBackground', 'Margin color beside error messages shown inline in the editor.'
'testing.message.info.decorationForeground', 'Text color of test info messages shown inline in the editor.'
'testing.message.info.marginBackground', 'Margin color beside info messages shown inline in the editor.'
'removeCommand', "Remove from Command History"
'viewCommandOutput', "View Command Output"
'selectRecentCommand', 'Select a command to run (hold Alt-key to edit the command)'
'shellFileHistoryCategory', '{0} history', instance.shellType
'selectRecentDirectoryMac', 'Select a directory to go to (hold Option-key to edit the command)'
'selectRecentDirectory', 'Select a directory to go to (hold Alt-key to edit the command)'
{ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, "&&New Terminal"
{ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, "&&Split Terminal"
{ key: 'miRunActiveFile', comment: ['&& denotes a mnemonic'] }, "Run &&Active File"
{ key: 'miRunSelectedText', comment: ['&& denotes a mnemonic'] }, "Run &&Selected Text"
'workbench.action.terminal.copySelection.short', "Copy"
'workbench.action.terminal.copySelectionAsHtml', "Copy as HTML"
'workbench.action.terminal.paste.short', "Paste"
'workbench.action.terminal.clear', "Clear"
'workbench.action.terminal.showsTabs', "Show Tabs"
'workbench.action.terminal.selectAll', "Select All"
'workbench.action.terminal.copySelection.short', "Copy"
'workbench.action.terminal.copySelectionAsHtml', "Copy as HTML"
'workbench.action.terminal.paste.short', "Paste"
'workbench.action.terminal.clear', "Clear"
'workbench.action.terminal.selectAll', "Select All"
'workbench.action.terminal.newWithProfile.short', "New Terminal With Profile"
'workbench.action.terminal.selectDefaultProfile', "Select Default Profile"
'workbench.action.terminal.openSettings', "Configure Terminal Settings"
'workbench.action.tasks.runTask', "Run Task..."
'workbench.action.tasks.configureTaskRunner', "Configure Tasks..."
'workbench.action.terminal.switchTerminal', "Switch Terminal"
'workbench.action.terminal.sizeToContentWidthInstance', "Toggle Size to Content Width"
'workbench.action.terminal.renameInstance', "Rename..."
'workbench.action.terminal.changeIcon', "Change Icon..."
'workbench.action.terminal.changeColor', "Change Color..."
'workbench.action.terminal.sizeToContentWidthInstance', "Toggle Size to Content Width"
'workbench.action.terminal.joinInstance', "Join Terminals"
'defaultTerminalProfile', "{0} (Default)", sanitizedProfileName) : sanitizedProfileName, undefined, true, async (
'defaultTerminalProfile', "{0} (Default)", sanitizedProfileName) : sanitizedProfileName, undefined, true, async (
'defaultTerminalProfile', "{0} (Default)", contributed.title.replace(/[\n\r\t]/g, '')) : contributed.title.replace(/[\n\r\t]/g, ''
'splitTerminal', 'Split Terminal'), submenuActions)
'terminalPromptContextMenu', "Show Command Actions"
'terminalPromptCommandFailed', 'Command executed {0} and failed', fromNow(command.timestamp, true)
'terminalPromptCommandFailedWithExitCode', 'Command executed {0} and failed (Exit Code {1})', fromNow(command.timestamp, true), command.exitCode
'terminalPromptCommandSuccess', 'Command executed {0}', fromNow(command.timestamp, true)
'terminalProfileMigration', "The terminal is using deprecated shell/shellArgs settings, do you want to migrate it to a profile?"
'migrateToProfile', "Migrate"
'confirmDirtyTerminal.message', "Do you want to terminate running processes?"
{ key: 'confirmDirtyTerminal.button', comment: ['&& denotes a mnemonic'] }, "&&Terminate"
'cancel', "Cancel"
'confirmDirtyTerminals.detail', "Closing will terminate the running processes in the terminals."
'confirmDirtyTerminal.detail', "Closing will terminate the running processes in this terminal."
'terminal.integrated.chooseDefaultProfile', "Select your default terminal profile"
'enterTerminalProfileName', "Enter terminal profile name"
'terminalProfileAlreadyExists', "A terminal profile already exists with that name"
'terminalProfiles', "profiles") }
'ICreateContributedTerminalProfileOptions', "contributed") }
'terminalProfiles.detected', "detected") }
'createQuickLaunchProfile', "Configure Terminal Profile"
src/vs/workbench/contrib/terminal/browser/terminalConfigHelper.ts:					nls.localize(
'install', 'Install'
'terminalFocusContextKey', "Whether the terminal is focused.")
'terminalEditorFocusContextKey', "Whether a terminal in the editor area is focused.")
'terminalCountContextKey', "The current number of terminals.")
'terminalTabsFocusContextKey', "Whether the terminal tabs widget is focused.")
'terminalShellTypeContextKey', "The shell type of the active terminal, this is set to the last known value when no terminals exist.") }
'terminalAltBufferActive', "Whether the terminal's alt buffer is active.")
'terminalViewShowing', "Whether the terminal view is showing")
'terminalTextSelectedContextKey', "Whether text is selected in the active terminal.")
'terminalProcessSupportedContextKey', "Whether terminal processes can be launched in the current workspace.")
'terminalTabsSingularSelectedContextKey', "Whether one terminal is selected in the terminal tabs list.")
'isSplitTerminalContextKey', "Whether the focused tab's terminal is a split terminal.")
'inTerminalRunCommandPickerContextKey', "Whether the terminal run command picker is currently open.")
'terminalShellIntegrationEnabled', "Whether shell integration is enabled in the active terminal")
'tasksQuickAccessPlaceholder', "Type the name of a terminal to open."
'tasksQuickAccessHelp', "Show All Opened Terminals"
'terminal', "Terminal"
'terminal', "Terminal"
{ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, "&&Terminal"
'showTerminalTabs', "Show Tabs"
'workbench.action.terminal.newWorkspacePlaceholder', "Select current working directory for new terminal"
'terminalLaunchHelp', "Open Help")
'workbench.action.terminal.newInActiveWorkspace', "Create New Terminal (In Active Workspace)"), original: 'Create New Terminal (In Active Workspace
'workbench.action.terminal.quickFix', "Quick Fix"
'workbench.action.terminal.createTerminalEditor', "Create New Terminal in Editor Area"
'workbench.action.terminal.createTerminalEditorSide', "Create New Terminal in Editor Area to the Side"
'workbench.action.terminal.showTabs', "Show Tabs"
'workbench.action.terminal.focusPreviousPane', "Focus Previous Terminal in Terminal Group"
'workbench.action.terminal.focusNextPane', "Focus Next Terminal in Terminal Group"
'workbench.action.terminal.runRecentCommand', "Run Recent Command..."
'workbench.action.terminal.copyLastCommand', 'Copy Last Command'
'workbench.action.terminal.goToRecentDirectory', "Go to Recent Directory..."
'workbench.action.terminal.resizePaneLeft', "Resize Terminal Left"
'workbench.action.terminal.resizePaneRight', "Resize Terminal Right"
'workbench.action.terminal.resizePaneUp', "Resize Terminal Up"
'workbench.action.terminal.resizePaneDown', "Resize Terminal Down"
'workbench.action.terminal.focus.tabsView', "Focus Terminal Tabs View"
'workbench.action.terminal.focusNext', "Focus Next Terminal Group"
'workbench.action.terminal.focusPrevious', "Focus Previous Terminal Group"
'workbench.action.terminal.runSelectedText', "Run Selected Text In Active Terminal"
'workbench.action.terminal.runActiveFile', "Run Active File In Active Terminal"
'workbench.action.terminal.runActiveFile.noFile', 'Only files on disk can be run in the terminal')
'workbench.action.terminal.scrollDown', "Scroll Down (Line)"), original: 'Scroll Down (Line
'workbench.action.terminal.scrollDownPage', "Scroll Down (Page)"), original: 'Scroll Down (Page
'workbench.action.terminal.scrollToBottom', "Scroll to Bottom"
'workbench.action.terminal.scrollUp', "Scroll Up (Line)"), original: 'Scroll Up (Line
'workbench.action.terminal.scrollUpPage', "Scroll Up (Page)"), original: 'Scroll Up (Page
'workbench.action.terminal.scrollToTop', "Scroll to Top"
'workbench.action.terminal.navigationModeExit', "Exit Navigation Mode"
'workbench.action.terminal.navigationModeFocusPrevious', "Focus Previous Line (Navigation Mode)"), original: 'Focus Previous Line (Navigation Mode
'workbench.action.terminal.navigationModeFocusPreviousPage', "Focus Previous Page (Navigation Mode)"), original: 'Focus Previous Page (Navigation Mode
'workbench.action.terminal.navigationModeFocusNext', "Focus Next Line (Navigation Mode)"), original: 'Focus Next Line (Navigation Mode
'workbench.action.terminal.navigationModeFocusNextPage', "Focus Next Page (Navigation Mode)"), original: 'Focus Next Page (Navigation Mode
'workbench.action.terminal.clearSelection', "Clear Selection"
'workbench.action.terminal.rename.prompt', "Enter terminal name"
'workbench.action.terminal.focusFind', "Focus Find"
'workbench.action.terminal.hideFind', "Hide Find"
'workbench.action.terminal.detachSession', "Detach Session"
'workbench.action.terminal.attachToSession', "Attach to Session"
'noUnattachedTerminals', 'There are no unattached terminals to attach to')
'quickAccessTerminal', "Switch Active Terminal"
'workbench.action.terminal.scrollToPreviousCommand', "Scroll To Previous Command"
'workbench.action.terminal.scrollToNextCommand', "Scroll To Next Command"
'workbench.action.terminal.selectToPreviousCommand', "Select To Previous Command"
'workbench.action.terminal.selectToNextCommand', "Select To Next Command"
'workbench.action.terminal.selectToPreviousLine', "Select To Previous Line"
'workbench.action.terminal.selectToNextLine', "Select To Next Line"
'workbench.action.terminal.toggleEscapeSequenceLogging', "Toggle Escape Sequence Logging"
'workbench.action.terminal.sendSequence', "Send Custom Sequence To Terminal"
'workbench.action.terminal.newWithCwd', "Create New Terminal Starting in a Custom Working Directory"
'workbench.action.terminal.newWithCwd.cwd', "The directory to start the terminal at"
'workbench.action.terminal.renameWithArg', "Rename the Currently Active Terminal"
'workbench.action.terminal.renameWithArg.name', "The new name for the terminal"
'workbench.action.terminal.renameWithArg.noName', "No name argument provided")
'workbench.action.terminal.toggleFindRegex', "Toggle Find Using Regex"
'workbench.action.terminal.toggleFindWholeWord', "Toggle Find Using Whole Word"
'workbench.action.terminal.toggleFindCaseSensitive', "Toggle Find Using Case Sensitive"
'workbench.action.terminal.findNext', "Find Next"
'workbench.action.terminal.findPrevious', "Find Previous"
'workbench.action.terminal.searchWorkspace', "Search Workspace"
'workbench.action.terminal.relaunch', "Relaunch Active Terminal"
'workbench.action.terminal.showEnvironmentInformation', "Show Environment Information"
'workbench.action.terminal.joinInstance', "Join Terminals"
'workbench.action.terminal.join', "Join Terminals"
'workbench.action.terminal.join.insufficientTerminals', 'Insufficient terminals for the join action')
'workbench.action.terminal.join.onlySplits', 'All terminals are joined already')
'workbench.action.terminal.splitInActiveWorkspace', "Split Terminal (In Active Workspace)"), original: 'Split Terminal (In Active Workspace
'workbench.action.terminal.selectAll', "Select All"
'workbench.action.terminal.new', "Create New Terminal"
'workbench.action.terminal.kill', "Kill the Active Terminal Instance"
'workbench.action.terminal.killAll', "Kill All Terminals"
'workbench.action.terminal.killEditor', "Kill the Active Terminal in Editor Area"
'workbench.action.terminal.clear', "Clear"
'workbench.action.terminal.openDetectedLink', "Open Detected Link..."
'workbench.action.terminal.openLastUrlLink', "Open Last Url Link"
'workbench.action.terminal.openLastLocalFileLink', "Open Last Local File Link"
'workbench.action.terminal.selectDefaultShell', "Select Default Profile"
'workbench.action.terminal.openSettings', "Configure Terminal Settings"
'workbench.action.terminal.setFixedDimensions', "Set Fixed Dimensions"
'workbench.action.terminal.sizeToContentWidth', "Toggle Size to Content Width"
'workbench.action.terminal.clearCommandHistory', "Clear Command History"
'workbench.action.terminal.showTextureAtlas', "Show Terminal Texture Atlas"
'workbench.action.terminal.writeDataToTerminal', "Write Data to Terminal"
'workbench.action.terminal.writeDataToTerminal.prompt', "Enter data to write directly to the terminal, bypassing the pty"
'workbench.action.terminal.copySelection', "Copy Selection"
'workbench.action.terminal.copySelectionAsHtml', "Copy Selection as HTML"
'workbench.action.terminal.paste', "Paste into Active Terminal"
'workbench.action.terminal.pasteSelection', "Paste Selection into Active Terminal"
'workbench.action.terminal.switchTerminal', "Switch Terminal"
'emptyTerminalNameInfo', "Providing no name will reset it to the default value"
'workbench.action.terminal.newWithProfile', "Create New Terminal (With Profile)"), original: 'Create New Terminal (With Profile
'workbench.action.terminal.newWithProfile.profileName', "The name of the profile to create"
'workbench.action.terminal.newWorkspacePlaceholder', "Select current working directory for new terminal"
'workbench.action.terminal.overriddenCwdDescription', "(Overriden) {0}", labelService.getUriLabel(pair.cwd, { relative: !pair.isAbsolute })
'workbench.action.terminal.newWorkspacePlaceholder', "Select current working directory for new terminal"
'label', "Terminal"
"cwd", "the terminal's current working directory"
'cwdFolder', "the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. On Windows, this will only be displayed when shell integration is enabled."
'workspaceFolder', "the workspace in which the terminal was launched"
'local', "indicates a local terminal in a remote workspace"
'process', "the name of the terminal process"
'separator', "a conditional separator (\" - \") that only shows when surrounded by variables with values or static text."
'sequence', "the name provided to the terminal by the process"
'task', "indicates this terminal is associated with a task"
'terminalTitle', "Controls the terminal title. Variables are substituted based on the context:"
'terminalDescription', "Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:"
'terminalIntegratedConfigurationTitle', "Integrated Terminal"
'terminal.integrated.sendKeybindingsToShell', "Dispatches most keybindings to the terminal instead of the workbench, overriding {0}, which can be used alternatively for fine tuning.", '`#terminal.integrated.commandsToSkipShell#`'
'terminal.integrated.tabs.defaultColor', "A theme color ID to associate with terminal icons by default."
'terminal.integrated.tabs.defaultIcon', "A codicon ID to associate with terminal icons by default."
'terminal.integrated.tabs.enabled', 'Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.'
'terminal.integrated.tabs.enableAnimation', 'Controls whether terminal tab statuses support animation (eg. in progress tasks).'
'terminal.integrated.tabs.hideCondition', 'Controls whether the terminal tabs view will hide under certain conditions.'
'terminal.integrated.tabs.hideCondition.never', "Never hide the terminal tabs view"
'terminal.integrated.tabs.hideCondition.singleTerminal', "Hide the terminal tabs view when there is only a single terminal opened"
'terminal.integrated.tabs.hideCondition.singleGroup', "Hide the terminal tabs view when there is only a single terminal group opened"
'terminal.integrated.tabs.showActiveTerminal', 'Shows the active terminal information in the view. This is particularly useful when the title within the tabs aren\'t visible.'
'terminal.integrated.tabs.showActiveTerminal.always', "Always show the active terminal"
'terminal.integrated.tabs.showActiveTerminal.singleTerminal', "Show the active terminal when it is the only terminal opened"
'terminal.integrated.tabs.showActiveTerminal.singleTerminalOrNarrow', "Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state"
'terminal.integrated.tabs.showActiveTerminal.never', "Never show the active terminal"
'terminal.integrated.tabs.showActions', 'Controls whether terminal split and kill buttons are displays next to the new terminal button.'
'terminal.integrated.tabs.showActions.always', "Always show the actions"
'terminal.integrated.tabs.showActions.singleTerminal', "Show the actions when it is the only terminal opened"
'terminal.integrated.tabs.showActions.singleTerminalOrNarrow', "Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state"
'terminal.integrated.tabs.showActions.never', "Never show the actions"
'terminal.integrated.tabs.location.left', "Show the terminal tabs view to the left of the terminal"
'terminal.integrated.tabs.location.right', "Show the terminal tabs view to the right of the terminal"
'terminal.integrated.tabs.location', "Controls the location of the terminal tabs, either to the left or right of the actual terminal(s)."
'terminal.integrated.defaultLocation.editor', "Create terminals in the editor"
'terminal.integrated.defaultLocation.view', "Create terminals in the terminal view"
'terminal.integrated.defaultLocation', "Controls where newly created terminals will appear."
'terminal.integrated.tabs.focusMode.singleClick', "Focus the terminal when clicking a terminal tab"
'terminal.integrated.tabs.focusMode.doubleClick', "Focus the terminal when double clicking a terminal tab"
'terminal.integrated.tabs.focusMode', "Controls whether focusing the terminal of a tab happens on double or single click."
'terminal.integrated.macOptionIsMeta', "Controls whether to treat the option key as the meta key in the terminal on macOS."
'terminal.integrated.macOptionClickForcesSelection', "Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux."
'terminal.integrated.altClickMovesCursor', "If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when {0} is set to {1} (the default value). This may not work reliably depending on your shell.", '`#editor.multiCursorModifier#`', '`\'alt\'`'
'terminal.integrated.copyOnSelection', "Controls whether text selected in the terminal will be copied to the clipboard."
'terminal.integrated.enableMultiLinePasteWarning', "Show a warning dialog when pasting multiple lines into the terminal. The dialog does not show when:\n\n- Bracketed paste mode is enabled (the shell supports multi-line paste natively)\n- The paste is handled by the shell's readline (in the case of pwsh)"
'terminal.integrated.drawBoldTextInBrightColors', "Controls whether bold text in the terminal will always use the \"bright\" ANSI color variant."
'terminal.integrated.fontFamily', "Controls the font family of the terminal. Defaults to {0}'s value.", '`#editor.fontFamily#`'
'terminal.integrated.fontLigatures', "Controls whether font ligatures are enabled in the terminal."
'terminal.integrated.fontSize', "Controls the font size in pixels of the terminal."
'terminal.integrated.letterSpacing', "Controls the letter spacing of the terminal. This is an integer value which represents the number of additional pixels to add between characters."
'terminal.integrated.lineHeight', "Controls the line height of the terminal. This number is multiplied by the terminal font size to get the actual line-height in pixels."
'terminal.integrated.minimumContrastRatio', "When set, the foreground color of each cell will change to try meet the contrast ratio specified. Note that this will not apply to `powerline` characters per #146406. Example values:\n\n- 1: Do nothing and use the standard theme colors.\n- 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (default).\n- 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).\n- 21: White on black or black on white."
'terminal.integrated.fastScrollSensitivity', "Scrolling speed multiplier when pressing `Alt`."
'terminal.integrated.mouseWheelScrollSensitivity', "A multiplier to be used on the `deltaY` of mouse wheel scroll events."
'terminal.integrated.bellDuration', "The number of milliseconds to show the bell within a terminal tab when triggered."
'terminal.integrated.fontWeightError', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
'terminal.integrated.fontWeight', "The font weight to use within the terminal for non-bold text. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000."
'terminal.integrated.fontWeightError', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
'terminal.integrated.fontWeightBold', "The font weight to use within the terminal for bold text. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000."
'terminal.integrated.cursorBlinking', "Controls whether the terminal cursor blinks."
'terminal.integrated.cursorStyle', "Controls the style of terminal cursor."
'terminal.integrated.cursorWidth', "Controls the width of the cursor when {0} is set to {1}.", '`#terminal.integrated.cursorStyle#`', '`line`'
'terminal.integrated.scrollback', "Controls the maximum number of lines the terminal keeps in its buffer."
'terminal.integrated.detectLocale', "Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell."
'terminal.integrated.detectLocale.auto', "Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`."
'terminal.integrated.detectLocale.off', "Do not set the `$LANG` environment variable."
'terminal.integrated.detectLocale.on', "Always set the `$LANG` environment variable."
'terminal.integrated.gpuAcceleration.auto', "Let VS Code detect which renderer will give the best experience."
'terminal.integrated.gpuAcceleration.on', "Enable GPU acceleration within the terminal."
'terminal.integrated.gpuAcceleration.off', "Disable GPU acceleration within the terminal. The terminal will render much slower when GPU acceleration is off but it should reliably work on all systems."
'terminal.integrated.gpuAcceleration.canvas', "Use the terminal's fallback canvas renderer which uses a 2d context instead of webgl which may perform better on some systems. Note that some features are limited in the canvas renderer like opaque selection."
'terminal.integrated.gpuAcceleration', "Controls whether the terminal will leverage the GPU to do its rendering."
"terminal.integrated.tabs.separator", "Separator used by {0} and {0}.", `\`${TerminalSettingId.TerminalTitle}\``, `\`${TerminalSettingId.TerminalDescription}\``
'terminal.integrated.rightClickBehavior.default', "Show the context menu."
'terminal.integrated.rightClickBehavior.copyPaste', "Copy when there is a selection, otherwise paste."
'terminal.integrated.rightClickBehavior.paste', "Paste on right click."
'terminal.integrated.rightClickBehavior.selectWord', "Select the word under the cursor and show the context menu."
'terminal.integrated.rightClickBehavior.nothing', "Do nothing and pass event to terminal."
'terminal.integrated.rightClickBehavior', "Controls how terminal reacts to right click."
'terminal.integrated.cwd', "An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd."
'terminal.integrated.confirmOnExit', "Controls whether to confirm when the window closes if there are active terminal sessions."
'terminal.integrated.confirmOnExit.never', "Never confirm."
'terminal.integrated.confirmOnExit.always', "Always confirm if there are terminals."
'terminal.integrated.confirmOnExit.hasChildProcesses', "Confirm if there are any terminals that have child processes."
'terminal.integrated.confirmOnKill', "Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell."
'terminal.integrated.confirmOnKill.never', "Never confirm."
'terminal.integrated.confirmOnKill.editor', "Confirm if the terminal is in the editor."
'terminal.integrated.confirmOnKill.panel', "Confirm if the terminal is in the panel."
'terminal.integrated.confirmOnKill.always', "Confirm if the terminal is either in the editor or panel."
'terminal.integrated.enableBell', "Controls whether the terminal bell is enabled. This shows up as a visual bell next to the terminal's name."
src/vs/workbench/contrib/terminal/common/terminalConfiguration.ts:			markdownDescription: localize(
'openDefaultSettingsJson.capitalized', "Open Default Settings (JSON)")}'
'terminal.integrated.allowChords', "Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass {0}, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).", '`#terminal.integrated.commandsToSkipShell#`'
'terminal.integrated.allowMnemonics', "Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS."
'terminal.integrated.env.osx', "Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable."
'terminal.integrated.env.linux', "Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable."
'terminal.integrated.env.windows', "Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable."
'terminal.integrated.environmentChangesIndicator', "Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment."
'terminal.integrated.environmentChangesIndicator.off', "Disable the indicator."
'terminal.integrated.environmentChangesIndicator.on', "Enable the indicator."
'terminal.integrated.environmentChangesIndicator.warnonly', "Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension."
'terminal.integrated.environmentChangesRelaunch', "Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet."
'terminal.integrated.showExitAlert', "Controls whether to show the alert \"The terminal process terminated with exit code\" when exit code is non-zero."
'terminal.integrated.splitCwd', "Controls the working directory a split terminal starts with."
'terminal.integrated.splitCwd.workspaceRoot', "A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered."
'terminal.integrated.splitCwd.initial', "A new split terminal will use the working directory that the parent terminal started with."
'terminal.integrated.splitCwd.inherited', "On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial."
'terminal.integrated.windowsEnableConpty', "Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false."
'terminal.integrated.wordSeparators', "A string containing all characters to be considered word separators by the double click to select word feature."
'terminal.integrated.enableFileLinks', "Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals."
'terminal.integrated.unicodeVersion.six', "Version 6 of unicode; this is an older version which should work better on older systems."
'terminal.integrated.unicodeVersion.eleven', "Version 11 of unicode; this version provides better support on modern systems that use modern versions of unicode."
'terminal.integrated.unicodeVersion', "Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting."
'terminal.integrated.localEchoLatencyThreshold', "Length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled."
'terminal.integrated.localEchoEnabled', "When local echo should be enabled. This will override {0}", '`#terminal.integrated.localEchoLatencyThreshold#`'
'terminal.integrated.localEchoEnabled.on', "Always enabled"
'terminal.integrated.localEchoEnabled.off', "Always disabled"
'terminal.integrated.localEchoEnabled.auto', "Enabled only for remote workspaces"
'terminal.integrated.localEchoExcludePrograms', "Local echo will be disabled when any of these program names are found in the terminal title."
'terminal.integrated.localEchoStyle', "Terminal style of locally echoed text; either a font style or an RGB color."
'terminal.integrated.enablePersistentSessions', "Persist terminal sessions/history for the workspace across window reloads."
'terminal.integrated.persistentSessionReviveProcess', "When the terminal process must be shut down (eg. on window or application close), this determines when the previous terminal session contents/history should be restored and processes be recreated when the workspace is next opened.\n\nCaveats:\n\n- Restoring of the process current working directory depends on whether it is supported by the shell.\n- Time to persist the session during shutdown is limited, so it may be aborted when using high-latency remote connections."
'terminal.integrated.persistentSessionReviveProcess.onExit', "Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu)."
'terminal.integrated.persistentSessionReviveProcess.onExitAndWindowClose', "Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed."
'terminal.integrated.persistentSessionReviveProcess.never', "Never restore the terminal buffers or recreate the process."
'terminal.integrated.customGlyphs', "Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer"
'terminal.integrated.autoReplies', "A set of messages that, when encountered in the terminal, will be automatically responded to. Provided the message is specific enough, this can help automate away common responses.\n\nRemarks:\n\n- Use {0} to automatically respond to the terminate batch job prompt on Windows.\n- The message includes escape sequences so the reply might not happen with styled text.\n- Each reply can only happen once every second.\n- Use {1} in the reply to mean the enter key.\n- To unset a default key, set the value to null.\n- Restart VS Code if new don't apply.", '`"Terminate batch job (Y/N)": "Y\\r"`', '`"\\r"`'
'terminal.integrated.autoReplies.reply', "The reply to send to the process."
'terminal.integrated.shellIntegration.enabled', "Determines whether or not shell integration is auto-injected to support features like enhanced command tracking and current working directory detection. \n\nShell integration works by injecting the shell with a startup script. The script gives VS Code insight into what is happening within the terminal.\n\nSupported shells:\n\n- Linux/macOS: bash, pwsh, zsh\n - Windows: pwsh\n\nThis setting applies only when terminals are created, so you will need to restart your terminals for it to take effect.\n\n Note that the script injection may not work if you have custom arguments defined in the terminal profile, a [complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand), or other unsupported setup. To disable decorations, see {0}", '`#terminal.integrated.shellIntegrations.decorationsEnabled#`'
'terminal.integrated.shellIntegration.decorationsEnabled', "When shell integration is enabled, adds a decoration for each command."
'terminal.integrated.shellIntegration.decorationsEnabled.both', "Show decorations in the gutter (left) and overview ruler (right)"
'terminal.integrated.shellIntegration.decorationsEnabled.gutter', "Show gutter decorations to the left of the terminal"
'terminal.integrated.shellIntegration.decorationsEnabled.overviewRuler', "Show overview ruler decorations to the right of the terminal"
'terminal.integrated.shellIntegration.decorationsEnabled.never', "Do not show decorations"
'terminal.integrated.shellIntegration.history', "Controls the number of recently used commands to keep in the terminal command history. Set to 0 to disable terminal command history."
'terminal.integrated.smoothScrolling', "Controls whether the terminal will scroll using an animation."
'terminal.background', 'The background color of the terminal, this allows coloring the terminal differently to the panel.')
'terminal.foreground', 'The foreground color of the terminal.')
'terminalCursor.foreground', 'The foreground color of the terminal cursor.')
'terminalCursor.background', 'The background color of the terminal cursor. Allows customizing the color of a character overlapped by a block cursor.')
'terminal.selectionBackground', 'The selection background color of the terminal.')
'terminal.inactiveSelectionBackground', 'The selection background color of the terminal when it does not have focus.')
'terminal.selectionForeground', 'The selection foreground color of the terminal. When this is null the selection foreground will be retained and have the minimum contrast ratio feature applied.')
'terminalCommandDecoration.defaultBackground', 'The default terminal command decoration background color.')
'terminalCommandDecoration.successBackground', 'The terminal command decoration background color for successful commands.')
'terminalCommandDecoration.errorBackground', 'The terminal command decoration background color for error commands.')
'terminalOverviewRuler.cursorForeground', 'The overview ruler cursor color.')
'terminal.border', 'The color of the border that separates split panes within the terminal. This defaults to panel.border.')
'terminal.findMatchBackground', 'Color of the current search match in the terminal. The color must not be opaque so as not to hide underlying terminal content.')
'terminal.findMatchBorder', 'Border color of the current search match in the terminal.')
'terminal.findMatchHighlightBackground', 'Color of the other search matches in the terminal. The color must not be opaque so as not to hide underlying terminal content.')
'terminal.findMatchHighlightBorder', 'Border color of the other search matches in the terminal.')
'terminalOverviewRuler.findMatchHighlightForeground', 'Overview ruler marker color for find matches in the terminal.')
'terminal.dragAndDropBackground', "Background color when dragging on top of terminals. The color should have transparency so that the terminal contents can still shine through.")
'terminal.tab.activeBorder', 'Border on the side of the terminal tab in the panel. This defaults to tab.activeBorder.')
'terminal.ansiColor', '\'{0}\' ANSI color in the terminal.', colorName)
'terminalCategory', "Terminal"
'vscode.extension.contributes.terminal', 'Contributes terminal functionality.'
'vscode.extension.contributes.terminal.quickFixes', "Defines quick fixes for terminals with shell integration enabled."
'vscode.extension.contributes.terminal.quickFixes.id', "The ID of the quick fix."
'vscode.extension.contributes.terminal.quickFixes.commandLineMatcher', "The command line to match."
'vscode.extension.contributes.terminal.quickFixes.outputMatcher', "The output to match, which provides groups of the form <group_name> to be referenced via ${group:group_name} in commandToRun and linkToOpen."
'vscode.extension.contributes.terminal.profiles', "Defines additional terminal profiles that the user can create."
'vscode.extension.contributes.terminal.profiles.id', "The ID of the terminal profile provider."
'vscode.extension.contributes.terminal.profiles.title', "Title for this terminal profile."
'vscode.extension.contributes.terminal.types.icon', "A codicon, URI, or light and dark URIs to associate with this terminal type."
'vscode.extension.contributes.terminal.types.icon.light', 'Icon path when a light theme is used'
'vscode.extension.contributes.terminal.types.icon.dark', 'Icon path when a dark theme is used'
'terminalLinkHandler.followLinkAlt.mac', "option + click"
'terminalLinkHandler.followLinkAlt', "alt + click"
'terminalLinkHandler.followLinkCmd', "cmd + click"
'terminalLinkHandler.followLinkCtrl', "ctrl + click"
'followLink', "Follow link"
'followForwardedLink', "Follow link using forwarded port"
'followLinkUrl', 'Link'
"terminal.freePort", "Free port {0}", port
'ptyHost', "Pty Host"), URI.file(join(environmentService.logsPath, `${TerminalLogConstants.FileName}.log`))
'killportfailure', 'Could not kill process listening on port {0}, command exited with error {1}', port, e), severity: Severity.Warning }
'ptyHostRelaunch', "Restarting the terminal because the connection to the shell process was lost..."
'restartPtyHost', "Restart pty host"
'nonResponsivePtyHost', "The connection to the terminal's pty host process is unresponsive, the terminals may stop working."), choices
'terminal.integrated.openDetectedLink', "Select the link to open"
'terminal.integrated.urlLinks', "Url") }
'terminal.integrated.localFileLinks', "Local File") }
'terminal.integrated.searchLinks', "Workspace Search") }
'terminal.integrated.showMoreLinks', "Show more links"
'openFile', 'Open file in editor'
'focusFolder', 'Focus folder in explorer'
'openFolder', 'Open folder in new window'
'searchWorkspace', 'Search workspace'
'openFile', 'Open file in editor'
'focusFolder', 'Focus folder in explorer'
'openFolder', 'Open folder in new window'
'followLink', 'Follow link'
'extensionEnvironmentContributionChanges', "Extensions want to make the following changes to the terminal's environment:"
'extensionEnvironmentContributionRemoval', "Extensions want to remove these existing changes from the terminal's environment:"
'relaunchTerminalLabel', "Relaunch terminal"
'extensionEnvironmentContributionInfo', "Extensions have made changes to this terminal's environment"
'testing.filters.showOnlyFailed', "Show Only Failed Tests"
'testing.filters.showOnlyExecuted', "Show Only Executed Tests"
'testing.filters.currentFile', "Show in Active File Only"
'testing.filters.showExcludedTests', "Show Hidden Tests"
'testing.filters.menu', "More Filters..."), 'testing-filter-button ' + ThemeIcon.asClassName(testingFilterIcon)
'testExplorerFilterLabel', "Filter text for tests in the explorer"
'testExplorerFilter', "Filter (e.g. text, !exclude, @tag)"
'testing.filters.fuzzyMatch', "Fuzzy Match"
'testing.filters.showExcludedTests', "Show Hidden Tests"
'testing.filters.removeTestExclusions', "Unhide All Tests"
'testingOutputExpected', 'Expected result'
'testingOutputActual', 'Actual result'
'close', 'Close'
'testUnnamedTask', 'Unnamed Task'
'messageMoreLinesN', '+ {0} more lines', lines
'messageMoreLines1', '+ 1 more line'
'testingPeekLabel', 'Test Result Messages'
'testing.showResultOutput', "Show Result Output"
'testing.reRunLastRun', "Rerun Test Run"
'testing.debugLastRun', "Debug Test Run"
'testing.goToFile', "Go to File"
'testing.revealInExplorer', "Reveal in Test Explorer"
'run test', 'Run Test'
'debug test', 'Debug Test'
'testing.showMessageInTerminal', "Show Output in Terminal"
'testing.goToNextMessage', "Go to Next Test Failure"
'testing.goToPreviousMessage', "Go to Previous Test Failure"
'testing.openMessageInEditor', "Open in Editor"
'testing.toggleTestingPeekHistory', "Toggle Test History in Peek"
'toggleAuxiliaryIconRight', 'Icon to toggle the auxiliary bar off in its right position.')
'toggleAuxiliaryIconRightOn', 'Icon to toggle the auxiliary bar on in its right position.')
'toggleAuxiliaryIconLeft', 'Icon to toggle the auxiliary bar in its left position.')
'toggleAuxiliaryIconLeftOn', 'Icon to toggle the auxiliary bar on in its left position.')
'toggleAuxiliaryBar', "Toggle Secondary Side Bar Visibility"
'focusAuxiliaryBar', "Focus into Secondary Side Bar"
'miAuxiliaryBarNoMnemonic', "Secondary Side Bar"
'toggleSecondarySideBar', "Toggle Secondary Side Bar"
'toggleSecondarySideBar', "Toggle Secondary Side Bar"
{ key: 'miAuxiliaryBar', comment: ['&& denotes a mnemonic'] }, "Secondary Si&&de Bar"
'hideAuxiliaryBar', "Hide Secondary Side Bar"
'test', "Testing"
{ key: 'miViewTesting', comment: ['&& denotes a mnemonic'] }, "T&&esting"
'noTestProvidersRegistered', "No tests have been found in this workspace yet."
'searchForAdditionalTestExtensions', "Install Additional Test Extensions...") + `](command:${TestCommandId.SearchForTestExtension}
'testExplorer', "Test Explorer"
'wslFeatureInstalled', "Whether the platform has the WSL feature installed")
'remote', "Remote"
'remote.downloadExtensionsLocally', "When enabled extensions are downloaded locally and installed on remote."
'hideTest', 'Hide Test'
'unhideTest', 'Unhide Test'
'unhideAllTests', 'Unhide All Tests'
'debug test', 'Debug Test'
'testing.runUsing', 'Execute Using Profile...'
'run test', 'Run Test'
'testing.selectDefaultTestProfiles', 'Select Default Profile'
'testing.configureProfile', 'Configure Test Profiles'
'configureProfile', 'Select a profile to update'
'runSelectedTests', 'Run Tests'
'debugSelectedTests', 'Debug Tests'
'discoveringTests', 'Discovering Tests'
'runAllTests', 'Run All Tests'
'noTestProvider', 'No tests found in this workspace. You may need to install a test provider extension'
'debugAllTests', 'Debug All Tests'
'noDebugTestProvider', 'No debuggable tests found in this workspace. You may need to install a test provider extension'
'testing.cancelRun', "Cancel Test Run"
'testing.viewAsList', "View as List"
'testing.viewAsTree', "View as Tree"
'testing.sortByStatus', "Sort by Status"
'testing.sortByLocation', "Sort by Location"
'testing.sortByDuration', "Sort by Duration"
'testing.showMostRecentOutput', "Show Output"
'testing.collapseAll', "Collapse All Tests"
'testing.clearResults', "Clear All Results"
'testing.editFocusedTest', "Go to Test"
'testing.runAtCursor', "Run Test at Cursor"
'testing.debugAtCursor', "Debug Test at Cursor"
'testing.runCurrentFile', "Run Tests in Current File"
'testing.debugCurrentFile', "Debug Tests in Current File"
'testing.reRunFailTests', "Rerun Failed Tests"
'testing.debugFailTests', "Debug Failed Tests"
'testing.reRunLastRun', "Rerun Last Run"
'testing.debugLastRun', "Debug Last Run"
'testing.searchForTestExtension', "Search for Test Extension"
'testing.openOutputPeek', "Peek Output"
'testing.toggleInlineTestOutput', "Toggle Inline Test Output"
'testing.refreshTests', "Refresh Tests"
'testing.cancelTestRefresh', "Cancel Test Refresh"
'testViewIcon', 'View icon of the test view.')
'testingRunIcon', 'Icon of the "run test" action.')
'testingRunAllIcon', 'Icon of the "run all tests" action.')
'testingDebugAllIcon', 'Icon of the "debug all tests" action.')
'testingDebugIcon', 'Icon of the "debug test" action.')
'testingCancelIcon', 'Icon to cancel ongoing test runs.')
'filterIcon', 'Icon for the \'Filter\' action in the testing view.')
'hiddenIcon', 'Icon shown beside hidden tests, when they\'ve been shown.')
'testingShowAsList', 'Icon shown when the test explorer is disabled as a tree.')
'testingShowAsTree', 'Icon shown when the test explorer is disabled as a list.')
'testingUpdateProfiles', 'Icon shown to update test profiles.')
'testingRefreshTests', 'Icon on the button to refresh tests.')
'testingCancelRefreshTests', 'Icon on the button to cancel refreshing tests.')
'testingErrorIcon', 'Icon shown for tests that have an error.')
'testingFailedIcon', 'Icon shown for tests that failed.')
'testingPassedIcon', 'Icon shown for tests that passed.')
'testingQueuedIcon', 'Icon shown for tests that are queued.')
'testingSkippedIcon', 'Icon shown for tests that are skipped.')
'testingUnsetIcon', 'Icon shown for tests that are in an unset state.')
'pinned view containers', "Panel entries visibility customizations"
'resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewContainerToLocation(viewContainer, defaultLocation) })
'resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewsToContainer([viewToReset], defaultContainer) })
'panel.emptyMessage', "Drag a view here to display."
'moreActions', "More Actions..."
'hidePanel', "Hide Panel"), run: () => this.commandService.executeCommand(TogglePanelAction.ID) }
'defaultTestProfile', '{0} (Default)', profile.label
'selectDefaultConfigs', 'Select Default Profile'
'configureTestProfiles', 'Configure Test Profiles'
'testingNoTest', 'No tests were found in this file.'
'testingFindExtension', 'Show Workspace Tests'
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:			label = localize({
src/vs/workbench/contrib/testing/browser/testingExplorerView.ts:			label = localize({
'testExplorer', "Test Explorer"
'TaskSystem.runningTask', 'There is a task running. Do you want to terminate it?'
{ key: 'TaskSystem.terminateTask', comment: ['&& denotes a mnemonic'] }, "&&Terminate Task"
'TaskSystem.noProcess', 'The launched task doesn\'t exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.'
{ key: 'TaskSystem.exitAnyways', comment: ['&& denotes a mnemonic'] }, "&&Exit Anyways"
'alertErrorMessage', "Error: {0}", notification.message.linkedText.toString()
'alertWarningMessage', "Warning: {0}", notification.message.linkedText.toString()
'alertInfoMessage', "Info: {0}", notification.message.linkedText.toString()
'notificationAriaLabel', "{0}, notification", element.message.raw
'notificationWithSourceAriaLabel', "{0}, source: {1}, notification", element.message.raw, element.source
'notificationsList', "Notifications List"
'taskTerminalStatus.active', "Task is running"
'taskTerminalStatus.succeeded', "Task succeeded"
'taskTerminalStatus.succeededInactive', "Task succeeded and waiting..."
'taskTerminalStatus.errors', "Task has errors"
'taskTerminalStatus.errorsInactive', "Task has errors and is waiting..."
'taskTerminalStatus.warnings', "Task has warnings"
'taskTerminalStatus.warningsInactive', "Task has warnings and is waiting..."
'taskTerminalStatus.infos', "Task has infos"
'taskTerminalStatus.infosInactive', "Task has infos and is waiting..."
'task.watchFirstError', "Beginning of detected errors for this run"), disableCommandStorage: true }
'focusSideBar', "Focus into Primary Side Bar"
'taskService.processTaskSystem', 'Process task system is not support in the web.'
'noTaskResults', "No matching tasks"
'TaskService.pickRunTask', 'Select the task to run'), undefined, task
'remoteExtensionLog', "Remote Server"), file: joinPath(remoteEnv.logsPath, `${RemoteExtensionLogFileName}.log`), log: true }
'remotePtyHostLog', "Remote Pty Host"), file: joinPath(remoteEnv.logsPath, `${TerminalLogConstants.FileName}.log`), log: true }
'invalidWorkspaceMessage', "Workspace does not exist"
'invalidWorkspaceDetail', "The workspace does not exist. Please select another workspace to open."
'invalidWorkspacePrimary', "&&Open Workspace..."
'invalidWorkspaceCancel', "&&Cancel"
'triggerReconnect', "Connection: Trigger Reconnect"
'pauseSocketWriting', "Connection: Pause socket writing"
'ui', "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine."
'workspace', "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."
'remote', "Remote"
'remote.extensionKind', "Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely."
'remote.restoreForwardedPorts', "Restores the ports you forwarded in a workspace."
'remote.autoForwardPorts', "When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded."
'remote.autoForwardPortsSource', "Sets the source from which ports are automatically forwarded when {0} is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.", '`#remote.autoForwardPorts#`'
'remote.autoForwardPortsSource.process', "Ports will be automatically forwarded when discovered by watching for processes that are started and include a port."
'remote.autoForwardPortsSource.output', "Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be \"un-forwarded\" until reload or until the port is closed by the user in the Ports view."
'remote.portsAttributes.port', "A port, range of ports (ex. \"40000-55000\"), host and port (ex. \"db:1234\"), or regular expression (ex. \".+\\\\/server.js\").  For a port number or range, the attributes will apply to that port number or range of port numbers. Attributes which use a regular expression will apply to ports whose associated process command line matches the expression."
'remote.portsAttributes.notify', "Shows a notification when a port is automatically forwarded."
'remote.portsAttributes.openBrowser', "Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser."
'remote.portsAttributes.openBrowserOnce', "Opens the browser when the port is automatically forwarded, but only the first time the port is forward during a session. Depending on your settings, this could open an embedded browser."
'remote.portsAttributes.openPreview', "Opens a preview in the same window when the port is automatically forwarded."
'remote.portsAttributes.silent', "Shows no notification and takes no action when this port is automatically forwarded."
'remote.portsAttributes.ignore', "This port will not be automatically forwarded."
'remote.portsAttributes.onForward', "Defines the action that occurs when the port is discovered for automatic forwarding"
'remote.portsAttributes.elevateIfNeeded', "Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port."
'remote.portsAttributes.label', "Label that will be shown in the UI for this port."
'remote.portsAttributes.labelDefault', "Application"
'remote.portsAttributes.requireLocalPort', "When true, a modal dialog will show if the chosen local port isn't used for forwarding."
'remote.portsAttributes.protocol', "The protocol to use when forwarding this port."
'remote.portsAttributes.labelDefault', "Application"
'remote.portsAttributes', "Set properties that are applied when a specific port number is forwarded. For example:\n\n```\n\"3000\": {\n  \"label\": \"Application\"\n},\n\"40000-55000\": {\n  \"onAutoForward\": \"ignore\"\n},\n\".+\\\\/server.js\": {\n \"onAutoForward\": \"openPreview\"\n}\n```"
'remote.portsAttributes.patternError', "Must be a port number, range of port numbers, or regular expression."
'remote.portsAttributes.notify', "Shows a notification when a port is automatically forwarded."
'remote.portsAttributes.openBrowser', "Opens the browser when the port is automatically forwarded. Depending on your settings, this could open an embedded browser."
'remote.portsAttributes.openPreview', "Opens a preview in the same window when the port is automatically forwarded."
'remote.portsAttributes.silent', "Shows no notification and takes no action when this port is automatically forwarded."
'remote.portsAttributes.ignore', "This port will not be automatically forwarded."
'remote.portsAttributes.onForward', "Defines the action that occurs when the port is discovered for automatic forwarding"
'remote.portsAttributes.elevateIfNeeded', "Automatically prompt for elevation (if needed) when this port is forwarded. Elevate is required if the local port is a privileged port."
'remote.portsAttributes.label', "Label that will be shown in the UI for this port."
'remote.portsAttributes.labelDefault', "Application"
'remote.portsAttributes.requireLocalPort', "When true, a modal dialog will show if the chosen local port isn't used for forwarding."
'remote.portsAttributes.protocol', "The protocol to use when forwarding this port."
'remote.portsAttributes.defaults', "Set default properties that are applied to all ports that don't get properties from the setting {0}. For example:\n\n```\n{\n  \"onAutoForward\": \"ignore\"\n}\n```", '`#remote.portsAttributes#`'
'remote.localPortHost', "Specifies the local host name that will be used for port forwarding."
'TerminalTaskSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), TaskErrors.UnknownError
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				nls.localize('TerminalTaskSystem.taskLoadReporting', "There are issues with task \"{0}\". See the output for more details.",
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:		this._log(nls.localize('dependencyCycle',
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					this._log(nls.localize('dependencyFailed',
'TerminalTaskSystem.nonWatchingMatcher', 'Task {0} is a background task but uses a problem matcher without a background pattern', task._label)
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:					shellLaunchConfig.initialText = this.taskShellIntegrationStartSequence + formatMessageForTerminal(nls.localize({
src/vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts:				initialText: task.command.presentation && task.command.presentation.echo ? formatMessageForTerminal(nls.localize({
'TerminalTaskSystem', 'Can\'t execute a shell command on an UNC drive using cmd.exe.'), TaskErrors.UnknownError
'unknownProblemMatcher', 'Problem matcher {0} can\'t be resolved. The matcher will be ignored')
'closeTerminal', 'Press any key to close the terminal.')
'reuseTerminal', 'Terminal will be reused by tasks, press any key to close it.')
'dotnetCore', 'Executes .NET Core build command'
'msbuild', 'Executes the build target'
'externalCommand', 'Example to run an arbitrary external command'
'Maven', 'Executes common maven commands'
'tsc.config', 'Compiles a TypeScript project'
'tsc.watch', 'Compiles a TypeScript project in watch mode'
'dotnetCore', 'Executes .NET Core build command'
'msbuild', 'Executes the build target'
'externalCommand', 'Example to run an arbitrary external command'
'Maven', 'Executes common maven commands'
'maximizeIcon', 'Icon to maximize a panel.')
'restoreIcon', 'Icon to restore a panel.')
'closeIcon', 'Icon to close a panel.')
'togglePanelOffIcon', 'Icon to toggle the panel off when it is on.')
'togglePanelOnIcon', 'Icon to toggle the panel on when it is off.')
'togglePanelVisibility', "Toggle Panel Visibility"
'focusPanel', "Focus into Panel"
'focusPanel', "Focus into Panel"
'positionPanelLeftShort', "Left"), Position.LEFT
'positionPanelRightShort', "Right"), Position.RIGHT
'positionPanelBottomShort', "Bottom"), Position.BOTTOM
'alignPanelLeftShort', "Left"), 'left'
'alignPanelRightShort', "Right"), 'right'
'alignPanelCenterShort', "Center"), 'center'
'alignPanelJustifyShort', "Justify"), 'justify'
'positionPanel', "Panel Position"
'alignPanel', "Align Panel"
'previousPanelView', 'Previous Panel View'
'nextPanelView', 'Next Panel View'
'toggleMaximizedPanel', "Toggle Maximized Panel"
'maximizePanel', "Maximize Panel Size"
'minimizePanel', "Restore Panel Size"
'panelMaxNotSupported', "Maximizing the panel is only supported when it is center aligned.")
'closePanel', "Close Panel"
'closeSecondarySideBar', "Close Secondary Side Bar"
{ key: 'miPanel', comment: ['&& denotes a mnemonic'] }, "&&Panel"
'miPanelNoMnemonic', "Panel"
'togglePanel', "Toggle Panel"
'hidePanel', "Hide Panel"
'movePanelToSecondarySideBar', "Move Panel Views To Secondary Side Bar"
'movePanelToSecondarySideBar', "Move Panel Views To Secondary Side Bar"
'moveSidePanelToPanel', "Move Secondary Side Bar Views To Panel"
'moveSidePanelToPanel', "Move Secondary Side Bar Views To Panel"
'workbench.action.tasks.manageAutomaticRunning', "Manage Automatic Tasks"
'workbench.action.tasks.allowAutomaticTasks', "Allow Automatic Tasks"
'workbench.action.tasks.disallowAutomaticTasks', "Disallow Automatic Tasks"
'status.notifications', "Notifications"
'status.notifications', "Notifications"
'status.doNotDisturb', "Do Not Disturb"
'status.doNotDisturbTooltip', "Do Not Disturb Mode is Enabled"
'hideNotifications', "Hide Notifications"
'zeroNotifications', "No Notifications"
'noNotifications', "No New Notifications"
'oneNotification', "1 New Notification"
{ key: 'notifications', comment: ['{0} will be replaced by a number'] }, "{0} New Notifications", this.newNotificationsCount
{ key: 'noNotificationsWithProgress', comment: ['{0} will be replaced by a number'] }, "No New Notifications ({0} in progress)", notificationsInProgress
{ key: 'oneNotificationWithProgress', comment: ['{0} will be replaced by a number'] }, "1 New Notification ({0} in progress)", notificationsInProgress
{ key: 'notificationsWithProgress', comment: ['{0} and {1} will be replaced by a number'] }, "{0} New Notifications ({1} in progress)", this.newNotificationsCount, notificationsInProgress
'status.message', "Status Message"
'tasks.taskRunningContext', "Whether a task is currently running.")
'tasksCategory', "Tasks"
src/vs/workbench/contrib/tasks/common/tasks.ts:							reporter.error(nls.localize(
'taskQuickPick.showAll', "Show All Tasks..."
'configureTaskIcon', 'Configuration icon in the tasks selection list.')
'removeTaskIcon', 'Icon for remove in the tasks selection list.')
'configureTask', "Configure Task"
'contributedTasks', "contributed") }
'taskType', "All {0} tasks", type) }
'removeRecent', 'Remove Recently Used Task'
'recentlyUsed', 'recently used'), [removeRecentButton]
'configured', 'configured')
'configured', 'configured') }
'TaskQuickPick.changeSettingNo', "No"
'TaskQuickPick.changeSettingYes', "Yes"
src/vs/workbench/contrib/tasks/browser/taskQuickPick.ts:			nls.localize('TaskQuickPick.changeSettingDetails',
'TaskService.pickRunTask', 'Select the task to run'), undefined, selectedType
'TaskQuickPick.changeSettingsOptions', "$(gear
'TaskQuickPick.goBack', 'Go back ↩'
'TaskQuickPick.noTasksForType', 'No {0} tasks found. Go back ↩', type
'noProviderForTask', "There is no task provider registered for tasks of type \"{0}\".", task.type)
'notificationAriaLabel', "{0}, notification", item.message.raw
'notificationWithSourceAriaLabel', "{0}, source: {1}, notification", item.message.raw, item.source
'tasks.customExecutionSupported', "Whether CustomExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution.")
'tasks.shellExecutionSupported', "Whether ShellExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution.")
'tasks.taskCommandsRegistered', "Whether the task commands have been registered yet")
'tasks.processExecutionSupported', "Whether ProcessExecution tasks are supported. Consider using in the when clause of a \'taskDefinition\' contribution.")
'tasks.serverlessWebContext', "True when in the web with no remote authority.")
'notifications', "Notifications"
'showNotifications', "Show Notifications"), original: 'Show Notifications' }, category } }
'hideNotifications', "Hide Notifications"), original: 'Hide Notifications' }, category }, when: NotificationsCenterVisibleContext }
'clearAllNotifications', "Clear All Notifications"), original: 'Clear All Notifications' }, category } }
'toggleDoNotDisturbMode', "Toggle Do Not Disturb Mode"), original: 'Toggle Do Not Disturb Mode' }, category } }
'focusNotificationToasts', "Focus Notification Toast"), original: 'Focus Notification Toast' }, category }, when: NotificationsToastsVisibleContext }
'TaskDefinition.description', 'The actual task type. Please note that types starting with a \'$\' are reserved for internal usage.'
'TaskDefinition.properties', 'Additional properties of the task type'
'TaskDefinition.when', 'Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition. See the [API documentation](https://code.visualstudio.com/api/extension-guides/task-provider#when-clause) for more information.'
'TaskTypeConfiguration.noType', 'The task type configuration is missing the required \'taskType\' property')
'TaskDefinitionExtPoint', 'Contributes task kinds'
'clearIcon', 'Icon for the clear action in notifications.')
'clearAllIcon', 'Icon for the clear all action in notifications.')
'hideIcon', 'Icon for the hide action in notifications.')
'expandIcon', 'Icon for the expand action in notifications.')
'collapseIcon', 'Icon for the collapse action in notifications.')
'configureIcon', 'Icon for the configure action in notifications.')
'doNotDisturbIcon', 'Icon for the mute all action in notifications.')
'clearNotification', "Clear Notification"
'clearNotifications', "Clear All Notifications"
'toggleDoNotDisturbMode', "Toggle Do Not Disturb Mode"
'hideNotificationsCenter', "Hide Notifications"
'expandNotification', "Expand Notification"
'collapseNotification', "Collapse Notification"
'configureNotification', "Configure Notification"
'copyNotification', "Copy Text"
'ConfigurationParser.invalidCWD', 'Warning: options.cwd must be of type string. Ignoring value {0}\n', options.cwd)
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:						nls.localize(
'ConfigurationParser.noShell', 'Warning: shell configuration is only supported when executing tasks in the terminal.')
'ConfigurationParser.noName', 'Error: Problem Matcher in declare scope must have a name:\n{0}\n', JSON.stringify(value, undefined, 4))
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			const error = nls.localize(
'ConfigurationParser.invalidVariableReference', 'Error: Invalid problemMatcher reference: {0}\n', value
'ConfigurationParser.noTaskType', 'Error: tasks configuration must have a type property. The configuration will be ignored.\n{0}\n', JSON.stringify(external, null, 4))
'ConfigurationParser.noTypeDefinition', 'Error: there is no registered task type \'{0}\'. Did you miss installing an extension that provides a corresponding task provider?', type
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			context.problemReporter.error(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:			context.problemReporter.error(nls.localize(
'ConfigurationParser.notCustom', 'Error: tasks is not declared as a custom task. The configuration will be ignored.\n{0}\n', JSON.stringify(external, null, 4))
'ConfigurationParser.noTaskName', 'Error: a task must provide a label property. The task will be ignored.\n{0}\n', JSON.stringify(external, null, 4))
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:				context.problemReporter.info(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:							context.problemReporter.error(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:							context.problemReporter.warn(nls.localize(
src/vs/workbench/contrib/tasks/common/taskConfiguration.ts:				nls.localize(
'ProblemPatternParser.problemPattern.missingRegExp', 'The problem pattern is missing a regular expression.')
'ProblemPatternParser.loopProperty.notLast', 'The loop property is only supported on the last line matcher.')
'ProblemPatternParser.problemPattern.kindProperty.notFirst', 'The problem pattern is invalid. The kind property must be provided only in the first element')
'ProblemPatternParser.problemPattern.missingProperty', 'The problem pattern is invalid. It must have at least have a file and a message.')
'ProblemPatternParser.problemPattern.missingLocation', 'The problem pattern is invalid. It must either have kind: "file" or have a line or location match group.')
'ProblemPatternParser.invalidRegexp', 'Error: The string {0} is not a valid regular expression.\n', value)
'ProblemPatternSchema.regexp', 'The regular expression to find an error, warning or info in the output.'
'ProblemPatternSchema.kind', 'whether the pattern matches a location (file and line) or only a file.'
'ProblemPatternSchema.file', 'The match group index of the filename. If omitted 1 is used.'
'ProblemPatternSchema.location', 'The match group index of the problem\'s location. Valid location patterns are: (line), (line,column) and (startLine,startColumn,endLine,endColumn). If omitted (line,column) is assumed.'
'ProblemPatternSchema.line', 'The match group index of the problem\'s line. Defaults to 2'
'ProblemPatternSchema.column', 'The match group index of the problem\'s line character. Defaults to 3'
'ProblemPatternSchema.endLine', 'The match group index of the problem\'s end line. Defaults to undefined'
'ProblemPatternSchema.endColumn', 'The match group index of the problem\'s end line character. Defaults to undefined'
'ProblemPatternSchema.severity', 'The match group index of the problem\'s severity. Defaults to undefined'
'ProblemPatternSchema.code', 'The match group index of the problem\'s code. Defaults to undefined'
'ProblemPatternSchema.message', 'The match group index of the message. If omitted it defaults to 4 if location is specified. Otherwise it defaults to 5.'
'ProblemPatternSchema.loop', 'In a multi line matcher loop indicated whether this pattern is executed in a loop as long as it matches. Can only specified on a last pattern in a multi line pattern.'
'NamedProblemPatternSchema.name', 'The name of the problem pattern.'
'NamedMultiLineProblemPatternSchema.name', 'The name of the problem multi line problem pattern.'
'NamedMultiLineProblemPatternSchema.patterns', 'The actual patterns.'
'ProblemPatternExtPoint', 'Contributes problem patterns'
'ProblemPatternRegistry.error', 'Invalid problem pattern. The pattern will be ignored.')
'ProblemPatternRegistry.error', 'Invalid problem pattern. The pattern will be ignored.')
'ProblemMatcherParser.noProblemMatcher', 'Error: the description can\'t be converted into a problem matcher:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4))
'ProblemMatcherParser.noProblemPattern', 'Error: the description doesn\'t define a valid problem pattern:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4))
'ProblemMatcherParser.noOwner', 'Error: the description doesn\'t define an owner:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4))
'ProblemMatcherParser.noFileLocation', 'Error: the description doesn\'t define a file location:\n{0}\n', JSON.stringify(externalProblemMatcher, null, 4))
'ProblemMatcherParser.unknownSeverity', 'Info: unknown severity {0}. Valid values are error, warning and info.\n', description.severity)
'ProblemMatcherParser.noDefinedPatter', 'Error: the pattern with the identifier {0} doesn\'t exist.', variableName)
'ProblemMatcherParser.noIdentifier', 'Error: the pattern property refers to an empty identifier.')
'ProblemMatcherParser.noValidIdentifier', 'Error: the pattern property {0} is not a valid pattern variable name.', variableName)
'ProblemMatcherParser.problemPattern.watchingMatcher', 'A problem matcher must define both a begin pattern and an end pattern for watching.')
'ProblemMatcherParser.invalidRegexp', 'Error: The string {0} is not a valid regular expression.\n', value)
'WatchingPatternSchema.regexp', 'The regular expression to detect the begin or end of a background task.'
'WatchingPatternSchema.file', 'The match group index of the filename. Can be omitted.'
'PatternTypeSchema.name', 'The name of a contributed or predefined pattern'
'PatternTypeSchema.description', 'A problem pattern or the name of a contributed or predefined problem pattern. Can be omitted if base is specified.'
'ProblemMatcherSchema.base', 'The name of a base problem matcher to use.'
'ProblemMatcherSchema.owner', 'The owner of the problem inside Code. Can be omitted if base is specified. Defaults to \'external\' if omitted and base is not specified.'
'ProblemMatcherSchema.source', 'A human-readable string describing the source of this diagnostic, e.g. \'typescript\' or \'super lint\'.'
'ProblemMatcherSchema.severity', 'The default severity for captures problems. Is used if the pattern doesn\'t define a match group for severity.'
'ProblemMatcherSchema.applyTo', 'Controls if a problem reported on a text document is applied only to open, closed or all documents.'
'ProblemMatcherSchema.fileLocation', 'Defines how file names reported in a problem pattern should be interpreted. A relative fileLocation may be an array, where the second element of the array is the path of the relative file location. The search fileLocation mode, performs a deep (and, possibly, heavy) file system search within the directories specified by the include/exclude properties of the second element (or the current workspace directory if not specified).'
'ProblemMatcherSchema.background', 'Patterns to track the begin and end of a matcher active on a background task.'
'ProblemMatcherSchema.background.activeOnStart', 'If set to true the background monitor is in active mode when the task starts. This is equals of issuing a line that matches the beginsPattern'
'ProblemMatcherSchema.background.beginsPattern', 'If matched in the output the start of a background task is signaled.'
'ProblemMatcherSchema.background.endsPattern', 'If matched in the output the end of a background task is signaled.'
'ProblemMatcherSchema.watching.deprecated', 'The watching property is deprecated. Use background instead.'
'ProblemMatcherSchema.watching', 'Patterns to track the begin and end of a watching matcher.'
'ProblemMatcherSchema.watching.activeOnStart', 'If set to true the watcher is in active mode when the task starts. This is equals of issuing a line that matches the beginPattern'
'ProblemMatcherSchema.watching.beginsPattern', 'If matched in the output the start of a watching task is signaled.'
'ProblemMatcherSchema.watching.endsPattern', 'If matched in the output the end of a watching task is signaled.'
'LegacyProblemMatcherSchema.watchedBegin.deprecated', 'This property is deprecated. Use the watching property instead.'
'LegacyProblemMatcherSchema.watchedBegin', 'A regular expression signaling that a watched tasks begins executing triggered through file watching.'
'LegacyProblemMatcherSchema.watchedEnd.deprecated', 'This property is deprecated. Use the watching property instead.'
'LegacyProblemMatcherSchema.watchedEnd', 'A regular expression signaling that a watched tasks ends executing.'
'NamedProblemMatcherSchema.name', 'The name of the problem matcher used to refer to it.'
'NamedProblemMatcherSchema.label', 'A human readable label of the problem matcher.'
'ProblemMatcherExtPoint', 'Contributes problem matchers'
'msCompile', 'Microsoft compiler problems'
'lessCompile', 'Less problems'
'gulp-tsc', 'Gulp TSC Problems'
'jshint', 'JSHint problems'
'jshint-stylish', 'JSHint stylish problems'
'eslint-compact', 'ESLint compact problems'
'eslint-stylish', 'ESLint stylish problems'
'go', 'Go problems'
'JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.'
'JsonSchema.tasks.isShellCommand.deprecated', 'The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.'
'JsonSchema.hide', 'Hide this task from the run task quick pick'
'JsonSchema.tasks.dependsOn.identifier', 'The task identifier.'
'JsonSchema.tasks.dependsOn.string', 'Another task this task depends on.'
'JsonSchema.tasks.dependsOn.array', 'The other tasks this task depends on.'
'JsonSchema.tasks.dependsOn', 'Either a string representing another task or an array of other tasks that this task depends on.'
'JsonSchema.tasks.dependsOrder.parallel', 'Run all dependsOn tasks in parallel.'
'JsonSchema.tasks.dependsOrder.sequence', 'Run all dependsOn tasks in sequence.'
'JsonSchema.tasks.dependsOrder', 'Determines the order of the dependsOn tasks for this task. Note that this property is not recursive.'
'JsonSchema.tasks.detail', 'An optional description of a task that shows in the Run Task quick pick as a detail.'
'JsonSchema.tasks.icon', 'An optional icon for the task'
'JsonSchema.tasks.icon.id', 'An optional codicon ID to use'
'JsonSchema.tasks.icon.color', 'An optional color of the icon'
'JsonSchema.tasks.presentation', 'Configures the panel that is used to present the task\'s output and reads its input.'
'JsonSchema.tasks.presentation.echo', 'Controls whether the executed command is echoed to the panel. Default is true.'
'JsonSchema.tasks.presentation.focus', 'Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.'
'JsonSchema.tasks.presentation.revealProblems.always', 'Always reveals the problems panel when this task is executed.'
'JsonSchema.tasks.presentation.revealProblems.onProblem', 'Only reveals the problems panel if a problem is found.'
'JsonSchema.tasks.presentation.revealProblems.never', 'Never reveals the problems panel when this task is executed.'
'JsonSchema.tasks.presentation.revealProblems', 'Controls whether the problems panel is revealed when running this task or not. Takes precedence over option \"reveal\". Default is \"never\".'
'JsonSchema.tasks.presentation.reveal.always', 'Always reveals the terminal when this task is executed.'
'JsonSchema.tasks.presentation.reveal.silent', 'Only reveals the terminal if the task exits with an error or the problem matcher finds an error.'
'JsonSchema.tasks.presentation.reveal.never', 'Never reveals the terminal when this task is executed.'
'JsonSchema.tasks.presentation.reveal', 'Controls whether the terminal running the task is revealed or not. May be overridden by option \"revealProblems\". Default is \"always\".'
'JsonSchema.tasks.presentation.instance', 'Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.'
'JsonSchema.tasks.presentation.showReuseMessage', 'Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.'
'JsonSchema.tasks.presentation.clear', 'Controls whether the terminal is cleared before executing the task.'
'JsonSchema.tasks.presentation.group', 'Controls whether the task is executed in a specific terminal group using split panes.'
'JsonSchema.tasks.presentation.close', 'Controls whether the terminal the task runs in is closed when the task exits.'
'JsonSchema.tasks.terminal', 'The terminal property is deprecated. Use presentation instead'
'JsonSchema.tasks.group.build', 'Marks the task as a build task accessible through the \'Run Build Task\' command.'
'JsonSchema.tasks.group.test', 'Marks the task as a test task accessible through the \'Run Test Task\' command.'
'JsonSchema.tasks.group.none', 'Assigns the task to no group'
'JsonSchema.tasks.group.kind', 'The task\'s execution group.'
'JsonSchema.tasks.group.isDefault', 'Defines if this task is the default task in the group, or a glob to match the file which should trigger this task.'
'JsonSchema.tasks.group.defaultBuild', 'Marks the task as the default build task.'
'JsonSchema.tasks.group.defaultTest', 'Marks the task as the default test task.'
'JsonSchema.tasks.group', 'Defines to which execution group this task belongs to. It supports "build" to add it to the build group and "test" to add it to the test group.'
'JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.'
'JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character'
'JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character'
'JsonSchema.command.quotedString.value', 'The actual command value'
'JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\'s escape character (e.g. ` under PowerShell and \\ under bash).'
'JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\'s strong quote character (e.g. \' under PowerShell and bash).'
'JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\'s weak quote character (e.g. " under PowerShell and bash).'
'JsonSchema.command.quotesString.quote', 'How the command value should be quoted.'
'JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.'
'JsonSchema.args.quotedString.value', 'The actual argument value'
'JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\'s escape character (e.g. ` under PowerShell and \\ under bash).'
'JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\'s strong quote character (e.g. \' under PowerShell and bash).'
'JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\'s weak quote character (e.g. " under PowerShell and bash).'
'JsonSchema.args.quotesString.quote', 'How the argument value should be quoted.'
'JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'
'JsonSchema.tasks.label', "The task's user interface label"
'JsonSchema.version', 'The config\'s version number.'
'JsonSchema.tasks.identifier', 'A user defined identifier to reference the task in launch.json or a dependsOn clause.'
'JsonSchema.tasks.identifier.deprecated', 'User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.'
'JsonSchema.tasks.reevaluateOnRerun', 'Whether to reevaluate task variables on rerun.'
'JsonSchema.tasks.runOn', 'Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.'
'JsonSchema.tasks.instanceLimit', 'The number of instances of the task that are allowed to run simultaneously.'
'JsonSchema.tasks.runOptions', 'The task\'s run related options'
'JsonSchema.tasks.taskLabel', "The task's label"
'JsonSchema.tasks.taskName', 'The task\'s name'
'JsonSchema.tasks.taskName.deprecated', 'The task\'s name property is deprecated. Use the label property instead.'
'JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'
'JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'
'JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.'
'JsonSchema.customizations.customizes.type', 'The task type to customize'
'JsonSchema.tasks.customize.deprecated', 'The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach'
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.taskName.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:definitions.showOutputType.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.echoCommand.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.suppressTaskName.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.isBuildCommand.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:taskDescriptionProperties.isTestCommand.deprecationMessage = nls.localize(
'JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.'
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:definitionsTaskRunnerConfigurationProperties.suppressTaskName.deprecationMessage = nls.localize(
src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts:definitionsTaskRunnerConfigurationProperties.taskSelector.deprecationMessage = nls.localize(
'JsonSchema.windows', 'Windows specific command configuration'
'JsonSchema.mac', 'Mac specific command configuration'
'JsonSchema.linux', 'Linux specific command configuration'
'helpUs', "Help us improve our support for {0}", languageService.getLanguageName(data.languageId) ?? data.languageId
'takeShortSurvey', "Take Short Survey"
'remindLater', "Remind Me later"
'neverAgain', "Don't Show Again"
'building', 'Building...') }
'status.runningTasks', "Running Tasks"
'numberOfRunningTasks', "{0} running tasks", tasks.length
'runningTasks', "Show Running Tasks"
{ key: 'miRunTask', comment: ['&& denotes a mnemonic'] }, "&&Run Task..."
{ key: 'miBuildTask', comment: ['&& denotes a mnemonic'] }, "Run &&Build Task..."
{ key: 'miRunningTask', comment: ['&& denotes a mnemonic'] }, "Show Runnin&&g Tasks..."
{ key: 'miRestartTask', comment: ['&& denotes a mnemonic'] }, "R&&estart Running Task..."
{ key: 'miTerminateTask', comment: ['&& denotes a mnemonic'] }, "&&Terminate Task..."
{ key: 'miConfigureTask', comment: ['&& denotes a mnemonic'] }, "&&Configure Tasks..."
{ key: 'miConfigureBuildTask', comment: ['&& denotes a mnemonic'] }, "Configure De&&fault Build Task..."
'workbench.action.tasks.openWorkspaceFileTasks', "Open Workspace Tasks"
'ShowLogAction.label', "Show Task Log"
'RunTaskAction.label', "Run Task"
'ReRunTaskAction.label', "Rerun Last Task"
'RestartTaskAction.label', "Restart Running Task"
'ShowTasksAction.label', "Show Running Tasks"
'TerminateAction.label', "Terminate Task"
'BuildAction.label', "Run Build Task"
'TestAction.label', "Run Test Task"
'ConfigureDefaultBuildTask.label', "Configure Default Build Task"
'ConfigureDefaultTestTask.label', "Configure Default Test Task"
'workbench.action.tasks.openUserTasks', "Open User Tasks"
'RebuildAction.label', 'Run Rebuild Task'), category: tasksCategory }
'CleanAction.label', 'Run Clean Task'), category: tasksCategory }
'tasksQuickAccessPlaceholder', "Type the name of a task to run."
'tasksQuickAccessHelp', "Run Task"
'tasksConfigurationTitle', "Tasks"
'task.problemMatchers.neverPrompt', "Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types."
'task.problemMatchers.neverPrompt.boolean', 'Sets problem matcher prompting behavior for all tasks.'
'task.problemMatchers.neverPrompt.array', 'An object containing task type-boolean pairs to never prompt for problem matchers on.'
'task.autoDetect', "Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection."
'task.slowProviderWarning', "Configures whether a warning is shown when a provider is slow"
'task.slowProviderWarning.boolean', 'Sets the slow provider warning for all tasks.'
'task.slowProviderWarning.array', 'An array of task types to never show the slow provider warning.'
'task.quickOpen.history', "Controls the number of recent items tracked in task quick open dialog."
'task.quickOpen.detail', "Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task."
'task.quickOpen.skip', "Controls whether the task quick pick is skipped when there is only one task to pick from."
'task.quickOpen.showAll', "Causes the Tasks: Run Task command to use the slower \"show all\" behavior instead of the faster two level picker where tasks are grouped by provider."
'task.allowAutomaticTasks.on', "Always"
'task.allowAutomaticTasks.off', "Never"
'task.allowAutomaticTasks', "Enable automatic tasks - note that tasks won't run in an untrusted workspace."
'task.showDecorations', "Shows decorations at points of interest in the terminal buffer such as the first problem found via a watch task. Note that this will only take effect for future tasks. {0} will take precedence over this setting", '`#terminal.integrated.shellIntegration.decorationsEnabled#`'
'task.reconnection', "On window reload, reconnect to tasks that have problem matchers."
src/vs/workbench/contrib/tasks/browser/task.contribution.ts:			markdownDescription: nls.localize(
'task.saveBeforeRun.always', 'Always saves all editors before running.'
'task.saveBeforeRun.never', 'Never saves editors before running.'
'task.SaveBeforeRun.prompt', 'Prompts whether to save editors before running.'
'notificationsEmpty', "No new notifications"
'notifications', "Notifications"
'notificationsToolbar', "Notification Center Actions"
'notificationsCenterWidgetAriaLabel', "Notifications Center"
'executeCommand', "Click to execute command '{0}'", node.href.substr('command:'.length)
'notificationActions', "Notification Actions"
'notificationSource', "Source: {0}", notification.source
'surveyQuestion', "Do you mind taking a quick feedback survey?"
'takeSurvey', "Take Survey"
'remindLater', "Remind Me later"
'neverAgain', "Don't Show Again"
'ConfigureTaskRunnerAction.label', "Configure Task"
'tasks', "Tasks"
'TaskService.pickBuildTaskForLabel', 'Select the build task (there is no default build task defined)')
'runTask.arg', "Filters the tasks shown in the quickpick"
'runTask.label', "The task's label or a term to filter by"
'runTask.type', "The contributed task type"
'runTask.task', "The task's label or a term to filter by"
'taskServiceOutputPrompt', 'There are task errors. See the output for details.'
'showOutput', "Show output"
'TaskServer.folderIgnored', 'The folder {0} is ignored since it uses task version 0.1.0', name))
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:				this._outputChannel.append(nls.localize(
'TaskService.noTestTask1', 'No test task defined. Mark a task with \'isTestCommand\' in the tasks.json file.'), TaskErrors.NoTestTask
'TaskService.noTestTask2', 'No test task defined. Mark a task with as a \'test\' group in the tasks.json file.'), TaskErrors.NoTestTask
'TaskService.noBuildTask1', 'No build task defined. Mark a task with \'isBuildCommand\' in the tasks.json file.'), TaskErrors.NoBuildTask
'TaskService.noBuildTask2', 'No build task defined. Mark a task with as a \'build\' group in the tasks.json file.'), TaskErrors.NoBuildTask
'TaskServer.noTask', 'Task to execute is undefined'), TaskErrors.TaskNotFound
'TaskService.associate', 'associate') }
'TaskService.attachProblemMatcher.continueWithout', 'Continue without scanning the task output'
'TaskService.attachProblemMatcher.never', 'Never scan the task output for this task'
'TaskService.attachProblemMatcher.neverType', 'Never scan the task output for {0} tasks', taskType
'TaskService.attachProblemMatcher.learnMoreAbout', 'Learn more about scanning the task output'
'selectProblemMatcher', 'Select for which kind of errors and warnings to scan the task output') }
'customizeParseErrors', 'The current task configuration has errors. Please fix the errors first before customizing a task.')
'tasksJsonComment', '\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \n\t// for the documentation about the tasks.json format'
'moreThanOneBuildTask', 'There are many build tasks defined in the tasks.json. Executing the first one.\n')
'TaskSystem.saveBeforeRun.prompt.title', 'Save all editors?'
'saveBeforeRun.dontSave', 'Don\'t save'
'detail', "Do you want to save all editors before running the task?"
'TaskSystem.activeSame.noBackground', 'The task \'{0}\' is already active.', executeResult.task.getQualifiedLabel()
'terminateTask', "Terminate Task"
'restartTask', "Restart Task"
'TaskSystem.active', 'There is already a task running. Terminate it first before executing another task.'), TaskErrors.RunningTask
'TaskSystem.restartFailed', 'Failed to terminate and restart task {0}', Types.isString(task) ? task : task.configurationProperties.name)
'unexpectedTaskType', "The task provider for \"{0}\" tasks unexpectedly provided a task of type \"{1}\".\n", this._providerTypes.get(handle), task.type)
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:								this._outputChannel.append(nls.localize(
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:								this._outputChannel.append(nls.localize(
'TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\'t not be used. Please correct the errors first.')
{ key: 'TaskSystem.invalidTaskJsonOther', comment: ['Message notifies of an error in one of several places there is tasks related json, not necessarily in a file named tasks.json'] }, 'Error: The content of the tasks json in {0} has syntax errors. Please correct them before executing a task.\n', location)
'TasksSystem.locationWorkspaceConfig', 'workspace file')
'TaskSystem.versionWorkspaceFile', 'Only tasks version 2.0.0 permitted in workspace configuration files.')
'TasksSystem.locationUserConfig', 'user settings')
'TaskSystem.versionSettings', 'Only tasks version 2.0.0 permitted in user settings.')
'TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\'t not be used. Please correct the errors first.')
src/vs/workbench/contrib/tasks/browser/abstractTaskService.ts:					this._outputChannel.append(nls.localize(
'TaskSystem.invalidTaskJson', 'Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.\n')
'TerminateAction.label', "Terminate Task"
'TaskSystem.unknownError', 'An error has occurred while running a task. See task log for details.')
'configureTask', "Configure Task"
'recentlyUsed', 'recently used tasks')
'configured', 'configured tasks')
'detected', 'detected tasks')
'TaskService.ignoredFolder', 'The following workspace folders are ignored since they use task version 0.1.0: {0}', this.ignoredWorkspaceFolders.map(f => f.name).join(', ')
'TaskService.notAgain', "Don't Show Again"
'TaskService.requestTrust', "Listing and running tasks requires that some of the files in this workspace be executed as code."
'TaskService.pickRunTask', 'Select the task to run'
'TaskService.noEntryToRun', 'Configure a Task'
'TaskService.noEntryToRun', 'Configure a Task'
'TaskService.fetchingBuildTasks', 'Fetching build tasks...'
'TaskService.pickBuildTask', 'Select the build task to run'
'TaskService.noBuildTask', 'No build task to run found. Configure Build Task...'
'TaskService.fetchingTestTasks', 'Fetching test tasks...'
'TaskService.pickTestTask', 'Select the test task to run'
'TaskService.noTestTaskTerminal', 'No test task to run found. Configure Tasks...'
'TaskService.taskToTerminate', 'Select a task to terminate'
'TaskService.noTaskRunning', 'No task is currently running'
'TaskService.terminateAllRunningTasks', 'All Running Tasks'
'TerminateAction.noProcess', 'The launched process doesn\'t exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.')
'TerminateAction.failed', 'Failed to terminate running task')
'TaskService.taskToRestart', 'Select the task to restart'
'TaskService.noTaskToRestart', 'No task to restart'
'TaskService.template', 'Select a Task Template') }
'taskQuickPick.userSettings', 'User'
'TaskService.createJsonFile', 'Create tasks.json file from template'
'TaskService.openJsonFile', 'Open tasks.json file'
'TaskService.pickTask', 'Select a task to configure') }, cancellationToken
'TaskService.defaultBuildTaskExists', '{0} is already marked as the default build task', TaskQuickPick.getTaskLabelWithIcon(task, task.getQualifiedLabel())
'TaskService.pickTask', 'Select a task to configure') }, cancellationToken
'TaskService.pickDefaultBuildTask', 'Select the task to be used as the default build task'
'TaskService.defaultTestTaskExists', '{0} is already marked as the default test task.', selectedTask.getQualifiedLabel()
'TaskService.pickDefaultTestTask', 'Select the task to be used as the default test task'), undefined, true, false, selectedEntry).then((entry
'TaskService.pickShowTask', 'Select the task to show its output'
'TaskService.noTaskIsRunning', 'No task is running'
'taskService.upgradeVersion', "The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diff to review the upgrade."
'taskService.upgradeVersionPlural', "The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diffs to review the upgrade."
'taskService.openDiffs', "Open diffs"
'cesSurveyQuestion', 'Got a moment to help the VS Code team? Please tell us about your experience with VS Code so far.'
'giveFeedback', "Give Feedback"
'remindLater', "Remind Me later"
'JsonSchema.version.deprecated', 'Task version 0.1.0 is deprecated. Please use 2.0.0'
'JsonSchema.version', 'The config\'s version number'
'JsonSchema._runner', 'The runner has graduated. Use the official runner property'
'JsonSchema.runner', 'Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.'
'JsonSchema.windows', 'Windows specific command configuration'
'JsonSchema.mac', 'Mac specific command configuration'
'JsonSchema.linux', 'Linux specific command configuration'
'JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.'
'metadataDiff', "{0} ↔ {1}", secondary.getMetadata(), primary.getMetadata()
'markdownPreview', "Markdown Preview"
'workbench.editor.autoLockGroups', "If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor."
'workbench.editor.defaultBinaryEditor', "The default editor for files detected as binary. If undefined the user will be presented with a picker."
'editor.editorAssociations', "Configure glob patterns to editors (e.g. `\"*.hex\": \"hexEditor.hexEdit\"`). These have precedence over the default behavior."
'relaunchSettingMessage', "A setting has changed that requires a restart to take effect."
'relaunchSettingMessageWeb', "A setting has changed that requires a reload to take effect."
'relaunchSettingDetail', "Press the restart button to restart {0} and enable the setting.", this.productService.nameLong
'relaunchSettingDetailWeb', "Press the reload button to reload {0} and enable the setting.", this.productService.nameLong
'restart', "&&Restart"
'restartWeb', "&&Reload"
'editorCommand.activeEditorMove.description', "Move the active editor by tabs or groups"
'editorCommand.activeEditorMove.arg.name', "Active editor move argument"
'editorCommand.activeEditorMove.arg.description', "Argument Properties:\n\t* 'to': String value providing where to move.\n\t* 'by': String value providing the unit for move (by tab or by group).\n\t* 'value': Number value providing how many positions or an absolute position to move."
'editorCommand.activeEditorCopy.description', "Copy the active editor by groups"
'editorCommand.activeEditorCopy.arg.name', "Active editor copy argument"
'editorCommand.activeEditorCopy.arg.description', "Argument Properties:\n\t* 'to': String value providing where to copy.\n\t* 'value': Number value providing how many positions or an absolute position to copy."
'toggleInlineView', "Toggle Inline View"
'compare', "Compare"
'splitEditorInGroup', "Split Editor in Group"
'joinEditorInGroup', "Join Editor in Group"
'toggleJoinEditorInGroup', "Toggle Split Editor in Group"
'toggleSplitEditorInGroupLayout', "Toggle Layout of Split Editor in Group"
'focusLeftSideEditor', "Focus First Side in Active Editor"
'focusRightSideEditor', "Focus Second Side in Active Editor"
'focusOtherSideEditor', "Focus Other Side in Active Editor"
'toggleEditorGroupLock', "Toggle Editor Group Lock"
'lockEditorGroup', "Lock Editor Group"
'unlockEditorGroup', "Unlock Editor Group"
'dropIntoEditorPrompt', "Hold __{0}__ to drop into editor", isMacintosh ? '⇧' : 'Shift'), {}
'ok', 'OK')
'cancel', "Cancel")
'editorOpenErrorDialog', "Unable to open '{0}'", editor.getName()
'JsonSchema.options', 'Additional command options'
'JsonSchema.options.cwd', 'The current working directory of the executed program or script. If omitted Code\'s current workspace root is used.'
'JsonSchema.options.env', 'The environment of the executed program or shell. If omitted the parent process\' environment is used.'
'JsonSchema.tasks.matcherError', 'Unrecognized problem matcher. Is the extension that contributes this problem matcher installed?'
'JsonSchema.tasks.matcherError', 'Unrecognized problem matcher. Is the extension that contributes this problem matcher installed?'
'JsonSchema.shellConfiguration', 'Configures the shell to be used.'
'JsonSchema.shell.executable', 'The shell to be used.'
'JsonSchema.shell.args', 'The shell arguments.'
'JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.'
'JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'
'JsonSchema.tasks.taskName', "The task's name"
'JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.'
'JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'
'JsonSchema.tasks.windows', 'Windows specific command configuration'
'JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.'
'JsonSchema.tasks.mac', 'Mac specific command configuration'
'JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.'
'JsonSchema.tasks.linux', 'Linux specific command configuration'
'JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.'
'JsonSchema.tasks.suppressTaskName', 'Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.'
'JsonSchema.tasks.showOutput', 'Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.'
'JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'
'JsonSchema.tasks.watching.deprecation', 'Deprecated. Use isBackground instead.'
'JsonSchema.tasks.watching', 'Whether the executed task is kept alive and is watching the file system.'
'JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'
'JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'
'JsonSchema.tasks.build', 'Maps this task to Code\'s default build command.'
'JsonSchema.tasks.test', 'Maps this task to Code\'s default test command.'
'JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.'
'JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.'
'JsonSchema.args', 'Additional arguments passed to the command.'
'JsonSchema.showOutput', 'Controls whether the output of the running task is shown or not. If omitted \'always\' is used.'
'JsonSchema.watching.deprecation', 'Deprecated. Use isBackground instead.'
'JsonSchema.watching', 'Whether the executed task is kept alive and is watching the file system.'
'JsonSchema.background', 'Whether the executed task is kept alive and is running in the background.'
'JsonSchema.promptOnClose', 'Whether the user is prompted when VS Code closes with a running background task.'
'JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'
'JsonSchema.suppressTaskName', 'Controls whether the task name is added as an argument to the command. Default is false.'
'JsonSchema.taskSelector', 'Prefix to indicate that an argument is task.'
'JsonSchema.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.'
'JsonSchema.tasks', 'The task configurations. Usually these are enrichments of task already defined in the external task runner.'
'textDiffEditor', "Text Diff Editor"
'editor', "Editor"
'ariaLabelEditorActions', "Editor actions"
'draggedEditorGroup', "{0} (+{1})", label, this.group.count - 1
'textEditor', "Text Editor"
'noViewResults', "No matching editors"
'entryAriaLabelWithGroupDirty', "{0}, unsaved changes, {1}", nameAndDescription, mapGroupIdToGroupAriaLabel.get(groupId)
'entryAriaLabelWithGroup', "{0}, {1}", nameAndDescription, mapGroupIdToGroupAriaLabel.get(groupId)
'entryAriaLabelDirty', "{0}, unsaved changes", nameAndDescription
'closeEditor', "Close Editor"
{ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, "&&Yes")
'cancelButton', "Cancel")
src/vs/workbench/browser/parts/dialogs/dialogHandler.ts:			return localize('aboutDetail',
'ok', "OK")], { detail, cancelId: 1 }
'ariaLabelGroupActions', "Empty editor group actions"
'emptyEditorGroup', "{0} (empty)", this.label)
'groupLabel', "Group {0}", this._index + 1
'groupAriaLabel', "Editor Group {0}", this._index + 1
'trustRequiredEditor', "Workspace Trust Required"
'requiresFolderTrustText', "The file is not displayed in the editor because trust has not been granted to the folder."
'requiresWorkspaceTrustText', "The file is not displayed in the editor because trust has not been granted to the workspace."
'manageTrust', "Manage Workspace Trust"
'errorEditor', "Error Editor"
'unavailableResourceErrorEditorText', "The editor could not be opened because the file was not found."
'unknownErrorEditorTextWithError', "The editor could not be opened due to an unexpected error: {0}", toErrorMessage(error)
'unknownErrorEditorTextWithoutError', "The editor could not be opened due to an unexpected error."
'retry', "Try Again"
'searchEditor', "Search Editor"
'promptOpenWith.searchEditor.displayName', "Search Editor"
'search', "Search Editor"
'searchEditor.deleteResultBlock', "Delete File Results"
'search.openNewSearchEditor', "New Search Editor"
'search.openSearchEditor', "Open Search Editor"
'search.openNewEditorToSide', "Open new Search Editor to the Side"
'search.openResultsInEditor', "Open Results in Editor"
'search.rerunSearchInEditor', "Search Again"
'search.action.focusQueryEditorWidget', "Focus Search Editor Input"
'search.action.focusFilesToInclude', "Focus Search Editor Files to Include"
'search.action.focusFilesToExclude', "Focus Search Editor Files to Exclude"
'searchEditor.action.toggleSearchEditorCaseSensitive', "Toggle Match Case"
'searchEditor.action.toggleSearchEditorWholeWord', "Toggle Match Whole Word"
'searchEditor.action.toggleSearchEditorRegex', "Toggle Use Regular Expression"
'searchEditor.action.toggleSearchEditorContextLines', "Toggle Context Lines"
'searchEditor.action.increaseSearchEditorContextLines', "Increase Context Lines"
'searchEditor.action.decreaseSearchEditorContextLines', "Decrease Context Lines"
'searchEditor.action.selectAllSearchEditorMatches', "Select All Matches"
'search.openNewEditor', "Open New Search Editor"
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:			extension.collector.error(localize(
'vscode.extension.contributes.snippets', 'Contributes snippets.'
'vscode.extension.contributes.snippets-language', 'Language identifier for which this snippet is contributed to.'
'vscode.extension.contributes.snippets-path', 'Path of the snippets file. The path is relative to the extension folder and typically starts with \'./snippets/\'.'
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:									extension.collector.warn(localize(
src/vs/workbench/contrib/snippets/browser/snippetsService.ts:								extension.collector.warn(localize(
'sideBySideEditor', "Side by Side Editor"
'singleSelectionRange', "Ln {0}, Col {1} ({2} selected)"
'singleSelection', "Ln {0}, Col {1}"
'multiSelectionRange', "{0} selections ({1} characters selected)"
'multiSelection', "{0} selections"
'endOfLineLineFeed', "LF"
'endOfLineCarriageReturnLineFeed', "CRLF"
'screenReaderDetectedExplanation.question', "Are you using a screen reader to operate VS Code?"
'screenReaderDetectedExplanation.answerYes', "Yes"
'screenReaderDetectedExplanation.answerNo', "No"
'noEditor', "No text editor active at this time") }]
'noWritableCodeEditor', "The active code editor is read-only.") }]
'indentConvert', "convert file") }
'indentView', "change view") }
'pickAction', "Select Action"), matchOnDetail: true }
'tabFocusModeEnabled', "Tab Moves Focus"
'status.editor.tabFocusMode', "Accessibility Mode"
'disableTabMode', "Disable Accessibility Mode"
'columnSelectionModeEnabled', "Column Selection"
'status.editor.columnSelectionMode', "Column Selection Mode"
'disableColumnSelectionMode', "Disable Column Selection Mode"
'screenReaderDetected', "Screen Reader Optimized"
'status.editor.screenReaderMode', "Screen Reader Mode"
'status.editor.selection', "Editor Selection"
'gotoLine', "Go to Line/Column"
'status.editor.indentation', "Editor Indentation"
'selectIndentation', "Select Indentation"
'status.editor.encoding', "Editor Encoding"
'selectEncoding', "Select Encoding"
'status.editor.eol', "Editor End of Line"
'selectEOL', "Select End of Line Sequence"
'status.editor.mode', "Editor Language"
'selectLanguageMode', "Select Language Mode"
'status.editor.info', "File Information"
'fileInfo', "File Information"
'spacesSize', "Spaces: {0}", modelOpts.indentSize
{ key: 'tabSize', comment: ['Tab corresponds to the tab key'] }, "Tab Size: {0}", modelOpts.tabSize
'currentProblem', "Current Problem"), text: '', ariaLabel: '' }, 'statusbar.currentProblem', StatusbarAlignment.LEFT
'currentProblem', "Current Problem"), text, ariaLabel: text }
'showLanguageExtensions', "Search Marketplace Extensions for '{0}'...", fileExtension)
'changeMode', "Change Language Mode"
'noEditor', "No text editor active at this time") }]
'languageDescription', "({0}) - Configured Language", languageId
'languageDescriptionConfigured', "({0})", languageId
'languagesPicks', "languages (identifier)") }
'configureModeSettings', "Configure '{0}' language based settings...", currentLanguageName
'configureAssociationsExt', "Configure File Association for '{0}'...", ext
'autoDetect', "Auto Detect"
'pickLanguage', "Select Language Mode"), matchOnDescription: true }
'currentAssociation', "Current Association"
'pickLanguageToConfigure', "Select Language Mode to Associate with '{0}'", extension || base) }
'changeEndOfLine', "Change End of Line Sequence"
'noEditor', "No text editor active at this time") }]
'noWritableCodeEditor', "The active code editor is read-only.") }]
'pickEndOfLine', "Select End of Line Sequence"), activeItem: EOLOptions[selectedIndex] }
'changeEncoding', "Change File Encoding"
'noEditor', "No text editor active at this time") }]
'noEditor', "No text editor active at this time") }]
'noFileEditor', "No file active at this time") }]
'saveWithEncoding', "Save with Encoding"
'reopenWithEncoding', "Reopen with Encoding"
'pickAction', "Select Action"), matchOnDetail: true }
'guessedEncoding', "Guessed from content") }
'pickEncodingForSave', "Select File Encoding to Save with"
'moreSearch', "Toggle Search Details") })
'searchScope.includes', "files to include"
'label.includes', 'Search Include Patterns'
'searchScope.excludes', "files to exclude"
'label.excludes', 'Search Exclude Patterns'
'runSearch', "Run Search"))
'searchResultItem', "Matched {0} at {1} in file {2}", matchText, matchLineText, file.slice(0, file.length - 1))
'searchEditor', "Search"
'textInputBoxBorder', "Search editor text input box border.")
'searchTitle.withQuery', "Search: {0}", basename((originalURI ?? this.backingUri).path, SEARCH_EDITOR_EXT)
'searchTitle.withQuery', "Search: {0}", trimToMax(query)
'searchTitle', "Search"
'invalidQueryStringError', "All backslashes in Query string must be escaped (\\\\)")
'oneFile', "1 file"
'oneResult', "1 result"
'noResults', "No Results"
'searchMaxResultsWarning', "The result set only contains a subset of all matches. Be more specific in your search to narrow down the results.")
'breadcrumbs', "Breadcrumbs"
'source.workspaceSnippetGlobal', "Workspace Snippet"
'source.userSnippetGlobal', "Global User Snippet"
'source.userSnippet', "User Snippet"
'splitEditor', "Split Editor"
'splitEditorOrthogonal', "Split Editor Orthogonal"
'splitEditorGroupLeft', "Split Editor Left"
'splitEditorGroupRight', "Split Editor Right"
'splitEditorGroupUp', "Split Editor Up"
'splitEditorGroupDown', "Split Editor Down"
'joinTwoGroups', "Join Editor Group with Next Group"
'joinAllGroups', "Join All Editor Groups"
'navigateEditorGroups', "Navigate Between Editor Groups"
'focusActiveEditorGroup', "Focus Active Editor Group"
'focusFirstEditorGroup', "Focus First Editor Group"
'focusLastEditorGroup', "Focus Last Editor Group"
'focusNextGroup', "Focus Next Editor Group"
'focusPreviousGroup', "Focus Previous Editor Group"
'focusLeftGroup', "Focus Left Editor Group"
'focusRightGroup', "Focus Right Editor Group"
'focusAboveGroup', "Focus Editor Group Above"
'focusBelowGroup', "Focus Editor Group Below"
'closeEditor', "Close Editor"
'unpinEditor', "Unpin Editor"
'closeOneEditor', "Close"
'revertAndCloseActiveEditor', "Revert and Close Editor"
'closeEditorsToTheLeft', "Close Editors to the Left in Group"
'closeAllEditors', "Close All Editors"
'closeAllGroups', "Close All Editor Groups"
'closeEditorsInOtherGroups', "Close Editors in Other Groups"
'closeEditorInAllGroups', "Close Editor in All Groups"
'moveActiveGroupLeft', "Move Editor Group Left"
'moveActiveGroupRight', "Move Editor Group Right"
'moveActiveGroupUp', "Move Editor Group Up"
'moveActiveGroupDown', "Move Editor Group Down"
'duplicateActiveGroupLeft', "Duplicate Editor Group Left"
'duplicateActiveGroupRight', "Duplicate Editor Group Right"
'duplicateActiveGroupUp', "Duplicate Editor Group Up"
'duplicateActiveGroupDown', "Duplicate Editor Group Down"
'minimizeOtherEditorGroups', "Maximize Editor Group"
'evenEditorGroups', "Reset Editor Group Sizes"
'toggleEditorWidths', "Toggle Editor Group Sizes"
'maximizeEditor', "Maximize Editor Group and Hide Side Bars"
'openNextEditor', "Open Next Editor"
'openPreviousEditor', "Open Previous Editor"
'nextEditorInGroup', "Open Next Editor in Group"
'openPreviousEditorInGroup', "Open Previous Editor in Group"
'firstEditorInGroup', "Open First Editor in Group"
'lastEditorInGroup', "Open Last Editor in Group"
'navigateForward', "Go Forward"
{ key: 'miForward', comment: ['&& denotes a mnemonic'] }, "&&Forward"
'navigateBack', "Go Back"
{ key: 'miBack', comment: ['&& denotes a mnemonic'] }, "&&Back"
'navigatePrevious', "Go Previous"
'navigateForwardInEdits', "Go Forward in Edit Locations"
'navigateBackInEdits', "Go Back in Edit Locations"
'navigatePreviousInEdits', "Go Previous in Edit Locations"
'navigateToLastEditLocation', "Go to Last Edit Location"
'navigateForwardInNavigations', "Go Forward in Navigation Locations"
'navigateBackInNavigations', "Go Back in Navigation Locations"
'navigatePreviousInNavigationLocations', "Go Previous in Navigation Locations"
'navigateToLastNavigationLocation', "Go to Last Navigation Location"
'reopenClosedEditor', "Reopen Closed Editor"
'clearRecentFiles', "Clear Recently Opened"
'confirmClearRecentsMessage', "Do you want to clear all recently opened files and workspaces?"
'confirmClearDetail', "This action is irreversible!"
{ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Clear"
'showEditorsInActiveGroup', "Show Editors in Active Group By Most Recently Used"
'showAllEditors', "Show All Editors By Appearance"
'showAllEditorsByMostRecentlyUsed', "Show All Editors By Most Recently Used"
'quickOpenPreviousRecentlyUsedEditor', "Quick Open Previous Recently Used Editor"
'quickOpenLeastRecentlyUsedEditor', "Quick Open Least Recently Used Editor"
'quickOpenPreviousRecentlyUsedEditorInGroup', "Quick Open Previous Recently Used Editor in Group"
'quickOpenLeastRecentlyUsedEditorInGroup', "Quick Open Least Recently Used Editor in Group"
'navigateEditorHistoryByInput', "Quick Open Previous Editor from History"
'openNextRecentlyUsedEditor', "Open Next Recently Used Editor"
'openPreviousRecentlyUsedEditor', "Open Previous Recently Used Editor"
'openNextRecentlyUsedEditorInGroup', "Open Next Recently Used Editor In Group"
'openPreviousRecentlyUsedEditorInGroup', "Open Previous Recently Used Editor In Group"
'clearEditorHistory', "Clear Editor History"
'confirmClearEditorHistoryMessage', "Do you want to clear the history of recently opened editors?"
'confirmClearDetail', "This action is irreversible!"
{ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Clear"
'moveEditorLeft', "Move Editor Left"
'moveEditorRight', "Move Editor Right"
'moveEditorToPreviousGroup', "Move Editor into Previous Group"
'moveEditorToNextGroup', "Move Editor into Next Group"
'moveEditorToAboveGroup', "Move Editor into Group Above"
'moveEditorToBelowGroup', "Move Editor into Group Below"
'moveEditorToLeftGroup', "Move Editor into Left Group"
'moveEditorToRightGroup', "Move Editor into Right Group"
'moveEditorToFirstGroup', "Move Editor into First Group"
'moveEditorToLastGroup', "Move Editor into Last Group"
'splitEditorToPreviousGroup', "Split Editor into Previous Group"
'splitEditorToNextGroup', "Split Editor into Next Group"
'splitEditorToAboveGroup', "Split Editor into Group Above"
'splitEditorToBelowGroup', "Split Editor into Group Below"
'splitEditorToLeftGroup', "Split Editor into Left Group"
'splitEditorToRightGroup', "Split Editor into Right Group"
'splitEditorToFirstGroup', "Split Editor into First Group"
'splitEditorToLastGroup', "Split Editor into Last Group"
'editorLayoutSingle', "Single Column Editor Layout"
'editorLayoutTwoColumns', "Two Columns Editor Layout"
'editorLayoutThreeColumns', "Three Columns Editor Layout"
'editorLayoutTwoRows', "Two Rows Editor Layout"
'editorLayoutThreeRows', "Three Rows Editor Layout"
'editorLayoutTwoByTwoGrid', "Grid Editor Layout (2x2)"
'editorLayoutTwoColumnsBottom', "Two Columns Bottom Editor Layout"
'editorLayoutTwoRowsRight', "Two Rows Right Editor Layout"
'newEditorLeft', "New Editor Group to the Left"
'newEditorRight', "New Editor Group to the Right"
'newEditorAbove', "New Editor Group Above"
'newEditorBelow', "New Editor Group Below"
'workbench.action.toggleEditorType', "Toggle Editor Type"
'workbench.action.reopenTextEditor', "Reopen Editor With Text Editor"
'textEditor', "Text Editor"
'textDiffEditor', "Text Diff Editor"
'binaryDiffEditor', "Binary Diff Editor"
'sideBySideEditor', "Side by Side Editor"
'editorQuickAccessPlaceholder', "Type the name of an editor to open it."
'activeGroupEditorsByMostRecentlyUsedQuickAccess', "Show Editors in Active Group by Most Recently Used"
'editorQuickAccessPlaceholder', "Type the name of an editor to open it."
'allEditorsByAppearanceQuickAccess', "Show All Opened Editors By Appearance"
'editorQuickAccessPlaceholder', "Type the name of an editor to open it."
'allEditorsByMostRecentlyUsedQuickAccess', "Show All Opened Editors By Most Recently Used"
'file', "File")
'unlockGroupAction', "Unlock Group"), icon: Codicon.lock }, group: 'navigation', order: 10, when: ActiveEditorGroupLockedContext }
'closeGroupAction', "Close Group"), icon: Codicon.close }, group: 'navigation', order: 20 }
'splitUp', "Split Up") }, group: '2_split', order: 10 }
'splitDown', "Split Down") }, group: '2_split', order: 20 }
'splitLeft', "Split Left") }, group: '2_split', order: 30 }
'splitRight', "Split Right") }, group: '2_split', order: 40 }
'toggleLockGroup', "Lock Group"), toggled: ActiveEditorGroupLockedContext }, group: '3_lock', order: 10, when: MultipleEditorGroupsContext }
'close', "Close") }, group: '4_close', order: 10, when: MultipleEditorGroupsContext }
'close', "Close") }, group: '1_close', order: 10 }
'closeOthers', "Close Others"), precondition: EditorGroupEditorsCountContext.notEqualsTo('1') }, group: '1_close', order: 20 }
'closeRight', "Close to the Right"), precondition: ActiveEditorLastInGroupContext.toNegated() }, group: '1_close', order: 30, when: EditorTabsVisibleContext }
'closeAllSaved', "Close Saved") }, group: '1_close', order: 40 }
'closeAll', "Close All") }, group: '1_close', order: 50 }
'reopenWith', "Reopen Editor With...") }, group: '1_open', order: 10, when: ActiveEditorAvailableEditorIdsContext }
'keepOpen', "Keep Open"), precondition: ActiveEditorPinnedContext.toNegated() }, group: '3_preview', order: 10, when: ContextKeyExpr.has('config.workbench.editor.enablePreview') }
'pin', "Pin") }, group: '3_preview', order: 20, when: ActiveEditorStickyContext.toNegated() }
'unpin', "Unpin") }, group: '3_preview', order: 20, when: ActiveEditorStickyContext }
'splitUp', "Split Up") }, group: '5_split', order: 10 }
'splitDown', "Split Down") }, group: '5_split', order: 20 }
'splitLeft', "Split Left") }, group: '5_split', order: 30 }
'splitRight', "Split Right") }, group: '5_split', order: 40 }
'splitInGroup', "Split in Group") }, group: '6_split_in_group', order: 10, when: ActiveEditorCanSplitInGroupContext }
'joinInGroup', "Join in Group") }, group: '6_split_in_group', order: 10, when: SideBySideEditorActiveContext }
'inlineView', "Inline View"), toggled: ContextKeyExpr.equals('config.diffEditor.renderSideBySide', false) }, group: '1_diff', order: 10, when: ContextKeyExpr.has('isInDiffEditor') }
'showOpenedEditors', "Show Opened Editors") }, group: '3_open', order: 10 }
'closeAll', "Close All") }, group: '5_close', order: 10 }
'closeAllSaved', "Close Saved") }, group: '5_close', order: 20 }
'togglePreviewMode', "Enable Preview Editors"), toggled: ContextKeyExpr.has('config.workbench.editor.enablePreview') }, group: '7_settings', order: 10 }
'lockGroup', "Lock Group"), toggled: ActiveEditorGroupLockedContext }, group: '8_lock', order: 10, when: MultipleEditorGroupsContext }
'splitEditorRight', "Split Editor Right"
'splitEditorDown', "Split Editor Down"
'splitEditorDown', "Split Editor Down"
'splitEditorRight', "Split Editor Right"
'toggleSplitEditorInGroupLayout', "Toggle Layout"
'close', "Close"
'closeAll', "Close All"
'close', "Close"
'closeAll', "Close All"
'unpin', "Unpin"
'close', "Close"
'unpin', "Unpin"
'close', "Close"
'unlockEditorGroup', "Unlock Group"
'previousChangeIcon', 'Icon for the previous change action in the diff editor.')
'nextChangeIcon', 'Icon for the next change action in the diff editor.')
'toggleWhitespace', 'Icon for the toggle whitespace action in the diff editor.')
'navigate.prev.label', "Previous Change"
'navigate.next.label', "Next Change"
'ignoreTrimWhitespace.label', "Ignore Leading/Trailing Whitespace Differences"
'showTrimWhitespace.label', "Show Leading/Trailing Whitespace Differences"
'keepEditor', "Keep Editor"), original: 'Keep Editor' }, category: Categories.View }, when: ContextKeyExpr.has('config.workbench.editor.enablePreview') }
'pinEditor', "Pin Editor"), original: 'Pin Editor' }, category: Categories.View } }
'unpinEditor', "Unpin Editor"), original: 'Unpin Editor' }, category: Categories.View } }
'closeEditor', "Close Editor"), original: 'Close Editor' }, category: Categories.View } }
'closePinnedEditor', "Close Pinned Editor"), original: 'Close Pinned Editor' }, category: Categories.View } }
'closeEditorsInGroup', "Close All Editors in Group"), original: 'Close All Editors in Group' }, category: Categories.View } }
'closeSavedEditors', "Close Saved Editors in Group"), original: 'Close Saved Editors in Group' }, category: Categories.View } }
'closeOtherEditors', "Close Other Editors in Group"), original: 'Close Other Editors in Group' }, category: Categories.View } }
'closeRightEditors', "Close Editors to the Right in Group"), original: 'Close Editors to the Right in Group' }, category: Categories.View }, when: ActiveEditorLastInGroupContext.toNegated() }
'closeEditorGroup', "Close Editor Group"), original: 'Close Editor Group' }, category: Categories.View }, when: MultipleEditorGroupsContext }
'reopenWith', "Reopen Editor With..."), original: 'Reopen Editor With...' }, category: Categories.View }, when: ActiveEditorAvailableEditorIdsContext }
{ key: 'miReopenClosedEditor', comment: ['&& denotes a mnemonic'] }, "&&Reopen Closed Editor"
{ key: 'miClearRecentOpen', comment: ['&& denotes a mnemonic'] }, "&&Clear Recently Opened"
'miShare', "Share"
{ key: 'miEditorLayout', comment: ['&& denotes a mnemonic'] }, "Editor &&Layout"
'miSplitEditorUpWithoutMnemonic', "Split Up"
{ key: 'miSplitEditorUp', comment: ['&& denotes a mnemonic'] }, "Split &&Up"
'miSplitEditorDownWithoutMnemonic', "Split Down"
{ key: 'miSplitEditorDown', comment: ['&& denotes a mnemonic'] }, "Split &&Down"
'miSplitEditorLeftWithoutMnemonic', "Split Left"
{ key: 'miSplitEditorLeft', comment: ['&& denotes a mnemonic'] }, "Split &&Left"
'miSplitEditorRightWithoutMnemonic', "Split Right"
{ key: 'miSplitEditorRight', comment: ['&& denotes a mnemonic'] }, "Split &&Right"
'miSplitEditorInGroupWithoutMnemonic', "Split in Group"
{ key: 'miSplitEditorInGroup', comment: ['&& denotes a mnemonic'] }, "Split in &&Group"
'miJoinEditorInGroupWithoutMnemonic', "Join in Group"
{ key: 'miJoinEditorInGroup', comment: ['&& denotes a mnemonic'] }, "Join in &&Group"
'miSingleColumnEditorLayoutWithoutMnemonic', "Single"
{ key: 'miSingleColumnEditorLayout', comment: ['&& denotes a mnemonic'] }, "&&Single"
'miTwoColumnsEditorLayoutWithoutMnemonic', "Two Columns"
{ key: 'miTwoColumnsEditorLayout', comment: ['&& denotes a mnemonic'] }, "&&Two Columns"
'miThreeColumnsEditorLayoutWithoutMnemonic', "Three Columns"
{ key: 'miThreeColumnsEditorLayout', comment: ['&& denotes a mnemonic'] }, "T&&hree Columns"
'miTwoRowsEditorLayoutWithoutMnemonic', "Two Rows"
{ key: 'miTwoRowsEditorLayout', comment: ['&& denotes a mnemonic'] }, "T&&wo Rows"
'miThreeRowsEditorLayoutWithoutMnemonic', "Three Rows"
{ key: 'miThreeRowsEditorLayout', comment: ['&& denotes a mnemonic'] }, "Three &&Rows"
'miTwoByTwoGridEditorLayoutWithoutMnemonic', "Grid (2x2)"
{ key: 'miTwoByTwoGridEditorLayout', comment: ['&& denotes a mnemonic'] }, "&&Grid (2x2)"
'miTwoRowsRightEditorLayoutWithoutMnemonic', "Two Rows Right"
{ key: 'miTwoRowsRightEditorLayout', comment: ['&& denotes a mnemonic'] }, "Two R&&ows Right"
'miTwoColumnsBottomEditorLayoutWithoutMnemonic', "Two Columns Bottom"
{ key: 'miTwoColumnsBottomEditorLayout', comment: ['&& denotes a mnemonic'] }, "Two &&Columns Bottom"
{ key: 'miLastEditLocation', comment: ['&& denotes a mnemonic'] }, "&&Last Edit Location"
{ key: 'miFirstSideEditor', comment: ['&& denotes a mnemonic'] }, "&&First Side in Editor"
{ key: 'miSecondSideEditor', comment: ['&& denotes a mnemonic'] }, "&&Second Side in Editor"
{ key: 'miNextEditor', comment: ['&& denotes a mnemonic'] }, "&&Next Editor"
{ key: 'miPreviousEditor', comment: ['&& denotes a mnemonic'] }, "&&Previous Editor"
{ key: 'miNextRecentlyUsedEditor', comment: ['&& denotes a mnemonic'] }, "&&Next Used Editor"
{ key: 'miPreviousRecentlyUsedEditor', comment: ['&& denotes a mnemonic'] }, "&&Previous Used Editor"
{ key: 'miNextEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Next Editor in Group"
{ key: 'miPreviousEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Previous Editor in Group"
{ key: 'miNextUsedEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Next Used Editor in Group"
{ key: 'miPreviousUsedEditorInGroup', comment: ['&& denotes a mnemonic'] }, "&&Previous Used Editor in Group"
{ key: 'miSwitchEditor', comment: ['&& denotes a mnemonic'] }, "Switch &&Editor"
{ key: 'miFocusFirstGroup', comment: ['&& denotes a mnemonic'] }, "Group &&1"
{ key: 'miFocusSecondGroup', comment: ['&& denotes a mnemonic'] }, "Group &&2"
{ key: 'miFocusThirdGroup', comment: ['&& denotes a mnemonic'] }, "Group &&3"
{ key: 'miFocusFourthGroup', comment: ['&& denotes a mnemonic'] }, "Group &&4"
{ key: 'miFocusFifthGroup', comment: ['&& denotes a mnemonic'] }, "Group &&5"
{ key: 'miNextGroup', comment: ['&& denotes a mnemonic'] }, "&&Next Group"
{ key: 'miPreviousGroup', comment: ['&& denotes a mnemonic'] }, "&&Previous Group"
{ key: 'miFocusLeftGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Left"
{ key: 'miFocusRightGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Right"
{ key: 'miFocusAboveGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Above"
{ key: 'miFocusBelowGroup', comment: ['&& denotes a mnemonic'] }, "Group &&Below"
{ key: 'miSwitchGroup', comment: ['&& denotes a mnemonic'] }, "Switch &&Group"
'editor.snippets.codeActions.enabled', 'Controls if surround-with-snippets or file template snippets show as code actions.'
'snippetSchema.json.prefix', 'The prefix to use when selecting the snippet in intellisense'
'snippetSchema.json.isFileTemplate', 'The snippet is meant to populate or replace a whole file'
'snippetSchema.json.body', 'The snippet content. Use `$1`, `${1:defaultText}` to define cursor positions, use `$0` for the final cursor position. Insert variable values with `${varName}` and `${varName:defaultText}`, e.g. `This is file: $TM_FILENAME`.'
'snippetSchema.json.description', 'The snippet description.'
'snippetSchema.json.default', "Empty snippet"
'snippetSchema.json', 'User snippet configuration'
'snippetSchema.json.default', "Empty snippet"
'snippetSchema.json', 'User snippet configuration'
'snippetSchema.json.scope', "A list of language names to which this snippet applies, e.g. 'typescript,javascript'."
'sep.userSnippet', "User Snippets"
'sep.workspaceSnippet', "Workspace Snippets"
'disableSnippet', 'Hide from IntelliSense'
'isDisabled', "(hidden from IntelliSense)"
'enable.snippet', 'Show in IntelliSense'
'pick.placeholder', "Select a snippet"
'pick.noSnippetAvailable', "No snippet available"
'binaryEditor', "Binary Viewer"
'binaryError', "The file is not displayed in the editor because it is either binary or uses an unsupported text encoding."
'openAnyway', "Open Anyway"
'ariaLabelTabActions', "Tab actions"), actionRunner: tabActionRunner }
'detail.snippet', "{0} ({1})", snippet.description || snippet.name, snippet.source
'snippetSuggest.longLabel', "{0}, {1}", suggestions[to].label.label, suggestions[to].snippet.name
'snippetSuggest.longLabel', "{0}, {1}", suggestions[i].label.label, suggestions[i].snippet.name
'codeAction', "Surround With: {0}", snippet.name
'overflow.start.title', 'Start with Snippet'
'title', 'Start with: {0}', snippet.name
'separatorIcon', 'Icon for the separator in the breadcrumbs.')
'breadcrumbsPossible', "Whether the editor can show breadcrumbs")
'breadcrumbsVisible', "Whether breadcrumbs are currently visible")
'breadcrumbsActive', "Whether breadcrumbs have focus")
'empty', "no elements"
'cmd.toggle', "Toggle Breadcrumbs"
'miBreadcrumbs', "Toggle &&Breadcrumbs"
'cmd.toggle2', "Breadcrumbs"
'miBreadcrumbs2', "&&Breadcrumbs"
'cmd.focus', "Focus Breadcrumbs"
'title', "Breadcrumb Navigation"
'enabled', "Enable/disable navigation breadcrumbs."
'filepath', "Controls whether and how file paths are shown in the breadcrumbs view."
'filepath.on', "Show the file path in the breadcrumbs view."
'filepath.off', "Do not show the file path in the breadcrumbs view."
'filepath.last', "Only show the last element of the file path in the breadcrumbs view."
'symbolpath', "Controls whether and how symbols are shown in the breadcrumbs view."
'symbolpath.on', "Show all symbols in the breadcrumbs view."
'symbolpath.off', "Do not show symbols in the breadcrumbs view."
'symbolpath.last', "Only show the current symbol in the breadcrumbs view."
'symbolSortOrder', "Controls how symbols are sorted in the breadcrumbs outline view."
'symbolSortOrder.position', "Show symbol outline in file position order."
'symbolSortOrder.name', "Show symbol outline in alphabetical order."
'symbolSortOrder.type', "Show symbol outline in symbol type order."
'icons', "Render breadcrumb items with icons."
'filteredTypes.file', "When enabled breadcrumbs show `file`-symbols."
'filteredTypes.module', "When enabled breadcrumbs show `module`-symbols."
'filteredTypes.namespace', "When enabled breadcrumbs show `namespace`-symbols."
'filteredTypes.package', "When enabled breadcrumbs show `package`-symbols."
'filteredTypes.class', "When enabled breadcrumbs show `class`-symbols."
'filteredTypes.method', "When enabled breadcrumbs show `method`-symbols."
'filteredTypes.property', "When enabled breadcrumbs show `property`-symbols."
'filteredTypes.field', "When enabled breadcrumbs show `field`-symbols."
'filteredTypes.constructor', "When enabled breadcrumbs show `constructor`-symbols."
'filteredTypes.enum', "When enabled breadcrumbs show `enum`-symbols."
'filteredTypes.interface', "When enabled breadcrumbs show `interface`-symbols."
'filteredTypes.function', "When enabled breadcrumbs show `function`-symbols."
'filteredTypes.variable', "When enabled breadcrumbs show `variable`-symbols."
'filteredTypes.constant', "When enabled breadcrumbs show `constant`-symbols."
'filteredTypes.string', "When enabled breadcrumbs show `string`-symbols."
'filteredTypes.number', "When enabled breadcrumbs show `number`-symbols."
'filteredTypes.boolean', "When enabled breadcrumbs show `boolean`-symbols."
'filteredTypes.array', "When enabled breadcrumbs show `array`-symbols."
'filteredTypes.object', "When enabled breadcrumbs show `object`-symbols."
'filteredTypes.key', "When enabled breadcrumbs show `key`-symbols."
'filteredTypes.null', "When enabled breadcrumbs show `null`-symbols."
'filteredTypes.enumMember', "When enabled breadcrumbs show `enumMember`-symbols."
'filteredTypes.struct', "When enabled breadcrumbs show `struct`-symbols."
'filteredTypes.event', "When enabled breadcrumbs show `event`-symbols."
'filteredTypes.operator', "When enabled breadcrumbs show `operator`-symbols."
'filteredTypes.typeParameter', "When enabled breadcrumbs show `typeParameter`-symbols."
'label', 'Surround With Snippet...'
'unable to open trust', "Unable to open command link from untrusted source: {0}", href)
'unable to open', "Unable to open unknown link: {0}", href)
'snippet.suggestions.label', "Insert Snippet"
'defaultLabel', "input"
'onlySearchInOpenEditors', "Search only in Open Editors"
'useExcludesAndIgnoreFilesDescription', "Use Exclude Settings and Ignore Files"
'searchReplace.source', "Search and Replace")
'fileReplaceChanges', "{0} ↔ {1} (Replace Preview)", fileMatch.name(), fileMatch.name()
'searchCanceled', "Search was canceled before any results could be found - "
'moreSearch', "Toggle Search Details") })
'searchScope.includes', "files to include"
'placeholder.includes', "e.g. *.ts, src/**/include"
'searchScope.excludes', "files to exclude"
'placeholder.excludes', "e.g. *.ts, src/**/exclude"
'replaceAll.confirmation.title', "Replace All"
'replaceAll.confirm.button', "&&Replace"
'replaceAll.occurrence.file.message', "Replaced {0} occurrence across {1} file with '{2}'.", occurrences, fileCount, replaceValue
'removeAll.occurrence.file.message', "Replaced {0} occurrence across {1} file.", occurrences, fileCount
'replaceAll.occurrence.files.message', "Replaced {0} occurrence across {1} files with '{2}'.", occurrences, fileCount, replaceValue
'removeAll.occurrence.files.message', "Replaced {0} occurrence across {1} files.", occurrences, fileCount
'replaceAll.occurrences.file.message', "Replaced {0} occurrences across {1} file with '{2}'.", occurrences, fileCount, replaceValue
'removeAll.occurrences.file.message', "Replaced {0} occurrences across {1} file.", occurrences, fileCount
'replaceAll.occurrences.files.message', "Replaced {0} occurrences across {1} files with '{2}'.", occurrences, fileCount, replaceValue
'removeAll.occurrences.files.message', "Replaced {0} occurrences across {1} files.", occurrences, fileCount
'removeAll.occurrence.file.confirmation.message', "Replace {0} occurrence across {1} file with '{2}'?", occurrences, fileCount, replaceValue
'replaceAll.occurrence.file.confirmation.message', "Replace {0} occurrence across {1} file?", occurrences, fileCount
'removeAll.occurrence.files.confirmation.message', "Replace {0} occurrence across {1} files with '{2}'?", occurrences, fileCount, replaceValue
'replaceAll.occurrence.files.confirmation.message', "Replace {0} occurrence across {1} files?", occurrences, fileCount
'removeAll.occurrences.file.confirmation.message', "Replace {0} occurrences across {1} file with '{2}'?", occurrences, fileCount, replaceValue
'replaceAll.occurrences.file.confirmation.message', "Replace {0} occurrences across {1} file?", occurrences, fileCount
'removeAll.occurrences.files.confirmation.message', "Replace {0} occurrences across {1} files with '{2}'?", occurrences, fileCount, replaceValue
'replaceAll.occurrences.files.confirmation.message', "Replace {0} occurrences across {1} files?", occurrences, fileCount
'emptySearch', "Empty Search"
'ariaSearchResultsClearStatus', "The search results have been cleared")
'searchPathNotFoundError', "Search path not found: {0}", nonExistantPath
'noOpenEditorResultsIncludesExcludes', "No results found in open editors matching '{0}' excluding '{1}' - ", includePatternText, excludePatternText
'noOpenEditorResultsIncludes', "No results found in open editors matching '{0}' - ", includePatternText
'noOpenEditorResultsExcludes', "No results found in open editors excluding '{0}' - ", excludePatternText
'noOpenEditorResultsFound', "No results found in open editors. Review your settings for configured exclusions and check your gitignore files - "
'noResultsIncludesExcludes', "No results found in '{0}' excluding '{1}' - ", includePatternText, excludePatternText
'noResultsIncludes', "No results found in '{0}' - ", includePatternText
'noResultsExcludes', "No results found excluding '{0}' - ", excludePatternText
'noResultsFound', "No results found. Review your settings for configured exclusions and check your gitignore files - "
'rerunSearch.message', "Search again"
'rerunSearchInAll.message', "Search again in all files"), this.onSearchAgain.bind(this))
'openSettings.message', "Open Settings"), this.onOpenSettings.bind(this))
'openSettings.learnMore', "Learn More"), this.onLearnMore.bind(this))
'ariaSearchResultsStatus', "Search returned {0} results in {1} files", this.viewModel.searchResult.count(), this.viewModel.searchResult.fileCount())
'searchMaxResultsWarning', "The result set only contains a subset of all matches. Be more specific in your search to narrow down the results.") }
'forTerm', " - Search: {0}", this.searchResult.query?.contentPattern.pattern ?? ''
'useIgnoresAndExcludesDisabled', "exclude settings and ignore files are disabled"
'useExcludesAndIgnoreFilesDescription', "Use Exclude Settings and Ignore Files"))
'onlyOpenEditors', "searching only in open files"
'disableOpenEditors', "Search in entire workspace"))
'openInEditor.tooltip', "Copy current search results to an editor"
'openInEditor.message', "Open in editor"
'search.file.result', "{0} result in {1} file", resultCount, fileCount
'search.files.result', "{0} result in {1} files", resultCount, fileCount
'search.file.results', "{0} results in {1} file", resultCount, fileCount
'search.files.results', "{0} results in {1} files", resultCount, fileCount
'searchWithoutFolder', "You have not opened or specified a folder. Only open files are currently searched - "))
'openFolder', "Open Folder"
'searchDetailsIcon', 'Icon to make search details visible.')
'searchShowContextIcon', 'Icon for toggle the context in the search editor.')
'searchHideReplaceIcon', 'Icon to collapse the replace section in the search view.')
'searchShowReplaceIcon', 'Icon to expand the replace section in the search view.')
'searchReplaceAllIcon', 'Icon for replace all in the search view.')
'searchReplaceIcon', 'Icon for replace in the search view.')
'searchRemoveIcon', 'Icon to remove a search result.')
'searchRefreshIcon', 'Icon for refresh in the search view.')
'searchCollapseAllIcon', 'Icon for collapse results in the search view.')
'searchExpandAllIcon', 'Icon for expand results in the search view.')
'searchShowAsTree', 'Icon for viewing results as a tree in the search view.')
'searchShowAsList', 'Icon for viewing results as a list in the search view.')
'searchClearIcon', 'Icon for clear results in the search view.')
'searchStopIcon', 'Icon for stop in the search view.')
'searchViewIcon', 'View icon of the search view.')
'searchNewEditorIcon', 'Icon for the action to open a new search editor.')
'noSymbolResults', "No matching workspace symbols"
'openToBottom', "Open to the Bottom"
'search.action.replaceAll.disabled.label', "Replace All (Submit Search to Enable)"
'search.action.replaceAll.enabled.label', "Replace All"), kb, keyBindingService2
'search.replace.toggle.button.title', "Toggle Replace"
'label.Search', 'Search: Type Search Term and press Enter to search'
'search.placeHolder', "Search"
'showContext', "Toggle Context Lines"), this.keybindingService.lookupKeybinding(ToggleSearchEditorContextLinesCommandId), this.keybindingService
'label.Replace', 'Replace: Type replace term and press Enter to preview'
'search.replace.placeHolder', "Replace"
'searchFolderMatch.other.label', "Other files")
'searchFolderMatch.other.label', "Other files")
'searchFileMatch', "{0} file found", count)
'searchMatch', "{0} match found", count)
'lineNumStr', "From line {0}", startLine, numLines
'numLinesStr', "{0} more lines", numLines
'search', "Search"
'folderMatchAriaLabel', "{0} matches in folder root {1}, Search result", count, element.name()
'otherFilesAriaLabel', "{0} matches outside of the workspace, Search result", count
'fileMatchAriaLabel', "{0} matches in file {1} of folder {2}, Search result", element.count(), element.name(), paths.dirname(path)
'replacePreviewResultAria', "Replace '{0}' with '{1}' at column {2} in line {3}", matchString, match.replaceString, range.startColumn + 1, matchText
'searchResultAria', "Found '{0}' at column {1} in line '{2}'", matchString, range.startColumn + 1, matchText
'label', 'Populate File from Snippet'
'placeholder', 'Select a snippet'
'snippets', 'Snippets'
'search', "Search"
'restrictResultsToFolder', "Restrict Search to Folder"
'excludeFolderFromSearch', "Exclude Folder from Search"
'copyMatchLabel', "Copy"
'copyPathLabel', "Copy Path"
'copyAllLabel', "Copy All"
'CancelSearchAction.label', "Cancel Search"
'RefreshAction.label', "Refresh"
'CollapseDeepestExpandedLevelAction.label', "Collapse All"
'ExpandAllAction.label', "Expand All"
'ClearSearchResultsAction.label', "Clear Search Results"
'ViewAsTreeAction.label', "View as Tree"
'ViewAsListAction.label', "View as List"
'revealInSideBar', "Reveal in Explorer View"
'clearSearchHistoryLabel', "Clear Search History"
'focusSearchListCommandLabel', "Focus List"
'findInFolder', "Find in Folder..."
'findInWorkspace', "Find in Workspace..."
'showTriggerActions', "Go to Symbol in Workspace..."
'showTriggerActions', "Go to Symbol in Workspace..."
'name', "Search"
'search', "Search"
{ key: 'miViewSearch', comment: ['&& denotes a mnemonic'] }, "&&Search"
'findInFiles.description', "Open a workspace search"
'findInFiles.args', "A set of options for the search"
'findInFiles', "Find in Files"), original: 'Find in Files' }, category } }
{ key: 'miFindInFiles', comment: ['&& denotes a mnemonic'] }, "Find &&in Files"
'FocusNextSearchResult.label', 'Focus Next Search Result'
'FocusPreviousSearchResult.label', 'Search: Focus Previous Search Result'
'replaceInFiles', 'Search: Replace in Files'
{ key: 'miReplaceInFiles', comment: ['&& denotes a mnemonic'] }, "Replace &&in Files"
'toggleTabs', 'Toggle Search on Type'
'anythingQuickAccessPlaceholder', "Search files by name (append {0} to go to line or {1} to go to symbol)", AbstractGotoLineQuickAccessProvider.PREFIX, GotoSymbolQuickAccessProvider.PREFIX
'anythingQuickAccess', "Go to File"
'symbolsQuickAccessPlaceholder', "Type the name of a symbol to open."
'symbolsQuickAccess', "Go to Symbol in Workspace"
'searchConfigurationTitle', "Search"
'exclude', "Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `#files.exclude#` setting."
'exclude.boolean', "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."
{ key: 'exclude.when', comment: ['\\$(basename) should not be translated'] }, 'Additional check on the siblings of a matching file. Use \\$(basename) as variable for the matching file name.'
'search.mode', "Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the search view, or in a search editor"
'search.mode.view', "Search in the search view, either in the panel or side bars."
'search.mode.reuseEditor', "Search in an existing search editor if present, otherwise in a new search editor."
'search.mode.newEditor', "Search in a new search editor."
'useRipgrep', "This setting is deprecated and now falls back on \"search.usePCRE2\"."
'useRipgrepDeprecated', "Deprecated. Consider \"search.usePCRE2\" for advanced regex feature support."
'maintainFileSearchCacheDeprecated', "The search cache is kept in the extension host which never shuts down, so this setting is no longer needed."
'search.maintainFileSearchCache', "When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory."
'useIgnoreFiles', "Controls whether to use `.gitignore` and `.ignore` files when searching for files."
'useGlobalIgnoreFiles', "Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `#search.useIgnoreFiles#` to be enabled."
'useParentIgnoreFiles', "Controls whether to use `.gitignore` and `.ignore` files in parent directories when searching for files. Requires `#search.useIgnoreFiles#` to be enabled."
'search.quickOpen.includeSymbols', "Whether to include results from a global symbol search in the file results for Quick Open."
'search.quickOpen.includeHistory', "Whether to include results from recently opened files in the file results for Quick Open."
'filterSortOrder.default', 'History entries are sorted by relevance based on the filter value used. More relevant entries appear first.'
'filterSortOrder.recency', 'History entries are sorted by recency. More recently opened entries appear first.'
'filterSortOrder', "Controls sorting order of editor history in quick open when filtering."
'search.followSymlinks', "Controls whether to follow symlinks while searching."
'search.smartCase', "Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively."
'search.globalFindClipboard', "Controls whether the search view should read or modify the shared find clipboard on macOS."
'search.location', "Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space."
'search.location.deprecationMessage', "This setting is deprecated. You can drag the search icon to a new location instead."
'search.maxResults', "Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results."
'search.collapseResults.auto', "Files with less than 10 results are expanded. Others are collapsed."
'search.collapseAllResults', "Controls whether the search results will be collapsed or expanded."
'search.useReplacePreview', "Controls whether to open Replace Preview when selecting or replacing a match."
'search.showLineNumbers', "Controls whether to show line numbers for search results."
'search.usePCRE2', "Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript."
'usePCRE2Deprecated', "Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2."
'search.actionsPositionAuto', "Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide."
'search.actionsPositionRight', "Always position the actionbar to the right."
'search.actionsPosition', "Controls the positioning of the actionbar on rows in the search view."
'search.searchOnType', "Search all files as you type."
'search.seedWithNearestWord', "Enable seeding search from the word nearest the cursor when the active editor has no selection."
'search.seedOnFocus', "Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command."
'search.searchOnTypeDebouncePeriod', "When {0} is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when {0} is disabled.", '`#search.searchOnType#`'
'search.searchEditor.doubleClickBehaviour.selectWord', "Double clicking selects the word under the cursor."
'search.searchEditor.doubleClickBehaviour.goToLocation', "Double clicking opens the result in the active editor group."
'search.searchEditor.doubleClickBehaviour.openLocationToSide', "Double clicking opens the result in the editor group to the side, creating one if it does not yet exist."
'search.searchEditor.doubleClickBehaviour', "Configure effect of double clicking a result in a search editor."
{ key: 'search.searchEditor.reusePriorSearchConfiguration', comment: ['"Search Editor" is a type of editor that can display search results. "includes, excludes, and flags" refers to the "files to include" and "files to exclude" input boxes, and the flags that control whether a query is case-sensitive or a regex.'] }, "When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor."
'search.searchEditor.defaultNumberOfContextLines', "The default number of surrounding context lines to use when creating new Search Editors. If using `#search.searchEditor.reusePriorSearchConfiguration#`, this can be set to `null` (empty) to use the prior Search Editor's configuration."
'searchSortOrder.default', "Results are sorted by folder and file names, in alphabetical order."
'searchSortOrder.filesOnly', "Results are sorted by file names ignoring folder order, in alphabetical order."
'searchSortOrder.type', "Results are sorted by file extensions, in alphabetical order."
'searchSortOrder.modified', "Results are sorted by file last modified date, in descending order."
'searchSortOrder.countDescending', "Results are sorted by count per file, in descending order."
'searchSortOrder.countAscending', "Results are sorted by count per file, in ascending order."
'search.sortOrder', "Controls sorting order of search results."
'search.decorations.colors', "Controls whether search file decorations should use colors."
'search.decorations.badges', "Controls whether search file decorations should use badges."
'scm.defaultViewMode.tree', "Shows search results as a tree."
'scm.defaultViewMode.list', "Shows search results as a list."
'search.defaultViewMode', "Controls the default search result view mode."
{ key: 'miGotoSymbolInWorkspace', comment: ['&& denotes a mnemonic'] }, "Go to Symbol in &&Workspace..."
'noAnythingResults', "No matching results"
'recentlyOpenedSeparator', "recently opened") } as IQuickPickSeparator
'fileResultsSeparator', "file results"
'more', 'More'
{ key: 'openToSide', comment: ['Open this file in a split editor on the left/right side'] }, "Open to the Side"
{ key: 'openToBottom', comment: ['Open this file in a split editor on the bottom'] }, "Open to the Bottom"
'closeEditor', "Remove from Recently Opened"
'filePickAriaLabelDirty', "{0} unsaved changes", labelAndDescription
'global.scope', "(global)"
'global.1', "({0})", [...names].join(', ')
'name', "Type snippet file name"
'bad_name1', "Invalid file name"
'bad_name2', "'{0}' is not a valid file name", input
'bad_name3', "'{0}' already exists", input
'openSnippet.label', "Configure User Snippets"
'userSnippets', "User Snippets"
{ key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] }, "User &&Snippets"
'new.global_scope', 'global'
'new.global', "New Global Snippets file..."
'new.workspace_scope', "{0} workspace", folder.name
'new.folder', "New Snippets file for '{0}'...", folder.name
'group.global', "Existing Snippets") }
'new.global.sep', "New Snippets") }
'new.global.sep', "New Snippets") }
'openSnippet.pickLanguage', "Select Snippets File or Create Snippets"
'RemoveAction.label', "Dismiss"
'match.replace.label', "Replace"
'file.replaceAll.label', "Replace All"
'file.replaceAll.label', "Replace All"
'ariaCompositeToolbarLabel', "{0} actions", compositeTitle)
'viewsAndMoreActions', "Views and More Actions..."
'titleTooltip', "{0} ({1})", title, keybinding
'titleKeybinding', "{0} ({1})", this.activity.name, this.keybindingLabel
'badgeTitle', "{0} - {1}", title, badge.getDescription()
'additionalViews', "Additional Views"
'numberBadge', "{0} ({1})", composite.name, suffix
'manageExtension', "Manage Extension")
'hide', "Hide '{0}'", this.activity.name
'keep', "Keep '{0}'", this.activity.name
'toggle', "Toggle View Pinned")
'manageTrustedExtensions', "Manage Trusted Extensions"), '', true, (
'signOut', "Sign Out"), '', true, (
'authProviderUnavailable', '{0} is currently unavailable', providerDisplayName))
'noAccounts', "You are not signed in to any accounts"), undefined, false)
'hideAccounts', "Hide Accounts"), run: () => this.storageService.store(AccountsActivityActionViewItem.ACCOUNTS_VISIBILITY_PREFERENCE_KEY, false, StorageScope.PROFILE, StorageTarget.USER) }
'hideprofiles', "Hide {0}", PROFILES_CATEGORY.value), run: () => this.storageService.store(ProfilesActivityActionViewItem.PROFILES_VISIBILITY_PREFERENCE_KEY, false, StorageScope.PROFILE, StorageTarget.USER) }
'profiles', "{0} (Profile)", this.userDataProfileService.currentProfile.name
'previousSideBarView', "Previous Primary Side Bar View"
'nextSideBarView', "Next Primary Side Bar View"
'focusActivityBar', "Focus Activity Bar"
'settingsViewBarIcon', "Settings icon in the view bar.")
'accountsViewBarIcon', "Accounts icon in the view bar.")
'pinned view containers', "Activity bar entries visibility customizations"
'accounts visibility key', "Accounts entry visibility customization in the activity bar."
'menu', "Menu"), checked: menuBarVisibility === 'compact', run: () => this.configurationService.updateValue('window.menuBarVisibility', menuBarVisibility === 'compact' ? 'toggle' : 'compact') }), new Separator()]
'hideMenu', "Hide Menu"), run: () => this.configurationService.updateValue('window.menuBarVisibility', 'toggle') }), new Separator()]
'accounts', "Accounts"), checked: this.accountsVisibilityPreference, run: () => this.accountsVisibilityPreference = !this.accountsVisibilityPreference })
'hideActivitBar', "Hide Activity Bar"), run: () => this.instantiationService.invokeFunction(accessor => new ToggleActivityBarVisibilityAction().run(accessor)) })
'resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewContainerToLocation(viewContainer, defaultLocation) })
'resetLocation', "Reset Location"), run: () => this.viewDescriptorService.moveViewsToContainer([viewToReset], defaultContainer) })
'manage', "Manage"
'manage', "Manage"
'accounts', "Accounts"
'accounts', "Accounts"
'source control', "Source Control"
'focusBanner', "Focus Banner"
'openContainer', "Open Containing Folder"
'status.scm', "Source Control"
'scmPendingChangesBadge', '{0} pending changes', num)
'scm', "Source Control Management"
'input', "Source Control Input"
'sortAction', "View & Sort"
'repositories', "Repositories"
'setListViewMode', "View as List"
'setTreeViewMode', "View as Tree"
'repositorySortByDiscoveryTime', "Sort by Discovery Time")
'repositorySortByName', "Sort by Name")
'repositorySortByPath', "Sort by Path")
'sortChangesByName', "Sort Changes by Name")
'sortChangesByPath', "Sort Changes by Path")
'sortChangesByStatus', "Sort Changes by Status")
'collapse all', "Collapse All Repositories"
'expand all', "Expand All Repositories"
'label.close', "Close"), Codicon.close.classNames, true, (
'scm.providerBorder', "SCM Provider separator border.")
'sourceControlViewIcon', 'View icon of the Source Control view.')
'source control', "Source Control"
'no open repo', "No source control providers registered."
'no open repo in an untrusted workspace', "None of the registered source control providers work in Restricted Mode."
'manageWorkspaceTrustAction', "Manage Workspace Trust")}](command:${MANAGE_TRUST_COMMAND_ID}
'source control', "Source Control"
{ key: 'miViewSCM', comment: ['&& denotes a mnemonic'] }, "Source &&Control"
'source control repositories', "Source Control Repositories"
'scmConfigurationTitle', "Source Control"
'scm.diffDecorations.all', "Show the diff decorations in all available locations."
'scm.diffDecorations.gutter', "Show the diff decorations only in the editor gutter."
'scm.diffDecorations.overviewRuler', "Show the diff decorations only in the overview ruler."
'scm.diffDecorations.minimap', "Show the diff decorations only in the minimap."
'scm.diffDecorations.none', "Do not show the diff decorations."
'diffDecorations', "Controls diff decorations in the editor."
'diffGutterWidth', "Controls the width(px) of diff decorations in gutter (added & modified)."
'scm.diffDecorationsGutterVisibility.always', "Show the diff decorator in the gutter at all times."
'scm.diffDecorationsGutterVisibility.hover', "Show the diff decorator in the gutter only on hover."
'scm.diffDecorationsGutterVisibility', "Controls the visibility of the Source Control diff decorator in the gutter."
'scm.diffDecorationsGutterAction.diff', "Show the inline diff peek view on click."
'scm.diffDecorationsGutterAction.none', "Do nothing."
'scm.diffDecorationsGutterAction', "Controls the behavior of Source Control diff gutter decorations."
'diffGutterPattern', "Controls whether a pattern is used for the diff decorations in gutter."
'diffGutterPatternAdded', "Use pattern for the diff decorations in gutter for added lines."
'diffGutterPatternModifed', "Use pattern for the diff decorations in gutter for modified lines."
'scm.diffDecorationsIgnoreTrimWhitespace.true', "Ignore leading and trailing whitespace."
'scm.diffDecorationsIgnoreTrimWhitespace.false', "Do not ignore leading and trailing whitespace."
'scm.diffDecorationsIgnoreTrimWhitespace.inherit', "Inherit from `diffEditor.ignoreTrimWhitespace`."
'diffDecorationsIgnoreTrimWhitespace', "Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations."
'alwaysShowActions', "Controls whether inline actions are always visible in the Source Control view."
'scm.countBadge.all', "Show the sum of all Source Control Provider count badges."
'scm.countBadge.focused', "Show the count badge of the focused Source Control Provider."
'scm.countBadge.off', "Disable the Source Control count badge."
'scm.countBadge', "Controls the count badge on the Source Control icon on the Activity Bar."
'scm.providerCountBadge.hidden', "Hide Source Control Provider count badges."
'scm.providerCountBadge.auto', "Only show count badge for Source Control Provider when non-zero."
'scm.providerCountBadge.visible', "Show Source Control Provider count badges."
'scm.providerCountBadge', "Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider."
'scm.defaultViewMode.tree', "Show the repository changes as a tree."
'scm.defaultViewMode.list', "Show the repository changes as a list."
'scm.defaultViewMode', "Controls the default Source Control repository view mode."
'scm.defaultViewSortKey.name', "Sort the repository changes by file name."
'scm.defaultViewSortKey.path', "Sort the repository changes by path."
'scm.defaultViewSortKey.status', "Sort the repository changes by Source Control status."
'scm.defaultViewSortKey', "Controls the default Source Control repository changes sort order when viewed as a list."
'autoReveal', "Controls whether the Source Control view should automatically reveal and select files when opening them."
'inputFontFamily', "Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `#editor.fontFamily#`'s value, or a custom font family."
'inputFontSize', "Controls the font size for the input message in pixels."
'alwaysShowRepository', "Controls whether repositories should always be visible in the Source Control view."
'scm.repositoriesSortOrder.discoveryTime', "Repositories in the Source Control Repositories view are sorted by discovery time. Repositories in the Source Control view are sorted in the order that they were selected."
'scm.repositoriesSortOrder.name', "Repositories in the Source Control Repositories and Source Control views are sorted by repository name."
'scm.repositoriesSortOrder.path', "Repositories in the Source Control Repositories and Source Control views are sorted by repository path."
'repositoriesSortOrder', "Controls the sort order of the repositories in the source control repositories view."
'providersVisible', "Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view."
'showActionButton', "Controls whether an action button can be shown in the Source Control view."
'scm accept', "Source Control: Accept Input"
'scm view next commit', "Source Control: View Next Commit"
'scm view previous commit', "Source Control: View Previous Commit"
'open in terminal', "Open In Terminal"
'activityBarAriaLabel', "Active View Switcher"
'scm', "Source Control Repositories"
'remoteTunnel.category', 'Remote Tunnels'
'remoteTunnel.actions.turnOn', 'Turn on Remote Tunnel Access...'
'remoteTunnel.actions.turnOff', 'Turn off Remote Tunnel Access...'
'remoteTunnel.actions.showLog', 'Show Log'
'remoteTunnel.actions.configure', 'Configure Machine Name...'
'remoteTunnel.actions.copyToClipboard', 'Copy Browser URI to Clipboard'
'remoteTunnel.actions.learnMore', 'Get Started with VS Code Tunnels'
'accountPreference.placeholder', "Sign in to an account to enable remote access"
'signed in', "Signed In") }
'others', "Others") }
'sign in using account', "Sign in with {0}", providerName), provider: authenticationProvider }
'progress.title', "[Turning on remote tunnel](command:{0})", RemoteTunnelCommandIds.showLog
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:						message: localize('progress.turnOn.final',
'action.copyToClipboard', "Copy Browser Link to Clipboard"), undefined, true, () => clipboardService.writeText(linkToOpen)
'action.showExtension', "Show Extension"), undefined, true, (
src/vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts:						message: localize('progress.turnOn.failed',
'remoteTunnel.actions.manage.on', 'Remote Tunnel Access in On'
'remoteTunnel.actions.manage.connecting', 'Remote Tunnel Access in Connecting'
'remoteTunnel.turnOff.confirm', 'Do you want to turn off Remote Tunnel Access?'
'remoteTunnel.turnOff.yesButton', 'Yes'
'manage.placeholder', 'Select a command to invoke'
'manage.title.on', 'Remote Machine Access enabled for {0}({1}) as {2}', account.label, account.description, this.connectionInfo.hostName
'manage.title.off', 'Remote Machine Access not enabled'
'manage.machineName', 'Change Host Name'), description: this.connectionInfo?.hostName }
'remoteTunnelAccess.machineName', "The name under which the remote tunnel access is registered. If not set, the host name is used."
'remoteTunnelAccess.machineNameRegex', "The name can only consist of letters, numbers, underscore and minus."
'localHistory', "Local History"
'langStatus.name', "Editor Language Status"
'langStatus.aria', "Editor Language Status: {0}", ariaLabels.join(', next: ')
'pin', "Add to Status Bar"), Codicon.pin.classNames, true, (
'unpin', "Remove from Status Bar"), Codicon.pinned.classNames, true, (
'aria.1', '{0}, {1}', status.label, status.detail
'aria.2', '{0}', status.label
'name.pattern', '{0} (Language Status)', item.name
'reset', 'Reset Language Status Interaction Counter'
'sashSize', "Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse."
'sashHoverDelay', "Controls the hover feedback delay in milliseconds of the dragging area in between views/editors."
'changes', "{0} of {1} changes", this.index + 1, this.model.changes.length
'change', "{0} of {1} change", this.index + 1, this.model.changes.length
'label.close', "Close"), Codicon.close.classNames, true, () => this.dispose()), { label: false, icon: true }
'show previous change', "Show Previous Change"
'show next change', "Show Next Change"
{ key: 'miGotoNextChange', comment: ['&& denotes a mnemonic'] }, "Next &&Change"
{ key: 'miGotoPreviousChange', comment: ['&& denotes a mnemonic'] }, "Previous &&Change"
'move to previous change', "Go to Previous Change"
'move to next change', "Go to Next Change"
'editorGutterModifiedBackground', "Editor gutter background color for lines that are modified.")
'editorGutterAddedBackground', "Editor gutter background color for lines that are added.")
'editorGutterDeletedBackground', "Editor gutter background color for lines that are deleted.")
'minimapGutterModifiedBackground', "Minimap gutter background color for lines that are modified.")
'minimapGutterAddedBackground', "Minimap gutter background color for lines that are added.")
'minimapGutterDeletedBackground', "Minimap gutter background color for lines that are deleted.")
'overviewRulerModifiedForeground', 'Overview ruler marker color for modified content.')
'overviewRulerAddedForeground', 'Overview ruler marker color for added content.')
'overviewRulerDeletedForeground', 'Overview ruler marker color for deleted content.')
'localHistoryIcon', "Icon for a local history entry in the timeline view.")
'localHistoryRestore', "Icon for restoring contents of a local history entry.")
'helpQuickAccessPlaceholder', "Type '{0}' to get help on the actions you can take from here.", HelpQuickAccessProvider.PREFIX
'helpQuickAccess', "Show all Quick Access Providers"
'viewQuickAccessPlaceholder', "Type the name of a view, output channel or terminal to open."
'viewQuickAccess', "Open View"
'commandsQuickAccessPlaceholder', "Type the name of a command to run."
'commandsQuickAccess', "Show and Run Commands"
{ key: 'miCommandPalette', comment: ['&& denotes a mnemonic'] }, "&&Command Palette..."
{ key: 'miShowAllCommands', comment: ['&& denotes a mnemonic'] }, "Show All Commands"
{ key: 'miOpenView', comment: ['&& denotes a mnemonic'] }, "&&Open View..."
{ key: 'miGotoLine', comment: ['&& denotes a mnemonic'] }, "Go to &&Line/Column..."
'commandPalette', "Command Palette..."
'commandPalette', "Command Palette..."
'noViewResults', "No matching views"
'views', "Side Bar")
'panels', "Panel")
'secondary side bar', "Secondary Side Bar")
'terminalTitle', "{0}: {1}", `${groupIndex + 1}.${terminalIndex + 1}`, terminal.title
'terminals', "Terminal"
'debugConsoles', "Debug Console"
'channels', "Output"
'openView', "Open View"
'quickOpenView', "Quick Open View"
'headerForeground', "The foreground color for a section header or active title.")
'modifiedItemForeground', "The color of the modified setting indicator.")
'settingsHeaderBorder', "The color of the header container border.")
'settingsSashBorder', "The color of the Settings editor splitview sash border.")
'settingsDropdownBackground', "Settings editor dropdown background.")
'settingsDropdownForeground', "Settings editor dropdown foreground.")
'settingsDropdownBorder', "Settings editor dropdown border.")
'settingsDropdownListBorder', "Settings editor dropdown list border. This surrounds the options and separates the options from the description.")
'settingsCheckboxBackground', "Settings editor checkbox background.")
'settingsCheckboxForeground', "Settings editor checkbox foreground.")
'settingsCheckboxBorder', "Settings editor checkbox border.")
'textInputBoxBackground', "Settings editor text input box background.")
'textInputBoxForeground', "Settings editor text input box foreground.")
'textInputBoxBorder', "Settings editor text input box border.")
'numberInputBoxBackground', "Settings editor number input box background.")
'numberInputBoxForeground', "Settings editor number input box foreground.")
'numberInputBoxBorder', "Settings editor number input box border.")
'focusedRowBackground', "The background color of a settings row when focused.")
'settings.rowHoverBackground', "The background color of a settings row when hovered.")
'settings.focusedRowBorder', "The color of the row's top and bottom border when the row is focused.")
'splitSettingsEditorLabel', "Split Settings Editor"
'enableNaturalLanguageSettingsSearch', "Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service."
'settingsSearchTocBehavior.hide', "Hide the Table of Contents while searching."
'settingsSearchTocBehavior.filter', "Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category."
'settingsSearchTocBehavior', "Controls the behavior of the settings editor Table of Contents while searching."
'localHistory.category', "Local History"
'localHistory.compareWithFile', "Compare with File"
'localHistory.compareWithPrevious', "Compare with Previous"
'localHistory.selectForCompare', "Select for Compare"
'localHistory.compareWithSelected', "Compare with Selected"
'localHistory.open', "Show Contents"
'localHistory.restore', "Restore Contents"
'localHistoryRestore.source', "File Restored")
'confirmRestoreMessage', "Do you want to restore the contents of '{0}'?", basename(entry.workingCopy.resource)
'confirmRestoreDetail', "Restoring will discard any unsaved changes."
{ key: 'restoreButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Restore"
'unableToRestore', "Unable to restore '{0}'.", basename(entry.workingCopy.resource)), undefined, { detail: toErrorMessage(error) }
'localHistory.restoreViaPicker', "Find Entry to Restore"
'restoreViaPicker.filePlaceholder', "Select the file to show local history for"
'restoreViaPicker.entryPlaceholder', "Select the local history entry to open"
'localHistory.rename', "Rename"
'renameLocalHistoryEntryTitle', "Rename Local History Entry"
'renameLocalHistoryPlaceholder', "Enter the new name of the local history entry"
'localHistory.delete', "Delete"
'confirmDeleteMessage', "Do you want to delete the local history entry of '{0}' from {1}?", entry.workingCopy.name, toLocalHistoryEntryDateLabel(entry.timestamp)
'confirmDeleteDetail', "This action is irreversible!"
{ key: 'deleteButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete"
'localHistory.deleteAll', "Delete All"
'confirmDeleteAllMessage', "Do you want to delete all entries of all files in local history?"
'confirmDeleteAllDetail', "This action is irreversible!"
{ key: 'deleteAllButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete All"
'localHistory.create', "Create Entry"
'createLocalHistoryEntryTitle', "Create Local History Entry"
'createLocalHistoryPlaceholder', "Enter the new name of the local history entry for '{0}'", labelService.getUriBasenameLabel(resource)
'localHistoryEditorLabel', "{0} ({1} • {2})", entry.workingCopy.name, SaveSourceRegistry.getSourceLabel(entry.source), toLocalHistoryEntryDateLabel(entry.timestamp)
'localHistoryCompareToFileEditorLabel', "{0} ({1} • {2}) ↔ {3}", arg1.workingCopy.name, SaveSourceRegistry.getSourceLabel(arg1.source), toLocalHistoryEntryDateLabel(arg1.timestamp), arg1.workingCopy.name
'localHistoryCompareToPreviousEditorLabel', "{0} ({1} • {2}) ↔ {3} ({4} • {5})", arg1.workingCopy.name, SaveSourceRegistry.getSourceLabel(arg1.source), toLocalHistoryEntryDateLabel(arg1.timestamp), modified.workingCopy.name, SaveSourceRegistry.getSourceLabel(modified.source), toLocalHistoryEntryDateLabel(modified.timestamp)
'noCommandResults', "No matching commands"
'configure keybinding', "Configure Keybinding"
'commandWithCategory', "{0}: {1}", category, label
'showTriggerActions', "Show All Commands"
'clearCommandHistory', "Clear Command History"
'confirmClearMessage', "Do you want to clear the history of recently used commands?"
'confirmClearDetail', "This action is irreversible!"
{ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Clear"
'status.workbench.keyboardLayout', "Keyboard Layout"
'keyboardLayout', "Layout: {0}", layoutInfo.label
'keyboardLayout', "Layout: {0}", layoutInfo.label
'keyboardLayout', "Layout: {0}", layoutInfo.label
'displayLanguage', 'Defines the keyboard layout used in VS Code in the browser environment.'
'doc', 'Open VS Code and run "Developer: Inspect Key Mappings (JSON)" from Command Palette.'
'keyboard.chooseLayout', "Change Keyboard Layout"
'layoutPicks', "Keyboard Layouts ({0})", platform) }
'configureKeyboardLayout', "Configure Keyboard Layout"
'autoDetect', "Auto Detect"
'pickKeyboardLayout', "Select Keyboard Layout"), matchOnDescription: true }
'fail.createSettings', "Unable to create '{0}' ({1}).", file.toString(), error)
'defineKeybinding.start', "Define Keybinding"
'defineKeybinding.kbLayoutErrorMessage', "You won't be able to produce this key combination under your current keyboard layout."
src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts:					nls.localize({
src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts:					nls.localize({
src/vs/workbench/contrib/preferences/browser/tocTree.ts:		return localize({
'groupRowAriaLabel', "{0}, group", element.label
'okButton', "OK"
'cancelButton', "Cancel"
'listValueHintLabel', "List item `{0}`", value.data
'listSiblingHintLabel', "List item `{0}` with sibling `${1}`", value.data, sibling
'removeItem', "Remove Item"
'editItem', "Edit Item"
'addItem', "Add Item"
'itemInputPlaceholder', "Item..."
'listSiblingInputPlaceholder', "Sibling..."
'excludePatternHintLabel', "Exclude files matching `{0}`", value.data
'excludeSiblingHintLabel', "Exclude files matching `{0}`, only when a file matching `{1}` is present", value.data, sibling
'removeExcludeItem', "Remove Exclude Item"
'editExcludeItem', "Edit Exclude Item"
'addPattern', "Add Pattern"
'excludePatternInputPlaceholder', "Exclude Pattern..."
'excludeSiblingInputPlaceholder', "When Pattern Is Present..."
'okButton', "OK"
'cancelButton', "Cancel"
'objectKeyInputPlaceholder', "Key"
'objectValueInputPlaceholder', "Value"
'objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key.data, item.value.data
'removeItem', "Remove Item"
'resetItem', "Reset Item"
'editItem', "Edit Item"
'addItem', "Add Item"
'objectKeyHeader', "Item"
'objectValueHeader', "Value"
'objectPairHintLabel', "The property `{0}` is set to `{1}`.", item.key.data, item.value.data
'removeItem', "Remove Item"
'resetItem', "Reset Item"
'editItem', "Edit Item"
'addItem', "Add Item"
'objectKeyHeader', "Item"
'objectValueHeader', "Value"
'modifiedSettingsSearch', "Modified"
'modifiedSettingsSearchTooltip', "Add or remove modified settings filter"
'extSettingsSearch', "Extension ID..."
'extSettingsSearchTooltip', "Add extension ID filter"
'featureSettingsSearch', "Feature..."
'featureSettingsSearchTooltip', "Add feature filter"
'tagSettingsSearch', "Tag..."
'tagSettingsSearchTooltip', "Add tag filter"
'langSettingsSearch', "Language..."
'langSettingsSearchTooltip', "Add language ID filter"
'onlineSettingsSearch', "Online services"
'onlineSettingsSearchTooltip', "Show settings for online services"
'policySettingsSearch', "Policy services"
'policySettingsSearchTooltip', "Show settings for policy services"
'commonlyUsed', "Commonly Used"
'textEditor', "Text Editor"
'cursor', "Cursor"
'find', "Find"
'font', "Font"
'formatting', "Formatting"
'diffEditor', "Diff Editor"
'minimap', "Minimap"
'suggestions', "Suggestions"
'files', "Files"
'workbench', "Workbench"
'appearance', "Appearance"
'breadcrumbs', "Breadcrumbs"
'editorManagement', "Editor Management"
'settings', "Settings Editor"
'zenMode', "Zen Mode"
'screencastMode', "Screencast Mode"
'window', "Window"
'newWindow', "New Window"
'features', "Features"
'fileExplorer', "Explorer"
'search', "Search"
'debug', "Debug"
'testing', "Testing"
'scm', "Source Control"
'extensions', "Extensions"
'terminal', "Terminal"
'task', "Task"
'problems', "Problems"
'output', "Output"
'comments', "Comments"
'remote', "Remote"
'timeline', "Timeline"
'notebook', 'Notebook'
'audioCues', 'Audio Cues'
'mergeEditor', 'Merge Editor'
'application', "Application"
'proxy', "Proxy"
'keyboard', "Keyboard"
'update', "Update"
'telemetry', "Telemetry"
'settingsSync', "Settings Sync"
'security', "Security"
'workspace', "Workspace"
'extensions', "Extensions"
'modified', "The setting has been configured in the current scope."
'settingsContextMenuTitle', "More Actions... "
'newExtensionsButtonLabel', "Show matching extensions"
'editInSettingsJson', "Edit in settings.json"
'editLanguageSettingLabel', "Edit settings for {0}", plainKey
'settings.Default', "default") : ''
'modified', "The setting has been configured in the current scope."
'resetSettingLabel', "Reset Setting"
'validationError', "Validation Error."
'validationError', "Validation Error."
'settings.Modified', 'Modified.'
'settings', "Settings"
'copySettingIdLabel', "Copy Setting ID"
'copySettingAsJSONLabel', "Copy Setting as JSON"
'stopSyncingSetting', "Sync This Setting"
'SearchSettings.AriaLabel', "Search settings"
'clearInput', "Clear Settings Search Input"), ThemeIcon.asClassName(preferencesClearInputIcon), false, async () => this.clearSearchResults()
'filterInput', "Filter Settings"), ThemeIcon.asClassName(preferencesFilterIcon)
'noResults', "No Settings Found"
'clearSearchFilters', 'Clear Filters'))
'settings', "Settings"
'settings require trust', "Workspace Trust"
'noResults', "No Settings Found"
'oneResult', "1 Setting Found"
'moreThanOneResult', "{0} Settings Found", count
'turnOnSyncButton', "Turn on Settings Sync"
'lastSyncedLabel', "Last synced: {0}", d
'settingsScopeDropDownIcon', 'Icon for the folder dropdown button in the split JSON Settings editor.')
'settingsMoreActionIcon', 'Icon for the \'more actions\' action in the Settings UI.')
'keybindingsRecordKeysIcon', 'Icon for the \'record keys\' action in the keybinding UI.')
'keybindingsSortIcon', 'Icon for the \'sort by precedence\' toggle in the keybinding UI.')
'keybindingsEditIcon', 'Icon for the edit action in the keybinding UI.')
'keybindingsAddIcon', 'Icon for the add action in the keybinding UI.')
'settingsEditIcon', 'Icon for the edit action in the Settings UI.')
'settingsRemoveIcon', 'Icon for the remove action in the Settings UI.')
'preferencesDiscardIcon', 'Icon for the discard action in the Settings UI.')
'preferencesClearInput', 'Icon for clear input in the Settings and keybinding UI.')
'settingsFilter', 'Icon for the button that suggests filters for the Settings UI.')
'preferencesOpenSettings', 'Icon for open settings commands.')
'loaderErrorNative', "Failed to load a required file. Please restart the application to try again. Details: {0}", JSON.stringify(err)))
'workbench.editor.titleScrollbarSizing.default', "The default size."
'workbench.editor.titleScrollbarSizing.large', "Increases the size, so it can be grabbed more easily with the mouse."
'tabScrollbarHeight', "Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area."
'showEditorTabs', "Controls whether opened editors should show in tabs or not."
'wrapTabs', "Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `#workbench.editor.showTabs#` is disabled."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'scrollToSwitchTabs' }, "Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `#workbench.editor.showTabs#` is disabled."
'highlightModifiedTabs', "Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `#workbench.editor.showTabs#` is disabled."
'decorations.badges', "Controls whether editor file decorations should use badges."
'decorations.colors', "Controls whether editor file decorations should use colors."
'workbench.editor.labelFormat.default', "Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active."
'workbench.editor.labelFormat.short', "Show the name of the file followed by its directory name."
'workbench.editor.labelFormat.medium', "Show the name of the file followed by its path relative to the workspace folder."
'workbench.editor.labelFormat.long', "Show the name of the file followed by its absolute path."
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize({
'workbench.editor.untitled.labelFormat.content', "The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters."
'workbench.editor.untitled.labelFormat.name', "The name of the untitled file is not derived from the contents of the file."
src/vs/workbench/browser/workbench.contribution.ts:				'description': localize({
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'untitledHint' }, "Controls if the untitled text hint should be visible in the editor."
'workbench.editor.languageDetection', "Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown."
'workbench.editor.historyBasedLanguageDetection', "Enables use of editor history in language detection. This causes automatic language detection to favor languages that have been recently opened and allows for automatic language detection to operate with smaller inputs."
'workbench.editor.preferBasedLanguageDetection', "When enabled, a language detection model that takes into account editor history will be given higher precedence."
'workbench.editor.showLanguageDetectionHints', "When enabled, shows a status bar quick fix when the editor language doesn't match detected content language."
'workbench.editor.showLanguageDetectionHints.editors', "Show in untitled text editors"
'workbench.editor.showLanguageDetectionHints.notebook', "Show in notebook editors"
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorTabCloseButton' }, "Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `#workbench.editor.showTabs#` is disabled."
'workbench.editor.tabSizing.fit', "Always keep tabs large enough to show the full editor label."
'workbench.editor.tabSizing.shrink', "Allow tabs to get smaller when the available space is not enough to show all tabs at once."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'tabSizing' }, "Controls the sizing of editor tabs. This value is ignored when `#workbench.editor.showTabs#` is disabled."
'workbench.editor.pinnedTabSizing.normal', "A pinned tab inherits the look of non pinned tabs."
'workbench.editor.pinnedTabSizing.compact', "A pinned tab will show in a compact form with only icon or first letter of the editor name."
'workbench.editor.pinnedTabSizing.shrink', "A pinned tab shrinks to a compact fixed size showing parts of the editor name."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'pinnedTabSizing' }, "Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `#workbench.editor.showTabs#` is disabled."
'workbench.editor.splitSizingDistribute', "Splits all the editor groups to equal parts."
'workbench.editor.splitSizingSplit', "Splits the active editor group to equal parts."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'splitSizing' }, "Controls the sizing of editor groups when splitting them."
'splitOnDragAndDrop', "Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area."
'focusRecentEditorAfterClose', "Controls whether tabs are closed in most recently used order or from left to right."
'showIcons', "Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well."
'enablePreview', "Controls whether opened editors show as preview editors. Preview editors do not stay open, are reused until explicitly set to be kept open (e.g. via double click or editing), and show file names in italics."
'enablePreviewFromQuickOpen', "Controls whether editors opened from Quick Open show as preview editors. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `#workbench.editor.enablePreview#` is disabled."
'enablePreviewFromCodeNavigation', "Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not stay open, and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `#workbench.editor.enablePreview#` is disabled."
'closeOnFileDelete', "Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorOpenPositioning' }, "Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one."
'sideBySideDirection', "Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one."
'closeEmptyGroups', "Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid."
'revealIfOpen', "Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group."
'mouseBackForwardToNavigate', "Enables the use of mouse buttons four and five for commands 'Go Back' and 'Go Forward'."
'navigationScope', "Controls the scope of history navigation in editors for commands such as 'Go Back' and 'Go Forward'."
'workbench.editor.navigationScopeDefault', "Navigate across all opened editors and editor groups."
'workbench.editor.navigationScopeEditorGroup', "Navigate only in editors of the active editor group."
'workbench.editor.navigationScopeEditor', "Navigate only in the active editor."
'restoreViewState', "Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the {0} setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.", '`#workbench.editor.sharedViewState#`'
'sharedViewState', "Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group."
'splitInGroupLayout', "Controls the layout for when an editor is split in an editor group to be either vertical or horizontal."
'workbench.editor.splitInGroupLayoutVertical', "Editors are positioned from top to bottom."
'workbench.editor.splitInGroupLayoutHorizontal', "Editors are positioned from left to right."
'centeredLayoutAutoResize', "Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width."
'limitEditorsEnablement', "Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors."
'limitEditorsMaximum', "Controls the maximum number of opened editors. Use the {0} setting to control this limit per editor group or across all groups.", '`#workbench.editor.limit.perEditorGroup#`'
'limitEditorsExcludeDirty', "Controls if the maximum number of opened editors should exclude dirty editors for counting towards the configured limit."
'perEditorGroup', "Controls if the limit of maximum opened editors should apply per editor group or across all editor groups."
'localHistoryEnabled', "Controls whether local file history is enabled. When enabled, the file contents of an editor that is saved will be stored to a backup location to be able to restore or review the contents later. Changing this setting has no effect on existing local file history entries."
'localHistoryMaxFileSize', "Controls the maximum size of a file (in KB) to be considered for local file history. Files that are larger will not be added to the local file history. Changing this setting has no effect on existing local file history entries."
'localHistoryMaxFileEntries', "Controls the maximum number of local file history entries per file. When the number of local file history entries exceeds this number for a file, the oldest entries will be discarded."
'exclude', "Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files from the local file history. Changing this setting has no effect on existing local file history entries."
'mergeWindow', "Configure an interval in seconds during which the last entry in local file history is replaced with the entry that is being added. This helps reduce the overall number of entries that are added, for example when auto save is enabled. This setting is only applied to entries that have the same source of origin. Changing this setting has no effect on existing local file history entries."
'commandHistory', "Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history."
'preserveInput', "Controls whether the last typed input to the command palette should be restored when opening it the next time."
'closeOnFocusLost', "Controls whether Quick Open should close automatically once it loses focus."
'workbench.quickOpen.preserveInput', "Controls whether the last typed input to Quick Open should be restored when opening it the next time."
'openDefaultSettings', "Controls whether opening settings also opens an editor showing all default settings."
'useSplitJSON', "Controls whether to use the split JSON editor when editing settings as JSON."
'openDefaultKeybindings', "Controls whether opening keybinding settings also opens an editor showing all default keybindings."
'sideBarLocation', "Controls the location of the primary side bar and activity bar. They can either show on the left or right of the workbench. The secondary side bar will show on the opposite side of the workbench."
'panelDefaultLocation', "Controls the default location of the panel (terminal, debug console, output, problems) in a new workspace. It can either show at the bottom, right, or left of the editor area."
'panelOpensMaximized', "Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed."
'workbench.panel.opensMaximized.always', "Always maximize the panel when opening it."
'workbench.panel.opensMaximized.never', "Never maximize the panel when opening it. The panel will open un-maximized."
'workbench.panel.opensMaximized.preserve', "Open the panel to the state that it was in, before it was closed."
'statusBarVisibility', "Controls the visibility of the status bar at the bottom of the workbench."
'activityBarVisibility', "Controls the visibility of the activity bar in the workbench."
'activityBarIconClickBehavior', "Controls the behavior of clicking an activity bar icon in the workbench."
'workbench.activityBar.iconClickBehavior.toggle', "Hide the side bar if the clicked item is already visible."
'workbench.activityBar.iconClickBehavior.focus', "Focus side bar if the clicked item is already visible."
'viewVisibility', "Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over."
'fontAliasing', "Controls font aliasing method in the workbench."
'workbench.fontAliasing.default', "Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text."
'workbench.fontAliasing.antialiased', "Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall."
'workbench.fontAliasing.none', "Disables font smoothing. Text will show with jagged sharp edges."
'workbench.fontAliasing.auto', "Applies `default` or `antialiased` automatically based on the DPI of displays."
'settings.editor.ui', "Use the settings UI editor."
'settings.editor.json', "Use the JSON file editor."
'settings.editor.desc', "Determines which settings editor to use by default."
'workbench.hover.delay', "Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change."
'workbench.reduceMotion', "Controls whether the workbench should render with fewer animations."
'workbench.reduceMotion.on', "Always render with reduced motion."
'workbench.reduceMotion.off', "Do not render with reduced motion"
'workbench.reduceMotion.auto', "Render with reduced motion based on OS configuration."
'layoutControlEnabledWeb', "Controls whether the layout control in the title bar is shown."
{ key: 'layoutControlEnabled', comment: ['{0} is a placeholder for a setting identifier.'] }, "Controls whether the layout control is shown in the custom title bar. This setting only has an effect when {0} is set to {1}.", '`#window.titleBarStyle#`', '`custom`'
'layoutcontrol.type.menu', "Shows a single button with a dropdown of layout options."
'layoutcontrol.type.toggles', "Shows several buttons for toggling the visibility of the panels and side bar."
'layoutcontrol.type.both', "Shows both the dropdown and toggle buttons."
'layoutControlType', "Controls whether the layout control in the custom title bar is displayed as a single menu button or with multiple UI toggles."
'windowTitle', "Controls the window title based on the active editor. Variables are substituted based on the context:"
'activeEditorShort', "`${activeEditorShort}`: the file name (e.g. myFile.txt)."
'activeEditorMedium', "`${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt)."
'activeEditorLong', "`${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt)."
'activeFolderShort', "`${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder)."
'activeFolderMedium', "`${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder)."
'activeFolderLong', "`${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder)."
'folderName', "`${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder)."
'folderPath', "`${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder)."
'rootName', "`${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace)."
'rootPath', "`${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace)."
'appName', "`${appName}`: e.g. VS Code."
'remoteName', "`${remoteName}`: e.g. SSH"
'dirty', "`${dirty}`: an indicator for when the active editor has unsaved changes."
'separator', "`${separator}`: a conditional separator (\" - \") that only shows when surrounded by variables with values or static text."
'windowConfigurationTitle', "Window"
"window.titleSeparator", "Separator used by {0}.", '`#window.title#`'
'window.commandCenterWeb', "Show command launcher together with the window title."
{ key: 'window.commandCenter', comment: ['{0} is a placeholder for a setting identifier.'] }, "Show command launcher together with the window title. This setting only has an effect when {0} is set to {1}.", '`#window.titleBarStyle#`', '`custom`'
'window.menuBarVisibility.classic', "Menu is displayed at the top of the window and only hidden in full screen mode."
'window.menuBarVisibility.visible', "Menu is always visible at the top of the window even in full screen mode."
'window.menuBarVisibility.toggle.mac', "Menu is hidden but can be displayed at the top of the window by executing the `Focus Application Menu` command."
'window.menuBarVisibility.toggle', "Menu is hidden but can be displayed at the top of the window via the Alt key."
'window.menuBarVisibility.hidden', "Menu is always hidden."
'window.menuBarVisibility.compact.web', "Menu is displayed as a compact button in the side bar."
{ key: 'window.menuBarVisibility.compact', comment: ['{0} is a placeholder for a setting identifier.'] }, "Menu is displayed as a compact button in the side bar. This value is ignored when {0} is {1}.", '`#window.titleBarStyle#`', '`native`'
'menuBarVisibility.mac', "Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and executing `Focus Application Menu` will show it. A setting of 'compact' will move the menu into the side bar."
'menuBarVisibility', "Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. A setting of 'compact' will move the menu into the side bar."
'enableMenuBarMnemonics', "Controls whether the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead."
'customMenuBarAltFocus', "Controls whether the menu bar will be focused by pressing the Alt-key. This setting has no effect on toggling the menu bar with the Alt-key."
'window.openFilesInNewWindow.on', "Files will open in a new window."
'window.openFilesInNewWindow.off', "Files will open in the window with the files' folder open or the last active window."
'window.openFilesInNewWindow.defaultMac', "Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder."
'window.openFilesInNewWindow.default', "Files will open in a new window unless picked from within the application (e.g. via the File menu)."
'openFilesInNewWindowMac', "Controls whether files should open in a new window when using a command line or file dialog.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option)."
'openFilesInNewWindow', "Controls whether files should open in a new window when using a command line or file dialog.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option)."
'window.openFoldersInNewWindow.on', "Folders will open in a new window."
'window.openFoldersInNewWindow.off', "Folders will replace the last active window."
'window.openFoldersInNewWindow.default', "Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu)."
'openFoldersInNewWindow', "Controls whether folders should open in a new window or replace the last active window.\nNote that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option)."
'window.confirmBeforeClose.always.web', "Always try to ask for confirmation. Note that browsers may still decide to close a tab or window without confirmation."
'window.confirmBeforeClose.always', "Always ask for confirmation."
'window.confirmBeforeClose.keyboardOnly.web', "Only ask for confirmation if a keybinding was used to close the window. Note that detection may not be possible in some cases."
'window.confirmBeforeClose.keyboardOnly', "Only ask for confirmation if a keybinding was used."
'window.confirmBeforeClose.never.web', "Never explicitly ask for confirmation unless data loss is imminent."
'window.confirmBeforeClose.never', "Never explicitly ask for confirmation."
'confirmBeforeCloseWeb', "Controls whether to show a confirmation dialog before closing the browser tab or window. Note that even if enabled, browsers may still decide to close a tab or window without confirmation and that this setting is only a hint that may not work in all cases."
'confirmBeforeClose', "Controls whether to show a confirmation dialog before closing the window or quitting the application."
'zenModeConfigurationTitle', "Zen Mode"
'zenMode.fullScreen', "Controls whether turning on Zen Mode also puts the workbench into full screen mode."
'zenMode.centerLayout', "Controls whether turning on Zen Mode also centers the layout."
'zenMode.hideTabs', "Controls whether turning on Zen Mode also hides workbench tabs."
'zenMode.hideStatusBar', "Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench."
'zenMode.hideActivityBar', "Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench."
'zenMode.hideLineNumbers', "Controls whether turning on Zen Mode also hides the editor line numbers."
'zenMode.restore', "Controls whether a window should restore to zen mode if it was exited in zen mode."
'zenMode.silentNotifications', "Controls whether notifications do not disturb mode should be enabled while in zen mode. If true, only error notifications will pop out."
'editTtile', "Edit"), settings
'copyDefaultValue', "Copy to Settings"
'unknown configuration setting', "Unknown Configuration Setting"
'unsupportedPolicySetting', "This setting cannot be applied because it is configured in the system policy."
'defaultProfileSettingWhileNonDefaultActive', "This setting cannot be applied while a non-default profile is active. It will be applied when the default profile is active."
'unsupportedRemoteMachineSetting', "This setting cannot be applied in this window. It will be applied when you open a local window."
'unsupportedWindowSetting', "This setting cannot be applied in this workspace. It will be applied when you open the containing workspace folder directly."
'unsupportedApplicationSetting', "This setting has an application scope and can be set only in the user settings file."
'unsupportedMachineSetting', "This setting can only be applied in user settings in local window or in remote settings in remote window."
'untrustedSetting', "This setting can only be applied in a trusted workspace."
'manage workspace trust', "Manage Workspace Trust"
'manage workspace trust', "Manage Workspace Trust"
'unsupportedProperty', "Unsupported Property"
'recordKeysLabel', "Record Keys"), ThemeIcon.asClassName(keybindingsRecordKeysIcon)
'sortByPrecedeneLabel', "Sort by Precedence (Highest first)"), ThemeIcon.asClassName(keybindingsSortIcon)
'SearchKeybindings.FullTextSearchPlaceholder', "Type to search in keybindings"
'SearchKeybindings.KeybindingsSearchPlaceholder', "Recording Keys. Press Escape to exit"
'clearInput', "Clear Keybindings Search Input"), ThemeIcon.asClassName(preferencesClearInputIcon), false, async () => this.clearSearchResults()
'recording', "Recording Keys"
'command', "Command"
'keybinding', "Keybinding"
'when', "When"
'source', "Source"
'show sorted keybindings', "Showing {0} Keybindings in precedence order", keybindingsEntries.length
'show keybindings', "Showing {0} Keybindings in alphabetical order", keybindingsEntries.length
'addLabel', "Add Keybinding..."
'addLabel', "Add Keybinding..."
'editWhen', "Change When Expression"
'removeLabel', "Remove Keybinding"
'resetLabel', "Reset Keybinding"
'showSameKeybindings', "Show Same Keybindings"
'copyLabel', "Copy"
'copyCommandLabel', "Copy Command ID"
'copyCommandTitleLabel', "Copy Command Title"
'error', "Error '{0}' while editing the keybinding. Please open 'keybindings.json' file and check for errors.", `${error}`)
'editKeybindingLabel', "Change Keybinding"
'addKeybindingLabel', "Add Keybinding"
'title', "{0} ({1})", keybindingItem.commandLabel, keybindingItem.command
'whenContextInputAriaLabel', "Type when context. Press Enter to confirm or Escape to cancel."
'keybindingsLabel', "Keybindings"
'noKeybinding', "No Keybinding assigned.")
'noWhen', "No when context."
'configureLanguageBasedSettings', "Configure Language Specific Settings..."
'languageDescriptionConfigured', "({0})", languageId
'pickLanguage', "Select Language") }
'defineKeybinding.initial', "Press desired key combination and then press ENTER."
'defineKeybinding.existing', "{0} existing commands have this keybinding", numberOfExisting
'defineKeybinding.chordsTo', "chord to"))
'workspaceUntrustedLabel', "Setting value not applied"
'trustLabel', "The setting value can only be applied in a trusted workspace."
'manageWorkspaceTrust', "Manage Workspace Trust")}](manage-workspace-trust
'extensionSyncIgnoredLabel', 'Not synced'
'syncIgnoredTitle', "This setting is ignored during sync"
'defaultOverriddenLabel', "Default value changed"
'user', "User"
'remote', "Remote"
'policyLabelText', "Setting value not applied"
'policyDescription', "This setting is managed by your organization and its applied value cannot be changed."
'policyFilterLink', "View policy settings")}](policy-settings
'applicationSetting', "Applies to all profiles"
'applicationSettingDescription', "The setting is not specific to the current profile, and will retain its value when switching profiles."
'alsoConfiguredIn', "Also modified in"
'configuredIn', "Modified in"
'alsoConfiguredElsewhere', "Also modified elsewhere"
'configuredElsewhere', "Modified elsewhere"
'alsoModifiedInScopes', "The setting has also been modified in the following scopes:"
'modifiedInScopes', "The setting has been modified in the following scopes:"
'hasDefaultOverridesForLanguages', "The following languages have default overrides:"
'defaultOverriddenDetails', "Default setting value overridden by {0}", sourceToDisplay
'user', "User"
'remote', "Remote"
'modifiedInScopeForLanguage', "The {0} scope for {1}", localizedScope, languageService.getLanguageName(language)
'user', "User"
'remote', "Remote"
'modifiedInScopeForLanguageMidSentence', "the {0} scope for {1}", localizedScope.toLowerCase(), languageService.getLanguageName(language)
'workspaceUntrustedAriaLabel', "Workspace untrusted; setting value not applied")
'policyDescriptionAccessible', "Managed by organization policy; setting value not applied")
'applicationSettingDescriptionAccessible', "Setting value retained when switching profiles")
'alsoConfiguredIn', "Also modified in"
'configuredIn', "Modified in"
'syncIgnoredAriaLabel', "Setting ignored during sync")
'defaultOverriddenDetailsAriaLabel', "{0} overrides the default value", sourceToDisplay)
'defaultOverriddenLanguagesList', "Language-specific default values exist for {0}", otherLanguageOverridesList
'prof.message', "Successfully created profiles."
'prof.detail', "Please create an issue and manually attach the following files:\n{0}", profileFiles
'prof.restartAndFileIssue', "&&Create Issue and Restart"
'prof.restart', "&&Restart"
'prof.thanks', "Thanks for helping us."
'prof.detail.restart', "A final restart is required to continue to use '{0}'. Again, thank you for your contribution.", this._productService.nameLong
'prof.restart.button', "&&Restart"
'name', "Startup Performance"
'show.label', "Startup Performance"
'cycles', "Print Service Cycles"
'insta.trace', "Print Service Traces"
'emitter', "Print Emitter Profiles"
'channel', "Output channel for '{0}'", channel.label), undefined, undefined
'output', "Output"
'outputViewAriaLabel', "Output panel"
'settingsEditor2', "Settings Editor 2"
'keybindingsEditor', "Keybindings Editor"
'openSettings2', "Open Settings (UI)"), original: 'Open Settings (UI
'openUserSettingsJson', "Open User Settings (JSON)"), original: 'Open User Settings (JSON
'openCurrentProfileSettingsJson', "Open Current Profile Settings (JSON)"), original: 'Open Current Profile Settings (JSON
'preferences', "Preferences"
'settings', "Settings"
{ key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] }, "&&Settings"
'openSettings2', "Open Settings (UI)"), original: 'Open Settings (UI
'openGlobalSettings', "Open User Settings"
'openRawDefaultSettings', "Open Default Settings (JSON)"), original: 'Open Default Settings (JSON
'openSettingsJson', "Open Settings (JSON)"), original: 'Open Settings (JSON
'openSettingsJson', "Open Settings (JSON)"), original: 'Open Settings (JSON
'openWorkspaceSettings', "Open Workspace Settings"
'openAccessibilitySettings', "Open Accessibility Settings"
'openWorkspaceSettingsFile', "Open Workspace Settings (JSON)"), original: 'Open Workspace Settings (JSON
'openFolderSettings', "Open Folder Settings"
'openFolderSettingsFile', "Open Folder Settings (JSON)"), original: 'Open Folder Settings (JSON
'openFolderSettings', "Open Folder Settings"
{ key: 'miOpenOnlineSettings', comment: ['&& denotes a mnemonic'] }, "&&Online Services Settings"
'showTelemtrySettings', "Telemetry Settings"
'filterUntrusted', "Show untrusted workspace settings"
'openRemoteSettings', "Open Remote Settings ({0})", hostLabel
'openRemoteSettingsJSON', "Open Remote Settings (JSON) ({0})", hostLabel
'settings.focusSearch', "Focus Settings Search"
'settings.clearResults', "Clear Settings Search Results"
'settings.focusFile', "Focus settings file"
'settings.focusFile', "Focus settings file"
'settings.focusSettingsList', "Focus settings list"
'settings.focusSettingsTOC', "Focus Settings Table of Contents"
'settings.focusSettingControl', "Focus Setting Control"
'settings.showContextMenu', "Show Setting Context Menu"
'settings.focusLevelUp', "Move Focus Up One Level"
'preferences', "Preferences"
'openGlobalKeybindings', "Open Keyboard Shortcuts"
'Keyboard Shortcuts', "Keyboard Shortcuts"
'Keyboard Shortcuts', "Keyboard Shortcuts"
'openDefaultKeybindingsFile', "Open Default Keyboard Shortcuts (JSON)"), original: 'Open Default Keyboard Shortcuts (JSON
'openGlobalKeybindingsFile', "Open Keyboard Shortcuts (JSON)"), original: 'Open Keyboard Shortcuts (JSON
'showDefaultKeybindings', "Show Default Keybindings"
'showExtensionKeybindings', "Show Extension Keybindings"
'showUserKeybindings', "Show User Keybindings"
'clear', "Clear Search Results"
'clearHistory', "Clear Keyboard Shortcuts Search History"
{ key: 'miPreferences', comment: ['&& denotes a mnemonic'] }, "&&Preferences"
'shutdownError', "An unexpected error occurred that requires a reload of this page."
'reload', "Reload"
'shutdownErrorDetail', "The workbench was unexpectedly disposed while running."
'unableToOpenExternal', "The browser interrupted the opening of a new tab or window. Press 'Open' to open it anyway."
'open', "Open"
'learnMore', "Learn More"
'cancel', "Cancel"
src/vs/workbench/browser/window.ts:						let detail = localize(
'openExternalDialogButtonClose.v2', "Close Tab"
'openExternalDialogButtonRetry.v2', "Try Again"
'openExternalDialogButtonInstall.v3', "Install"
'openExternalDialogButtonCancel', "Cancel"
src/vs/workbench/browser/window.ts:							detail = localize(
'openExternalDialogTitle', "All done. You can close this tab now."
'logViewerAriaLabel', "Log viewer"
'collapse', "Collapse All"
'expand', "Expand All"
'followCur', "Follow Cursor"
'filterOnType', "Filter on Type"
'sortByPosition', "Sort By: Position"
'sortByName', "Sort By: Name"
'sortByKind', "Sort By: Category"
'experimental.rendererProfiling', "When enabled slow renderers are automatically profiled"
'no-editor', "The active editor cannot provide outline information.")
'loading', "Loading document symbols for '{0}'...", basename(resource))
'no-symbols', "No symbols found in document '{0}'", basename(resource))
'outlineViewIcon', 'View icon of the outline view.')
'name', "Outline"
'outlineConfigurationTitle', "Outline"
'outline.showIcons', "Render outline elements with icons."
'outline.initialState', "Controls whether outline items are collapsed or expanded."
'outline.initialState.collapsed', "Collapse all items."
'outline.initialState.expanded', "Expand all items."
'outline.showProblem', "Show errors and warnings on outline elements."
'outline.problem.colors', "Use colors for errors and warnings on outline elements."
'outline.problems.badges', "Use badges for errors and warnings on outline elements."
'filteredTypes.file', "When enabled outline shows `file`-symbols."
'filteredTypes.module', "When enabled outline shows `module`-symbols."
'filteredTypes.namespace', "When enabled outline shows `namespace`-symbols."
'filteredTypes.package', "When enabled outline shows `package`-symbols."
'filteredTypes.class', "When enabled outline shows `class`-symbols."
'filteredTypes.method', "When enabled outline shows `method`-symbols."
'filteredTypes.property', "When enabled outline shows `property`-symbols."
'filteredTypes.field', "When enabled outline shows `field`-symbols."
'filteredTypes.constructor', "When enabled outline shows `constructor`-symbols."
'filteredTypes.enum', "When enabled outline shows `enum`-symbols."
'filteredTypes.interface', "When enabled outline shows `interface`-symbols."
'filteredTypes.function', "When enabled outline shows `function`-symbols."
'filteredTypes.variable', "When enabled outline shows `variable`-symbols."
'filteredTypes.constant', "When enabled outline shows `constant`-symbols."
'filteredTypes.string', "When enabled outline shows `string`-symbols."
'filteredTypes.number', "When enabled outline shows `number`-symbols."
'filteredTypes.boolean', "When enabled outline shows `boolean`-symbols."
'filteredTypes.array', "When enabled outline shows `array`-symbols."
'filteredTypes.object', "When enabled outline shows `object`-symbols."
'filteredTypes.key', "When enabled outline shows `key`-symbols."
'filteredTypes.null', "When enabled outline shows `null`-symbols."
'filteredTypes.enumMember', "When enabled outline shows `enumMember`-symbols."
'filteredTypes.struct', "When enabled outline shows `struct`-symbols."
'filteredTypes.event', "When enabled outline shows `event`-symbols."
'filteredTypes.operator', "When enabled outline shows `operator`-symbols."
'filteredTypes.typeParameter', "When enabled outline shows `typeParameter`-symbols."
'outputViewIcon', 'View icon of the output view.')
'output', "Output"
'output', "Output"
{ key: 'miToggleOutput', comment: ['&& denotes a mnemonic'] }, "&&Output"
'logViewer', "Log Viewer"
'switchBetweenOutputs.label', "Switch Output"
'switchToOutput.label', "Switch Output"
'clearOutput.label', "Clear Output"
'outputCleared', "Output was cleared")
'toggleAutoScroll', "Toggle Auto Scrolling"
'outputScrollOff', "Turn Auto Scrolling Off"
'outputScrollOn', "Turn Auto Scrolling On"
'openActiveLogOutputFile', "Open Log Output File"
'showLogs', "Show Logs..."
'extensionLogs', "Extension Logs") }
'selectlog', "Select Log") }
'openLogFile', "Open Log File..."
'selectlogFile', "Select Log file") }
'output', "Output"
'output.smartScroll.enabled', "Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line."
'statusBarOfflineBackground', "Status bar background color when the workbench is offline. The status bar is shown in the bottom of the window")
'statusBarOfflineForeground', "Status bar foreground color when the workbench is offline. The status bar is shown in the bottom of the window")
'statusBarOfflineBorder', "Status bar border color separating to the sidebar and editor when the workbench is offline. The status bar is shown in the bottom of the window")
'offline', "Network appears to be offline, certain features might be unavailable."
'vscode.dev', "vscode.dev"), joinPath(dirname(environmentService.logFile), `webEmbedder.log`)
'reset', "Reset User Data"
'reset user data message', "Would you like to reset your data (settings, keybindings, extensions, snippets and UI State) and reload?"
'notebook.staleSaveError', "The contents of the file has changed on disk. Would you like to open the updated version or overwrite the file with your changes?"
'notebook.staleSaveError.revert', "Revert"
'notebook.staleSaveError.overwrite.', "Overwrite"
'messageN', 'Do you want keep the merge result of {0} files?', inputModels.length
'message1', 'Do you want keep the merge result of {0}?', basename(inputModels[0].model.resultTextModel.uri)
'detailNConflicts', "The files contain unhandled conflicts. The merge results will be lost if you don't save them."
'detail1Conflicts', "The file contains unhandled conflicts. The merge result will be lost if you don't save it."
'detailN', "The merge results will be lost if you don't save them."
'detail1', "The merge result will be lost if you don't save it."
'save', "Save"
'discard', "Don't Save"
'cancel', "Cancel"
src/vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts:				localize(
'acceptMerge', 'Accept Merge'
'cancel', "Cancel"
'merge-editor.source', "Before Resolving Conflicts In Merge Editor")
'workspace.messageN', 'Do you want to save the changes you made to {0} files?', inputModels.length
'workspace.message1', 'Do you want to save the changes you made to {0}?', basename(inputModels[0].resultUri)
'workspace.detailN.unhandled', "The files contain unhandled conflicts. Your changes will be lost if you don't save them."
'workspace.detail1.unhandled', "The file contains unhandled conflicts. Your changes will be lost if you don't save them."
'workspace.detailN.handled', "Your changes will be lost if you don't save them."
'workspace.detail1.handled', "Your changes will be lost if you don't save them."
'workspace.saveWithConflict', 'Save with Conflicts'
'workspace.save', 'Save'
'workspace.doNotSave', "Don't Save"
'workspace.cancel', 'Cancel'
'workspace.messageN.nonDirty', 'Do you want to close {0} merge editors?', inputModels.length
'workspace.message1.nonDirty', 'Do you want to close the merge editor for {0}?', basename(inputModels[0].resultUri)
'workspace.detailN.unhandled.nonDirty', "The files contain unhandled conflicts."
'workspace.detail1.unhandled.nonDirty', "The file contains unhandled conflicts."
'workspace.closeWithConflicts', 'Close with Conflicts'
'workspace.close', 'Close'
'workspace.cancel', 'Cancel'
'contributes.notebook.provider', 'Contributes notebook document provider.'
'contributes.notebook.provider.viewType', 'Type of the notebook.'
'contributes.notebook.provider.displayName', 'Human readable name of the notebook.'
'contributes.notebook.provider.selector', 'Set of globs that the notebook is for.'
'contributes.notebook.provider.selector.filenamePattern', 'Glob that the notebook is enabled for.'
'contributes.notebook.selector.provider.excludeFileNamePattern', 'Glob that the notebook is disabled for.'
'contributes.priority', 'Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.'
'contributes.priority.default', 'The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.'
'contributes.priority.option', 'The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.'
'contributes.notebook.renderer', 'Contributes notebook output renderer provider.'
'contributes.notebook.renderer.viewType', 'Unique identifier of the notebook output renderer.'
'contributes.notebook.renderer.displayName', 'Human readable name of the notebook output renderer.'
'contributes.notebook.renderer.hardDependencies', 'List of kernel dependencies the renderer requires. If any of the dependencies are present in the `NotebookKernel.preloads`, the renderer can be used.'
'contributes.notebook.renderer.optionalDependencies', 'List of soft kernel dependencies the renderer can make use of. If any of the dependencies are present in the `NotebookKernel.preloads`, the renderer will be preferred over renderers that don\'t interact with the kernel.'
'contributes.notebook.renderer.requiresMessaging.always', 'Messaging is required. The renderer will only be used when it\'s part of an extension that can be run in an extension host.'
'contributes.notebook.renderer.requiresMessaging.optional', 'The renderer is better with messaging available, but it\'s not requried.'
'contributes.notebook.renderer.requiresMessaging.never', 'The renderer does not require messaging.'
'contributes.notebook.renderer.requiresMessaging', 'Defines how and if the renderer needs to communicate with an extension host, via `createRendererMessaging`. Renderers with stronger messaging requirements may not work in all environments.'
'contributes.notebook.selector', 'Set of globs that the notebook is for.'
'contributes.notebook.renderer.entrypoint', 'File to load in the webview to render the extension.'
'contributes.notebook.renderer.entrypoint', 'File to load in the webview to render the extension.'
'contributes.notebook.renderer.entrypoint.extends', 'Existing renderer that this one extends.'
'contributes.notebook.renderer.entrypoint', 'File to load in the webview to render the extension.'
'contributes.preload.provider', 'Contributes notebook preloads.'
'contributes.preload.provider.viewType', 'Type of the notebook.'
'contributes.preload.entrypoint', 'Path to file loaded in the webview.'
'selectKernelIcon', 'Configure icon to select a kernel in notebook editors.')
'executeIcon', 'Icon to execute in notebook editors.')
'executeAboveIcon', 'Icon to execute above cells in notebook editors.')
'executeBelowIcon', 'Icon to execute below cells in notebook editors.')
'stopIcon', 'Icon to stop an execution in notebook editors.')
'deleteCellIcon', 'Icon to delete a cell in notebook editors.')
'executeAllIcon', 'Icon to execute all cells in notebook editors.')
'editIcon', 'Icon to edit a cell in notebook editors.')
'stopEditIcon', 'Icon to stop editing a cell in notebook editors.')
'moveUpIcon', 'Icon to move up a cell in notebook editors.')
'moveDownIcon', 'Icon to move down a cell in notebook editors.')
'clearIcon', 'Icon to clear cell outputs in notebook editors.')
'splitCellIcon', 'Icon to split a cell in notebook editors.')
'successStateIcon', 'Icon to indicate a success state in notebook editors.')
'errorStateIcon', 'Icon to indicate an error state in notebook editors.')
'pendingStateIcon', 'Icon to indicate a pending state in notebook editors.')
'executingStateIcon', 'Icon to indicate an executing state in notebook editors.')
'collapsedIcon', 'Icon to annotate a collapsed section in notebook editors.')
'expandedIcon', 'Icon to annotate an expanded section in notebook editors.')
'openAsTextIcon', 'Icon to open the notebook in a text editor.')
'revertIcon', 'Icon to revert in notebook editors.')
'renderOutputIcon', 'Icon to render output in diff editor.')
'mimetypeIcon', 'Icon for a mime type in notebook editors.')
'notebookActions.editCell', "Edit Cell"
'notebookActions.quitEdit', "Stop Editing Cell"
'notebookActions.deleteCell', "Delete Cell"
'clearCellOutputs', 'Clear Cell Outputs'
'clearAllCellsOutputs', 'Clear Outputs of All Cells'
'changeLanguage', 'Change Cell Language'
'changeLanguage', 'Change Cell Language'
'languageDescription', "({0}) - Current Language", languageId
'languageDescriptionConfigured', "({0})", languageId
'autoDetect', "Auto Detect"
'languagesPicks', "languages (identifier)"
'pickLanguageToConfigure', "Select Language Mode") }
'detectLanguage', 'Accept Detected Language for Cell'
'noDetection', "Unable to detect cell language")
'notebookActions.renderMarkdown', "Render All Markdown Cells"
'notebookActions.executeNotebook', "Run All"
'notebookActions.executeNotebook', "Run All"
'notebookActions.execute', "Execute Cell"
'notebookActions.execute', "Execute Cell"
'notebookActions.executeAbove', "Execute Above Cells"
'notebookActions.executeBelow', "Execute Cell and Below"
'notebookActions.executeAndFocusContainer', "Execute Cell and Focus Container"
'notebookActions.executeAndFocusContainer', "Execute Cell and Focus Container"
'notebookActions.cancel', "Stop Cell Execution"
'notebookActions.cancel', "Stop Cell Execution"
'notebookActions.executeAndSelectBelow', "Execute Notebook Cell and Select Below"
'notebookActions.executeAndInsertBelow', "Execute Notebook Cell and Insert Below"
'notebookActions.cancelNotebook', "Stop Execution"
'notebookActions.interruptNotebook', "Interrupt"
'revealRunningCell', "Go to Running Cell"
'revealRunningCell', "Go to Running Cell"
'revealRunningCellShort', "Go To"
'revealLastFailedCell', "Go to Most Recently Failed Cell"
'revealLastFailedCell', "Go to Most Recently Failed Cell"
'revealLastFailedCellShort', "Go To"
'userSettings', "User"
'userSettingsRemote', "Remote") + (hostLabel ? ` [${hostLabel}]` : ''
'workspaceSettings', "Workspace"
'folderSettings', "Folder"
'settingsSwitcherBarAriaLabel', "Settings Switcher"
'workspaceSettings', "Workspace"
'userSettings', "User"
'notebookActions.insertCodeCellAbove', "Insert Code Cell Above"
'notebookActions.insertCodeCellAboveAndFocusContainer', "Insert Code Cell Above and Focus Container"
'notebookActions.insertCodeCellBelow', "Insert Code Cell Below"
'notebookActions.insertCodeCellBelowAndFocusContainer', "Insert Code Cell Below and Focus Container"
'notebookActions.insertMarkdownCellAbove', "Insert Markdown Cell Above"
'notebookActions.insertMarkdownCellBelow', "Insert Markdown Cell Below"
'notebookActions.insertCodeCellAtTop', "Add Code Cell At Top"
'notebookActions.insertMarkdownCellAtTop', "Add Markdown Cell At Top"
'notebookActions.menu.insertCode', "Code"
'notebookActions.menu.insertCode.tooltip', "Add Code Cell"
'notebookActions.menu.insertCode.minimalToolbar', "Add Code"
'notebookActions.menu.insertCode.tooltip', "Add Code Cell"
'notebookActions.menu.insertCode.ontoolbar', "Code"
'notebookActions.menu.insertCode.tooltip', "Add Code Cell"
'notebookActions.menu.insertCode', "Code"
'notebookActions.menu.insertCode.tooltip', "Add Code Cell"
'notebookActions.menu.insertCode.minimaltoolbar', "Add Code"
'notebookActions.menu.insertCode.tooltip', "Add Code Cell"
'notebookActions.menu.insertMarkdown', "Markdown"
'notebookActions.menu.insertMarkdown.tooltip', "Add Markdown Cell"
'notebookActions.menu.insertMarkdown.ontoolbar', "Markdown"
'notebookActions.menu.insertMarkdown.tooltip', "Add Markdown Cell"
'notebookActions.menu.insertMarkdown', "Markdown"
'notebookActions.menu.insertMarkdown.tooltip', "Add Markdown Cell"
'workbench.notebook.layout.select.label', "Select between Notebook Layouts"
'workbench.notebook.layout.configure.label', "Customize Notebook Layout"
'workbench.notebook.layout.configure.label', "Customize Notebook Layout"
'customizeNotebook', "Customize Notebook..."
'notebook.toggleLineNumbers', "Toggle Notebook Line Numbers"
'notebook.showLineNumbers', "Notebook Line Numbers"
'notebook.toggleCellToolbarPosition', "Toggle Cell Toolbar Position"
'notebook.toggleBreadcrumb', "Toggle Breadcrumbs"
'notebook.saveMimeTypeOrder', 'Save Mimetype Display Order'
'notebook.placeholder', 'Settings file to save in'
'saveTarget.machine', 'User Settings'
'saveTarget.workspace', 'Workspace Settings'
'workbench.notebook.layout.webview.reset.label', "Reset Notebook Webview"
'notebookRunTrust', "Executing a notebook cell will run code from this workspace."
'fold.cell', "Fold Cell"
'unfold.cell', "Unfold Cell"
'fold.cell', "Fold Cell"
'notebook.emptyMarkdownPlaceholder', "Empty markdown cell, double click or press enter to edit."
src/vs/workbench/contrib/notebook/browser/view/renderers/backLayerWebView.ts:			'notebook-cell-renderer-not-found-error': nls.localize({
'notebookActions.category', "Notebook"
'notebookMenu.insertCell', "Insert Cell"
'notebookMenu.cellTitle', "Notebook Cell"
'miShare', "Share"
'select', "Select Kernel"
'select', "Select Kernel"
'mergeEditor', "Merge Editor (Dev)"), original: 'Merge Editor (Dev
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				value: localize(
'mergeEditor.name', 'Merge Editor'
'mergeEditor.noActiveMergeEditor', "No active merge editor"
'mergeEditor.name', 'Merge Editor'
'mergeEditor.successfullyCopiedMergeEditorContents', "Successfully copied merge editor state"
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				value: localize(
'mergeEditor.name', 'Merge Editor'
'mergeEditor.noActiveMergeEditor', "No active merge editor"
'mergeEditor.selectFolderToSaveTo', 'Select folder to save to'
'mergeEditor.name', 'Merge Editor'
'mergeEditor.successfullySavedMergeEditorContentsToFolder', "Successfully saved merge editor state to folder"
src/vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts:				value: localize(
'mergeEditor.selectFolderToSaveTo', 'Select folder to save to'
'notebookTreeAriaLabel', "Notebook"
'notebook.cellBorderColor', "The border color for notebook cells.")
'notebook.focusedEditorBorder', "The color of the notebook cell editor border.")
'notebookStatusSuccessIcon.foreground', "The error icon color of notebook cells in the cell status bar.")
'notebookStatusErrorIcon.foreground', "The error icon color of notebook cells in the cell status bar.")
'notebookStatusRunningIcon.foreground', "The running icon color of notebook cells in the cell status bar.")
'notebook.outputContainerBorderColor', "The border color of the notebook output container.")
'notebook.outputContainerBackgroundColor', "The color of the notebook output container background.")
'notebook.cellToolbarSeparator', "The color of the separator in the cell bottom toolbar")
'focusedCellBackground', "The background color of a cell when the cell is focused.")
'selectedCellBackground', "The background color of a cell when the cell is selected.")
'notebook.cellHoverBackground', "The background color of a cell when the cell is hovered.")
'notebook.selectedCellBorder', "The color of the cell's top and bottom border when the cell is selected but not focused.")
'notebook.inactiveSelectedCellBorder', "The color of the cell's borders when multiple cells are selected.")
'notebook.focusedCellBorder', "The color of the cell's focus indicator borders when the cell is focused.")
'notebook.inactiveFocusedCellBorder', "The color of the cell's top and bottom border when a cell is focused while the primary focus is outside of the editor.")
'notebook.cellStatusBarItemHoverBackground', "The background color of notebook cell status bar items.")
'notebook.cellInsertionIndicator', "The color of the notebook cell insertion indicator.")
'notebookScrollbarSliderBackground', "Notebook scrollbar slider background color.")
'notebookScrollbarSliderHoverBackground', "Notebook scrollbar slider background color when hovering.")
'notebookScrollbarSliderActiveBackground', "Notebook scrollbar slider background color when clicked on.")
'notebook.symbolHighlightBackground', "Background color of highlighted cell")
'notebook.cellEditorBackground', "Cell editor background color.")
'notebook.editorBackground', "Notebook background color.")
'mergeEditor.change.background', 'The background color for changes.'
'mergeEditor.change.word.background', 'The background color for word changes.'
'mergeEditor.changeBase.background', 'The background color for changes in base.'
'mergeEditor.changeBase.word.background', 'The background color for word changes in base.'
'mergeEditor.conflict.unhandledUnfocused.border', 'The border color of unhandled unfocused conflicts.'
'mergeEditor.conflict.unhandledFocused.border', 'The border color of unhandled focused conflicts.'
'mergeEditor.conflict.handledUnfocused.border', 'The border color of handled unfocused conflicts.'
'mergeEditor.conflict.handledFocused.border', 'The border color of handled focused conflicts.'
'mergeEditor.conflict.handled.minimapOverViewRuler', 'The foreground color for changes in input 1.'
'mergeEditor.conflict.unhandled.minimapOverViewRuler', 'The foreground color for changes in input 1.'
'mergeEditor.conflictingLines.background', 'The background of the "Conflicting Lines" text.'
'mergeEditor.conflict.input1.background', 'The background color of decorations in input 1.'
'mergeEditor.conflict.input2.background', 'The background color of decorations in input 2.'
'cellExecutionOrderCountLabel', 'Execution Order'
'title', "Open Merge Editor"
'layout.mixed', 'Mixed Layout'
'layout.column', "Column Layout"
'showNonConflictingChanges', 'Show Non-Conflicting Changes'
'layout.showBase', 'Show Base'
'layout.showBaseTop', 'Show Base Top'
'layout.showBaseCenter', 'Show Base Center'
'mergeEditor', 'Merge Editor'
'openfile', 'Open File'
'merge.goToNextUnhandledConflict', 'Go to Next Unhandled Conflict'
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
'mergeEditor.compareWithBase', 'Compare With Base'
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
'mergeEditor.compareWithBase', 'Compare With Base'
'merge.openBaseEditor', 'Open Base File'
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
'mergeEditor.resetResultToBaseAndAutoMerge.short', 'Reset'
src/vs/workbench/contrib/mergeEditor/browser/commands/commands.ts:				value: localize(
'mergeEditor.acceptMerge.unhandledConflicts.message', "Do you want to complete the merge of {0}?", basename(inputModel.resultUri)
'mergeEditor.acceptMerge.unhandledConflicts.detail', "The file contains unhandled conflicts."
'mergeEditor.acceptMerge.unhandledConflicts.accept', "Complete with Conflicts"
'mergeEditor.acceptMerge.unhandledConflicts.cancel', "Cancel"
'cellExpandInputButtonLabelWithDoubleClick', "Double click to expand cell input ({0})", keybinding.getLabel()
'cellExpandInputButtonLabel', "Expand Cell Input ({0})", keybinding.getLabel()
'noConflictMessage', "There is currently no conflict focused that can be toggled.")
'mergeEditor', "Text Merge Editor"
'accept', "Accept {0}", inputData.title), async (
'acceptTooltip', "Accept {0} in the result document.", inputData.title)
'acceptBoth', "Accept Combination"), async (
'acceptBothTooltip', "Accept an automatic combination of both sides in the result document.")
'append', "Append {0}", inputData.title), async (
'appendTooltip', "Append {0} to the result document.", inputData.title)
'combine', "Accept Combination", inputData.title), async (
'acceptBothTooltip', "Accept an automatic combination of both sides in the result document.")
'ignore', 'Ignore'
'markAsHandledTooltip', "Don't take this side of the conflict."
'manualResolution', "Manual Resolution"
'manualResolutionTooltip', "This conflict has been resolved manually."
'noChangesAccepted', 'No Changes Accepted'
src/vs/workbench/contrib/mergeEditor/browser/view/conflictActions.ts:				tooltip: localize(
'remove', 'Remove {0}', model.input1.title
'removeTooltip', 'Remove {0} from the result document.', model.input1.title
'remove', 'Remove {0}', model.input2.title
'removeTooltip', 'Remove {0} from the result document.', model.input2.title
'resetToBase', 'Reset to base'
'resetToBaseTooltip', 'Reset this conflict to the common ancestor of both the right and left changes.'
'base', 'Base'))
'compareWith', 'Comparing with {0}', baseShowDiffAgainst === 1 ? vm.model.input1.title : vm.model.input2.title
'compareWithTooltip', 'Differences are highlighted with a background color.'
'input1', 'Input 1'
'input2', 'Input 2'
'mergeEditor.accept', 'Accept {0}', this.model.input1.title
'mergeEditor.accept', 'Accept {0}', this.model.input2.title
src/vs/workbench/contrib/mergeEditor/browser/view/editors/inputCodeEditorView.ts:						localize(
'mergeEditor.swap', 'Swap'
'mergeEditor.markAsHandled', 'Mark as Handled'
'accept.excluded', "Accept"
'accept.conflicting', "Accept (result is dirty)"
'accept.first', "Undo accept"
'accept.second', "Undo accept (currently second)"
'disableOtherKeymapsConfirmation', "Disable other keymaps ({0}) to avoid conflicts between keybindings?", distinct(oldKeymaps.map(k => k.local.manifest.displayName)).map(name => `'${name}'`).join(', ')
'yes', "Yes"
'no', "No"
'hiddenCellsLabel', "1 cell hidden"
'hiddenCellsLabelPlural', "{0} cells hidden", num
'cellOutputsCollapsedMsg', "Outputs are collapsed"
'cellExpandOutputButtonLabelWithDoubleClick', "Double click to expand cell output ({0})", keybinding.getLabel()
'cellExpandOutputButtonLabel', "Expand Cell Output (${0})", keybinding.getLabel()
'empty', "Cell has no output")
'noRenderer.2', "No renderer could be found for output. It has the following mimetypes: {0}", mimeTypesMessage)
'pickMimeType', "Change Presentation"), ThemeIcon.asClassName(mimetypeIcon
'curruentActiveMimeType', "Currently Active"
'installJupyterPrompt', "Install additional renderers from the marketplace"
'promptChooseMimeTypeInSecure.placeHolder', "Select mimetype to render for current output"
'promptChooseMimeType.placeHolder', "Select mimetype to render for current output"
'unavailableRenderInfo', "renderer not available"
'result', 'Result'))
src/vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView.ts:				? localize(
src/vs/workbench/contrib/mergeEditor/browser/view/editors/resultCodeEditorView.ts:				: localize(
'goToNextConflict', 'Go to next conflict'
'allConflictHandled', 'All conflicts handled, the merge can be completed now.'
'notebook.cell.status.success', "Success"
'notebook.cell.status.failed', "Failed"
'notebook.cell.status.pending', "Pending"
'notebook.cell.status.executing', "Executing"
'cellExpandInputButtonLabelWithDoubleClick', "Double click to expand cell input ({0})", keybinding.getLabel()
'cellExpandInputButtonLabel', "Expand Cell Input ({0})", keybinding.getLabel()
'notebook.moreRunActionsLabel', "More..."), 'codicon-chevron-down', true)
'notebook.lineNumbers', "Controls the display of line numbers in the cell editor."
'notebook.toggleLineNumbers', "Toggle Notebook Line Numbers"
'notebook.showLineNumbers', "Notebook Line Numbers"
'notebook.cell.toggleLineNumbers.title', "Show Cell Line Numbers"
'conflictingLine', "1 Conflicting Line"
'conflictingLines', "{0} Conflicting Lines", conflictingLinesCount
'notebook.editorOptions.experimentalCustomization', 'Settings for code editors used in notebooks. This can be used to customize most editor.* settings.'
'notebookConfigurationTitle', "Notebook"
'notebook.displayOrder.description', "Priority list for output mime types"
'notebook.cellToolbarLocation.description', "Where the cell toolbar should be shown, or whether it should be hidden."
'notebook.cellToolbarLocation.viewType', "Configure the cell toolbar position for for specific file types"
'notebook.showCellStatusbar.description', "Whether the cell status bar should be shown."
'notebook.showCellStatusbar.hidden.description', "The cell Status bar is always hidden."
'notebook.showCellStatusbar.visible.description', "The cell Status bar is always visible."
'notebook.showCellStatusbar.visibleAfterExecute.description', "The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status."
'notebook.diff.enablePreview.description', "Whether to use the enhanced text diff editor for notebook."
'notebook.cellToolbarVisibility.description', "Whether the cell toolbar should appear on hover or click."
'notebook.undoRedoPerCell.description', "Whether to use separate undo/redo stack for each cell."
'notebook.compactView.description', "Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width."
'notebook.focusIndicator.description', "Controls where the focus indicator is rendered, either along the cell borders or on the left gutter"
'notebook.insertToolbarPosition.description', "Control where the insert cell actions should appear."
'insertToolbarLocation.betweenCells', "A toolbar that appears on hover between cells."
'insertToolbarLocation.notebookToolbar', "The toolbar at the top of the notebook editor."
'insertToolbarLocation.both', "Both toolbars."
'insertToolbarLocation.hidden', "The insert actions don't appear anywhere."
'notebook.globalToolbar.description', "Control whether to render a global toolbar inside the notebook editor."
'notebook.consolidatedOutputButton.description', "Control whether outputs action should be rendered in the output toolbar."
'notebook.showFoldingControls.description', "Controls when the Markdown header folding arrow is shown."
'showFoldingControls.always', "The folding controls are always visible."
'showFoldingControls.never', "Never show the folding controls and reduce the gutter size."
'showFoldingControls.mouseover', "The folding controls are visible only on mouseover."
'notebook.dragAndDrop.description', "Control whether the notebook editor should allow moving cells through drag and drop."
'notebook.consolidatedRunButton.description', "Control whether extra actions are shown in a dropdown next to the run button."
'notebook.globalToolbarShowLabel', "Control whether the actions on the notebook toolbar should render label or not."
'notebook.textOutputLineLimit', "Control how many lines of text in a text output is rendered."
'notebook.markup.fontSize', "Controls the font size in pixels of rendered markup in notebooks. When set to {0}, 120% of {1} is used.", '`0`', '`#editor.fontSize#`'
'notebook.interactiveWindow.collapseCodeCells', "Controls whether code cells in the interactive window are collapsed by default."
'notebook.outputLineHeight', "Line height of the output text for notebook cells.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values."
'notebook.outputFontSize', "Font size for the output text for notebook cells. When set to {0}, {1} is used.", '`0`', '`#editor.fontSize#`'
'notebook.outputFontFamily', "The font family for the output text for notebook cells. When set to empty, the {0} is used.", '`#editor.fontFamily#`'
'problems.view.toggle.label', "Toggle Problems (Errors, Warnings, Infos)"
'problems.view.focus.label', "Focus Problems (Errors, Warnings, Infos)"
'problems.panel.configuration.title', "Problems View"
'problems.panel.configuration.autoreveal', "Controls whether Problems view should automatically reveal files when opening them."
'problems.panel.configuration.viewMode', "Controls the default view mode of the Problems view."
'problems.panel.configuration.showCurrentInStatus', "When enabled shows the current problem in the status bar."
'problems.panel.configuration.compareOrder', "Controls the order in which problems are navigated."
'problems.panel.configuration.compareOrder.severity', "Navigate problems ordered by severity"
'problems.panel.configuration.compareOrder.position', "Navigate problems ordered by position"
'markers.panel.title.problems', "Problems"
'markers.panel.no.problems.build', "No problems have been detected in the workspace."
'markers.panel.no.problems.activeFile.build', "No problems have been detected in the current file."
'markers.panel.no.problems.filters', "No results found with provided filter criteria."
'markers.panel.action.moreFilters', "More Filters..."
'markers.panel.filter.showErrors', "Show Errors"
'markers.panel.filter.showWarnings', "Show Warnings"
'markers.panel.filter.showInfos', "Show Infos"
'markers.panel.filter.useFilesExclude', "Hide Excluded Files"
'markers.panel.filter.activeFile', "Show Active File Only"
'markers.panel.action.filter', "Filter Problems"
'markers.panel.action.quickfix', "Show fixes"
'markers.panel.filter.ariaLabel', "Filter Problems"
'markers.panel.filter.placeholder', "Filter (e.g. text, **/*.ts, !**/node_modules/**)"
'markers.panel.filter.errors', "errors"
'markers.panel.filter.warnings', "warnings"
'markers.panel.filter.infos', "infos"
'markers.panel.single.error.label', "1 Error"
'markers.panel.multiple.errors.label', "{0} Errors", '' + noOfErrors
'markers.panel.single.warning.label', "1 Warning"
'markers.panel.multiple.warnings.label', "{0} Warnings", '' + noOfWarnings
'markers.panel.single.info.label', "1 Info"
'markers.panel.multiple.infos.label', "{0} Infos", '' + noOfInfos
'markers.panel.single.unknown.label', "1 Unknown"
'markers.panel.multiple.unknowns.label', "{0} Unknowns", '' + noOfUnknowns
'markers.panel.at.ln.col.number', "[Ln {0}, Col {1}]", '' + ln, '' + col
'problems.tree.aria.label.resource', "{0} problems in file {1} of folder {2}", noOfProblems, fileName, folder
'problems.tree.aria.label.marker.relatedInformation', " This problem has references to {0} locations.", marker.relatedInformation.length
'problems.tree.aria.label.error.marker', "Error generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage
'problems.tree.aria.label.error.marker.nosource', "Error: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage
'problems.tree.aria.label.warning.marker', "Warning generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage
'problems.tree.aria.label.warning.marker.nosource', "Warning: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage, relatedInformationMessage
'problems.tree.aria.label.info.marker', "Info generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage
'problems.tree.aria.label.info.marker.nosource', "Info: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage
'problems.tree.aria.label.marker', "Problem generated by {0}: {1} at line {2} and character {3}.{4}", marker.marker.source, marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage
'problems.tree.aria.label.marker.nosource', "Problem: {0} at line {1} and character {2}.{3}", marker.marker.message, marker.marker.startLineNumber, marker.marker.startColumn, relatedInformationMessage
'problems.tree.aria.label.relatedinfo.message', "{0} at line {1} and character {2} in {3}", relatedInformation.message, relatedInformation.startLineNumber, relatedInformation.startColumn, basename(relatedInformation.resource)
'errors.warnings.show.label', "Show Errors and Warnings"
'fail.noEditor', "Cannot open resource with notebook editor type '{0}', please check if you have the right extension installed and enabled.", input.viewType)
'notebookOpenInTextEditor', "Open in Text Editor"), run: async (
'notebookActions.moveCellUp', "Move Cell Up"
'notebookActions.moveCellDown', "Move Cell Down"
'notebookActions.copyCellUp', "Copy Cell Up"
'notebookActions.copyCellDown', "Copy Cell Down"
'notebookActions.splitCell', "Split Cell"
'notebookActions.joinCellAbove', "Join With Previous Cell"
'notebookActions.joinCellBelow', "Join With Next Cell"
'notebookActions.changeCellToCode', "Change Cell to Code"
'notebookActions.changeCellToMarkdown', "Change Cell to Markdown"
'notebookActions.collapseCellInput', "Collapse Cell Input"
'notebookActions.expandCellInput', "Expand Cell Input"
'notebookActions.collapseCellOutput', "Collapse Cell Output"
'notebookActions.expandCellOutput', "Expand Cell Output"
'notebookActions.toggleOutputs', "Toggle Outputs"
'notebookActions.toggleOutputs', "Toggle Outputs"
'notebookActions.collapseAllCellInput', "Collapse All Cell Inputs"
'notebookActions.expandAllCellInput', "Expand All Cell Inputs"
'notebookActions.collapseAllCellOutput', "Collapse All Cell Outputs"
'notebookActions.expandAllCellOutput', "Expand All Cell Outputs"
'notebook.cell.status.language', "Select Cell Language Mode"
'notebook.cell.status.autoDetectLanguage', "Accept Detected Language: {0}", detectedName
'notebookActions.hideFind', "Hide Find in Notebook"
'notebookActions.findInNotebook', "Find in Notebook"
'name', "Merging: {0}", super.getName()
'ariaSearchNoResultEmpty', "{0} found", label
'ariaSearchNoResult', "{0} found for '{1}'", label, searchString
'ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString
'workbench.notebook.toggleLayoutTroubleshoot', "Toggle Layout Troubleshoot"
'workbench.notebook.inspectLayout', "Inspect Notebook Layout"
'workbench.notebook.clearNotebookEdtitorTypeCache', "Clear Notebook Editor Type Cache"
'showing filtered problems', "Showing {0} of {1}", filtered, total)
'No problems filtered', "Showing {0} problems", total)
'problems filtered', "Showing {0} of {1} problems", filtered, total)
'clearFilter', "Clear Filters"
'notebook.cell.status.success', "Success"
'notebook.cell.status.failed', "Failed"
'notebook.cell.status.pending', "Pending"
'notebook.cell.status.executing', "Executing"
'label.find', "Find"
'placeholder.find', "Find"
'label.previousMatchButton', "Previous Match"
'label.findFilterButton', "Search in View"
'label.nextMatchButton', "Next Match"
'label.closeButton', "Close"
'label.toggleReplaceButton', "Toggle Replace"
'label.replace', "Replace"
'placeholder.replace', "Replace"
'label.replaceButton', "Replace"
'label.replaceAllButton', "Replace All"
'findFilterIcon', 'Icon for Find Filter in find widget.')
'notebook.find.filter.filterAction', "Find Filters"
'notebook.find.filter.findInMarkupInput', "Markdown Source"
'notebook.find.filter.findInMarkupPreview', "Rendered Markdown"
'notebook.find.filter.findInCodeInput', "Code Cell Source"
'notebook.find.filter.findInCodeOutput', "Cell Output"
'setProfileTitle', "Set Profile"
'empty', "empty cell"
'outline.showCodeCells', "When enabled notebook outline shows code cells."
'breadcrumbs.showCodeCells', "When enabled notebook breadcrumbs contain code cells."
'notebookActions.copy', "Copy Cell"
'notebookActions.cut', "Cut Cell"
'notebookActions.paste', "Paste Cell"
'notebookActions.pasteAbove', "Paste Cell Above"
'toggleNotebookClipboardLog', "Toggle Notebook Clipboard Troubleshooting"
'notebookActions.selectKernel', "Select Notebook Kernel"
'notebookActions.selectKernel.args', "Notebook Kernel Args"
'prompt.placeholder.change', "Change kernel for '{0}'", labelService.getUriLabel(notebook.uri, { relative: true })
'prompt.placeholder.select', "Select kernel for '{0}'", labelService.getUriLabel(notebook.uri, { relative: true })
'current1', "Currently Selected"
'current2', "{0} - Currently Selected", res.description
'suggestedKernels', "Suggested"
'otherKernelKinds', "Other"
'sourceActions', ""
'installSuggestedKernel', 'Install suggested extensions'
'searchForKernels', "Browse marketplace for kernel extensions"
'notebook.info', "Notebook Kernel Info"
'tooltop', "{0} (suggestion)", tooltip
'notebook.select', "Notebook Kernel Selection"
'kernel.select.label', "Select Kernel"
'kernel.select.label', "Select Kernel"
'notebook.activeCellStatusName', "Notebook Editor Selections"
'notebook.multiActiveCellIndicator', "Cell {0} ({1} selected)", idxFocused, numSelected
'notebook.singleActiveCellIndicator', "Cell {0} of {1}", idxFocused, totalCells
'workbench.notebook.layout.gettingStarted.label', "Reset notebook getting started"
'format.title', "Format Notebook"
'label', "Format Notebook"), code: 'undoredo.formatNotebook', }
'formatCell.label', "Format Cell"
'name', "Merge Editor"
'diffAlgorithm.smart', "Uses the default diffing algorithm."
'diffAlgorithm.experimental', "Uses an experimental diffing algorithm."
'problemsView', "Problems View"
'expandedIcon', 'Icon indicating that multiple lines are shown in the markers view.')
'collapsedIcon', 'Icon indicating that multiple lines are collapsed in the markers view.')
'multi line', "Show message in multiple lines"
'notebook.diff.switchToText', "Open Text Diff Editor"
'notebook.diff.cell.revertMetadata', "Revert Metadata"
'notebook.diff.cell.switchOutputRenderingStyle', "Switch Outputs Rendering"
'notebook.diff.cell.switchOutputRenderingStyleToText', "Switch Output Rendering"
'notebook.diff.cell.revertOutputs', "Revert Outputs"
'notebook.diff.cell.revertInput', "Revert Input"
'notebook.diff.showOutputs', "Show Outputs Differences"
'notebook.diff.showMetadata', "Show Metadata Differences"
'notebook.diff.ignoreMetadata', "Hide Metadata Differences"
'notebook.diff.ignoreOutputs', "Hide Outputs Differences"
'notebook.toggleCellToolbarPosition', "Toggle Cell Toolbar Position"
'mimeTypePicker', "Choose a different output mimetype, available mimetypes: {0}", mimeTypes.map(mimeType => mimeType.mimeType).join(', ')
'empty', "Cell has no output")
'noRenderer.2', "No renderer could be found for output. It has the following mimetypes: {0}", mimeTypesMessage)
'curruentActiveMimeType', "Currently Active"
'promptChooseMimeTypeInSecure.placeHolder', "Select mimetype to render for current output. Rich mimetypes are available only when the notebook is trusted"
'promptChooseMimeType.placeHolder', "Select mimetype to render for current output"
'builtinRenderInfo', "built-in"
'notebookTreeAriaLabel', "Notebook Text Diff"
'mergeEditor', "Merge Editor (Dev)"), original: 'Merge Editor (Dev
src/vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts:				value: localize(
'mergeEditor.enterJSON', 'Enter JSON'
src/vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts:				value: localize(
'codeColumnLabel', "Code"
'messageColumnLabel', "Message"
'fileColumnLabel', "File"
'sourceColumnLabel', "Source"
'is', 'The editor is a merge editor') }
'isr', 'The editor is a the result editor of a merge editor.') }
'editorLayout', 'The layout mode of a merge editor') }
'showBase', 'If the merge editor shows the base version') }
'showBaseAtTop', 'If base should be shown at the top') }
'showNonConflictingChanges', 'If the merge editor shows non-conflicting changes') }
'baseUri', 'The uri of the baser of a merge editor') }
'resultUri', 'The uri of the result of a merge editor') }
'label', "Problems"
'tooltip.N', "{0} problems in this file", markers.length
'markers.showOnFile', "Show Errors & Warnings on files and folder."
'markersViewIcon', 'View icon of the markers view.')
{ key: 'miMarker', comment: ['&& denotes a mnemonic'] }, "&&Problems"
'viewAsTree', "View as Tree"
'viewAsTable', "View as Table"
'toggle errors', "Toggle Errors"
'problems', "Problems"
'errors', "Show Errors"
'toggle warnings', "Toggle Warnings"
'problems', "Problems"
'warnings', "Show Warnings"
'toggle infos', "Toggle Infos"
'problems', "Problems"
'Infos', "Show Infos"
'toggle active file', "Toggle Active File"
'problems', "Problems"
'Active File', "Show Active File Only"
'toggle Excluded Files', "Toggle Excluded Files"
'problems', "Problems"
'Excluded Files', "Hide Excluded Files"
'copyMarker', "Copy"
'copyMessage', "Copy Message"
'copyMessage', "Copy Message"
'focusProblemsList', "Focus problems view"
'focusProblemsFilter', "Focus problems filter"
'show multiline', "Show message in multiple lines"
'problems', "Problems"
'show singleline', "Show message in single line"
'problems', "Problems"
'clearFiltersText', "Clear filters text"
'problems', "Problems"
'collapseAll', "Collapse All"
'status.problems', "Problems"
'totalErrors', "Errors: {0}", n
'totalWarnings', "Warnings: {0}", n
'totalInfos', "Infos: {0}", n
'noProblems', "No Problems"
'manyProblems', "10K+"
'totalProblems', 'Total {0} Problems', total
'openLogsFolder', "Open Logs Folder"
'openExtensionLogsFolder', "Open Extension Logs Folder"
'inQuickOpen', "Whether keyboard focus is inside the quick open control")
'setLogLevel', "Set Log Level..."
'all', "All") }
'loggers', "Logs") }
'extensionLogs', "Extension Logs") }
'selectlog', "Set Log Level") }
'selectLogLevel', "Select log level"), activeItem: entries[this.logService.getLevel()] }
'trace', "Trace"
'debug', "Debug"
'info', "Info"
'warn', "Warning"
'err', "Error"
'off', "Off"
'default', "Default"
'openSessionLogFile', "Open Window Log File (Session)..."), original: 'Open Window Log File (Session
'current', "Current"
'sessions placeholder', "Select Session"
'log placeholder', "Select Log file"
'cursorMoveDown', 'Focus Next Cell Editor'
'cursorMoveUp', 'Focus Previous Cell Editor'
'focusFirstCell', 'Focus First Cell'
'focusLastCell', 'Focus Last Cell'
'focusOutput', 'Focus In Active Cell Output'
'focusOutputOut', 'Focus Out Active Cell Output'
'notebookActions.centerActiveCell', "Center Active Cell"
'cursorPageUp', "Cell Cursor Page Up"
'cursorPageUpSelect', "Cell Cursor Page Up Select"
'cursorPageDown', "Cell Cursor Page Down"
'cursorPageDownSelect', "Cell Cursor Page Down Select"
'notebook.navigation.allowNavigateToSurroundingCells', "When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line."
'mainLog', "Main"), URI.file(join(this.environmentService.logsPath, `main.log`))
'sharedLog', "Shared"), URI.file(join(this.environmentService.logsPath, `sharedprocess.log`))
'userDataSyncLog', "Settings Sync"), this.environmentService.userDataSyncLogResource
'editSessionsLog', "Edit Sessions"), this.environmentService.editSessionsLogResource
'remoteTunnelLog', "Remote Tunnel"), this.environmentService.remoteTunnelLogResource
'rendererLog', "Window"), this.environmentService.logFile
'telemetryLog', "Telemetry{0}", logSuffix), this.environmentService.telemetryLogResource
'extensionTelemetryLog', "Extension Telemetry{0}", logSuffix), this.environmentService.extHostTelemetryLogFile
'show window log', "Show Window Log"
'configureLocale', "Configure Display Language"
'chooseLocale', "Select Display Language"
'installed', "Installed"
'available', "Available"
'clearDisplayLanguage', "Clear Display Language Preference"
'relaunchDisplayLanguageMessage', "To change the display language, {0} needs to reload", this.productService.nameLong
'relaunchDisplayLanguageDetail', "Press the reload button to refresh the page and set the display language to {0}.", languagePackItem.label
{ key: 'reload', comment: ['&& denotes a mnemonic character'] }, "&&Reload"
'clearDisplayLanguageMessage', "To change the display language, {0} needs to reload", this.productService.nameLong
'clearDisplayLanguageDetail', "Press the reload button to refresh the page and use your browser's language."
{ key: 'reload', comment: ['&& denotes a mnemonic character'] }, "&&Reload"
'argvInvalid', 'Unable to write display language. Please open the runtime settings, correct errors/warnings in it and try again.'
'openArgv', "Open Runtime Settings"
'installing', "Installing {0} language support...", languagePackItem.label
'restartDisplayLanguageMessage', "To change the display language, {0} needs to restart", this.productService.nameLong
src/vs/workbench/contrib/localization/electron-sandbox/localeService.ts:			detail: localize(
{ key: 'restart', comment: ['&& denotes a mnemonic character'] }, "&&Restart"
'status.autoDetectLanguage', "Accept Detected Language: {0}", detectedName
'langDetection.name', "Language Detection"
'langDetection.aria', "Change to Detected Language: {0}", lang
'detectlang', 'Detect Language from Content'
'noDetection', "Unable to detect editor language")
'toggleKeybindingsLog', "Toggle Keyboard Shortcuts Troubleshooting"
'showLanguagePackExtensions', "Search language packs in the Marketplace to change the display language to {0}."
'searchMarketplace', "Search Marketplace"
'installAndRestartMessage', "Install language pack to change the display language to {0}."
'installAndRestart', "Install and Restart"
{ key: 'reportIssueInEnglish', comment: ['Translate this to "Report Issue in English" in all languages please!'] }, "Report Issue"
'statusUnsupported', "The --status argument is not yet supported in browsers."
'openProcessExplorer', "Open Process Explorer"
{ key: 'reportPerformanceIssue', comment: [`Here, 'issue' means problem or bug`] }, "Report Performance Issue..."
'stopTracing', "Stop Tracing"
'stopTracing.message', "Tracing requires to launch with a '--trace' argument"
{ key: 'stopTracing.button', comment: ['&& denotes a mnemonic'] }, "&&Relaunch and Enable Tracing"
'cancel', "Cancel"
'stopTracing.title', "Creating trace file..."
'stopTracing.detail', "This can take up to one minute to complete."
'defaultViewIcon', 'Default view icon.')
'duplicateId', "A view with id '{0}' is already registered", viewDescriptor.id)
'interactiveInputPlaceHolder', "Type '{0}' code here and press {1} to run", languageId, keybinding ?? 'ctrl+enter'
{ key: 'reportIssueInEnglish', comment: ['Translate this to "Report Issue in English" in all languages please!'] }, "Report Issue..."
{ key: 'miReportIssue', comment: ['&& denotes a mnemonic', 'Translate this to "Report Issue in English" in all languages please!'] }, "Report &&Issue"
{ key: 'miOpenProcessExplorerer', comment: ['&& denotes a mnemonic'] }, "Open &&Process Explorer"
'isReadingLineWithInlayHints', "Whether the current line and its inlay hints are currently focused") }
'description', "Code with Inlay Hint Information")
'read.title', 'Read Line With Inline Hints'
'stop.title', 'Stop Inlay Hints Reading'
'tabActiveBackground', "Active tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabUnfocusedActiveBackground', "Active tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabInactiveBackground', "Inactive tab background color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabUnfocusedInactiveBackground', "Inactive tab background color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabActiveForeground', "Active tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabInactiveForeground', "Inactive tab foreground color in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabUnfocusedActiveForeground', "Active tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabUnfocusedInactiveForeground', "Inactive tab foreground color in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabHoverBackground', "Tab background color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabUnfocusedHoverBackground', "Tab background color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabHoverForeground', "Tab foreground color when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabUnfocusedHoverForeground', "Tab foreground color in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabBorder', "Border to separate tabs from each other. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'lastPinnedTabBorder', "Border to separate pinned tabs from other tabs. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabActiveBorder', "Border on the bottom of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabActiveUnfocusedBorder', "Border on the bottom of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabActiveBorderTop', "Border to the top of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabActiveUnfocusedBorderTop', "Border to the top of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabHoverBorder', "Border to highlight tabs when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabUnfocusedHoverBorder', "Border to highlight tabs in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabActiveModifiedBorder', "Border on the top of modified active tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'tabInactiveModifiedBorder', "Border on the top of modified inactive tabs in an active group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'unfocusedActiveModifiedBorder', "Border on the top of modified active tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'unfocusedINactiveModifiedBorder', "Border on the top of modified inactive tabs in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.")
'editorPaneBackground', "Background color of the editor pane visible on the left and right side of the centered editor layout.")
'editorGroupEmptyBackground', "Background color of an empty editor group. Editor groups are the containers of editors.")
'editorGroupFocusedEmptyBorder', "Border color of an empty editor group that is focused. Editor groups are the containers of editors.")
'tabsContainerBackground', "Background color of the editor group title header when tabs are enabled. Editor groups are the containers of editors.")
'tabsContainerBorder', "Border color of the editor group title header when tabs are enabled. Editor groups are the containers of editors.")
'editorGroupHeaderBackground', "Background color of the editor group title header when tabs are disabled (`\"workbench.editor.showTabs\": false`). Editor groups are the containers of editors.")
'editorTitleContainerBorder', "Border color of the editor group title header. Editor groups are the containers of editors.")
'editorGroupBorder', "Color to separate multiple editor groups from each other. Editor groups are the containers of editors.")
'editorDragAndDropBackground', "Background color when dragging editors around. The color should have transparency so that the editor contents can still shine through.")
'editorDropIntoPromptForeground', "Foreground color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor.")
'editorDropIntoPromptBackground', "Background color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor.")
'editorDropIntoPromptBorder', "Border color of text shown over editors when dragging files. This text informs the user that they can hold shift to drop into the editor.")
'sideBySideEditor.horizontalBorder', "Color to separate two editors from each other when shown side by side in an editor group from top to bottom.")
'sideBySideEditor.verticalBorder', "Color to separate two editors from each other when shown side by side in an editor group from left to right.")
'panelBackground', "Panel background color. Panels are shown below the editor area and contain views like output and integrated terminal.")
'panelBorder', "Panel border color to separate the panel from the editor. Panels are shown below the editor area and contain views like output and integrated terminal.")
'panelActiveTitleForeground', "Title color for the active panel. Panels are shown below the editor area and contain views like output and integrated terminal.")
'panelInactiveTitleForeground', "Title color for the inactive panel. Panels are shown below the editor area and contain views like output and integrated terminal.")
'panelActiveTitleBorder', "Border color for the active panel title. Panels are shown below the editor area and contain views like output and integrated terminal.")
'panelInputBorder', "Input box border for inputs in the panel.")
'panelDragAndDropBorder', "Drag and drop feedback color for the panel titles. Panels are shown below the editor area and contain views like output and integrated terminal.")
'panelSectionDragAndDropBackground', "Drag and drop feedback color for the panel sections. The color should have transparency so that the panel sections can still shine through. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.")
'panelSectionHeaderBackground', "Panel section header background color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.")
'panelSectionHeaderForeground', "Panel section header foreground color. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.")
'panelSectionHeaderBorder', "Panel section header border color used when multiple views are stacked vertically in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.")
'panelSectionBorder', "Panel section border color used when multiple views are stacked horizontally in the panel. Panels are shown below the editor area and contain views like output and integrated terminal. Panel sections are views nested within the panels.")
'banner.background', "Banner background color. The banner is shown under the title bar of the window.")
'banner.foreground', "Banner foreground color. The banner is shown under the title bar of the window.")
'banner.iconForeground', "Banner icon color. The banner is shown under the title bar of the window.")
'statusBarForeground', "Status bar foreground color when a workspace or folder is opened. The status bar is shown in the bottom of the window.")
'statusBarNoFolderForeground', "Status bar foreground color when no folder is opened. The status bar is shown in the bottom of the window.")
'statusBarBackground', "Status bar background color when a workspace or folder is opened. The status bar is shown in the bottom of the window.")
'statusBarNoFolderBackground', "Status bar background color when no folder is opened. The status bar is shown in the bottom of the window.")
'statusBarBorder', "Status bar border color separating to the sidebar and editor. The status bar is shown in the bottom of the window.")
'statusBarFocusBorder', "Status bar border color when focused on keyboard navigation. The status bar is shown in the bottom of the window.")
'statusBarNoFolderBorder', "Status bar border color separating to the sidebar and editor when no folder is opened. The status bar is shown in the bottom of the window.")
'statusBarItemActiveBackground', "Status bar item background color when clicking. The status bar is shown in the bottom of the window.")
'statusBarItemFocusBorder', "Status bar item border color when focused on keyboard navigation. The status bar is shown in the bottom of the window.")
'statusBarItemHoverBackground', "Status bar item background color when hovering. The status bar is shown in the bottom of the window.")
'statusBarItemCompactHoverBackground', "Status bar item background color when hovering an item that contains two hovers. The status bar is shown in the bottom of the window.")
'statusBarProminentItemForeground', "Status bar prominent items foreground color. Prominent items stand out from other status bar entries to indicate importance. Change mode `Toggle Tab Key Moves Focus` from command palette to see an example. The status bar is shown in the bottom of the window.")
'statusBarProminentItemBackground', "Status bar prominent items background color. Prominent items stand out from other status bar entries to indicate importance. Change mode `Toggle Tab Key Moves Focus` from command palette to see an example. The status bar is shown in the bottom of the window.")
'statusBarProminentItemHoverBackground', "Status bar prominent items background color when hovering. Prominent items stand out from other status bar entries to indicate importance. Change mode `Toggle Tab Key Moves Focus` from command palette to see an example. The status bar is shown in the bottom of the window.")
'statusBarErrorItemBackground', "Status bar error items background color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.")
'statusBarErrorItemForeground', "Status bar error items foreground color. Error items stand out from other status bar entries to indicate error conditions. The status bar is shown in the bottom of the window.")
'statusBarWarningItemBackground', "Status bar warning items background color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.")
'statusBarWarningItemForeground', "Status bar warning items foreground color. Warning items stand out from other status bar entries to indicate warning conditions. The status bar is shown in the bottom of the window.")
'activityBarBackground', "Activity bar background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarForeground', "Activity bar item foreground color when it is active. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarInActiveForeground', "Activity bar item foreground color when it is inactive. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarBorder', "Activity bar border color separating to the side bar. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarActiveBorder', "Activity bar border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarActiveFocusBorder', "Activity bar focus border color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarActiveBackground', "Activity bar background color for the active item. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarDragAndDropBorder', "Drag and drop feedback color for the activity bar items. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarBadgeBackground', "Activity notification badge background color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarBadgeForeground', "Activity notification badge foreground color. The activity bar is showing on the far left or right and allows to switch between views of the side bar.")
'activityBarItem.profilesForeground', "Foreground color for the profile entry on the activity bar.")
'activityBarItem.profilesHoverForeground', "Foreground color for the profile entry on the activity bar when hovering.")
'activityBarItem.profilesBackground', "Background color for the profile entry on the activity bar.")
'statusBarItemHostBackground', "Background color for the remote indicator on the status bar.")
'statusBarItemHostForeground', "Foreground color for the remote indicator on the status bar.")
'extensionBadge.remoteBackground', "Background color for the remote badge in the extensions view.")
'extensionBadge.remoteForeground', "Foreground color for the remote badge in the extensions view.")
'sideBarBackground', "Side bar background color. The side bar is the container for views like explorer and search.")
'sideBarForeground', "Side bar foreground color. The side bar is the container for views like explorer and search.")
'sideBarBorder', "Side bar border color on the side separating to the editor. The side bar is the container for views like explorer and search.")
'sideBarTitleForeground', "Side bar title foreground color. The side bar is the container for views like explorer and search.")
'sideBarDragAndDropBackground', "Drag and drop feedback color for the side bar sections. The color should have transparency so that the side bar sections can still shine through. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.")
'sideBarSectionHeaderBackground', "Side bar section header background color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.")
'sideBarSectionHeaderForeground', "Side bar section header foreground color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.")
'sideBarSectionHeaderBorder', "Side bar section header border color. The side bar is the container for views like explorer and search. Side bar sections are views nested within the side bar.")
'titleBarActiveForeground', "Title bar foreground when the window is active.")
'titleBarInactiveForeground', "Title bar foreground when the window is inactive.")
'titleBarActiveBackground', "Title bar background when the window is active.")
'titleBarInactiveBackground', "Title bar background when the window is inactive.")
'titleBarBorder', "Title bar border color.")
'menubarSelectionForeground', "Foreground color of the selected menu item in the menubar.")
'menubarSelectionBackground', "Background color of the selected menu item in the menubar.")
'menubarSelectionBorder', "Border color of the selected menu item in the menubar.")
'notificationCenterBorder', "Notifications center border color. Notifications slide in from the bottom right of the window.")
'notificationToastBorder', "Notification toast border color. Notifications slide in from the bottom right of the window.")
'notificationsForeground', "Notifications foreground color. Notifications slide in from the bottom right of the window.")
'notificationsBackground', "Notifications background color. Notifications slide in from the bottom right of the window.")
'notificationsLink', "Notification links foreground color. Notifications slide in from the bottom right of the window.")
'notificationCenterHeaderForeground', "Notifications center header foreground color. Notifications slide in from the bottom right of the window.")
'notificationCenterHeaderBackground', "Notifications center header background color. Notifications slide in from the bottom right of the window.")
'notificationsBorder', "Notifications border color separating from other notifications in the notifications center. Notifications slide in from the bottom right of the window.")
'notificationsErrorIconForeground', "The color used for the icon of error notifications. Notifications slide in from the bottom right of the window.")
'notificationsWarningIconForeground', "The color used for the icon of warning notifications. Notifications slide in from the bottom right of the window.")
'notificationsInfoIconForeground', "The color used for the icon of info notifications. Notifications slide in from the bottom right of the window.")
'windowActiveBorder', "The color used for the border of the window when it is active. Only supported in the macOS and Linux desktop client when using the custom title bar.")
'windowInactiveBorder', "The color used for the border of the window when it is inactive. Only supported in the macOS and Linux desktop client when using the custom title bar.")
'interactiveWindow', 'Interactive Window'
'interactive.open', "Open Interactive Window"
'interactive.open', "Open Interactive Window"
'interactive.execute', "Execute Code"
'interactive.input.clear', "Clear the interactive window input editor contents"
'interactive.history.previous', "Previous value in history"
'interactive.history.next', "Next value in history"
'interactiveScrollToTop', 'Scroll to Top'
'interactiveScrollToBottom', 'Scroll to Bottom'
'interactive.input.focus', "Focus Input Editor"
'interactive.history.focus', "Focus History"
'interactive.activeCodeBorder', 'The border color for the current interactive code cell when the editor has focus.')
'interactive.activeCodeBackground', 'The background color for the current interactive code cell when the editor has focus.')
'interactive.inactiveCodeBorder', 'The border color for the current interactive code cell when the editor does not have focus.')
'interactive.inactiveCodeBackground', 'The backgorund color for the current interactive code cell when the editor does not have focus.')
'interactiveWindow.alwaysScrollOnNewCell', "Automatically scroll the interactive window to show the output of the last statement executed. If this value is false, the window will only scroll if the last cell was already the one scrolled to."
'interactiveWindow.restore', "Controls whether the Interactive Window sessions/history should be restored across window reloads. Whether the state of controllers used in Interactive Windows is persisted across window reloads are controlled by extensions contributing controllers."
'updateLocale', "Would you like to change VS Code's UI language to {0} and restart?", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId
'activateLanguagePack', "In order to use VS Code in {0}, VS Code needs to restart.", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId
'restart', "Restart"
'doNotRestart', "Don't Restart"
'neverAgain', "Don't Show Again"
'vscode.extension.contributes.localizations', "Contributes localizations to the editor"
'vscode.extension.contributes.localizations.languageId', 'Id of the language into which the display strings are translated.'
'vscode.extension.contributes.localizations.languageName', 'Name of the language in English.'
'vscode.extension.contributes.localizations.languageNameLocalized', 'Name of the language in contributed language.'
'vscode.extension.contributes.localizations.translations', 'List of translations associated to the language.'
'vscode.extension.contributes.localizations.translations.id', "Id of VS Code or Extension for which this translation is contributed to. Id of VS Code is always `vscode` and of extension should be in format `publisherId.extensionName`."
'vscode.extension.contributes.localizations.translations.id.pattern', "Id should be `vscode` or in format `publisherId.extensionName` for translating VS code or an extension respectively."
'vscode.extension.contributes.localizations.translations.path', "A relative path to a file containing translations for the language."
'preview', "{0}, preview", ariaLabel
'pinned', "{0}, pinned", ariaLabel
'formatChanges', "Format Modified Lines"
'status.button.configure', "Configure"
'foldingRangesStatusItem.name', 'Folding Status'
'status.limitedFoldingRanges.short', 'Folding Ranges Limited'
'status.limitedFoldingRanges.details', 'only {0} folding ranges shown for performance reasons', info.limited
'foldingRangesStatusItem.source', 'Folding'
'null', 'All')
'nullFormatterDescription', "All active folding range providers")
'formatter.default', "Defines a default folding range provider which takes precedence over all other folding range provider. Must be the identifier of an extension contributing a folding range provider."
'openContainer', "Open Containing Folder"
'filesCategory', "File"
"label.sendASmile", "Tweet us your feedback."
'close', "Close"
"patchedVersion1", "Your installation is corrupt."
"patchedVersion2", "Please specify this if you submit a bug."
"sentiment", "How was your experience?"
'smileCaption', "Happy Feedback Sentiment")
'smileCaption', "Happy Feedback Sentiment"
'frownCaption', "Sad Feedback Sentiment")
'frownCaption', "Sad Feedback Sentiment"
"other ways to contact us", "Other ways to contact us"
"submit a bug", "Submit a bug"
"request a missing feature", "Request a missing feature"
"tell us why", "Tell us why?"
"feedbackTextInput", "Tell us your feedback")
'showFeedback', "Show Feedback Icon in Status Bar"
'tweet', "Tweet"
'tweetFeedback', "Tweet Feedback"
"character left", "character left"
"characters left", "characters left"
'fileTooLargeForHeapError', "To open a file of this size, you need to restart and allow {0} to use more memory", this.productService.nameShort
'relaunchWithIncreasedMemoryLimit', "Restart with {0} MB", memoryLimit), run: (
'configureMemoryLimit', 'Configure Memory Limit'), run: (
'status.feedback', "Tweet Feedback"
'status.feedback.name', "Feedback"
'status.feedback', "Tweet Feedback"
'status.feedback', "Tweet Feedback"
'textFileEditor', "Text File Editor"
'explorerViewletVisible', "True when the EXPLORER viewlet is visible.") }
'explorerResourceIsFolder', "True when the focused item in the EXPLORER is a folder.") }
'explorerResourceReadonly', "True when the focused item in the EXPLORER is readonly.") }
'explorerResourceIsRoot', "True when the focused item in the EXPLORER is a root folder.") }
'explorerResourceCut', "True when an item in the EXPLORER has been cut for cut and paste.") }
'explorerResourceMoveableToTrash', "True when the focused item in the EXPLORER can be moved to trash.") }
'filesExplorerFocus', "True when the focus is inside the EXPLORER view.") }
'openEditorsVisible', "True when the OPEN EDITORS view is visible.") }
'openEditorsFocus', "True when the focus is inside the OPEN EDITORS view.") }
'explorerViewletFocus', "True when the focus is inside the EXPLORER viewlet.") }
'explorerViewletCompressedFocus', "True when the focused item in the EXPLORER view is a compact item.") }
'explorerViewletCompressedFirstFocus', "True when the focus is inside a compact item's first part in the EXPLORER view.") }
'explorerViewletCompressedLastFocus', "True when the focus is inside a compact item's last part in the EXPLORER view.") }
'viewHasSomeCollapsibleItem', "True when a workspace in the EXPLORER view has some collapsible root child.") }
'dirtyFiles', "{0} unsaved files", dirtyCount)
'formatDocument.label.multiple', "Format Document"
'too.large', "This file cannot be formatted because it is too large")
'no.provider', "There is no formatter for '{0}' files installed.", langName
'cancel', "Cancel"
'canNotResolve', "Unable to resolve workspace folder"
'symbolicLlink', "Symbolic Link"
'unknown', "Unknown File Type"
'label', "Explorer"
'enospcError', "Unable to watch for file changes in this large workspace folder. Please follow the instructions link to resolve this issue."
'learnMore', "Instructions"
'eshutdownError', "File changes watcher stopped unexpectedly. A reload of the window may enable the watcher again unless the workspace cannot be watched for file changes."
'reload', "Reload"
'treeAriaLabel', "Files Explorer"
'fileInputAriaLabel', "Type file name. Press Enter to confirm or Escape to cancel."
'confirmRootsMove', "Are you sure you want to change the order of multiple root folders in your workspace?"
'confirmMultiMove', "Are you sure you want to move the following {0} files into '{1}'?", items.length, target.name
'confirmRootMove', "Are you sure you want to change the order of root folder '{0}' in your workspace?", items[0].name
'confirmMove', "Are you sure you want to move '{0}' into '{1}'?", items[0].name, target.name
'doNotAskAgain', "Do not ask me again"
{ key: 'moveButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Move"
'copy', "Copy {0}", labelSufix
'copying', "Copying {0}", labelSufix
'move', "Move {0}", labelSufix
'moving', "Moving {0}", labelSufix
'numberOfFolders', "{0} folders", items.length
'numberOfFiles', "{0} files", items.length
'noWorkspace', "No Folder Opened"
'null', 'None')
'nullFormatterDescription', "None")
'miss', "Extension '{0}' is configured as formatter but it cannot format '{1}'-files", extension.displayName || extension.name, langName
'config.needed', "There are multiple formatters for '{0}' files. One of them should be configured as default formatter.", DefaultFormatter._maybeQuotes(langName)
'config.bad', "Extension '{0}' is configured as formatter but not available. Select a different default formatter to continue.", defaultFormatterId
'miss.1', "Configure Default Formatter"
'do.config', "Configure..."
'cancel', "Cancel"
'do.config', "Configure..."), run: () => this._pickAndPersistDefaultFormatter(formatter, document
'select', "Select a default formatter for '{0}' files", DefaultFormatter._maybeQuotes(langName)) }
'do.config', "Configure..."
'summary', "Formatter Conflicts"
'formatter', "Formatting"
'formatter.default', "Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter."
'def', "(default)"
'config', "Configure Default Formatter..."
'format.placeHolder', "Select a formatter"
'select', "Select a default formatter for '{0}' files", DefaultFormatter._maybeQuotes(langName)) }
'formatDocument.label.multiple', "Format Document With..."
'formatSelection.label.multiple', "Format Selection With..."
'textFileEditor', "Text File Editor"
'newFile', "New File..."
'newFolder', "New Folder..."
'rename', "Rename..."
'delete', "Delete"
'copyFile', "Copy"
'pasteFile', "Paste"
'download', "Download..."
'upload', "Upload..."
'filesCategory', "File"
{ key: 'deleteButtonLabelTrash', comment: ['&& denotes a mnemonic'] }, "&&Move to Trash"
{ key: 'deleteButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete"
'dirtyMessageFilesDelete', "You are deleting files with unsaved changes. Do you want to continue?"
'dirtyMessageFolderOneDelete', "You are deleting a folder {0} with unsaved changes in 1 file. Do you want to continue?", distinctElements[0].name
'dirtyMessageFolderDelete', "You are deleting a folder {0} with unsaved changes in {1} files. Do you want to continue?", distinctElements[0].name, dirtyWorkingCopies.size
'dirtyMessageFileDelete', "You are deleting {0} with unsaved changes. Do you want to continue?", distinctElements[0].name
'dirtyWarning', "Your changes will be lost if you don't save them."
'irreversible', "This action is irreversible!"
'restore', "You can restore this file using the Undo command"
'undoBin', "You can restore this file from the Recycle Bin."
'undoTrash', "You can restore this file from the Trash."
'doNotAskAgain', "Do not ask me again"
{ key: 'deleteFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file deleted'] }, "Delete {0}", distinctElements[0].name
{ key: 'deletingFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file deleted'] }, "Deleting {0}", distinctElements[0].name
'trashFailed', "Failed to delete using the Trash. Do you want to permanently delete instead?"
{ key: 'deletePermanentlyButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Delete Permanently"
{ key: 'retryButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Retry"
'confirmMoveTrashMessageFilesAndDirectories', "Are you sure you want to delete the following {0} files/directories and their contents?", distinctElements.length
'confirmMoveTrashMessageMultipleDirectories', "Are you sure you want to delete the following {0} directories and their contents?", distinctElements.length
'confirmMoveTrashMessageMultiple', "Are you sure you want to delete the following {0} files?", distinctElements.length
'confirmMoveTrashMessageFolder', "Are you sure you want to delete '{0}' and its contents?", distinctElements[0].name
'confirmMoveTrashMessageFile', "Are you sure you want to delete '{0}'?", distinctElements[0].name
'confirmDeleteMessageFilesAndDirectories', "Are you sure you want to permanently delete the following {0} files/directories and their contents?", distinctElements.length
'confirmDeleteMessageMultipleDirectories', "Are you sure you want to permanently delete the following {0} directories and their contents?", distinctElements.length
'confirmDeleteMessageMultiple', "Are you sure you want to permanently delete the following {0} files?", distinctElements.length
'confirmDeleteMessageFolder', "Are you sure you want to permanently delete '{0}' and its contents?", distinctElements[0].name
'confirmDeleteMessageFile', "Are you sure you want to permanently delete '{0}'?", distinctElements[0].name
'cancel', "Cancel")], { cancelId: 1 }
'globalCompareFile', "Compare Active File With..."
'toggleAutoSave', "Toggle Auto Save"
'saveAllInGroup', "Save All in Group"
'closeGroup', "Close Group"
'focusFilesExplorer', "Focus on Files Explorer"
'showInExplorer', "Reveal Active File in Explorer View"
'openFileInNewWindow', "Open Active File in New Window"
'openFileToShowInNewWindow.unsupportedschema', "The active editor must contain an openable resource.")
'emptyFileNameError', "A file or folder name must be provided."
'fileNameStartsWithSlashError', "A file or folder name cannot start with a slash."
'fileNameExistsError', "A file or folder **{0}** already exists at this location. Please choose a different name.", name
'invalidFileNameError', "The name **{0}** is not valid as a file or folder name. Please choose a different name.", trimLongName(escapedName)
'fileNameWhitespaceWarning', "Leading or trailing whitespace detected in file or folder name."
'compareWithClipboard', "Compare Active File with Clipboard"
'clipboardComparisonLabel', "Clipboard ↔ {0}", name
'retry', "Retry"
'createBulkEdit', "Create {0}", value
'creatingBulkEdit', "Creating {0}", value
'renameBulkEdit', "Rename {0} to {1}", stat.name, value
'renamingBulkEdit', "Renaming {0} to {1}", stat.name, value
'fileIsAncestor', "File to paste is an ancestor of the destination folder")
{ key: 'movingBulkEdit', comment: ['Placeholder will be replaced by the number of files being moved'] }, "Moving {0} files", sourceTargetPairs.length
{ key: 'movingFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file moved.'] }, "Moving {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target)
{ key: 'moveBulkEdit', comment: ['Placeholder will be replaced by the number of files being moved'] }, "Move {0} files", sourceTargetPairs.length
{ key: 'moveFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file moved.'] }, "Move {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target)
{ key: 'copyingBulkEdit', comment: ['Placeholder will be replaced by the number of files being copied'] }, "Copying {0} files", sourceTargetPairs.length
{ key: 'copyingFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file copied.'] }, "Copying {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target)
{ key: 'copyBulkEdit', comment: ['Placeholder will be replaced by the number of files being copied'] }, "Paste {0} files", sourceTargetPairs.length
{ key: 'copyFileBulkEdit', comment: ['Placeholder will be replaced by the name of the file copied.'] }, "Paste {0}", resources.basenameOrAuthority(sourceTargetPairs[0].target)
'fileDeleted', "The file(s) to paste have been deleted or moved since you copied them. {0}", getErrorMessage(e)))
'uploadingFiles', "Uploading"
'overwrite', "Overwrite {0}", entry.name
'overwriting', "Overwriting {0}", entry.name
'uploadProgressSmallMany', "{0} of {1} files ({2}/s)", operation.filesUploaded, operation.filesTotal, ByteSize.formatSize(bytesUploadedPerSecond)
'uploadProgressLarge', "{0} ({1} of {2}, {3}/s)", entry.name, ByteSize.formatSize(fileBytesUploaded), ByteSize.formatSize(fileSize), ByteSize.formatSize(bytesUploadedPerSecond)
'copyingFiles', "Copying..."
'copyFolders', "&&Copy Folders"
'copyFolder', "&&Copy Folder"
'cancel', "Cancel"
'addFolder', "&&Add Folder to Workspace")
'dropFolders', "Do you want to copy the folders or add the folders to the workspace?"
'dropFolder', "Do you want to copy '{0}' or add '{0}' as a folder to the workspace?", basename(folders[0].uri)
'copyfolders', "Are you sure to want to copy folders?"
'copyfolder', "Are you sure to want to copy '{0}'?", basename(folders[0].uri)
'fileInaccessible', "The dropped file could not be accessed for import.")
{ comment: ['substitution will be the name of the file that was imported'], key: 'importFile' }, "Import {0}", basename(resourcesFiltered[0])
{ comment: ['substitution will be the number of files that were imported'], key: 'importnFile' }, "Import {0} resources", resourcesFiltered.length
{ comment: ['substitution will be the name of the file that was copied'], key: 'copyingFile' }, "Copying {0}", basename(resourcesFiltered[0])
{ comment: ['substitution will be the number of files that were copied'], key: 'copyingnFile' }, "Copying {0} resources", resourcesFiltered.length
'downloadingFiles', "Downloading"
'downloadProgressSmallMany', "{0} of {1} files ({2}/s)", operation.filesDownloaded, operation.filesTotal, ByteSize.formatSize(bytesDownloadedPerSecond)
'downloadProgressLarge', "{0} ({1} of {2}, {3}/s)", name, ByteSize.formatSize(operation.fileBytesDownloaded), ByteSize.formatSize(fileSize), ByteSize.formatSize(bytesDownloadedPerSecond)
'downloadButton', "Download")
'chooseWhereToDownload', "Choose Where to Download"
'downloadBulkEdit', "Download {0}", explorerItem.name
'downloadingBulkEdit', "Downloading {0}", explorerItem.name
'confirmOverwrite', "A file or folder with the name '{0}' already exists in the destination folder. Do you want to replace it?", name
'irreversible', "This action is irreversible!"
{ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"
'confirmManyOverwrites', "The following {0} files and/or folders already exist in the destination folder. Do you want to replace them?", files.length
'irreversible', "This action is irreversible!"
{ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Replace"
'binaryFileEditor', "Binary File Editor"
'hotExit.off', 'Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.'
'hotExit.onExit', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`'
'hotExit.onExitAndWindowClose', 'Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it\'s the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`'
'hotExit', "Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.", HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE
'hotExit.off', 'Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.'
'hotExit.onExitAndWindowCloseBrowser', 'Hot exit will be triggered when the browser quits or the window or tab is closed.'
'hotExit', "Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.", HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE
'filesConfigurationTitle', "Files"
'exclude', "Configure [glob patterns](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) for excluding files and folders. For example, the file explorer decides which files and folders to show or hide based on this setting. Refer to the `#search.exclude#` setting to define search-specific excludes."
'falseDescription', "Disable the pattern."
'files.exclude.boolean', "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern."
{ key: 'files.exclude.when', comment: ['\\$(basename) should not be translated'] }, "Additional check on the siblings of a matching file. Use \\$(basename) as variable for the matching file name."
'associations', "Configure file associations to languages (e.g. `\"*.extension\": \"html\"`). These have precedence over the default associations of the languages installed."
'encoding', "The default character set encoding to use when reading and writing files. This setting can also be configured per language."
'autoGuessEncoding', "When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only {0} is respected.", '`#files.encoding#`'
'eol.LF', "LF"
'eol.CRLF', "CRLF"
'eol.auto', "Uses operating system specific end of line character."
'eol', "The default end of line character."
'useTrash', "Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently."
'trimTrailingWhitespace', "When enabled, will trim trailing whitespace when saving a file."
'insertFinalNewline', "When enabled, insert a final new line at the end of the file when saving it."
'trimFinalNewlines', "When enabled, will trim all new lines after the final new line at the end of the file when saving it."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.off' }, "An editor with changes is never automatically saved."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.afterDelay' }, "An editor with changes is automatically saved after the configured `#files.autoSaveDelay#`."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onFocusChange' }, "An editor with changes is automatically saved when the editor loses focus."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'files.autoSave.onWindowChange' }, "An editor with changes is automatically saved when the window loses focus."
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSave' }, "Controls [auto save](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) of editors that have unsaved changes.", AutoSaveConfiguration.OFF, AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.ON_WINDOW_CHANGE, AutoSaveConfiguration.AFTER_DELAY
{ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'autoSaveDelay' }, "Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `#files.autoSave#` is set to `{0}`.", AutoSaveConfiguration.AFTER_DELAY
'watcherExclude', "Configure paths or glob patterns to exclude from file watching. Paths or basic glob patterns that are relative (for example `build/output` or `*.js`) will be resolved to an absolute path using the currently opened workspace. Complex glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders)."
'watcherInclude', "Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace."
'defaultLanguage', "The default language identifier that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language identifier of the currently active text editor if any."
'maxMemoryForLargeFilesMB', "Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line."
'files.restoreUndoStack', "Restore the undo stack when a file is reopened."
'askUser', "Will refuse to save and ask for resolving the save conflict manually."
'overwriteFileOnDisk', "Will resolve the save conflict by overwriting the file on disk with the changes in the editor."
'files.saveConflictResolution', "A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution."
'files.simpleDialog.enable', "Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled."
'files.participants.timeout', "Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants."
'formatOnSave', "Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down."
{ key: 'everything', comment: ['This is the description of an option'] }, "Format the whole file."
{ key: 'modification', comment: ['This is the description of an option'] }, "Format modifications (requires source control)."
{ key: 'modificationIfAvailable', comment: ['This is the description of an option'] }, "Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted."
'formatOnSaveMode', "Controls if format on save formats the whole file or only modifications. Only applies when `#editor.formatOnSave#` is enabled."
'explorerConfigurationTitle', "File Explorer"
{ key: 'openEditorsVisible', comment: ['Open is an adjective'] }, "The maximum number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane."
{ key: 'openEditorsVisibleMin', comment: ['Open is an adjective'] }, "The minimum number of editor slots shown in the Open Editors pane. If set to 0 the Open Editors pane will dynamically resize based on the number of editors."
{ key: 'openEditorsSortOrder', comment: ['Open is an adjective'] }, "Controls the sorting order of editors in the Open Editors pane."
'sortOrder.editorOrder', 'Editors are ordered in the same order editor tabs are shown.'
'sortOrder.alphabetical', 'Editors are ordered alphabetically by tab name inside each editor group.'
'sortOrder.fullPath', 'Editors are ordered alphabetically by full path inside each editor group.'
'autoReveal.on', 'Files will be revealed and selected.'
'autoReveal.off', 'Files will not be revealed and selected.'
'autoReveal.focusNoScroll', 'Files will not be scrolled into view, but will still be focused.'
'autoReveal', "Controls whether the explorer should automatically reveal and select files when opening them."
'enableDragAndDrop', "Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer."
'confirmDragAndDrop', "Controls whether the explorer should ask for confirmation to move files and folders via drag and drop."
'confirmDelete', "Controls whether the explorer should ask for confirmation when deleting a file via the trash."
'enableUndo', "Controls whether the explorer should support undoing file and folder operations."
'confirmUndo', "Controls whether the explorer should ask for confirmation when undoing."
'enableUndo.verbose', 'Explorer will prompt before all undo operations.'
'enableUndo.default', 'Explorer will prompt before destructive undo operations.'
'enableUndo.light', 'Explorer will not prompt before undo operations when focused.'
'expandSingleFolderWorkspaces', "Controls whether the explorer should expand multi-root workspaces containing only one folder during initialization"
'sortOrder.default', 'Files and folders are sorted by their names. Folders are displayed before files.'
'sortOrder.mixed', 'Files and folders are sorted by their names. Files are interwoven with folders.'
'sortOrder.filesFirst', 'Files and folders are sorted by their names. Files are displayed before folders.'
'sortOrder.type', 'Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.'
'sortOrder.modified', 'Files and folders are sorted by last modified date in descending order. Folders are displayed before  files.'
'sortOrder.foldersNestsFiles', 'Files and folders are sorted by their names. Folders are displayed before files. Files with nested children are displayed before other files.'
'sortOrder', "Controls the property-based sorting of files and folders in the explorer. When `#explorer.fileNesting.enabled#` is enabled, also controls sorting of nested files."
'sortOrderLexicographicOptions.default', 'Uppercase and lowercase names are mixed together.'
'sortOrderLexicographicOptions.upper', 'Uppercase names are grouped together before lowercase names.'
'sortOrderLexicographicOptions.lower', 'Lowercase names are grouped together before uppercase names.'
'sortOrderLexicographicOptions.unicode', 'Names are sorted in unicode order.'
'sortOrderLexicographicOptions', "Controls the lexicographic sorting of file and folder names in the Explorer."
'explorer.decorations.colors', "Controls whether file decorations should use colors."
'explorer.decorations.badges', "Controls whether file decorations should use badges."
'simple', "Appends the word \"copy\" at the end of the duplicated name potentially followed by a number"
'smart', "Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number"
'disabled', "Disables incremental naming. If two files with the same name exist you will be prompted to overwrite the existing file"
'explorer.incrementalNaming', "Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste."
'compressSingleChildFolders', "Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example."
'copyRelativePathSeparator.slash', "Use slash as path separation character."
'copyRelativePathSeparator.backslash', "Use backslash as path separation character."
'copyRelativePathSeparator.auto', "Uses operating system specific path separation character."
'copyRelativePathSeparator', "The path separation character used when copying relative file paths."
'excludeGitignore', "Controls whether entries in .gitignore should be parsed and excluded from the explorer. Similar to {0}.", '`#files.exclude#`'
'fileNestingEnabled', "Controls whether file nesting is enabled in the explorer. File nesting allows for related files in a directory to be visually grouped together under a single parent file."
'fileNestingExpand', "Controls whether file nests are automatically expanded. {0} must be set for this to take effect.", '`#explorer.fileNesting.enabled#`'
'fileNestingPatterns', "Controls nesting of files in the explorer. {0} must be set for this to take effect. Each __Item__ represents a parent pattern and may contain a single `*` character that matches any string. Each __Value__ represents a comma separated list of the child patterns that should be shown nested under a given parent. Child patterns may contain several special tokens:\n- `${capture}`: Matches the resolved value of the `*` from the parent pattern\n- `${basename}`: Matches the parent file's basename, the `file` in `file.ts`\n- `${extname}`: Matches the parent file's extension, the `ts` in `file.ts`\n- `${dirname}`: Matches the parent file's directory name, the `src` in `src/file.ts`\n- `*`:  Matches any string, may only be used once per child pattern", '`#explorer.fileNesting.enabled#`'
'fileNesting.description', "Each key pattern may contain a single `*` character which will match any string."
'selectOpenerDefaultLabel.web', 'Open in new browser window'
'selectOpenerDefaultLabel', 'Open in default browser'
'selectOpenerConfigureTitle', "Configure default opener..."
'selectOpenerPlaceHolder', "How would you like to open: {0}", targetUri.toString()
{ key: 'openEditors', comment: ['Open is an adjective'] }, "Open Editors"
'dirtyCounter', "{0} unsaved", dirty
'openEditors', "Open Editors"
'flipLayout', "Toggle Vertical/Horizontal Editor Layout"
'miToggleEditorLayoutWithoutMnemonic', "Flip Layout"
{ key: 'miToggleEditorLayout', comment: ['&& denotes a mnemonic'] }, "Flip &&Layout"
'newUntitledFile', "New Untitled File"
'saveAs', "Save As..."
'save', "Save"
'saveWithoutFormatting', "Save without Formatting"
'saveAll', "Save All"
'removeFolderFromWorkspace', "Remove Folder from Workspace"
'newUntitledFile', "New Untitled File"
'explorerSection', "Explorer Section: {0}", this.name
'createNewFile', "New File..."
'createNewFolder', "New Folder..."
'refreshExplorer', "Refresh Explorer"
'collapseExplorerFolders', "Collapse Folders in Explorer"
'modifiedLabel', "{0} (in file) ↔ {1}", name, name
{ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", editors.map(({ editor }) => editor.getName()).join(', '), toErrorMessage(error, false)
'retry', "Retry"), run: () => instantiationService.invokeFunction(accessor => doSaveEditors(accessor, editors, options)) }
'discard', "Discard"), run: () => editorService.revert(editors) }
'genericRevertError', "Failed to revert '{0}': {1}", editors.map(({ editor }) => editor.getName()).join(', '), toErrorMessage(error, false))
'newFileCommand.saveLabel', "Create File"
'externalUriOpeners', "Configure the opener to use for external URIs (http, https)."
'externalUriOpeners.uri', "Map URI pattern to an opener id.\nExample patterns: \n{0}", exampleUriPatterns
'externalUriOpeners.uri', "Map URI pattern to an opener id.\nExample patterns: \n{0}", exampleUriPatterns
'externalUriOpeners.defaultId', "Open using VS Code's standard opener."
'copyPath', "Copy Path"
'copyRelativePath', "Copy Relative Path"
'revealInSideBar', "Reveal in Explorer View"), ResourceContextKey.IsFileSystemResource, '2_files', 1
'acceptLocalChanges', "Use your changes and overwrite file contents"), Codicon.check, -10, acceptLocalChangesCommand
'revertLocalChanges', "Discard your changes and revert to file contents"), Codicon.discard, -9, revertLocalChangesCommand
'copyPathOfActive', "Copy Path of Active File"), original: 'Copy Path of Active File' }, fileCategory
'copyRelativePathOfActive', "Copy Relative Path of Active File"), original: 'Copy Relative Path of Active File' }, fileCategory
'saveAllInGroup', "Save All in Group"), original: 'Save All in Group' }, fileCategory
'saveFiles', "Save All Files"), original: 'Save All Files' }, fileCategory
'revert', "Revert File"), original: 'Revert File' }, fileCategory
'compareActiveWithSaved', "Compare Active File with Saved"), original: 'Compare Active File with Saved' }, fileCategory
'openToSide', "Open to the Side"
'reopenWith', "Reopen Editor With..."
'revert', "Revert File"
'saveAll', "Save All"
'compareWithSaved', "Compare with Saved"
'compareWithSelected', "Compare with Selected"
'compareSource', "Select for Compare"
'compareSelected', "Compare Selected"
'close', "Close"
'closeOthers', "Close Others"
'closeSaved', "Close Saved"
'closeAll', "Close All"
'explorerOpenWith', "Open With..."
'cut', "Cut"
'deleteFile', "Delete Permanently"
'deleteFile', "Delete Permanently"
'newFile', "New Text File") }, group: '1_file', order: 10 }
'openFile', "Open File...") }, group: '1_file', order: 20 }
{ key: 'miNewFile', comment: ['&& denotes a mnemonic'] }, "&&New Text File"
{ key: 'miSave', comment: ['&& denotes a mnemonic'] }, "&&Save"
{ key: 'miSaveAs', comment: ['&& denotes a mnemonic'] }, "Save &&As..."
{ key: 'miSaveAll', comment: ['&& denotes a mnemonic'] }, "Save A&&ll"
{ key: 'miAutoSave', comment: ['&& denotes a mnemonic'] }, "A&&uto Save"
{ key: 'miRevert', comment: ['&& denotes a mnemonic'] }, "Re&&vert File"
{ key: 'miCloseEditor', comment: ['&& denotes a mnemonic'] }, "&&Close Editor"
{ key: 'miGotoFile', comment: ['&& denotes a mnemonic'] }, "Go to &&File..."
'globalConsoleAction', "Open New External Terminal"
'terminalConfigurationTitle', "External Terminal"
'terminal.explorerKind.integrated', "Use VS Code's integrated terminal."
'terminal.explorerKind.external', "Use the configured external terminal."
'explorer.openInTerminalKind', "When opening a file from the explorer in a terminal, determines what kind of terminal will be launched"
'terminal.external.windowsExec', "Customizes which terminal to run on Windows."
'terminal.external.osxExec', "Customizes which terminal application to run on macOS."
'terminal.external.linuxExec', "Customizes which terminal to run on Linux."
'userGuide', "Use the actions in the editor tool bar to either undo your changes or overwrite the content of the file with your changes."
'staleSaveError', "Failed to save '{0}': The content of the file is newer. Please compare your version with the file contents or overwrite the content of the file with your changes.", basename(resource)
'readonlySaveErrorSudo', "Failed to save '{0}': File is read-only. Select 'Overwrite as Sudo' to retry as superuser.", basename(resource)
'readonlySaveError', "Failed to save '{0}': File is read-only. Select 'Overwrite' to attempt to make it writeable.", basename(resource)
'permissionDeniedSaveErrorSudo', "Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.", basename(resource)
{ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, "Failed to save '{0}': {1}", basename(resource), toErrorMessage(error, false)
'learnMore', "Learn More")
'dontShowAgain', "Don't Show Again")
'compareChanges', "Compare")
'saveConflictDiffLabel', "{0} (in file) ↔ {1} (in {2}) - Resolve save conflict", name, name, this.productService.nameLong
'saveElevatedSudo', "Retry as Sudo...")
'retry', "Retry")
'discard', "Discard")
'overwrite', "Overwrite")
'overwrite', "Overwrite")
'configure', "Configure")
'scopedConsoleAction', "Open in Terminal"
'scopedConsoleAction.integrated', "Open in Integrated Terminal"
'scopedConsoleAction.integrated', "Open in Integrated Terminal"
'scopedConsoleAction.wt', "Open in Windows Terminal"
'scopedConsoleAction.external', "Open in External Terminal"
'textFileEditor', "Text File Editor"
'reveal', "Reveal in Explorer View"), run: async (
'ok', "OK"), run: async (
'fileIsDirectoryError', "File is a directory"), FileOperationResult.FILE_IS_DIRECTORY), [action]
'fileNotFoundError', "File not found"), FileOperationResult.FILE_NOT_FOUND
'createFile', "Create File"), run: async (
'binaryFileEditor', "Binary File Viewer"
'explorerViewIcon', 'View icon of the explorer view.')
'openEditorsIcon', 'View icon of the open editors view.')
'folders', "Folders"
'explore', "Explorer"
'explore', "Explorer"
{ key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] }, "&&Explorer"
'openFolder', "Open Folder"
'addAFolder', "add a folder"
'openRecent', "Open Recent"
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noWorkspaceHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noFolderHelpWeb', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'remoteNoFolderHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noFolderButEditorsHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/files/browser/explorerViewlet.ts:	content: localize({ key: 'noFolderHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
'extensionsInputName', "Extension: {0}", this._extension.displayName
src/vs/workbench/contrib/extensions/electron-sandbox/extensionsAutoProfiler.ts:			localize(
'show', 'Show Extensions'
'debugExtensionHost', "Start Debugging Extension Host"
'restart1', "Profile Extensions"
'restart2', "In order to profile extensions a restart is required. Do you want to restart '{0}' now?", this.productService.nameLong
'restart3', "&&Restart"
'cancel', "&&Cancel"
'debugExtensionHost.launch.name', "Attach Extension Host"
'workbench.enableExperiments', "Fetches experiments to run from a Microsoft online service."
'status.profiler', "Extension Profiler"
'profilingExtensionHost', "Profiling Extension Host"
'profilingExtensionHost', "Profiling Extension Host"
'selectAndStartDebug', "Click to stop profiling."
'profilingExtensionHostTime', "Profiling Extension Host ({0} sec)", Math.round((new Date().getTime() - timeStarted) / 1000)), }
'restart1', "Profile Extensions"
'restart2', "In order to profile extensions a restart is required. Do you want to restart '{0}' now?", this._productService.nameLong
'restart3', "&&Restart"
'cancel', "&&Cancel"
'extensionsInputName', "Running Extensions"
'reportExtensionIssue', "Report Issue"
'disableOtherKeymapsConfirmation', "Disable other keymaps ({0}) to avoid conflicts between keybindings?", oldKeymaps.map(k => `'${k.local.manifest.displayName}'`).join(', ')
'yes', "Yes"
'no', "No"
'runtimeExtension', "Running Extensions")
'extensionHostProfileStart', "Start Extension Host Profile"
'stopExtensionHostProfileStart', "Stop Extension Host Profile"
'saveExtensionHostProfile', "Save Extension Host Profile"
'saveprofile.dialogTitle', "Save Extension Host Profile"
'saveprofile.saveButton', "Save"
'openExtensionsFolder', "Open Extensions Folder"
'cmd.reportOrShow', "Performance Issue"), 'extension-action report-issue'
'cmd.report', "Report Issue")
'attach.title', "Did you attach the CPU-Profile?"
'attach.msg', "This is a reminder to make sure that you have not forgotten to attach '{0}' to the issue you have just created.", path.fsPath
'cmd.show', "Show Issues")
'attach.title', "Did you attach the CPU-Profile?"
'attach.msg2', "This is a reminder to make sure that you have not forgotten to attach '{0}' to an existing performance issue.", path.fsPath
'tunnelPrivacy.private', "Private"
'tunnelPrivacy.public', "Public"
'workspaceRecommendation', "This extension is recommended by users of the current workspace."
'app.extensions.json.title', "Extensions"
'app.extensions.json.recommendations', "List of extensions which should be recommended for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'."
'app.extension.identifier.errorMessage', "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'."
'app.extensions.json.unwantedRecommendations', "List of extensions recommended by VS Code that should not be recommended for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'."
'app.extension.identifier.errorMessage', "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'."
'error', "Error"
'Unknown Extension', "Unknown Extension:"
'extension.arialabel', "{0}, {1}, {2}, {3}", extension.displayName, extension.version, extension.publisherDisplayName, extension.description
'extensions', "Extensions"
'neverShowAgain', "Don't Show Again"
'ignoreExtensionRecommendations', "Do you want to ignore all extension recommendations?"
'ignoreAll', "Yes, Ignore All"
'no', "No"
'workspaceRecommended', "Do you want to install the recommended extensions for this repository?"
'install', "Install"
'install and do no sync', "Install (Do not sync)"
'show recommendations', "Show Recommendations"
'reason', "This extension is recommended for {0} for the Web", this.productService.nameLong
'searchMarketplace', "Search Marketplace"
'fileBasedRecommendation', "This extension is recommended based on the files you recently opened."
'reallyRecommended', "Do you want to install the recommended extensions for {0}?", name
'showLanguageExtensions', "The Marketplace has extensions that can help with '.{0}' files", fileExtension
'dontShowAgainExtension', "Don't Show Again for '.{0}' files", fileExtension
'VS Code for Web', "{0} for the Web", this.productService.nameLong
'cannot be installed', "The '{0}' extension is not available in {1}. Click 'More Information' to learn more.", this.extension.displayName || this.extension.identifier.id, productName
'more information', "More Information")], { cancelId: 0 }
'update operation', "Error while updating '{0}' extension.", this.extension.displayName || this.extension.identifier.id
'install operation', "Error while installing '{0}' extension.", this.extension.displayName || this.extension.identifier.id
'install release version message', "Would you like to install the release version?"
'install release version', "Install Release Version"
'check logs', "Please check the [log]({0}) for more details.", `command:${Constants.showWindowLogActionId}`
'download', "Try Downloading Manually..."
'install vsix', 'Once downloaded, please manually install the downloaded VSIX of \'{0}\'.', this.extension.identifier.id
'installVSIX', "Install from VSIX..."
'install', "Install"), cssClass, false
'deprecated message', "This extension is deprecated as it is no longer being maintained."
'install anyway', "Install Anyway"
'cancel', "Cancel"
'deprecated with alternate extension message', "This extension is deprecated. Use the {0} extension instead.", this.extension.deprecationInfo.extension.displayName
'Show alternate extension', "Open {0}", this.extension.deprecationInfo.extension.displayName)
'deprecated with alternate settings message', "This extension is deprecated as this functionality is now built-in to VS Code."
'configure in settings', "Configure Settings")
'install confirmation', "Are you sure you want to install '{0}'?", this.extension.displayName
'installExtensionStart', "Installing extension {0} started. An editor is now open with more details on this extension", this.extension.displayName)
'installExtensionComplete', "Installing extension {0} is completed.", this.extension.displayName)
'install pre-release version', "Install Pre-Release Version"
'install release version', "Install Release Version"
'install', "Install"
'do no sync', "Do not sync"
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					? localize({
src/vs/workbench/contrib/extensions/browser/extensionsActions.ts:					: localize({
'install extension locally', "{0} Locally", baseLabel
{ key: 'install everywhere tooltip', comment: ['Placeholder is the name of the product. Eg: Visual Studio Code or Visual Studio Code - Insiders'] }, "Install this extension in all your synced {0} instances", productService.nameLong
'installing', "Installing"
'install', "Install"
'installing', "Installing"
'installExtensionStart', "Installing extension {0} started. An editor is now open with more details on this extension", this.extension.displayName)
'incompatible', "Can't install '{0}' extension because it is not compatible.", this.extension.identifier.id)
{ key: 'install in remote', comment: ['This is the name of the action to install an extension in remote server. Placeholder is for the name of remote server.'] }, "Install in {0}", this.extensionManagementServerService.remoteExtensionManagementServer.label
'install locally', "Install Locally"
'install browser', "Install in Browser"
'uninstallAction', "Uninstall"
'Uninstalling', "Uninstalling"
'uninstallExtensionStart', "Uninstalling extension {0} started.", this.extension.displayName)
'uninstallExtensionComplete', "Please reload Visual Studio Code to complete the uninstallation of the extension {0}.", this.extension!.displayName)
'update', "Update"), extensionsWorkbenchService
'update', "Update"
'updateExtensionStart', "Updating extension {0} to version {1} started.", this.extension.displayName, this.extension.latestVersion)
'updateExtensionComplete', "Updating extension {0} to version {1} completed.", extension.displayName, extension.latestVersion)
'ignoreUpdates', "Ignore Updates"), extensionsWorkbenchService
'ignoreExtensionUpdate', "Ignoring {0} updates", this.extension.displayName)
'migrateExtension', "Migrate"), MigrateDeprecatedExtensionAction.DisabledClass, false
'migrate to', "Migrate to {0}", this.extension.deprecationInfo.extension.displayName
'migrate', "Migrate"
'manage', "Manage"
'ManageExtensionAction.uninstallingTooltip', "Uninstalling"
'manage', "Manage"
'switch to pre-release version', "Switch to Pre-Release Version"
'switch to pre-release version tooltip', "Switch to Pre-Release version of this extension"
'switch to release version', "Switch to Release Version"
'switch to release version tooltip', "Switch to Release version of this extension"
'install another version', "Install Another Version..."
'no versions', "This extension has no other versions.")
'current', "current")}
'selectVersion', "Select Version to Install"
'enableForWorkspaceAction', "Enable (Workspace)"
'enableForWorkspaceActionToolTip', "Enable this extension only in this workspace"
'enableGloballyAction', "Enable"
'enableGloballyActionToolTip', "Enable this extension"
'disableForWorkspaceAction', "Disable (Workspace)"
'disableForWorkspaceActionToolTip', "Disable this extension only in this workspace"
'disableGloballyAction', "Disable"
'disableGloballyActionToolTip', "Disable this extension"
'enableAction', "Enable"
'disableAction', "Disable"
'reloadAction', "Reload"), ReloadAction.DisabledClass, false
'reload required', 'Reload Required'
'current', "current") }
'workbench.extensions.action.setColorTheme', "Set Color Theme"
'select color theme', "Select Color Theme"
'workbench.extensions.action.setFileIconTheme', "Set File Icon Theme"
'select file icon theme', "Select File Icon Theme"
'workbench.extensions.action.setProductIconTheme', "Set Product Icon Theme"
'select product icon theme', "Select Product Icon Theme"
'workbench.extensions.action.setDisplayLanguage', "Set Display Language"
'workbench.extensions.action.clearLanguage', "Clear Display Language"
'showRecommendedExtension', "Show Recommended Extension"
'installRecommendedExtension', "Install Recommended Extension"
'ignoreExtensionRecommendation', "Do not recommend this extension again"
'undo', "Undo"
'search recommendations', "Search Extensions"), undefined, true
'OpenExtensionsFile.failed', "Unable to create 'extensions.json' file inside the '.vscode' folder ({0}).", error)))
'configureWorkspaceRecommendedExtensions', "Configure Recommended Extensions (Workspace)"
'configureWorkspaceFolderRecommendedExtensions', "Configure Recommended Extensions (Workspace Folder)"
'installed', "Installed"
'uninstalled', "Uninstalled"
'enabled', "Enabled"
'disabled', "Disabled"
'synced', "This extension is synced"
'do not sync', "Do not sync this extension"
'malicious tooltip', "This extension was reported to be problematic.")) }, true
'deprecated with alternate extension tooltip', "This extension is deprecated. Use the {0} extension instead.", link)) }, true
'settings', "settings")}](${URI.parse(`command:workbench.action.openSettings?${encodeURIComponent(JSON.stringify([this.extension.deprecationInfo.settings.map(setting => `@id:${setting}`).join(' ')]))}`)}
'deprecated with alternate settings tooltip', "This extension is deprecated as this functionality is now built-in to VS Code. Configure these {0} to use this functionality.", link)) }, true
'deprecated tooltip', "This extension is deprecated as it is no longer being maintained.")) }, true
'learn more', "Learn More")}](https://aka.ms/vscode-platform-specific-extensions)`
'VS Code for Web', "{0} for the Web", this.productService.nameLong
'learn why', "Learn Why")}](https://aka.ms/vscode-web-extensions-guide)`
'disabled by environment', "This extension is disabled by the environment.")) }, true
'enabled by environment', "This extension is enabled because it is required in the current environment.")) }, true
'disabled because of virtual workspace', "This extension has been disabled because it does not support virtual workspaces.")) }, true
'extension limited because of virtual workspace', "This extension has limited features because the current workspace is virtual.")) }, true
'extension disabled because of trust requirement', "This extension has been disabled because the current workspace is not trusted.")) }, true
'extension limited because of trust requirement', "This extension has limited features because the current workspace is not trusted.")) }, true
'learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`
'learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`
'learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`
'learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`
'Install language pack also in remote server', "Install the language pack extension on '{0}' to enable it there also.", this.extensionManagementServerService.remoteExtensionManagementServer.label)
'Install language pack also locally', "Install the language pack extension locally to enable it there also.")
'learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`) }, true
'learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`) }, true
'learn more', "Learn More")}](https://aka.ms/vscode-remote/developing-extensions/architecture)`) }, true
'extension disabled because of dependency', "This extension has been disabled because it depends on an extension that is disabled.")) }, true
'extension enabled on remote', "Extension is enabled on '{0}'", this.extension.server.label)) }, true
'globally enabled', "This extension is enabled globally.")) }, true
'workspace enabled', "This extension is enabled for this workspace by the user.")) }, true
'globally disabled', "This extension is disabled globally by the user.")) }, true
'workspace disabled', "This extension is disabled for this workspace by the user.")) }, true
'reinstall', "Reinstall Extension..."
'selectExtensionToReinstall', "Select Extension to Reinstall") }
'ReinstallAction.successReload', "Please reload Visual Studio Code to complete reinstalling the extension {0}.", extension.identifier.id
'ReinstallAction.success', "Reinstalling the extension {0} is completed.", extension.identifier.id
'InstallVSIXAction.reloadNow', "Reload Now"
'install previous version', "Install Specific Version of Extension..."
'selectExtension', "Select Extension"), matchOnDetail: true }
'select extensions to install', "Select extensions to install"
'no local extensions', "There are no extensions to install."
'installing extensions', "Installing Extensions..."
'finished installing', "Successfully installed extensions.")
'select and install local extensions', "Install Local Extensions in '{0}'...", this.extensionManagementServerService.remoteExtensionManagementServer.label
'install local extensions title', "Install Local Extensions in '{0}'", this.extensionManagementServerService.remoteExtensionManagementServer!.label
'select and install remote extensions', "Install Remote Extensions Locally..."
'install remote extensions', "Install Remote Extensions Locally"
'extensionButtonBackground', "Button background color for extension actions.")
'extensionButtonForeground', "Button foreground color for extension actions.")
'extensionButtonHoverBackground', "Button background hover color for extension actions.")
'extensionButtonSeparator', "Button separator color for extension actions")
'extensionButtonProminentBackground', "Button background color for extension actions that stand out (e.g. install button).")
'extensionButtonProminentForeground', "Button foreground color for extension actions that stand out (e.g. install button).")
'extensionButtonProminentHoverBackground', "Button background hover color for extension actions that stand out (e.g. install button).")
'extensions', "Extensions"
'auto install missing deps', "Install Missing Dependencies"
'finished installing missing deps', "Finished installing missing dependencies. Please reload the window now."
'reload', "Reload Window"
'no missing deps', "There are no missing dependencies to install.")
'ratedLabel', "Average rating: {0} out of 5", rating
'sponsor', "Sponsor")
'remote extension title', "Extension in {0}", this.extensionManagementServerService.remoteExtensionManagementServer.label
'syncingore.label', "This extension is ignored during sync."
'startup', "Startup")}
'pre-release-label', "Pre-Release")}&nbsp;</span>`
'sponsor', "Sponsor")}](${this.extension.publisherSponsorLink})`
'publisher verified tooltip', "This publisher has verified ownership of {0}", `[${URI.parse(this.extension.publisherDomain.link).authority}](${this.extension.publisherDomain.link})`
'updateRequired', "Latest version:")
'startup', "Startup")})` : ''}: \`${activationTime}ms\``
'uncaught errors', '{0} uncaught errors', extensionRuntimeStatus.runtimeErrors.length)}](${URI.parse(`command:extension.open?${encodeURIComponent(JSON.stringify([this.extension.identifier.id, ExtensionEditorTab.RuntimeStatus]))}`)}
'messages', '{0} messages', extensionRuntimeStatus.messages.length)}](${URI.parse(`command:extension.open?${encodeURIComponent(JSON.stringify([this.extension.identifier.id, ExtensionEditorTab.RuntimeStatus]))}`)}
'dependencies', "Show Dependencies")}](${URI.parse(`command:extension.open?${encodeURIComponent(JSON.stringify([this.extension.identifier.id, ExtensionEditorTab.Dependencies]))}`)})`
'Show prerelease version', "Pre-Release version")}](${URI.parse(`command:workbench.extensions.action.showPreReleaseVersion?${encodeURIComponent(JSON.stringify([extension.identifier.id]))}`)}
'has prerelease', "This extension has a {0} available", preReleaseVersionLink
'recommendationHasBeenIgnored', "You have chosen not to receive recommendations for this extension."
'extensionIconStarForeground', "The icon color for extension ratings."), true
'extensionIconVerifiedForeground', "The icon color for extension verified publisher."), true
'extensionPreReleaseForeground', "The icon color for pre-release extension."), true
'extensionIcon.sponsorForeground', "The icon color for extension sponsor."), true
'extension.arialabel.publihser', "Publisher {0}", extension.publisherDisplayName
'extension.arialabel.deprecated', "Deprecated"
'extensions', "Extensions"
'offline error', "Unable to search the Marketplace when offline, please check your network connection."
'error', "Error while fetching extensions. {0}", getErrorMessage(error)
'no extensions found', "No extensions found."
'suggestProxyError', "Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting."
'open user settings', "Open User Settings"), undefined, true, () => this.preferencesService.openUserSettings()
'no local extensions', "There are no extensions to install."
'activation', "Activating Extensions..."
'runtimeExtension', "Running Extensions")
'type', "Type an extension name to install or search."
'searchFor', "Press Enter to search for extension '{0}'.", filter
'install', "Press Enter to install extension '{0}'.", filter
'manage', "Press Enter to manage your extensions."
'extensionsViewIcon', 'View icon of the extensions view.')
'manageExtensionIcon', 'Icon for the \'Manage\' action in the extensions view.')
'clearSearchResultsIcon', 'Icon for the \'Clear Search Result\' action in the extensions view.')
'refreshIcon', 'Icon for the \'Refresh\' action in the extensions view.')
'filterIcon', 'Icon for the \'Filter\' action in the extensions view.')
'installLocalInRemoteIcon', 'Icon for the \'Install Local Extension in Remote\' action in the extensions view.')
'installWorkspaceRecommendedIcon', 'Icon for the \'Install Workspace Recommended Extensions\' action in the extensions view.')
'configureRecommendedIcon', 'Icon for the \'Configure Recommended Extensions\' action in the extensions view.')
'syncEnabledIcon', 'Icon to indicate that an extension is synced.')
'syncIgnoredIcon', 'Icon to indicate that an extension is ignored when syncing.')
'remoteIcon', 'Icon to indicate that an extension is remote in the extensions view and editor.')
'installCountIcon', 'Icon shown along with the install count in the extensions view and editor.')
'ratingIcon', 'Icon shown along with the rating in the extensions view and editor.')
'verifiedPublisher', 'Icon used for the verified extension publisher in the extensions view and editor.')
'preReleaseIcon', 'Icon shown for extensions having pre-release versions in extensions view and editor.')
'sponsorIcon', 'Icon used for sponsoring extensions in the extensions view and editor.')
'starFullIcon', 'Full star icon used for the rating in the extensions editor.')
'starHalfIcon', 'Half star icon used for the rating in the extensions editor.')
'starEmptyIcon', 'Empty star icon used for the rating in the extensions editor.')
'errorIcon', 'Icon shown with a error message in the extensions editor.')
'warningIcon', 'Icon shown with a warning message in the extensions editor.')
'infoIcon', 'Icon shown with an info message in the extensions editor.')
'trustIcon', 'Icon shown with a workspace trust message in the extension editor.')
'activationtimeIcon', 'Icon shown with a activation time message in the extension editor.')
'manageExtensionsQuickAccessPlaceholder', "Press Enter to manage extensions."
'manageExtensionsHelp', "Manage Extensions"
'extension', "Extension"
'extensions', "Extensions"
{ key: 'miViewExtensions', comment: ['&& denotes a mnemonic'] }, "E&&xtensions"
'extensionsConfigurationTitle', "Extensions"
'all', "All Extensions"
'enabled', "Only Enabled Extensions"
'none', "None"
'extensions.autoUpdate.true', 'Download and install updates automatically for all extensions.'
'extensions.autoUpdate.enabled', 'Download and install updates automatically only for enabled extensions. Disabled extensions will not be updated automatically.'
'extensions.autoUpdate.false', 'Extensions are not automatically updated.'
'extensions.autoUpdate', "Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service."
'extensionsCheckUpdates', "When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service."
'extensionsIgnoreRecommendations', "When enabled, the notifications for extension recommendations will not be shown."
'extensionsShowRecommendationsOnlyOnDemand_Deprecated', "This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default."
'extensionsCloseExtensionDetailsOnViewChange', "When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View."
'handleUriConfirmedExtensions', "When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI."
'extensionsWebWorker.true', "The Web Worker Extension Host will always be launched."
'extensionsWebWorker.false', "The Web Worker Extension Host will never be launched."
'extensionsWebWorker.auto', "The Web Worker Extension Host will be launched when a web extension needs it."
'extensionsWebWorker', "Enable web worker extension host."
'extensions.supportVirtualWorkspaces', "Override the virtual workspaces support of an extension."
'extensions.affinity', "Configure an extension to execute in a different extension host process."
'extensionsUseUtilityProcess', "When enabled, the extension host will be launched using the new UtilityProcess Electron API."
'extensions.supportUntrustedWorkspaces', "Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted."
'extensions.supportUntrustedWorkspaces.true', "Extension will always be enabled."
'extensions.supportUntrustedWorkspaces.false', "Extension will only be enabled only when the workspace is trusted."
'extensions.supportUntrustedWorkspaces.limited', "Extension will always be enabled, and the extension will hide functionality requiring trust."
'extensions.supportUntrustedWorkspaces.supported', "Defines the untrusted workspace support setting for the extension."
'extensions.supportUntrustedWorkspaces.version', "Defines the version of the extension for which the override should be applied. If not specified, the override will be applied independent of the extension version."
'workbench.extensions.installExtension.description', "Install the given extension"
'workbench.extensions.installExtension.arg.decription', "Extension id or VSIX resource uri"
'workbench.extensions.installExtension.option.installOnlyNewlyAddedFromExtensionPackVSIX', "When enabled, VS Code installs only newly added extensions from the extension pack VSIX. This option is considered only while installing a VSIX."
'workbench.extensions.installExtension.option.installPreReleaseVersion', "When enabled, VS Code installs the pre-release version of the extension if available."
'workbench.extensions.installExtension.option.donotSync', "When enabled, VS Code do not sync this extension when Settings Sync is on."
'workbench.extensions.installExtension.option.context', "Context for the installation. This is a JSON object that can be used to pass any information to the installation handlers. i.e. `{skipWalkthrough: true}` will skip opening the walkthrough upon install."
'notFound', "Extension '{0}' not found.", arg)
'workbench.extensions.uninstallExtension.description', "Uninstall the given extension"
'workbench.extensions.uninstallExtension.arg.name', "Id of the extension to uninstall"
'id required', "Extension id required.")
'notInstalled', "Extension '{0}' is not installed. Make sure you use the full extension ID, including the publisher, e.g.: ms-dotnettools.csharp.", id)
'builtin', "Extension '{0}' is a Built-in extension and cannot be installed", id)
'workbench.extensions.search.description', "Search for a specific extension"
'workbench.extensions.search.arg.name', "Query to use in search"
'installExtensionQuickAccessPlaceholder', "Type the name of an extension to install or search."
'installExtensionQuickAccessHelp', "Install or Search Extensions"
{ key: 'miPreferencesExtensions', comment: ['&& denotes a mnemonic'] }, "&&Extensions"
'showExtensions', "Extensions"
'installExtensions', "Install Extensions"
'showRecommendedKeymapExtensionsShort', "Keymaps"
{ key: 'miimportKeyboardShortcutsFrom', comment: ['&& denotes a mnemonic'] }, "&&Migrate Keyboard Shortcuts from..."
'importKeyboardShortcutsFroms', "Migrate Keyboard Shortcuts from..."
'showLanguageExtensionsShort', "Language Extensions"
'checkForUpdates', "Check for Extension Updates"
'noUpdatesAvailable', "All extensions are up to date.")
'configure auto updating extensions', "Auto Update Extensions"
'configureExtensionsAutoUpdate.all', "All Extensions"
'configureExtensionsAutoUpdate.enabled', "Only Enabled Extensions"
'configureExtensionsAutoUpdate.none', "None"
'updateAll', "Update All Extensions"
'disableAutoUpdate', "Disable Auto Update for all extensions"
'enableAutoUpdate', "Enable Auto Update for all extensions"
'enableAll', "Enable All Extensions"
'enableAllWorkspace', "Enable All Extensions for this Workspace"
'disableAll', "Disable All Installed Extensions"
'disableAllWorkspace', "Disable All Installed Extensions for this Workspace"
'InstallFromVSIX', "Install from VSIX..."
'installFromVSIX', "Install from VSIX"
{ key: 'installButton', comment: ['&& denotes a mnemonic'] }, "&&Install")
'installVSIX', "Install Extension VSIX"
'InstallVSIXAction.successReload', "Completed installing {0} extension from VSIX. Please reload Visual Studio Code to enable it.", extension.displayName || extension.name
'InstallVSIXAction.success', "Completed installing {0} extension from VSIX.", extension.displayName || extension.name
'InstallVSIXAction.reloadNow', "Reload Now"
'installWebExtensionFromLocation', "Install Web Extension..."
'installFromLocation', "Install Web Extension from Location"
'install button', "Install"
'installFromLocationPlaceHolder', "Location of the web extension"
'filterExtensions', "Filter Extensions..."
'showFeaturedExtensions', "Show Featured Extensions"
'featured filter', "Featured"
'showPopularExtensions', "Show Popular Extensions"
'most popular filter', "Most Popular"
'showRecommendedExtensions', "Show Recommended Extensions"
'most popular recommended', "Recommended"
'recentlyPublishedExtensions', "Show Recently Published Extensions"
'recently published filter', "Recently Published"
'filter by category', "Category"
'showBuiltInExtensions', "Show Built-in Extensions"
'builtin filter', "Built-in"
'extensionUpdates', "Show Extension Updates"
'extension updates filter', "Updates"
'showWorkspaceUnsupportedExtensions', "Show Extensions Unsupported By Workspace"
'workspace unsupported filter', "Workspace Unsupported"
'showEnabledExtensions', "Show Enabled Extensions"
'enabled filter', "Enabled"
'showDisabledExtensions', "Show Disabled Extensions"
'disabled filter', "Disabled"
'sorty by', "Sort By"
'sort by installs', "Install Count"), precondition: BuiltInExtensionsContext.negate(
'sort by rating', "Rating"), precondition: BuiltInExtensionsContext.negate(
'sort by name', "Name"), precondition: BuiltInExtensionsContext.negate(
'sort by published date', "Published Date"), precondition: BuiltInExtensionsContext.negate(
'sort by update date', "Updated Date"), precondition: ContextKeyExpr.and(SearchMarketplaceExtensionsContext.negate(), RecommendedExtensionsContext.negate(), BuiltInExtensionsContext.negate()
'clearExtensionsSearchResults', "Clear Extensions Search Results"
'refreshExtension', "Refresh"
'installWorkspaceRecommendedExtensions', "Install Workspace Recommended Extensions"
'show pre-release version', "Show Pre-Release Version"
'show released version', "Show Release Version"
'workbench.extensions.action.copyExtension', "Copy"
'extensionInfoName', 'Name: {0}', extension.displayName
'extensionInfoId', 'Id: {0}', extensionId
'extensionInfoDescription', 'Description: {0}', extension.description
'extensionInfoVersion', 'Version: {0}', extension.version
'extensionInfoPublisher', 'Publisher: {0}', extension.publisherDisplayName
'extensionInfoVSMarketplaceLink', 'VS Marketplace Link: {0}', `${extension.url}`
'workbench.extensions.action.copyExtensionId', "Copy Extension ID"
'workbench.extensions.action.configure', "Extension Settings"
'workbench.extensions.action.toggleIgnoreExtension', "Sync This Extension"
'workbench.extensions.action.ignoreRecommendation', "Ignore Recommendation"
'workbench.extensions.action.undoIgnoredRecommendation', "Undo Ignored Recommendation"
'workbench.extensions.action.addExtensionToWorkspaceRecommendations', "Add to Workspace Recommendations"
'workbench.extensions.action.removeExtensionFromWorkspaceRecommendations', "Remove from Workspace Recommendations"
'workbench.extensions.action.addToWorkspaceRecommendations', "Add Extension to Workspace Recommendations"
'extensions', "Extensions"
'workbench.extensions.action.addToWorkspaceFolderRecommendations', "Add Extension to Workspace Folder Recommendations"
'extensions', "Extensions"
'workbench.extensions.action.addToWorkspaceIgnoredRecommendations', "Add Extension to Workspace Ignored Recommendations"
'extensions', "Extensions"
'workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations', "Add Extension to Workspace Folder Ignored Recommendations"
'extensions', "Extensions"
'extensions', "Extensions"
'exampleExtension', "Example"), kind: CompletionItemKind.Value, insertText: text, filterText: text, range }
'debug.terminal.title', "Debug Process"
{ key: 'remote', comment: ['Remote as in remote machine'] }, "Remote"
'installed', "Installed"), server
'select and install local extensions', "Install Local Extensions in '{0}'...", server.label
'install remote in local', "Install Remote Extensions Locally..."
'popularExtensions', "Popular"
'recommendedExtensions', "Recommended"
'enabledExtensions', "Enabled"
'disabledExtensions', "Disabled"
'marketPlace', "Marketplace"
'installed', "Installed"
'recently updated', "Recently Updated"
'enabled', "Enabled"
'disabled', "Disabled"
'availableUpdates', "Available Updates"
'builtin', "Builtin"
'workspaceUnsupported', "Workspace Unsupported"
'workspaceRecommendedExtensions', "Workspace Recommendations"
'otherRecommendedExtensions', "Other Recommendations"
'builtinFeatureExtensions', "Features"
'builtInThemesExtensions', "Themes"
'builtinProgrammingLanguageExtensions', "Programming Languages"
'untrustedUnsupportedExtensions', "Disabled in Restricted Mode"
'untrustedPartiallySupportedExtensions', "Limited in Restricted Mode"
'virtualUnsupportedExtensions', "Disabled in Virtual Workspaces"
'virtualPartiallySupportedExtensions', "Limited in Virtual Workspaces"
'deprecated', "Deprecated"
'searchExtensions', "Search Extensions in Marketplace"
'extensionFoundInSection', "1 extension found in the {0} section.", view.name)
'extensionFound', "1 extension found.")
'extensionsFoundInSection', "{0} extensions found in the {1} section.", count, view.name)
'extensionsFound', "{0} extensions found.", count)
'suggestProxyError', "Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting."
'open user settings', "Open User Settings"), undefined, true, () => this.preferencesService.openUserSettings()
'extensionsToUpdate', '{0} require update', outdated
'extensionsToReload', '{0} require reload', extensionsReloadRequired.length
'malicious warning', "We have uninstalled '{0}' which was reported to be problematic.", e.identifier.id
'reloadNow', "Reload Now"
'Manifest is not found', "Manifest is not found"), this.identifier.id
'postUninstallTooltip', "Please reload Visual Studio Code to complete the uninstallation of this extension."
'postUpdateTooltip', "Please reload Visual Studio Code to enable the updated extension."
'enable locally', "Please reload Visual Studio Code to enable this extension locally."
'enable remote', "Please reload Visual Studio Code to enable this extension in {0}.", this.extensionManagementServerService.remoteExtensionManagementServer?.label
'postEnableTooltip', "Please reload Visual Studio Code to enable this extension."
'postEnableTooltip', "Please reload Visual Studio Code to enable this extension."
'postDisableTooltip', "Please reload Visual Studio Code to disable this extension."
'postEnableTooltip', "Please reload Visual Studio Code to enable this extension."
'postEnableTooltip', "Please reload Visual Studio Code to enable this extension."
'malicious', "This extension is reported to be problematic."))
'uninstallingExtension', 'Uninstalling extension....'
'not found', "Unable to install extension '{0}' because the requested version '{1}' is not found.", extension.gallery!.identifier.id, version)
'installing extension', 'Installing extension....'
'disable all', 'Disable All'
'singleDependentError', "Cannot disable '{0}' extension alone. '{1}' extension depends on this. Do you want to disable all these extensions?", extension.displayName, dependents[0].displayName
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:			return nls.localize('twoDependentsError', "Cannot disable '{0}' extension alone. '{1}' and '{2}' extensions depend on this. Do you want to disable all these extensions?",
src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts:		return nls.localize('multipleDependentsError', "Cannot disable '{0}' extension alone. '{1}', '{2}' and other extensions depend on this. Do you want to disable all these extensions?",
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:						title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:						title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
'languageActivation', "Activated by {1} because you opened a {0} file", language, activationId
src/vs/workbench/contrib/extensions/browser/abstractRuntimeExtensionsEditor.ts:					title = nls.localize({
'unresponsive.title', "Extension has caused the extension host to freeze."
'errors', "{0} uncaught errors", element.status.runtimeErrors.length)}`)
'runtimeExtensions', "Runtime Extensions"
'copy id', "Copy id ({0})", e.element!.description.identifier.value
'disable workspace', "Disable (Workspace)"), undefined, true, () => this._extensionsWorkbenchService.setEnablement(e.element!.marketplaceInfo!, EnablementState.DisabledWorkspace))
'disable', "Disable"), undefined, true, () => this._extensionsWorkbenchService.setEnablement(e.element!.marketplaceInfo!, EnablementState.DisabledGlobally))
'showRuntimeExtensions', "Show Running Extensions"
'extension version', "Extension Version") })
'preRelease', "Pre-Release"
'name', "Extension name"), role: 'heading', tabIndex: 0 })
'preview', "Preview") })
'preview', "Preview"
'builtin', "Built-in"
'publisher', "Publisher"), tabIndex: 0 })
'install count', "Install count"), tabIndex: 0 })
'rating', "Rating"), tabIndex: 0 })
'publisher verified tooltip', "This publisher has verified ownership of {0}", URI.parse(extension.publisherDomain.link).authority
'detailstooltip', "Extension details, rendered from the extension's 'README.md' file")
'contributionstooltip', "Lists contributions to VS Code by this extension")
'changelogtooltip', "Extension update history, rendered from the extension's 'CHANGELOG.md' file")
'dependenciestooltip', "Lists extensions this extension depends on")
'extensionpacktooltip', "Lists extensions those will be installed together with this extension")
'runtimeStatus description', "Extension runtime status")
'noReadme', "No README available."), readmeContainer, WebviewIndex.Readme, token
'extension pack', "Extension Pack ({0})", manifest.extensionPack!.length
'noReadme', "No README available."), readmeContent, WebviewIndex.Readme, token
'categories', "Categories"))
'Marketplace', "Marketplace"), URI.parse(extension.url)]
'repository', "Repository"), URI.parse(extension.repository)]
'license', "License"), URI.parse(extension.licenseUrl)]
'resources', "Extension Resources"))
'Marketplace Info', "More Info"))
'published', "Published")
'last released', "Last released")
'last updated', "Last updated")
'id', "Identifier")
'noChangelog', "No Changelog available."), template.content, WebviewIndex.Changelog, token
'noContributions', "No Contributions"
'noContributions', "No Contributions"
'noDependencies', "No Dependencies"
'startup', "Startup")})` : ''} : ${activationTime}ms`)
'not yet activated', "Not yet activated."))
'uncaught errors', "Uncaught Errors ({0})", extensionStatus.runtimeErrors.length)
'messages', "Messages ({0})", extensionStatus?.messages.length)
'noStatus', "No status available."
'settings', "Settings ({0})", contrib.length)
'setting name', "ID")
'description', "Description")
'default', "Default")
'debuggers', "Debuggers ({0})", contrib.length)
'debugger name', "Name")
'debugger type', "Type")
'viewContainers', "View Containers ({0})", viewContainers.length)
'view container location', "Where"))
'views', "Views ({0})", views.length)
'view location', "Where"))
'localizations', "Localizations ({0})", localizations.length)
'localizations localized language name', "Language Name (Localized)"))
'customEditors', "Custom Editors ({0})", webviewEditors.length)
'customEditors view type', "View Type")
'customEditors priority', "Priority")
'customEditors filenamePattern', "Filename Pattern"))
'codeActions', "Code Actions ({0})", flatActions.length)
'codeActions.title', "Title")
'codeActions.kind', "Kind")
'codeActions.description', "Description")
'codeActions.languages', "Languages"))
'authentication', "Authentication ({0})", authentication.length)
'authentication.label', "Label")
'authentication.id', "ID")
'colorThemes', "Color Themes ({0})", contrib.length)
'iconThemes', "File Icon Themes ({0})", contrib.length)
'productThemes', "Product Icon Themes ({0})", contrib.length)
'colors', "Colors ({0})", colors.length)
'colorId', "ID")
'description', "Description")
'defaultDark', "Dark Default")
'defaultLight', "Light Default")
'defaultHC', "High Contrast Default")
'JSON Validation', "JSON Validation ({0})", contrib.length)
'fileMatch', "File Match")
'schema', "Schema")
'commands', "Commands ({0})", commands.length)
'command name', "ID")
'command title', "Title")
'keyboard shortcuts', "Keyboard Shortcuts")
'menuContexts', "Menu Contexts")
'languages', "Languages ({0})", languages.length)
'language id', "ID")
'language name', "Name")
'file extensions', "File Extensions")
'grammar', "Grammar")
'snippets', "Snippets")
'activation events', "Activation Events ({0})", activationEvents.length)
'Notebooks', "Notebooks ({0})", contrib.length)
'Notebook id', "ID")
'Notebook name', "Name")
'NotebookRenderers', "Notebook Renderers ({0})", contrib.length)
'Notebook renderer name', "Name")
'Notebook mimetypes', "Mimetypes")
'find', "Find"
'find next', "Find Next"
'find previous', "Find Previous"
'dynamicWorkspaceRecommendation', "This extension may interest you because it's popular among users of the {0} repository.", folder.name
'exeBasedRecommendation', "This extension is recommended because of the current workspace configuration"
'expandAbbreviationAction', "Emmet: Expand Abbreviation"
{ key: 'miEmmetExpandAbbreviation', comment: ['&& denotes a mnemonic'] }, "Emmet: E&&xpand Abbreviation"
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:			content: localize(
src/vs/workbench/contrib/editSessions/browser/editSessionsViews.ts:				localize(
'storeEditSessionTitle', 'Store Edit Session'
'workbench.editSessions.actions.resume', "Resume Edit Session"
'workbench.editSessions.actions.store', "Store Edit Session"
'workbench.editSessions.actions.delete', "Delete Edit Session"
'confirm delete', 'Are you sure you want to permanently delete the edit session with ref {0}? You cannot undo this action.', editSessionId
'workbench.editSessions.actions.deleteAll', "Delete All Edit Sessions"
'confirm delete all', 'Are you sure you want to permanently delete all edit sessions? You cannot undo this action.'
'open file', 'Open File'
'configure continue on', 'Configure this preference in settings'
'choose account placeholder', "Select an account to turn on Edit Sessions"
'signed in', "Signed In") }
'others', "Others") }
'sign in using account', "Sign in with {0}", providerName), provider: authenticationProvider }
'continue without', 'Continue without my working changes'
'sign in', 'Turn on Edit Sessions...'
'reset auth.v3', 'Turn off Edit Sessions...'
'sign out of edit sessions clear data prompt.v2', 'Do you want to turn off Edit Sessions?'
'delete all edit sessions.v2', 'Delete all stored data from the cloud.'
'clear data confirm', 'Yes'
'session sync', 'Edit Sessions'
'edit sessions', 'Edit Sessions'
'editSessionViewIcon', 'View icon of the edit sessions view.')
'exeBasedRecommendation', "This extension is recommended because you have {0} installed.", tip.exeFriendlyName
'languageAutoDetected', "Language {0} was automatically detected and set as the language mode.", languageName)
'sideBySideLabels', "{0} - {1}", this.secondary.getName(), this.primary.getName()
'continue working on', "Continue Working On..."
'continue edit session in local folder', "Open In Local Folder"
'show log', 'Show Log'
'resuming edit session window', 'Resuming edit session...')}](command:${showOutputChannelCommand.id}
'autoStoreEditSession', 'Storing current edit session...') })
'check for pending edit sessions', 'Check for pending edit sessions')
'store edit session', 'Storing edit session...'
'show edit session', "Show Edit Sessions"
'store your edit session', 'Storing your edit session...'
'resume latest.v2', "Resume Latest Edit Session"
'store current.v2', "Store Current Edit Session"
'storing edit session', 'Storing edit session...'
'no edit session', 'There are no edit sessions to resume.')
'no edit session content for ref', 'Could not resume edit session contents for ID {0}.', ref)
'client too old', "Please upgrade to a newer version of {0} to resume this edit session.", this.productService.nameLong)
'resume edit session yes', 'Yes'
'resume edit session cancel', 'Cancel'
'resume edit session warning many', 'Resuming your edit session will overwrite the following {0} files. Do you want to proceed?', conflictingChanges.length
'resume edit session warning 1', 'Resuming your edit session will overwrite {0}. Do you want to proceed?', basename(conflictingChanges[0].uri)
'resume failed', "Failed to resume your edit session.")
'editSessionPartialMatch', 'You have a pending edit session for this workspace. Would you like to resume it?'
'resume', 'Resume'), run: () => this.resumeEditSession(ref, false, true
'no edits to store', 'Skipped storing edit session as there are no edits to store.')
'payload too large', 'Your edit session exceeds the size limit and cannot be stored.')
'payload failed', 'Your edit session cannot be stored.')
'continueEditSession.openLocalFolder.title', 'Select a local folder to continue your edit session in'
'continueEditSessionPick.title', "Select option to continue {0} on", `'${workspaceContext}'`
'continueEditSessionItem.openInLocalFolder.v2', 'Open in Local Folder'
'continueEditSessionItem.builtin', 'Built-in'
'continueEditSessionExtPoint', 'Contributes options for continuing the current edit session in a different environment'
'continueEditSessionExtPoint.command', 'Identifier of the command to execute. The command must be declared in the \'commands\'-section and return a URI representing a different environment where the current edit session can be continued.'
'continueEditSessionExtPoint.group', 'Group into which this item belongs.'
'continueEditSessionExtPoint.when', 'Condition which must be true to show this item.'
'autoStore.onShutdown', "Automatically store current edit session on window close."
'autoStore.off', "Never attempt to automatically store an edit session."
'autoStore', "Controls whether to automatically store an available edit session for the current workspace."
'autoResume.onReload', "Automatically resume available edit session on window reload."
'autoResume.off', "Never attempt to resume an edit session."
'autoResume', "Controls whether to automatically resume an available edit session for the current workspace."
'continueOn.promptForAuth', 'Prompt the user to sign in to store edit sessions with Continue Working On.'
'continueOn.off', 'Do not use edit sessions with Continue Working On unless the user has already turned on edit sessions.'
'continueOn', 'Controls whether to prompt the user to store edit sessions when using Continue Working On.'
'continueOn.promptForAuth', 'Prompt the user to sign in to store edit sessions with Continue Working On.'
'continueOn.off', 'Do not use edit sessions with Continue Working On unless the user has already turned on edit sessions.'
'continueOnDeprecated', 'This setting is deprecated in favor of {0}.', '`#workbench.experimental.continueOn#`'
'continueOn', 'Controls whether to prompt the user to store edit sessions when using Continue Working On.'
'editSessionsEnabledDeprecated', "This setting is deprecated as Edit Sessions are no longer experimental. Please see {0} and {1} for configuring behavior related to Edit Sessions.", '`#workbench.editSessions.autoResume#`', '`#workbench.editSessions.continueOn#`'
'autoResume.onReload', "Automatically resume available edit session on window reload."
'autoResume.off', "Never attempt to resume an edit session."
'autoResumeDeprecated', "This setting is deprecated in favor of {0}.", '`#workbench.editSessions.autoResume#`'
'editSessionsPartialMatchesEnabled', "Controls whether to surface edit sessions which partially match the current session."
'sideBySideLabels', "{0} ↔ {1}", originalName, modifiedName
'inspect context keys', "Inspect Context Keys"
'toggle screencast mode', "Toggle Screencast Mode"
{ key: 'logStorage', comment: ['A developer only action to log the contents of the storage for the current window.'] }, "Log Storage Database Contents"
{ key: 'logWorkingCopies', comment: ['A developer only action to log the working copies that exist.'] }, "Log Working Copies"
'screencastModeConfigurationTitle', "Screencast Mode"
'screencastMode.location.verticalPosition', "Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height."
'screencastMode.fontSize', "Controls the font size (in pixels) of the screencast mode keyboard."
'keyboardShortcutsFormat.keys', "Keys."
'keyboardShortcutsFormat.command', "Command title."
'keyboardShortcutsFormat.commandWithGroup', "Command title prefixed by its group."
'keyboardShortcutsFormat.commandAndKeys', "Command title and keys."
'keyboardShortcutsFormat.commandWithGroupAndKeys', "Command title and keys, with the command prefixed by its group."
'screencastMode.keyboardShortcutsFormat', "Controls what is displayed in the keyboard overlay when showing shortcuts."
'screencastMode.onlyKeyboardShortcuts', "Only show keyboard shortcuts in screencast mode."
'screencastMode.keyboardOverlayTimeout', "Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode."
'screencastMode.mouseIndicatorColor', "Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode."
'screencastMode.mouseIndicatorSize', "Controls the size (in pixels) of the mouse indicator in screencast mode."
{ key: 'limitHit', comment: ['amount of errors/warning skipped due to limits'] }, "Not showing {0} further errors and warnings.", diagnostics.length - this._maxDiagnosticsPerFile
'extensionTestError1', "Cannot load test runner.")
'extensionTestError', "Path {0} does not point to a valid extension test runner.", extensionTestsLocationURI.toString())
'addFolderToWorkspace', "Add Folder to Workspace..."
{ key: 'add', comment: ['&& denotes a mnemonic'] }, "&&Add")
'addFolderToWorkspaceTitle', "Add Folder to Workspace"
'workspaceFolderPickerPlaceholder', "Select workspace folder"
'extensionLabel', "{0} (Extension)", this._extension!.displayName || this._extension!.name
'status.extensionMessage', "Extension Status"
'launchFail.idMissingOnExtHost', "Could not find the terminal with id {0} on the extension host", id
'contributes.jsonValidation', 'Contributes json schema configuration.'
'contributes.jsonValidation.fileMatch', 'The file pattern (or an array of patterns) to match, for example "package.json" or "*.launch". Exclusion patterns start with \'!\''
'contributes.jsonValidation.url', 'A schema URL (\'http:\', \'https:\') or relative path to the extension folder (\'./\').'
'invalid.jsonValidation', "'configuration.jsonValidation' must be a array")
'invalid.fileMatch', "'configuration.jsonValidation.fileMatch' must be defined as a string or an array of strings.")
'invalid.url', "'configuration.jsonValidation.url' must be a URL or relative path")
'invalid.path.1', "Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.", configurationExtPoint.name, colorThemeLocation.toString(), extensionLocation.path)
'invalid.url.fileschema', "'configuration.jsonValidation.url' is an invalid relative URL: {0}", e.message)
'invalid.url.schema', "'configuration.jsonValidation.url' must be an absolute URL or start with './'  to reference schemas located in the extension.")
'bracketPairColorizer.notification', "The extension 'Bracket pair Colorizer' got disabled because it was deprecated."
'bracketPairColorizer.notification.action.uninstall', "Uninstall Extension"), undefined, undefined, (
'bracketPairColorizer.notification.action.enableNative', "Enable Native Bracket Pair Colorization"), undefined, undefined, (
'bracketPairColorizer.notification.action.showMoreInfo', "More Info"), undefined, undefined, (
'promptOpenWith.defaultEditor.displayName', "Text Editor"
'builtinProviderDisplayName', "Built-in"
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId))
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', destinationViewId))
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', sourceViewId))
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)
'treeView.notRegistered', 'No tree view with id \'{0}\' registered.', treeViewId)
'treeView.duplicateElement', 'Element with id {0} is already registered', extTreeItem.id)
'extensionSource', "{0} (Extension)", extension.displayName || extension.name
'undo', "Undo"), undefined, true, async () => document.execCommand('undo')
'redo', "Redo"), undefined, true, async () => document.execCommand('redo')
'cut', "Cut"), undefined, true, async () => document.execCommand('cut')
'copy', "Copy"), undefined, true, async () => document.execCommand('copy')
'paste', "Paste"
'selectAll', "Select All"), undefined, true, async () => document.execCommand('selectAll')
'quickOpen', "Go to File..."
'quickOpenWithModes', "Launch Command Center"
'quickNavigateNext', "Navigate Next in Quick Open"), original: 'Navigate Next in Quick Open' }, true, true
'quickNavigatePrevious', "Navigate Previous in Quick Open"), original: 'Navigate Previous in Quick Open' }, false, true
'quickSelectNext', "Select Next in Quick Open"
'quickSelectPrevious', "Select Previous in Quick Open"
'file', "File"
'remove', "Remove from Recently Opened"
'dirtyRecentlyOpenedFolder', "Folder With Unsaved Files"
'dirtyRecentlyOpenedWorkspace', "Workspace With Unsaved Files"
'folders', "folders"
'files', "files"
'openRecentPlaceholder', "Select to open (hold Ctrl-key to force new window or Alt-key for same window)"
'dirtyFolder', "Folder with Unsaved Files"
'dirtyFolderConfirm', "Do you want to open the folder to review the unsaved files?"
'dirtyFolderConfirmDetail', "Folders with unsaved files cannot be removed until all unsaved files have been saved or reverted."
'recentDirtyFolderAriaLabel', "{0}, folder with unsaved changes", name
'openRecent', "Open Recent..."
{ key: 'miMore', comment: ['&& denotes a mnemonic'] }, "&&More..."
'quickOpenRecent', "Quick Open Recent..."
'toggleFullScreen', "Toggle Full Screen"
{ key: 'miToggleFullScreen', comment: ['&& denotes a mnemonic'] }, "&&Full Screen"
'reloadWindow', "Reload Window"
'about', "About"
{ key: 'miAbout', comment: ['&& denotes a mnemonic'] }, "&&About"
'newWindow', "New Window"
{ key: 'miNewWindow', comment: ['&& denotes a mnemonic'] }, "New &&Window"
'blur', "Remove keyboard focus from focused element"
'miConfirmClose', "Confirm Before Close"
{ key: 'miOpenRecent', comment: ['&& denotes a mnemonic'] }, "Open &&Recent"
'keybindingsReference', "Keyboard Shortcuts Reference"
{ key: 'miKeyboardShortcuts', comment: ['&& denotes a mnemonic'] }, "&&Keyboard Shortcuts Reference"
'openVideoTutorialsUrl', "Video Tutorials"
{ key: 'miVideoTutorials', comment: ['&& denotes a mnemonic'] }, "&&Video Tutorials"
'openTipsAndTricksUrl', "Tips and Tricks"
{ key: 'miTipsAndTricks', comment: ['&& denotes a mnemonic'] }, "Tips and Tri&&cks"
'openDocumentationUrl', "Documentation"
{ key: 'miDocumentation', comment: ['&& denotes a mnemonic'] }, "&&Documentation"
'newsletterSignup', "Signup for the VS Code Newsletter"
'openTwitterUrl', "Join Us on Twitter"
{ key: 'miTwitter', comment: ['&& denotes a mnemonic'] }, "&&Join Us on Twitter"
'openUserVoiceUrl', "Search Feature Requests"
{ key: 'miUserVoice', comment: ['&& denotes a mnemonic'] }, "&&Search Feature Requests"
'openLicenseUrl', "View License"
{ key: 'miLicense', comment: ['&& denotes a mnemonic'] }, "View &&License"
'openPrivacyStatement', "Privacy Statement"
{ key: 'miPrivacyStatement', comment: ['&& denotes a mnemonic'] }, "Privac&&y Statement"
'menuBarIcon', "Represents the menu bar")
'activityBarLeft', "Represents the activity bar in the left position")
'activityBarRight', "Represents the activity bar in the right position")
'panelLeft', "Represents a side bar in the left position")
'panelLeftOff', "Represents a side bar in the left position toggled off")
'panelRight', "Represents side bar in the right position")
'panelRightOff', "Represents side bar in the right position toggled off")
'panelBottom', "Represents the bottom panel")
'statusBarIcon', "Represents the status bar")
'panelBottomLeft', "Represents the bottom panel alignment set to the left")
'panelBottomRight', "Represents the bottom panel alignment set to the right")
'panelBottomCenter', "Represents the bottom panel alignment set to the center")
'panelBottomJustify', "Represents the bottom panel alignment set to justified")
'fullScreenIcon', "Represents full screen")
'centerLayoutIcon', "Represents centered layout mode")
'zenModeIcon', "Represents zen mode")
'closeSidebar', "Close Primary Side Bar"
'toggleActivityBar', "Toggle Activity Bar Visibility"
{ key: 'miActivityBar', comment: ['&& denotes a mnemonic'] }, "&&Activity Bar"
'toggleCenteredLayout', "Toggle Centered Layout"
{ key: 'miToggleCenteredLayout', comment: ['&& denotes a mnemonic'] }, "&&Centered Layout"
'moveSidebarRight', "Move Primary Side Bar Right"
'moveSidebarLeft', "Move Primary Side Bar Left"
'toggleSidebarPosition', "Toggle Primary Side Bar Position"
'moveSidebarLeft', "Move Primary Side Bar Left"
'toggleSidebarPosition', "Toggle Primary Side Bar Position"
'cofigureLayoutIcon', 'Icon represents workbench layout configuration.')
'configureLayout', "Configure Layout"
'move side bar right', "Move Primary Side Bar Right"
'move sidebar right', "Move Primary Side Bar Right"
'move sidebar left', "Move Primary Side Bar Left"
'move sidebar left', "Move Primary Side Bar Left"
'move second sidebar left', "Move Secondary Side Bar Left"
'move second sidebar right', "Move Secondary Side Bar Right"
{ key: 'miMoveSidebarRight', comment: ['&& denotes a mnemonic'] }, "&&Move Primary Side Bar Right"
{ key: 'miMoveSidebarLeft', comment: ['&& denotes a mnemonic'] }, "&&Move Primary Side Bar Left"
'toggleEditor', "Toggle Editor Area Visibility"
{ key: 'miShowEditorArea', comment: ['&& denotes a mnemonic'] }, "Show &&Editor Area"
{ key: 'miAppearance', comment: ['&& denotes a mnemonic'] }, "&&Appearance"
'toggleSidebar', "Toggle Primary Side Bar Visibility"
'compositePart.hideSideBarLabel', "Hide Primary Side Bar"
'compositePart.hideSideBarLabel', "Hide Primary Side Bar"
{ key: 'miShowSidebar', comment: ['&& denotes a mnemonic'] }, "&&Primary Side Bar"
'miSidebarNoMnnemonic', "Primary Side Bar"
'toggleSideBar', "Toggle Primary Side Bar"
'toggleSideBar', "Toggle Primary Side Bar"
'toggleStatusbar', "Toggle Status Bar Visibility"
{ key: 'miStatusbar', comment: ['&& denotes a mnemonic'] }, "S&&tatus Bar"
'toggleTabs', "Toggle Tab Visibility"
'toggleZenMode', "Toggle Zen Mode"
'miToggleZenMode', "Zen Mode"
'toggleMenuBar', "Toggle Menu Bar"
{ key: 'miMenuBar', comment: ['&& denotes a mnemonic'] }, "Menu &&Bar"
'miMenuBarNoMnemonic', "Menu Bar"
'resetViewLocations', "Reset View Locations"
'moveView', "Move View"
'sidebarContainer', "Side Bar / {0}", containerModel.title
'panelContainer', "Panel / {0}", containerModel.title
'secondarySideBarContainer', "Secondary Side Bar / {0}", containerModel.title
'moveFocusedView.selectView', "Select a View to Move"
'moveFocusedView', "Move Focused View"
'moveFocusedView.error.noFocusedView', "There is no view currently focused.")
'moveFocusedView.error.nonMovableView', "The currently focused view is not movable.")
'moveFocusedView.selectDestination', "Select a Destination for the View"
{ key: 'moveFocusedView.title', comment: ['{0} indicates the title of the view the user has selected to move.'] }, "View: Move {0}", viewDescriptor.name
{ key: 'moveFocusedView.newContainerInPanel', comment: ['Creates a new top-level tab in the panel.'] }, "New Panel Entry"
'moveFocusedView.newContainerInSidebar', "New Side Bar Entry"
'moveFocusedView.newContainerInSidePanel', "New Secondary Side Bar Entry"
'sidebar', "Side Bar"
'panel', "Panel"
'secondarySideBar', "Secondary Side Bar"
'resetFocusedViewLocation', "Reset Focused View Location"
'resetFocusedView.error.noFocusedView', "There is no view currently focused.")
'increaseViewSize', "Increase Current View Size"
'increaseEditorWidth', "Increase Editor Width"
'increaseEditorHeight', "Increase Editor Height"
'decreaseViewSize', "Decrease Current View Size"
'decreaseEditorWidth', "Decrease Editor Width"
'decreaseEditorHeight', "Decrease Editor Height"
'visible', "Visible"
'hidden', "Hidden"
'active', "Active"
'menuBar', "Menu Bar"), menubarIcon)
'activityBar', "Activity Bar"), { whenA: ContextKeyExpr.equals('config.workbench.sideBar.location', 'left'), iconA: activityBarLeftIcon, iconB: activityBarRightIcon }
'sideBar', "Primary Side Bar"), { whenA: ContextKeyExpr.equals('config.workbench.sideBar.location', 'left'), iconA: panelLeftIcon, iconB: panelRightIcon }
'secondarySideBar', "Secondary Side Bar"), { whenA: ContextKeyExpr.equals('config.workbench.sideBar.location', 'left'), iconA: panelRightIcon, iconB: panelLeftIcon }
'panel', "Panel"), panelIcon
'statusBar', "Status Bar"), statusBarIcon
'leftSideBar', "Left"), panelLeftIcon
'rightSideBar', "Right"), panelRightIcon
'leftPanel', "Left"), panelAlignmentLeftIcon
'rightPanel', "Right"), panelAlignmentRightIcon
'centerPanel', "Center"), panelAlignmentCenterIcon
'justifyPanel', "Justify"), panelAlignmentJustifyIcon
'fullscreen', "Full Screen"), fullscreenIcon
'zenMode', "Zen Mode"), zenModeIcon
'centeredLayout', "Centered Layout"), centerLayoutIcon
'customizeLayout', "Customize Layout..."
'toggleVisibility', "Visibility"
'sideBarPosition', "Primary Side Bar Position"
'panelAlignment', "Panel Alignment"
'layoutModes', "Modes"
'customizeLayoutQuickPickTitle', "Customize Layout"
'close', "Close"
'workspaces', "Workspaces"
'filesCategory', "File"
'openFile', "Open File..."
'openFolder', "Open Folder..."
'openFolder', "Open Folder..."
'openFileFolder', "Open..."
'openWorkspaceAction', "Open Workspace from File..."
'closeWorkspace', "Close Workspace"
'openWorkspaceConfigFile', "Open Workspace Configuration File"
'globalRemoveFolderFromWorkspace', "Remove Folder from Workspace..."
'saveWorkspaceAsAction', "Save Workspace As..."
'duplicateWorkspaceInNewWindow', "Duplicate As Workspace in New Window"
{ key: 'miOpenFile', comment: ['&& denotes a mnemonic'] }, "&&Open File..."
{ key: 'miOpenFolder', comment: ['&& denotes a mnemonic'] }, "Open &&Folder..."
{ key: 'miOpenFolder', comment: ['&& denotes a mnemonic'] }, "Open &&Folder..."
{ key: 'miOpen', comment: ['&& denotes a mnemonic'] }, "&&Open..."
{ key: 'miOpenWorkspace', comment: ['&& denotes a mnemonic'] }, "Open Wor&&kspace from File..."
{ key: 'miAddFolderToWorkspace', comment: ['&& denotes a mnemonic'] }, "A&&dd Folder to Workspace..."
'miSaveWorkspaceAs', "Save Workspace As..."
'duplicateWorkspace', "Duplicate Workspace"
{ key: 'miCloseFolder', comment: ['&& denotes a mnemonic'] }, "Close &&Folder"
{ key: 'miCloseWorkspace', comment: ['&& denotes a mnemonic'] }, "Close &&Workspace"
'navigateLeft', "Navigate to the View on the Left"
'navigateRight', "Navigate to the View on the Right"
'navigateUp', "Navigate to the View Above"
'navigateDown', "Navigate to the View Below"
'focusNextPart', "Focus Next Part"
'focusPreviousPart', "Focus Previous Part"
'timeout', "Timeout after {0} ms for '{1}'", timeout, command
'invalidVariableAttributes', "Invalid variable attributes"), 0, 0, undefined, { kind: 'virtual' }, undefined, undefined, false
'startDebugFirst', "Please start a debug session to evaluate expressions"
'notAvailable', "not available"
'paused', "Paused")
{ key: 'running', comment: ['indicates state'] }, "Running"
'breakpointDirtydHover', "Unverified breakpoint. File is modified, please restart debug session."
'disassemblyInputName', "Disassembly"
'debugAdapterBinNotFound', "Debug adapter executable '{0}' does not exist.", command)
src/vs/workbench/contrib/debug/node/debugAdapter.ts:				throw new Error(nls.localize({ key: 'debugAdapterCannotDetermineExecutable', comment: ['Adapter executable file not found'] },
'unableToLaunchDebugAdapter', "Unable to launch debug adapter from '{0}'.", args[0])
'unableToLaunchDebugAdapterNoArgs', "Unable to launch debug adapter.")
'cannot.find.da', "Cannot find debug adapter for type '{0}'.", this.type)
'launch.config.comment1', "Use IntelliSense to learn about possible attributes."
'launch.config.comment2', "Hover to view descriptions of existing attributes."
'launch.config.comment3', "For more information, visit: {0}", 'https://go.microsoft.com/fwlink/?linkid=830387'
'debugType', "Type of configuration."
'debugTypeNotRecognised', "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled."
'node2NotSupported', "\"node2\" is no longer supported, use \"node\" instead and set the \"protocol\" attribute to \"inspector\"."
'debugRequest', "Request type of configuration. Can be \"launch\" or \"attach\"."
'debugWindowsConfiguration', "Windows specific launch configuration attributes."
'debugOSXConfiguration', "OS X specific launch configuration attributes."
'debugLinuxConfiguration', "Linux specific launch configuration attributes."
'vscode.extension.contributes.debuggers', 'Contributes debug adapters.'
'vscode.extension.contributes.debuggers.type', "Unique identifier for this debug adapter."
'vscode.extension.contributes.debuggers.label', "Display name for this debug adapter."
'vscode.extension.contributes.debuggers.program', "Path to the debug adapter program. Path is either absolute or relative to the extension folder."
'vscode.extension.contributes.debuggers.args', "Optional arguments to pass to the adapter."
'vscode.extension.contributes.debuggers.runtime', "Optional runtime in case the program attribute is not an executable but requires a runtime."
'vscode.extension.contributes.debuggers.runtimeArgs', "Optional runtime arguments."
'vscode.extension.contributes.debuggers.variables', "Mapping from interactive variables (e.g. ${action.pickProcess}) in `launch.json` to a command."
'vscode.extension.contributes.debuggers.initialConfigurations', "Configurations for generating the initial \'launch.json\'."
'vscode.extension.contributes.debuggers.languages', "List of languages for which the debug extension could be considered the \"default debugger\"."
'vscode.extension.contributes.debuggers.configurationSnippets', "Snippets for adding new configurations in \'launch.json\'."
'vscode.extension.contributes.debuggers.configurationAttributes', "JSON schema configurations for validating \'launch.json\'."
'vscode.extension.contributes.debuggers.when', "Condition which must be true to enable this type of debugger. Consider using 'shellExecutionSupported', 'virtualWorkspace', 'resourceScheme' or an extension-defined context key as appropriate for this."
'vscode.extension.contributes.debuggers.deprecated', "Optional message to mark this debug type as being deprecated."
'vscode.extension.contributes.debuggers.windows', "Windows specific settings."
'vscode.extension.contributes.debuggers.windows.runtime', "Runtime used for Windows."
'vscode.extension.contributes.debuggers.osx', "macOS specific settings."
'vscode.extension.contributes.debuggers.osx.runtime', "Runtime used for macOS."
'vscode.extension.contributes.debuggers.linux', "Linux specific settings."
'vscode.extension.contributes.debuggers.linux.runtime', "Runtime used for Linux."
'vscode.extension.contributes.debuggers.strings', "UI strings contributed by this debug adapter."
'vscode.extension.contributes.debuggers.strings.unverifiedBreakpoints', "When there are unverified breakpoints in a language supported by this debug adapter, this message will appear on the breakpoint hover and in the breakpoints view. Markdown and command links are supported."
'vscode.extension.contributes.breakpoints', 'Contributes breakpoints.'
'vscode.extension.contributes.breakpoints.language', "Allow breakpoints for this language."
'vscode.extension.contributes.breakpoints.when', "Condition which must be true to enable breakpoints in this language. Consider matching this to the debugger when clause as appropriate."
'presentation', "Presentation options on how to show this configuration in the debug configuration dropdown and the command palette."
'presentation.hidden', "Controls if this configuration should be shown in the configuration dropdown and the command palette."
'presentation.group', "Group that this configuration belongs to. Used for grouping and sorting in the configuration dropdown and the command palette."
'presentation.order', "Order of this configuration within a group. Used for grouping and sorting in the configuration dropdown and the command palette."
'app.launch.json.title', "Launch"
'app.launch.json.version', "Version of this file format."
'app.launch.json.configurations', "List of configurations. Add new configurations or edit existing ones by using IntelliSense."
'app.launch.json.compounds', "List of compounds. Each compound references multiple configurations which will get launched together."
'app.launch.json.compound.name', "Name of compound. Appears in the launch configuration drop down menu."
'useUniqueNames', "Please use unique configuration names."
'app.launch.json.compound.name', "Name of compound. Appears in the launch configuration drop down menu."
'app.launch.json.compound.folder', "Name of folder in which the compound is located."
'app.launch.json.compounds.configurations', "Names of configurations that will be started as part of this compound."
'app.launch.json.compound.stopAll', "Controls whether manually terminating one session will stop all of the compound sessions."
'compoundPrelaunchTask', "Task to run before any of the compound configurations start."
'moveFocusedView.selectView', "Search loaded scripts by name"
'consoleCleared', "Console was cleared"), severity.Ignore
'updateerror', "Extension '{0}' failed to update workspace folders: {1}", extName, error.toString()), options, []
'debugType', "Debug type of the active debug session. For example 'python'.") }
'debugConfigurationType', "Debug type of the selected launch configuration. For example 'python'.") }
'debugState', "State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'.") }
'debugUX', "Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet.") }
'inDebugMode', "True when debugging, false otherwise.") }
'inDebugRepl', "True when focus is in the debug console, false otherwise.") }
'breakpointWidgetVisibile', "True when breakpoint editor zone widget is visible, false otherwise.") }
'inBreakpointWidget', "True when focus is in the breakpoint editor zone widget, false otherwise.") }
'breakpointsFocused', "True when the BREAKPOINTS view is focused, false otherwise.") }
'watchExpressionsFocused', "True when the WATCH view is focused, false otherwsie.") }
'watchExpressionsExist', "True when at least one watch expression exists, false otherwise.") }
'variablesFocused', "True when the VARIABLES views is focused, false otherwsie") }
'expressionSelected', "True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise.") }
'breakpointInputFocused', "True when the input box has focus in the BREAKPOINTS view.") }
'callStackItemType', "Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'") }
'callStackSessionIsAttach', "True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view.") }
'callStackItemStopped', "True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view.") }
'callStackSessionHasOneThread', "True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view.") }
'watchItemType', "Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'") }
'canViewMemory', "Indicates whether the item in the view has an associated memory refrence.") }
'breakpointItemType', "Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'") }
'breakpointSupportsCondition', "True when the focused breakpoint supports conditions.") }
'loadedScriptsSupported', "True when the focused sessions supports the LOADED SCRIPTS view") }
'loadedScriptsItemType', "Represents the item type of the focused element in the LOADED SCRIPTS view.") }
'focusedSessionIsAttach', "True when the focused session is 'attach'.") }
'stepBackSupported', "True when the focused session supports 'stepBack' requests.") }
'restartFrameSupported', "True when the focused session supports 'restartFrame' requests.") }
'stackFrameSupportsRestart', "True when the focused stack frame suppots 'restartFrame'.") }
'jumpToCursorSupported', "True when the focused session supports 'jumpToCursor' request.") }
'stepIntoTargetsSupported', "True when the focused session supports 'stepIntoTargets' request.") }
'breakpointsExist', "True when at least one breakpoint exists.") }
'debuggersAvailable', "True when there is at least one debug extensions active.") }
'debugExtensionsAvailable', "True when there is at least one debug extension installed and enabled.") }
'debugProtocolVariableMenuContext', "Represents the context the debug adapter sets on the focused variable in the VARIABLES view.") }
'debugSetVariableSupported', "True when the focused session supports 'setVariable' request.") }
'debugSetExpressionSupported', "True when the focused session supports 'setExpression' request.") }
'breakWhenValueChangesSupported', "True when the focused session supports to break when value changes.") }
'breakWhenValueIsAccessedSupported', "True when the focused breakpoint supports to break when value is accessed.") }
'breakWhenValueIsReadSupported', "True when the focused breakpoint supports to break when value is read.") }
'terminateDebuggeeSupported', "True when the focused session supports the terminate debuggee capability.") }
'suspendDebuggeeSupported', "True when the focused session supports the suspend debuggee capability.") }
'variableEvaluateNamePresent', "True when the focused variable has an 'evalauteName' field set.") }
'variableIsReadonly', "True when the focused variable is readonly.") }
'exceptionWidgetVisible', "True when the exception widget is visible.") }
'multiSessionRepl', "True when there is more than 1 debug console.") }
'multiSessionDebug', "True when there is more than 1 active debug session.") }
'disassembleRequestSupported', "True when the focused sessions supports disassemble request.") }
'disassemblyViewFocus', "True when the Disassembly View is focused.") }
'languageSupportsDisassembleRequest', "True when the language in the current editor supports disassemble request.") }
'focusedStackFrameHasInstructionReference', "True when the focused stack frame has instruction pointer reference.") }
'debuggerDisabled', "Configured debug type '{0}' is installed but not supported in this environment.", debugType
'internalConsoleOptions', "Controls when the internal debug console should open."
'vscode.extension.contributes.configuration.title', 'A title for the current category of settings. This label will be rendered in the Settings editor as a subheading. If the title is the same as the extension display name, then the category will be grouped under the main extension heading.'
'vscode.extension.contributes.configuration.order', 'When specified, gives the order of this category of settings relative to other categories.'
'vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'
'vscode.extension.contributes.configuration.property.empty', 'Property should not be empty.'
'vscode.extension.contributes.configuration.properties.schema', 'Schema of the configuration property.'
'scope.application.description', "Configuration that can be configured only in the user settings."
'scope.machine.description', "Configuration that can be configured only in the user settings or only in the remote settings."
'scope.window.description', "Configuration that can be configured in the user, remote or workspace settings."
'scope.resource.description', "Configuration that can be configured in the user, remote, workspace or folder settings."
'scope.language-overridable.description', "Resource configuration that can be configured in language specific settings."
'scope.machine-overridable.description', "Machine configuration that can be configured also in workspace or folder settings."
'scope.description', "Scope in which the configuration is applicable. Available scopes are `application`, `machine`, `window`, `resource`, and `machine-overridable`."
'scope.enumDescriptions', 'Descriptions for enum values'
'scope.markdownEnumDescriptions', 'Descriptions for enum values in the markdown format.'
'scope.enumItemLabels', 'Labels for enum values to be displayed in the Settings editor. When specified, the {0} values still show after the labels, but less prominently.', '`enum`'
'scope.markdownDescription', 'The description in the markdown format.'
'scope.deprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation.'
'scope.markdownDeprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation in the markdown format.'
'scope.singlelineText.description', 'The value will be shown in an inputbox.'
'scope.multilineText.description', 'The value will be shown in a textarea.'
'scope.editPresentation', 'When specified, controls the presentation format of the string setting.'
'scope.order', 'When specified, gives the order of this setting relative to other settings within the same category. Settings with an order property will be placed before settings without this property set.'
'config.property.defaultConfiguration.warning', "Cannot register configuration defaults for '{0}'. Only defaults for machine-overridable, window, resource and language overridable scoped settings are supported.", key)
'vscode.extension.contributes.configuration', 'Contributes configuration settings.'
'invalid.title', "'configuration.title' must be a string")
'invalid.properties', "'configuration.properties' must be an object")
'config.property.duplicate', "Cannot register '{0}'. This property is already registered.", key)
'invalid.property', "configuration.properties property '{0}' must be an object", key)
'invalid.allOf', "'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point.")
'workspaceConfig.folders.description', "List of folders to be loaded in the workspace."
'workspaceConfig.path.description', "A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file."
'workspaceConfig.name.description', "An optional name for the folder. "
'workspaceConfig.uri.description', "URI of the folder"
'workspaceConfig.name.description', "An optional name for the folder. "
'workspaceConfig.settings.description', "Workspace settings"
'workspaceConfig.launch.description', "Workspace launch configurations"
'workspaceConfig.tasks.description', "Workspace task configurations"
'workspaceConfig.extensions.description', "Workspace extensions"
'workspaceConfig.remoteAuthority', "The remote server where the workspace is located."
'workspaceConfig.transient', "A transient workspace will disappear when restarting or reloading."
'unknownWorkspaceProperty', "Unknown workspace configuration property"
'debug.debugSessionCloseConfirmationSingular', "There is an active debug session, are you sure you want to stop it?"
'debug.debugSessionCloseConfirmationPlural', "There are active debug sessions, are you sure you want to stop them?"
'debug.stop', "Stop Debugging"
'unable', "Unable to resolve the resource without a debug session"))
'canNotResolveSourceWithError', "Could not load source '{0}': {1}.", resource.path, errMsg
'canNotResolveSource', "Could not load source '{0}'.", resource.path
'noTrustedExtensions', "This account has not been used by any extensions.")
'manageTrustedExtensions.cancel', 'Cancel'
{ key: 'accountLastUsedDate', comment: ['The placeholder {0} is a string with time information, such as "3 days ago"'] }, "Last used this account {0}", fromNow(usage.lastUsed, true)
'notUsed', "Has not used this account"
'manageTrustedExtensions', "Manage Trusted Extensions"
'manageExtensions', "Choose which extensions can access this account"
'signOutMessage', "The account '{0}' has been used by: \n\n{1}\n\n Sign out from these extensions?", accountName, accountUsages.map(usage => usage.extensionName).join('\n')
'signOutMessageSimple', "Sign out of '{0}'?", accountName
'signOut', "Sign Out"
'cancel', "Cancel"
'signedOut', "Successfully signed out.")
'confirmRelogin', "The extension '{0}' wants you to sign in again using {1}.", extensionName, providerName
'confirmLogin', "The extension '{0}' wants to sign in using {1}.", extensionName, providerName
'cancel', "Cancel"
'debugCategory', "Debug"
'startDebugPlaceholder', "Type the name of a launch configuration to run."
'startDebuggingHelp', "Start Debugging"
'tasksQuickAccessPlaceholder', "Type the name of a debug console to open."
'tasksQuickAccessHelp', "Show All Debug Consoles"
'terminateThread', "Terminate Thread"), original: 'Terminate Thread' }, CONTEXT_IN_DEBUG_MODE
{ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, 'Focus on Debug Console View'), original: 'Focus on Debug Console View' }
'jumpToCursor', "Jump to Cursor"), original: 'Jump to Cursor' }, CONTEXT_JUMP_TO_CURSOR_SUPPORTED
'SetNextStatement', "Set Next Statement"), original: 'Set Next Statement' }, CONTEXT_JUMP_TO_CURSOR_SUPPORTED
'inlineBreakpoint', "Inline Breakpoint"), original: 'Inline Breakpoint' }
'terminateThread', "Terminate Thread"), 10, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), undefined, 'termination'
'restartFrame', "Restart Frame"), 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), CONTEXT_RESTART_FRAME_SUPPORTED), CONTEXT_STACK_FRAME_SUPPORTS_RESTART
'copyStackTrace', "Copy Call Stack"), 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), undefined, '3_modification'
'viewMemory', "View Binary Data"), 15, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_IN_DEBUG_MODE, 'inline', icons.debugInspectMemory
'setValue', "Set Value"), 10, ContextKeyExpr.or(CONTEXT_SET_VARIABLE_SUPPORTED, ContextKeyExpr.and(CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, CONTEXT_SET_EXPRESSION_SUPPORTED)), CONTEXT_VARIABLE_IS_READONLY.toNegated(), '3_modification'
'copyValue', "Copy Value"), 10, undefined, undefined, '5_cutcopypaste'
'copyAsExpression', "Copy as Expression"), 20, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, '5_cutcopypaste'
'addToWatchExpressions', "Add to Watch"), 100, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, 'z_commands'
'breakWhenValueIsRead', "Break on Value Read"), 200, CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED, undefined, 'z_commands'
'breakWhenValueChanges', "Break on Value Change"), 210, CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED, undefined, 'z_commands'
'breakWhenValueIsAccessed', "Break on Value Access"), 220, CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED, undefined, 'z_commands'
'editWatchExpression', "Edit Expression"), 20, CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), undefined, '3_modification'
'setValue', "Set Value"), 30, ContextKeyExpr.or(ContextKeyExpr.and(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), CONTEXT_SET_EXPRESSION_SUPPORTED), ContextKeyExpr.and(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable'), CONTEXT_SET_VARIABLE_SUPPORTED)), CONTEXT_VARIABLE_IS_READONLY.toNegated(), '3_modification'
'copyValue', "Copy Value"), 40, ContextKeyExpr.or(CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable')), CONTEXT_IN_DEBUG_MODE, '3_modification'
'viewMemory', "View Binary Data"), 50, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_IN_DEBUG_MODE, '3_modification'
'removeWatchExpression', "Remove Expression"), 10, CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression'), undefined, 'inline', icons.watchExpressionRemove
'run', "Run or Debug..."), original: 'Run or Debug...', }, icon: icons.debugRun, group: 'navigation', order: -1 }
{ key: 'mRun', comment: ['&& denotes a mnemonic'] }, "&&Run"
{ key: 'miStartDebugging', comment: ['&& denotes a mnemonic'] }, "&&Start Debugging"
{ key: 'miRun', comment: ['&& denotes a mnemonic'] }, "Run &&Without Debugging"
{ key: 'miStopDebugging', comment: ['&& denotes a mnemonic'] }, "&&Stop Debugging"
{ key: 'miRestart Debugging', comment: ['&& denotes a mnemonic'] }, "&&Restart Debugging"
{ key: 'miAddConfiguration', comment: ['&& denotes a mnemonic'] }, "A&&dd Configuration..."
{ key: 'miStepOver', comment: ['&& denotes a mnemonic'] }, "Step &&Over"
{ key: 'miStepInto', comment: ['&& denotes a mnemonic'] }, "Step &&Into"
{ key: 'miStepOut', comment: ['&& denotes a mnemonic'] }, "Step O&&ut"
{ key: 'miContinue', comment: ['&& denotes a mnemonic'] }, "&&Continue"
{ key: 'miInlineBreakpoint', comment: ['&& denotes a mnemonic'] }, "Inline Breakp&&oint"
{ key: 'miNewBreakpoint', comment: ['&& denotes a mnemonic'] }, "&&New Breakpoint"
{ key: 'miInstallAdditionalDebuggers', comment: ['&& denotes a mnemonic'] }, "&&Install Additional Debuggers..."
{ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'
{ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'
{ key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] }, "De&&bug Console"
'run and debug', "Run and Debug"
{ key: 'miViewRun', comment: ['&& denotes a mnemonic'] }, "&&Run"
'variables', "Variables"), containerIcon: icons.variablesViewIcon, ctorDescriptor: new SyncDescriptor(VariablesView), order: 10, weight: 40, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusVariablesView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer
'watch', "Watch"), containerIcon: icons.watchViewIcon, ctorDescriptor: new SyncDescriptor(WatchExpressionsView), order: 20, weight: 10, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusWatchView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer
'callStack', "Call Stack"), containerIcon: icons.callStackViewIcon, ctorDescriptor: new SyncDescriptor(CallStackView), order: 30, weight: 30, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusCallStackView' }, when: CONTEXT_DEBUG_UX.isEqualTo('default') }], viewContainer
'breakpoints', "Breakpoints"), containerIcon: icons.breakpointsViewIcon, ctorDescriptor: new SyncDescriptor(BreakpointsView), order: 40, weight: 20, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusBreakpointsView' }, when: ContextKeyExpr.or(CONTEXT_BREAKPOINTS_EXIST, CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer
'loadedScripts', "Loaded Scripts"), containerIcon: icons.loadedScriptsViewIcon, ctorDescriptor: new SyncDescriptor(LoadedScriptsView), order: 35, weight: 5, canToggleVisibility: true, canMoveView: true, collapsed: true, when: ContextKeyExpr.and(CONTEXT_LOADED_SCRIPTS_SUPPORTED, CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer
'disassembly', "Disassembly")
'debugConfigurationTitle', "Debug"
{ comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' }, "Allow setting breakpoints in any file."
{ comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' }, "Automatically open the explorer view at the end of a debug session."
{ comment: ['This is the description for a setting'], key: 'inlineValues' }, "Show variable values inline in editor while debugging."
'inlineValues.on', 'Always show variable values inline in editor while debugging.'
'inlineValues.off', 'Never show variable values inline in editor while debugging.'
'inlineValues.focusNoScroll', 'Show variable values inline in editor while debugging when the language supports inline value locations.'
{ comment: ['This is the description for a setting'], key: 'toolBarLocation' }, "Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`."
'onFirstSessionStart', "Show debug in status bar only after debug was started for the first time"
{ comment: ['This is the description for a setting'], key: 'showInStatusBar' }, "Controls when the debug status bar should be visible."
'debug.console.closeOnEnd', "Controls if the debug console should be automatically closed when the debug session ends."
{ comment: ['This is the description for a setting'], key: 'debug.terminal.clearBeforeReusing' }, "Before starting a new debug session in an integrated or external terminal, clear the terminal."
'openDebug', "Controls when the debug view should open."
{ comment: ['This is the description for a setting'], key: 'showSubSessionsInToolBar' }, "Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session."
'debug.console.fontSize', "Controls the font size in pixels in the debug console."
'debug.console.fontFamily', "Controls the font family in the debug console."
'debug.console.lineHeight', "Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size."
'debug.console.wordWrap', "Controls if the lines should wrap in the debug console."
'debug.console.historySuggestions', "Controls if the debug console should suggest previously typed input."
'debug.console.collapseIdenticalLines', "Controls if the debug console should collapse identical lines and show a number of occurrences with a badge."
'debug.console.acceptSuggestionOnEnter', "Controls whether suggestions should be accepted on enter in the debug console. enter is also used to evaluate whatever is typed in the debug console."
{ comment: ['This is the description for a setting'], key: 'launch' }, "Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces."
'debug.focusWindowOnBreak', "Controls whether the workbench window should be focused when the debugger breaks."
'debug.focusEditorOnBreak', "Controls whether the editor should be focused when the debugger breaks."
'cancel', "Cancel debugging."
'debug.onTaskErrors', "Controls what to do when errors are encountered after running a preLaunchTask."
{ comment: ['This is the description for a setting'], key: 'showBreakpointsInOverviewRuler' }, "Controls whether breakpoints should be shown in the overview ruler."
{ comment: ['This is the description for a setting'], key: 'showInlineBreakpointCandidates' }, "Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging."
'debug.saveBeforeStart', "Controls what editors to save before starting a debug session."
'debug.saveBeforeStart.allEditorsInActiveGroup', "Save all editors in the active group before starting a debug session."
'debug.saveBeforeStart.nonUntitledEditorsInActiveGroup', "Save all editors in the active group except untitled ones before starting a debug session."
'debug.saveBeforeStart.none', "Don't save any editors before starting a debug session."
'debug.confirmOnExit', "Controls whether to confirm when the window closes if there are active debug sessions."
'debug.confirmOnExit.never', "Never confirm."
'debug.confirmOnExit.always', "Always confirm if there are debug sessions."
'debug.disassemblyView.showSourceCode', "Show Source Code in Disassembly View."
'debug.autoExpandLazyVariables', "Automatically show values for variables that are lazily resolved by the debugger, such as getters."
'reload window', "Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not loaded. Would you like to reload the window to load the extension?", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name
'reload', "Reload Window"), '', true, () => this._hostService.reload()
'notSupportedInWorkspace', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is not supported in the current workspace", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name
'restrictedMode', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is not supported in Restricted Mode", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name
'manageWorkspaceTrust', "Manage Workspace Trust"
'disabledDep', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is disabled. Would you like to enable the extension and reload the window?", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name
'enable dep', "Enable and Reload"
'disabledDepNoAction', "Cannot activate the '{0}' extension because it depends on the '{1}' extension which is disabled.", extName, missingInstalledDependency.manifest.displayName || missingInstalledDependency.manifest.name
'uninstalledDep', "Cannot activate the '{0}' extension because it depends on the '{1}' extension, which is not installed. Would you like to install the extension and reload the window?", extName, dependencyExtension.displayName
'install missing dep', "Install and Reload"
'unknownDep', "Cannot activate the '{0}' extension because it depends on an unknown '{1}' extension.", extName, missingDependency)
'unknownSource', "Unknown Source"
'commentsViewIcon', 'View icon of the comments view.')
'ask.1.create', "Extension '{0}' wants to make refactoring changes with this file creation", data.extensionNames[0]
'ask.1.copy', "Extension '{0}' wants to make refactoring changes with this file copy", data.extensionNames[0]
'ask.1.move', "Extension '{0}' wants to make refactoring changes with this file move", data.extensionNames[0]
'ask.1.delete', "Extension '{0}' wants to make refactoring changes with this file deletion", data.extensionNames[0]
{ key: 'ask.N.create', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file creation", data.extensionNames.length
{ key: 'ask.N.copy', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file copy", data.extensionNames.length
{ key: 'ask.N.move', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file move", data.extensionNames.length
{ key: 'ask.N.delete', comment: ['{0} is a number, e.g "3 extensions want..."'] }, "{0} extensions want to make refactoring changes with this file deletion", data.extensionNames.length
'cancel', "Skip Changes")], { cancelId: 1 }
'cancel', "Skip Changes"
'again', "Don't ask again"
'msg-create', "Running 'File Create' participants..."
'msg-rename', "Running 'File Rename' participants..."
'msg-copy', "Running 'File Copy' participants..."
'msg-delete', "Running 'File Delete' participants..."
'msg-write', "Running 'File Write' participants..."
'label', "Reset choice for 'File operation needs preview'"
'folderStatusMessageAddSingleFolder', "Extension '{0}' added 1 folder to the workspace", extensionName
'folderStatusMessageAddMultipleFolders', "Extension '{0}' added {1} folders to the workspace", extensionName, addCount
'folderStatusMessageRemoveSingleFolder', "Extension '{0}' removed 1 folder from the workspace", extensionName
'folderStatusMessageRemoveMultipleFolders', "Extension '{0}' removed {1} folders from the workspace", extensionName, removeCount
'folderStatusChangeFolder', "Extension '{0}' changed folders of the workspace", extensionName
'openerFailedUseDefault', "Open using default opener"), undefined, undefined, async (
src/vs/workbench/api/browser/mainThreadUriOpeners.ts:							message: localize({
'remote.tunnel.openTunnel', "The extension {0} has forwarded port {1}. You'll need to run as superuser to use port {2} locally.", source, tunnelOptions.remoteAddress.port, tunnelOptions.localAddressPort
'remote.tunnelsView.elevationButton', "Use Port {0} as Sudo...", tunnel.tunnelRemotePort
'errorMessage', "An error occurred while loading view: {0}", escape(viewType)
'timeout.onWillSave', "Aborted onWillSaveTextDocument-event after 1750ms"))
{ key: 'quickTip', comment: ['"switch to editor language hover" means to show the programming language hover widget instead of the debug hover'] }, 'Hold {0} key to switch to editor language hover', isMacintosh ? 'Option' : 'Alt'
'treeAriaLabel', "Debug Hover"
{ key: 'variableAriaLabel', comment: ['Do not translate placeholders. Placeholders are name and value of a variable.'] }, "{0}, value {1}, variables, debug", element.name, element.value
'contributes.customEditors', 'Contributed custom editors.'
'contributes.viewType', 'Identifier for the custom editor. This must be unique across all custom editors, so we recommend including your extension id as part of `viewType`. The `viewType` is used when registering custom editors with `vscode.registerCustomEditorProvider` and in the `onCustomEditor:${id}` [activation event](https://code.visualstudio.com/api/references/activation-events).'
'contributes.displayName', 'Human readable name of the custom editor. This is displayed to users when selecting which editor to use.'
'contributes.selector', 'Set of globs that the custom editor is enabled for.'
'contributes.selector.filenamePattern', 'Glob that the custom editor is enabled for.'
'contributes.priority', 'Controls if the custom editor is enabled automatically when the user opens a file. This may be overridden by users using the `workbench.editorAssociations` setting.'
'contributes.priority.default', 'The editor is automatically used when the user opens a resource, provided that no other default custom editors are registered for that resource.'
'contributes.priority.option', 'The editor is not automatically used when the user opens a resource, but a user can switch to the editor using the `Reopen With` command.'
'run', "Run"
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'openAFileWhichCanBeDebugged', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'runAndDebugAction', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'detectThenRunAndDebug', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'customizeRunAndDebug', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
src/vs/workbench/contrib/debug/browser/welcomeView.ts:	content: localize({ key: 'customizeRunAndDebugOpenFolder', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
'allDebuggersDisabled', "All debug extensions are disabled. Enable a debug extension or install a new one from the Marketplace."
'task.label', '{0}: {1}', source.label, task.name
'statusBarDebuggingBackground', "Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window")
'statusBarDebuggingForeground', "Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window")
'statusBarDebuggingBorder', "Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window")
'extensionSource', "{0} (Extension)", options.source.label
'defaultSource', "Extension"
'manageExtension', "Manage Extension"
'cancel', "Cancel")
'ok', "OK")
{ key: 'vscode.extension.contributes.views.containers.id', comment: ['Contribution refers to those that an extension contributes to VS Code through an extension/contribution point. '] }, "Unique id used to identify the container in which views can be contributed using 'views' contribution point"
'vscode.extension.contributes.views.containers.title', 'Human readable string used to render the container'
'vscode.extension.contributes.views.containers.icon', "Path to the container icon. Icons are 24x24 centered on a 50x40 block and have a fill color of 'rgb(215, 218, 224)' or '#d7dae0'. It is recommended that icons be in SVG, though any image file type is accepted."
'vscode.extension.contributes.viewsContainers', 'Contributes views containers to the editor'
'views.container.activitybar', "Contribute views containers to Activity Bar"
'views.container.panel', "Contribute views containers to Panel"
'vscode.extension.contributes.view.type', "Type of the view. This can either be `tree` for a tree view based view or `webview` for a webview based view. The default is `tree`."
'vscode.extension.contributes.view.tree', "The view is backed by a `TreeView` created by `createTreeView`."
'vscode.extension.contributes.view.webview', "The view is backed by a `WebviewView` registered by `registerWebviewViewProvider`."
'vscode.extension.contributes.view.id', 'Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'
'vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'
'vscode.extension.contributes.view.when', 'Condition which must be true to show this view'
'vscode.extension.contributes.view.icon', "Path to the view icon. View icons are displayed when the name of the view cannot be shown. It is recommended that icons be in SVG, though any image file type is accepted."
'vscode.extension.contributes.view.contextualTitle', "Human-readable context for when the view is moved out of its original location. By default, the view's container name will be used."
'vscode.extension.contributes.view.initialState', "Initial state of the view when the extension is first installed. Once the user has changed the view state by collapsing, moving, or hiding the view, the initial state will not be used again."
'vscode.extension.contributes.view.initialState.visible', "The default initial state for the view. In most containers the view will be expanded, however; some built-in containers (explorer, scm, and debug) show all contributed views collapsed regardless of the `visibility`."
'vscode.extension.contributes.view.initialState.hidden', "The view will not be shown in the view container, but will be discoverable through the views menu and other view entry points and can be un-hidden by the user."
'vscode.extension.contributes.view.initialState.collapsed', "The view will show in the view container, but will be collapsed."
'vscode.extension.contributs.view.size', "The initial size of the view. The size will behave like the css 'flex' property, and will set the initial size when the view is first shown. In the side bar, this is the height of the view. This value is only respected when the same extension owns both the view and the view container."
'vscode.extension.contributes.view.id', 'Identifier of the view. This should be unique across all views. It is recommended to include your extension id as part of the view id. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'
'vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'
'vscode.extension.contributes.view.when', 'Condition which must be true to show this view'
'vscode.extension.contributes.view.group', 'Nested group in the viewlet'
'vscode.extension.contributes.view.remoteName', 'The name of the remote type associated with this view'
'vscode.extension.contributes.views', "Contributes views to the editor"
'views.explorer', "Contributes views to Explorer container in the Activity bar"
'views.debug', "Contributes views to Debug container in the Activity bar"
'views.scm', "Contributes views to SCM container in the Activity bar"
'views.test', "Contributes views to Test container in the Activity bar"
'views.remote', "Contributes views to Remote container in the Activity bar. To contribute to this container, enableProposedApi needs to be turned on"
'views.contributed', "Contributes views to contributed views container"
'viewcontainer requirearray', "views containers must be an array")
'requireidstring', "property `{0}` is mandatory and must be of type `string` with non-empty value. Only alphanumeric characters, '_', and '-' are allowed.", 'id')
'requireidstring', "property `{0}` is mandatory and must be of type `string` with non-empty value. Only alphanumeric characters, '_', and '-' are allowed.", 'id')
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'title')
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'icon')
'requirenonemptystring', "property `{0}` is mandatory and must be of type `string` with non-empty value", 'title')
'ViewContainerRequiresProposedAPI', "View container '{0}' requires 'enabledApiProposals: [\"contribViewsRemote\"]' to be added to 'Remote'.", key)
'ViewContainerDoesnotExist', "View container '{0}' does not exist and all views registered to it will be added to 'Explorer'.", key)
'duplicateView1', "Cannot register multiple views with same id `{0}`", item.id)
'duplicateView2', "A view with id `{0}` is already registered.", item.id)
'unknownViewType', "Unknown view type `{0}`.", item.type)
'requirearray', "views must be an array")
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'id')
'requirestring', "property `{0}` is mandatory and must be of type `string`", 'name')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'when')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'icon')
'optstring', "property `{0}` can be omitted or must be of type `string`", 'contextualTitle')
'optenum', "property `{0}` can be omitted or must be one of {1}", 'visibility', Object.values(InitialVisibility).join(', '))
'typeNewValue', "Type new value"
'watchExpressionInputAriaLabel', "Type watch expression"
'watchExpressionPlaceholder', "Expression to watch"
{ comment: ['Debug is a noun in this context, not a verb.'], key: 'watchAriaTreeLabel' }, "Debug Watch Expressions"
'watchExpressionAriaLabel', "{0}, value {1}", (<Expression>element).name, (<Expression>element).value
'watchVariableAriaLabel', "{0}, value {1}", (<Variable>element).name, (<Variable>element).value
'collapse', "Collapse All"
'addWatchExpression', "Add Expression"
'removeAllWatchExpressions', "Remove All Expressions"
{ key: 'workbench.debug.filter.placeholder', comment: ['Text in the brackets after e.g. is not localizable'] }, "Filter (e.g. text, !exclude)"
'showing filtered repl lines', "Showing {0} of {1}", filtered, total)
'debugConsole', "Debug Console"
'startDebugFirst', "Please start a debug session to evaluate expressions"
{ key: 'actions.repl.acceptInput', comment: ['Apply input from the debug console input box'] }, "REPL Accept Input"
'repl.action.filter', "REPL Focus Content to Filter"
'actions.repl.copyAll', "Debug: Console Copy All"
'selectRepl', "Select Debug Console"
'clearRepl', "Clear Console"
'debugConsoleCleared', "Debug console was cleared")
'collapse', "Collapse All"
'paste', "Paste"
'copyAll', "Copy All"
'copy', "Copy"
'variableValueAriaLabel', "Type new variable value"
'variablesAriaTreeLabel', "Debug Variables"
'variableScopeAriaLabel', "Scope {0}", element.name
{ key: 'variableAriaLabel', comment: ['Placeholders are variable name and variable value respectivly. They should not be translated.'] }, "{0}, value {1}", element.name, element.value
"viewMemory.prompt", "Inspecting binary data requires the Hex Editor extension. Would you like to install it now?"
"cancel", "Cancel"
"install", "Install"
"viewMemory.install.progress", "Installing the Hex Editor..."
'collapse', "Collapse All"
'context.customEditor', "The viewType of the currently active custom editor."
'loadedScriptsSession', "Debug Session"
{ comment: ['Debug is a noun in this context, not a verb.'], key: 'loadedScriptsAriaLabel' }, "Debug Loaded Scripts"
'loadedScriptsRootFolderAriaLabel', "Workspace folder {0}, loaded script, debug", element.getLabel()
'loadedScriptsSessionAriaLabel', "Session {0}, loaded script, debug", element.getLabel()
'loadedScriptsFolderAriaLabel', "Folder {0}, loaded script, debug", element.getLabel()
'loadedScriptsSourceAriaLabel', "{0}, loaded script, debug", element.getLabel()
'followLink', "follow link"
'fileLinkWithPath', "Ctrl + click to {0}\n{1}", followLink, fulltext)
'fileLink', "Ctrl + click to {0}", followLink)
'manageExtension', "Manage Extension"), this._commandService
'noDebugAdapterStart', "No debug adapter, can not start debug session."))
'canNotStart', "The debugger needs to open a new tab or window for the debuggee but the browser prevented this. You must give permission to continue."
'cancel', "Cancel")], { cancelId: 1 }
'noDebugAdapter', "No debugger available found. Can not send '{0}'.", command))
'moreInfo', "More Info"
'debugConsole', "Debug Console"
'replVariableAriaLabel', "Variable {0}, value {1}", element.name, element.value
src/vs/workbench/contrib/debug/browser/replViewer.ts:			return element.value + (element instanceof SimpleReplElement && element.count > 1 ? localize({ key: 'occurred', comment: ['Front will the value of the debug console element. Placeholder will be replaced by a number which represents occurrance count.'] },
'replRawObjectAriaLabel', "Debug console variable {0}, value {1}", element.name, element.value
'replGroup', "Debug console group {0}", element.name
{ key: 'miOpenConfigurations', comment: ['&& denotes a mnemonic'] }, "Open &&Configurations"
{ key: 'selectWorkspaceFolder', comment: ['User picks a workspace folder or a workspace configuration file here. Workspace configuration files can contain settings and thus a launch.json configuration can be written into one.'] }, "Select a workspace folder to create a launch.json file in or add it to the workspace config file"
'debugPanel', "Debug Console"
'startAdditionalSession', "Start Additional Session"
'debugExceptionWidgetBorder', 'Exception widget border color.')
'debugExceptionWidgetBackground', 'Exception widget background color.')
'exceptionThrown', 'Exception has occurred.'
'close', "Close"), ThemeIcon.asClassName(widgetClose), true, async (
'moveFocusedView.selectView', 'Search debug sessions by name'
'workbench.action.debug.startDebug', 'Start a New Debug Session'
'workbench.action.debug.spawnFrom', 'Session {0} spawned from {1}', label, parentName
'instructionNotAvailable', "Disassembly not available."
'disassemblyTableColumnLabel', "instructions"
'editorOpenedFromDisassemblyDescription', "from disassembly"
'disassemblyView', "Disassembly View"
'instructionAddress', "Address"
'instructionBytes', "Bytes"
`instructionText`, "Instruction"
'cannot be installed', "Cannot install the '{0}' extension because it is declared to not run in this setup.", getExtensionId(manifest.publisher, manifest.name))
'builtinProviderDisplayName', "Built-in"
'nActiveSessions', "{0} active sessions", n)) }
'debugTrust', "Debugging executes build tasks and program code from your workspace."
src/vs/workbench/contrib/debug/browser/debugService.ts:					throw new Error(nls.localize({ key: 'compoundMustHaveConfigurations', comment: ['compound indicates a "compounds" configuration item', '"configurations" is an attribute and should not be localized'] },
'noConfigurationNameInWorkspace', "Could not find launch configuration '{0}' in the workspace.", name
'multipleConfigurationNamesInWorkspace', "There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.", name)
'noFolderWithName', "Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.", configData.folder, configData.name, compound!.name)
'configMissing', "Configuration '{0}' is missing in 'launch.json'.", typeof configOrName === 'string' ? configOrName : configOrName.name
'launchJsonDoesNotExist', "'launch.json' does not exist for passed workspace folder."
'debugRequestNotSupported', "Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.", 'request', configByProviders.request
'debugRequesMissing', "Attribute '{0}' is missing from the chosen debug configuration.", 'request'
'debugTypeNotSupported', "Configured debug type '{0}' is not supported.", resolvedConfig.type
'debugTypeMissing', "Missing property 'type' for the chosen launch configuration."
{ key: 'installAdditionalDebuggers', comment: ['Placeholder is the debug type, so for example "node", "python"'] }, "Install {0} Extension", resolvedConfig.type
'noFolderWorkspaceDebugError', "The active file can not be debugged. Make sure it is saved and that you have a debug extension installed for that file type.")
'multipleSession', "'{0}' is already running. Do you want to start another instance?", session.getLabel()) }
'debugAdapterCrash', "Debug adapter process has terminated unexpectedly ({0})", adapterExitEvent.error.message || adapterExitEvent.error.toString())
'cancel', "Cancel")), { cancelId: actions.length }
src/vs/workbench/contrib/debug/browser/debugService.ts:							aria.alert(nls.localize({ key: 'debuggingPaused', comment: ['First placeholder is the file line content, second placeholder is the reason why debugging is stopped, for example "breakpoint", third is the stack frame name, and last is the line number.'] },
'breakpointAdded', "Added breakpoint, line {0}, file {1}", bp.lineNumber, uri.fsPath))
'breakpointRemoved', "Removed breakpoint, line {0}, file {1}", bp.lineNumber, bp.uri.fsPath))
'status.debug', "Debug"
'debugTarget', "Debug: {0}", text
'selectAndStartDebug', "Select and start debug configuration"
'defaultEditLabel', "Edit"
'notebook.moreRunActionsLabel', "More..."), 'codicon-chevron-down', true)
'stepBackDebug', "Step Back"), 50, icons.debugStepBack, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_DEBUG_STATE.isEqualTo('stopped')
'reverseContinue', "Reverse"), 55, icons.debugReverseContinue, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_DEBUG_STATE.isEqualTo('stopped')
'toggleBreakpointAction', "Debug: Toggle Breakpoint"
{ key: 'miToggleBreakpoint', comment: ['&& denotes a mnemonic'] }, "Toggle &&Breakpoint"
'conditionalBreakpointEditorAction', "Debug: Add Conditional Breakpoint..."
{ key: 'miConditionalBreakpoint', comment: ['&& denotes a mnemonic'] }, "&&Conditional Breakpoint..."
'logPointEditorAction', "Debug: Add Logpoint..."
{ key: 'miLogPoint', comment: ['&& denotes a mnemonic'] }, "&&Logpoint..."
'openDisassemblyView', "Open Disassembly View"
{ key: 'miDisassemblyView', comment: ['&& denotes a mnemonic'] }, "&&DisassemblyView"
'toggleDisassemblyViewSourceCode', "Toggle Source Code in Disassembly View"
{ key: 'mitogglesource', comment: ['&& denotes a mnemonic'] }, "&&ToggleSource"
'runToCursor', "Run to Cursor"
'evaluateInDebugConsole', "Evaluate in Debug Console"
'addToWatch', "Add to Watch"
'showDebugHover', "Debug: Show Hover"
'editor.debug.action.stepIntoTargets.notAvailable', "Step targets are not available here"
{ key: 'stepIntoTargets', comment: ['Step Into Targets lets the user step into an exact function he or she is interested in.'] }, "Step Into Target"
'goToNextBreakpoint', "Debug: Go to Next Breakpoint"
'goToPreviousBreakpoint', "Debug: Go to Previous Breakpoint"
'closeExceptionWidget', "Close Exception Widget"
'preLaunchTaskErrors', "Errors exist after running preLaunchTask '{0}'.", taskLabel
'preLaunchTaskError', "Error exists after running preLaunchTask '{0}'.", taskLabel
'preLaunchTaskExitCode', "The preLaunchTask '{0}' terminated with exit code {1}.", taskLabel, taskSummary.exitCode
'preLaunchTaskTerminated', "The preLaunchTask '{0}' terminated.", taskLabel
'abort', "Abort"
'remember', "Remember my choice in user settings"
'cancel', "Cancel"
'rememberTask', "Remember my choice for this task"
'invalidTaskReference', "Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.", typeof taskId === 'string' ? taskId : taskId.type))
'DebugTaskNotFoundWithTaskId', "Could not find the task '{0}'.", taskId
'DebugTaskNotFound', "Could not find the specified task."
'taskNotTrackedWithTaskId', "The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.", taskId
'taskNotTracked', "The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.", JSON.stringify(taskId)
'noDebugResults', "No matching launch configurations"
'customizeLaunchConfig', "Configure Launch Configuration"
src/vs/workbench/contrib/debug/browser/debugQuickAccess.ts:				type: 'separator', label: localize({
'removeLaunchConfig', "Remove Launch Configuration"
{ key: 'providerAriaLabel', comment: ['Placeholder stands for the provider label. For example "NodeJS".'] }, "{0} contributed configurations", provider.label
'configure', "configure") }
"addConfigTo", "Add Config ({0})...", launch.name
'addConfiguration', "Add Configuration..."
'debugToolBarBackground', "Debug toolbar background color.")
'debugToolBarBorder', "Debug toolbar border color.")
'debugIcon.startForeground', "Debug toolbar icon for start debugging.")
'debugIcon.pauseForeground', "Debug toolbar icon for pause.")
'debugIcon.stopForeground', "Debug toolbar icon for stop.")
'debugIcon.disconnectForeground', "Debug toolbar icon for disconnect.")
'debugIcon.restartForeground', "Debug toolbar icon for restart.")
'debugIcon.stepOverForeground', "Debug toolbar icon for step over.")
'debugIcon.stepIntoForeground', "Debug toolbar icon for step into.")
'debugIcon.stepOutForeground', "Debug toolbar icon for step over.")
'debugIcon.continueForeground', "Debug toolbar icon for continue.")
'debugIcon.stepBackForeground', "Debug toolbar icon for step back.")
'editor.inlineValuesForeground', "Color for the debug inline value text.")
'editor.inlineValuesBackground', "Color for the debug inline value background.")
'noDebugAdapter', "No debugger available, can not send '{0}'", 'launch or attach')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'restart')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'breakpoints')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'function breakpoints')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'exception breakpoints')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'data breakpoints info')
'sessionNotReadyForBreakpoints', "Session is not ready for breakpoints")
'noDebugAdapter', "No debugger available, can not send '{0}'", 'data breakpoints')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'instruction breakpoints')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'breakpoints locations')
'noDebugAdapter', "No debugger available, can not send '{0}'", request)
'noDebugAdapter', "No debugger available, can not send '{0}'", 'stackTrace')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'exceptionInfo')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'scopes')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'variables')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'evaluate')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'restartFrame')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'next')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'stepIn')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'stepOut')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'stepBack')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'continue')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'reverse continue')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'pause')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'terminateThreads')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'setVariable')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'setExpression')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'gotoTargets')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'goto')
'noDebugAdapter', "No debugger available, can not send '{0}'", 'loadSource'))
'noDebugAdapter', "No debugger available, can not send '{0}'", 'getLoadedSources'))
'noDebugAdapter', "No debugger available, can not send '{0}'", 'completions'))
'noDebugAdapter', "No debugger available, can not send '{0}'", 'stepInTargets'))
'noDebugAdapter', "No debugger available, can not send '{0}'", 'cancel'))
'noDebugAdapter', "No debugger available, can not send '{0}'", 'disassemble'))
'noDebugAdapter', "No debugger available, can not send '{0}'", 'readMemory'))
'noDebugAdapter', "No debugger available, can not send '{0}'", 'disassemble'))
'debuggingStarted', "Debugging started.")
'debuggingStopped', "Debugging stopped.")
"workbench.action.debug.startDebug", "Start a New Debug Session"
'selectConfiguration', "Select Launch Configuration"
'editLaunchConfig', "Edit Debug Configuration in launch.json"
'DebugConfig.failed', "Unable to create 'launch.json' file inside the '.vscode' folder ({0}).", error.message)
'workspace', "workspace"
'user settings', "user settings"
'debugConsoleViewIcon', 'View icon of the debug console view.')
'runViewIcon', 'View icon of the run view.')
'variablesViewIcon', 'View icon of the variables view.')
'watchViewIcon', 'View icon of the watch view.')
'callStackViewIcon', 'View icon of the call stack view.')
'breakpointsViewIcon', 'View icon of the breakpoints view.')
'loadedScriptsViewIcon', 'View icon of the loaded scripts view.')
'debugBreakpoint', 'Icon for breakpoints.')
'debugBreakpointDisabled', 'Icon for disabled breakpoints.')
'debugBreakpointUnverified', 'Icon for unverified breakpoints.')
'debugBreakpointFunction', 'Icon for function breakpoints.')
'debugBreakpointFunctionDisabled', 'Icon for disabled function breakpoints.')
'debugBreakpointFunctionUnverified', 'Icon for unverified function breakpoints.')
'debugBreakpointConditional', 'Icon for conditional breakpoints.')
'debugBreakpointConditionalDisabled', 'Icon for disabled conditional breakpoints.')
'debugBreakpointConditionalUnverified', 'Icon for unverified conditional breakpoints.')
'debugBreakpointData', 'Icon for data breakpoints.')
'debugBreakpointDataDisabled', 'Icon for disabled data breakpoints.')
'debugBreakpointDataUnverified', 'Icon for unverified data breakpoints.')
'debugBreakpointLog', 'Icon for log breakpoints.')
'debugBreakpointLogDisabled', 'Icon for disabled log breakpoint.')
'debugBreakpointLogUnverified', 'Icon for unverified log breakpoints.')
'debugBreakpointHint', 'Icon for breakpoint hints shown on hover in editor glyph margin.')
'debugBreakpointUnsupported', 'Icon for unsupported breakpoints.')
'debugStackframe', 'Icon for a stackframe shown in the editor glyph margin.')
'debugStackframeFocused', 'Icon for a focused stackframe  shown in the editor glyph margin.')
'debugGripper', 'Icon for the debug bar gripper.')
'debugRestartFrame', 'Icon for the debug restart frame action.')
'debugStop', 'Icon for the debug stop action.')
'debugDisconnect', 'Icon for the debug disconnect action.')
'debugRestart', 'Icon for the debug restart action.')
'debugStepOver', 'Icon for the debug step over action.')
'debugStepInto', 'Icon for the debug step into action.')
'debugStepOut', 'Icon for the debug step out action.')
'debugStepBack', 'Icon for the debug step back action.')
'debugPause', 'Icon for the debug pause action.')
'debugContinue', 'Icon for the debug continue action.')
'debugReverseContinue', 'Icon for the debug reverse continue action.')
'debugRun', 'Icon for the run or debug action.')
'debugStart', 'Icon for the debug start action.')
'debugConfigure', 'Icon for the debug configure action.')
'debugConsole', 'Icon for the debug console open action.')
'debugRemoveConfig', 'Icon for removing debug configurations.')
'debugCollapseAll', 'Icon for the collapse all action in the debug views.')
'callstackViewSession', 'Icon for the session icon in the call stack view.')
'debugConsoleClearAll', 'Icon for the clear all action in the debug console.')
'watchExpressionsRemoveAll', 'Icon for the Remove All action in the watch view.')
'watchExpressionRemove', 'Icon for the Remove action in the watch view.')
'watchExpressionsAdd', 'Icon for the add action in the watch view.')
'watchExpressionsAddFuncBreakpoint', 'Icon for the add function breakpoint action in the watch view.')
'breakpointsRemoveAll', 'Icon for the Remove All action in the breakpoints view.')
'breakpointsActivate', 'Icon for the activate action in the breakpoints view.')
'debugConsoleEvaluationInput', 'Icon for the debug evaluation input marker.')
'debugConsoleEvaluationPrompt', 'Icon for the debug evaluation prompt.')
'debugInspectMemory', 'Icon for the inspect memory action.')
'debug', 'Debug'
'restartDebug', "Restart"
'stepOverDebug', "Step Over"
'stepIntoDebug', "Step Into"
'stepIntoTargetDebug', "Step Into Target"
'stepOutDebug', "Step Out"
'pauseDebug', "Pause"
'disconnect', "Disconnect"
'disconnectSuspend', "Disconnect and Suspend"
'stop', "Stop"
'continueDebug', "Continue"
'focusSession', "Focus Session"
'selectAndStartDebugging', "Select and Start Debugging"
'openLaunchJson', "Open '{0}'", 'launch.json'
'startDebug', "Start Debugging"
'startWithoutDebugging', "Start Without Debugging"
'nextDebugConsole', "Focus Next Debug Console"
'prevDebugConsole', "Focus Previous Debug Console"
'openLoadedScript', "Open Loaded Script..."
'callStackTop', "Navigate to Top of Call Stack"
'callStackBottom', "Navigate to Bottom of Call Stack"
'callStackUp', "Navigate Up Call Stack"
'callStackDown', "Navigate Down Call Stack"
'selectDebugConsole', "Select Debug Console"
'selectDebugSession', "Select Debug Session"
'chooseLocation', "Choose the specific location") }
'noExecutableCode', "No executable code is associated at the current cursor position.")
'jumpToCursor', "Jump to Cursor"
'editor.debug.action.stepIntoTargets.none', "No step targets available"
'addConfiguration', "Add Configuration..."
'addInlineBreakpoint', "Add Inline Breakpoint"
'breakpoint', "Breakpoint"
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:						const disabledBreakpointDialogMessage = nls.localize(
'condition', "condition"
src/vs/workbench/contrib/debug/browser/breakpointEditorContribution.ts:						const enabledBreakpointDialogMessage = nls.localize(
'condition', "condition"
'removeLogPoint', "Remove {0}", breakpointType
'enable', "Enable"), breakpointType
'cancel', "Cancel"
'breakpoint', "Breakpoint"
'removeBreakpoint', "Remove {0}", breakpointType), undefined, true, async (
'editBreakpoint', "Edit {0}...", breakpointType
'enableBreakpoint', "Enable {0}", breakpointType
'removeBreakpoints', "Remove Breakpoints"
'removeLineBreakpoint', "Remove Line Breakpoint"
'editBreakpoints', "Edit Breakpoints"
'editLineBreakpoint', "Edit Line Breakpoint"
'enableDisableBreakpoints', "Enable/Disable Breakpoints"
'disableBreakpointOnLine', "Disable Line Breakpoint")
'enableBreakpointOnLine', "Enable Line Breakpoint")
'addBreakpoint', "Add Breakpoint"
'addConditionalBreakpoint', "Add Conditional Breakpoint..."
'addLogPoint', "Add Logpoint..."
'runToLine', "Run to Line"
'debugIcon.breakpointForeground', 'Icon color for breakpoints.')
'debugIcon.breakpointDisabledForeground', 'Icon color for disabled breakpoints.')
'debugIcon.breakpointUnverifiedForeground', 'Icon color for unverified breakpoints.')
'debugIcon.breakpointCurrentStackframeForeground', 'Icon color for the current breakpoint stack frame.')
'debugIcon.breakpointStackframeForeground', 'Icon color for all breakpoint stack frames.')
'debug.lazyButton.tooltip', "Click to expand"
'topStackFrameLineHighlight', 'Background color for the highlight of line at the top stack frame position.')
'focusedStackFrameLineHighlight', 'Background color for the highlight of line at focused stack frame position.')
{ key: 'running', comment: ['indicates state'] }, "Running"
'showMoreStackFrames2', "Show More Stack Frames"
{ key: 'session', comment: ['Session is a noun'] }, "Session"
{ key: 'running', comment: ['indicates state'] }, "Running"
'restartFrame', "Restart Frame"), ThemeIcon.asClassName(icons.debugRestartFrame), true, async (
'loadAllStackFrames', "Load More Stack Frames"
'showMoreAndOrigin', "Show {0} More: {1}", stackFrames.length, stackFrames[0].source.origin
'showMoreStackFrames', "Show {0} More Stack Frames", stackFrames.length
'paused', "Paused")
{ comment: ['Debug is a noun in this context, not a verb.'], key: 'callStackAriaLabel' }, "Debug Call Stack"
{ key: 'threadAriaLabel', comment: ['Placeholders stand for the thread name and the thread state.For example "Thread 1" and "Stopped'] }, "Thread {0} {1}", element.name, element.stateLabel
'stackFrameAriaLabel', "Stack Frame {0}, line {1}, {2}", element.name, element.range.startLineNumber, getSpecificSourceName(element)
{ key: 'running', comment: ['indicates state'] }, "Running"
{ key: 'sessionLabel', comment: ['Placeholders stand for the session name and the session state. For example "Launch Program" and "Running"'] }, "Session {0} {1}", element.getLabel(), state
'showMoreStackFrames', "Show {0} More Stack Frames", element.length
'collapse', "Collapse All"
'breakpointWidgetLogMessagePlaceholder', "Message to log when breakpoint is hit. Expressions within {} are interpolated. 'Enter' to accept, 'esc' to cancel."
'breakpointWidgetHitCountPlaceholder', "Break when hit count condition is met. 'Enter' to accept, 'esc' to cancel."
'breakpointWidgetExpressionPlaceholder', "Break when expression evaluates to true. 'Enter' to accept, 'esc' to cancel."
'breakpointType', 'Breakpoint Type') }
'unverifiedExceptionBreakpoint', "Unverified Exception Breakpoint"
'expressionCondition', "Expression condition: {0}", exceptionBreakpoint.condition
'expressionAndHitCount', "Expression: {0} | Hit Count: {1}", functionBreakpoint.condition, functionBreakpoint.hitCondition
'functionBreakpointsNotSupported', "Function breakpoints are not supported by this debug type"
'dataBreakpointsNotSupported', "Data breakpoints are not supported by this debug type"
'access', "Access"
'functionBreakpointPlaceholder', "Function to break on"
'functionBreakPointInputAriaLabel', "Type function breakpoint."
'functionBreakpointExpressionPlaceholder', "Break when expression evaluates to true"
'functionBreakPointExpresionAriaLabel', "Type expression. Function breakpoint will break when expression evaluates to true"
'functionBreakpointHitCountPlaceholder', "Break when hit count is met"
'functionBreakPointHitCountAriaLabel', "Type hit count. Function breakpoint will break when hit count is met."
'exceptionBreakpointAriaLabel', "Type exception breakpoint condition"
'exceptionBreakpointPlaceholder', "Break when expression evaluates to true"
'breakpoints', "Breakpoints"
'disabledBreakpoint', "Disabled Breakpoint"
'unverifiedBreakpoint', "Unverified Breakpoint")
'dataBreakpointUnsupported', "Data breakpoints not supported by this debug type"
'dataBreakpoint', "Data Breakpoint"
'functionBreakpointUnsupported', "Function breakpoints not supported by this debug type"
'functionBreakpoint', "Function Breakpoint")
'expression', "Expression condition: {0}", breakpoint.condition)
'hitCount', "Hit Count: {0}", breakpoint.hitCondition)
'instructionBreakpointUnsupported', "Instruction breakpoints not supported by this debug type"
'instructionBreakpointAtAddress', "Instruction breakpoint at address {0}", breakpoint.instructionReference)
'instructionBreakpoint', "Instruction breakpoint")
'hitCount', "Hit Count: {0}", breakpoint.hitCondition)
'breakpointUnsupported', "Breakpoints of this type are not supported by the debugger"
'logMessage', "Log Message: {0}", breakpoint.logMessage)
'expression', "Expression condition: {0}", breakpoint.condition)
'hitCount', "Hit Count: {0}", breakpoint.hitCondition)
'breakpoint', "Breakpoint"
'addFunctionBreakpoint', "Add Function Breakpoint"
{ key: 'miFunctionBreakpoint', comment: ['&& denotes a mnemonic'] }, "&&Function Breakpoint..."
'activateBreakpoints', "Toggle Activate Breakpoints"
'removeBreakpoint', "Remove Breakpoint"
'removeAllBreakpoints', "Remove All Breakpoints"
{ key: 'miRemoveAllBreakpoints', comment: ['&& denotes a mnemonic'] }, "Remove &&All Breakpoints"
'enableAllBreakpoints', "Enable All Breakpoints"
{ key: 'miEnableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, "&&Enable All Breakpoints"
'disableAllBreakpoints', "Disable All Breakpoints"
{ key: 'miDisableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, "Disable A&&ll Breakpoints"
'reapplyAllBreakpoints', "Reapply All Breakpoints"
'editCondition', "Edit Condition..."
'editCondition', "Edit Condition..."), undefined, true, async () => view.renderInputBox({ breakpoint, type: 'condition' })
'editHitCount', "Edit Hit Count..."), undefined, true, async () => view.renderInputBox({ breakpoint, type: 'hitCount' })
'editBreakpoint', "Edit Function Breakpoint..."
'editHitCount', "Edit Hit Count..."
'debugNoType', "Debugger 'type' can not be omitted and must be of type 'string'.")
'debugName', "Name of configuration; appears in the launch configuration dropdown menu."
'debugServer', "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode"
'debugPrelaunchTask', "Task to run before debug session starts."
'debugPostDebugTask', "Task to run after debug session ends."
'suppressMultipleSessionWarning', "Disable the warning when trying to start the same debug configuration more than once."
'CouldNotFindLanguage', "You don't have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?", languageLabel
'findExtension', "Find {0} extension", languageLabel
'cancel', "Cancel")], { cancelId: 1 }
'suggestedDebuggers', "Suggested"
'installExt', "Install extension...") }
'selectDebug', "Select debugger"
'debugLaunchConfigurations', 'Debug Launch Configurations') }
'noConfigurations', "No Configurations"), handler: async () => false }
'addConfiguration', "Add Configuration..."
'debugSession', 'Debug Session') }
'workbenchState', "The kind of workspace opened in the window, either 'empty' (no workspace), 'folder' (single folder) or 'workspace' (multi-root workspace)") }
'workspaceFolderCount', "The number of root folders in the workspace")
'dirtyWorkingCopies', "Whether there are any working copies with unsaved changes")
'remoteName', "The name of the remote the window is connected to or an empty string if not connected to any remote")
'virtualWorkspace', "The scheme of the current workspace is from a virtual file system or an empty string.")
'temporaryWorkspace', "The scheme of the current workspace is from a temporary file system.")
'isFullscreen', "Whether the window is in fullscreen mode")
'activeEditorIsDirty', "Whether the active editor has unsaved changes")
'activeEditorIsNotPreview', "Whether the active editor is not in preview mode")
'activeEditorIsFirstInGroup', "Whether the active editor is the first one in its group")
'activeEditorIsLastInGroup', "Whether the active editor is the last one in its group")
'activeEditorIsPinned', "Whether the active editor is pinned")
'activeEditorIsReadonly', "Whether the active editor is readonly")
'activeEditorCanRevert', "Whether the active editor can revert")
'activeEditor', "The identifier of the active editor") }
'activeEditorAvailableEditorIds', "The available editor identifiers that are usable for the active editor")
'textCompareEditorVisible', "Whether a text compare editor is visible")
'textCompareEditorActive', "Whether a text compare editor is active")
'sideBySideEditorActive', "Whether a side by side editor is active")
'groupEditorsCount', "The number of opened editor groups")
'activeEditorGroupEmpty', "Whether the active editor group is empty")
'activeEditorGroupIndex', "The index of the active editor group")
'activeEditorGroupLast', "Whether the active editor group is the last group")
'activeEditorGroupLocked', "Whether the active editor group is locked")
'multipleEditorGroups', "Whether there are multiple editor groups opened")
'editorIsOpen', "Whether an editor is open")
'inZenMode', "Whether Zen mode is enabled")
'isCenteredLayout', "Whether centered layout is enabled")
'splitEditorsVertically', "Whether editors split vertically")
'editorAreaVisible', "Whether the editor area is visible")
'editorTabsVisible', "Whether editor tabs are visible")
'sideBarVisible', "Whether the sidebar is visible")
'sideBarFocus', "Whether the sidebar has keyboard focus")
'activeViewlet', "The identifier of the active viewlet")
'statusBarFocused', "Whether the status bar has keyboard focus")
'bannerFocused', "Whether the banner has keyboard focus")
'notificationFocus', "Whether a notification has keyboard focus")
'notificationCenterVisible', "Whether the notifications center is visible")
'notificationToastsVisible', "Whether a notification toast is visible")
'activeAuxiliary', "The identifier of the active auxiliary panel")
'auxiliaryBarFocus', "Whether the auxiliary bar has keyboard focus")
'auxiliaryBarVisible', "Whether the auxiliary bar is visible")
'activePanel', "The identifier of the active panel")
'panelFocus', "Whether the panel has keyboard focus")
'panelPosition', "The position of the panel, always 'bottom'")
'panelAlignment', "The alignment of the panel, either 'center', 'left', 'right' or 'justify'")
'panelVisible', "Whether the panel is visible")
'panelMaximized', "Whether the panel is maximized")
'focusedView', "The identifier of the view that has keyboard focus")
'resourceScheme', "The scheme of the resource") }
'resourceFilename', "The file name of the resource") }
'resourceDirname', "The folder name the resource is contained in") }
'resourcePath', "The full path of the resource") }
'resourceLangId', "The language identifier of the resource") }
'resource', "The full value of the resource including scheme and path") }
'resourceExtname', "The extension name of the resource") }
'resourceSet', "Whether a resource is present or not") }
'isFileSystemResource', "Whether the resource is backed by a file system provider") }
'noComments', "There are no comments in this workspace yet."
'workbenchConfigurationTitle', "Workbench"
'focusCommentsList', "Focus Comments view"
'commentsClearFilterText', "Clear filter text"
'focusCommentsFilter', "Focus comments filter"
'toggle unresolved', "Toggle Unresolved Comments"
'comments', "Comments"
'unresolved', "Show Unresolved"
'toggle resolved', "Toggle Resolved Comments"
'comments', "Comments"
'resolved', "Show Resolved"
'hasCommentingRange', "Whether the position at the active cursor has a commenting range"
'hasCommentingProvider', "Whether the open workspace has either comments or commenting ranges."
'pickCommentService', "Select Comment Provider"), matchOnDescription: true }
'nextCommentThreadAction', "Go to Next Comment Thread"
'previousCommentThreadAction', "Go to Previous Comment Thread"
'comments.toggleCommenting', "Toggle Editor Commenting"
'comments.addCommand', "Add Comment on Current Selection"
'comments.collapseAll', "Collapse All Comments"
'comments.expandAll', "Expand All Comments"
'contributes.codeActions', "Configure which editor to use for a resource."
'contributes.codeActions.languages', "Language modes that the code actions are enabled for."
'contributes.codeActions.kind', "`CodeActionKind` of the contributed code action."
'contributes.codeActions.title', "Label for the code action used in the UI."
'contributes.codeActions.description', "Description of what the code action does."
'commentsConfigurationTitle', "Comments"
'openComments', "Controls when the comments panel should open."
'comments.openPanel.deprecated', "This setting is deprecated in favor of `comments.openView`."
'comments.openView.firstFile', "If the comments view has not been opened yet during this session it will open the first time during a session that a file with comments is active."
'comments.openView', "Controls when the comments view should open."
'useRelativeTime', "Determines if relative time will be used in comment timestamps (ex. '1 day ago')."
'codeActionsOnSave.fixAll', "Controls whether auto fix action should be run on file save."
'codeActionsOnSave', "Code action kinds to be run on save."
'codeActionsOnSave.generic', "Controls whether '{0}' actions should be run on file save.", props.title
'pickReactions', "Pick Reactions..."), 'toggle-reactions', true
'comments.filter.placeholder', "Filter (e.g. text, author)"
'comments.filter.ariaLabel', "Filter comments"
'showing filtered results', "Showing {0} of {1}", filtered, total)
'rootCommentsLabel', "Comments for current workspace"
'resourceWithCommentThreadsLabel', "Comments in {0}, full path {1}", basename(element.resource), element.resource.fsPath
src/vs/workbench/contrib/comments/browser/commentsView.ts:						return nls.localize('resourceWithCommentLabel',
'collapseAll', "Collapse All"
'comments.view.title', "Comments"
'commentsCount', "{0} comments", commentCount
'commentCount', "1 comment"
'image', "Image"
'commentLine', "[Ln {0}]", node.element.range.startLineNumber
'commentRange', "[Ln {0}-{1}]", node.element.range.startLineNumber, node.element.range.endLineNumber
'lastReplyFrom', "Last reply from {0}", lastComment.userName
'contributes.documentation', "Contributed documentation."
'contributes.documentation.refactorings', "Contributed documentation for refactorings."
'contributes.documentation.refactoring', "Contributed documentation for refactoring."
'contributes.documentation.refactoring.title', "Label for the documentation used in the UI."
'contributes.documentation.refactoring.when', "When clause."
'contributes.documentation.refactoring.command', "Command executed."
'startDebugTextMate', "Start Text Mate Syntax Grammar Logging"
{ key: 'message', comment: ['Presereve double-square brackets and their order'] }, '[[Select a language]], or [[open a different editor]] to get started.\nStart typing to dismiss or [[don\'t show]] this again.'
'inspectEditorTokens', "Developer: Inspect Editor Tokens and Scopes"
'inspectTMScopesWidget.loading', "Loading..."))
'toggleRenderWhitespace', "Toggle Render Whitespace"
{ key: 'miToggleRenderWhitespace', comment: ['&& denotes a mnemonic'] }, "&&Render Whitespace"
'toggleLocation', "Toggle Multi-Cursor Modifier"
'miMultiCursorAlt', "Switch to Alt+Click for Multi-Cursor"
'miMultiCursorCmd', "Switch to Cmd+Click for Multi-Cursor"
'miMultiCursorCtrl', "Switch to Ctrl+Click for Multi-Cursor"
'toggleMinimap', "Toggle Minimap"
{ key: 'miMinimap', comment: ['&& denotes a mnemonic'] }, "&&Minimap"
'toggleColumnSelection', "Toggle Column Selection Mode"
{ key: 'miColumnSelection', comment: ['&& denotes a mnemonic'] }, "Column &&Selection Mode"
'workbench.action.inspectKeyMap', "Inspect Key Mappings"
'workbench.action.inspectKeyMapJSON', "Inspect Key Mappings (JSON)"), original: 'Inspect Key Mappings (JSON
src/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts:				message: localize(
'codeaction', "Quick Fixes") }
src/vs/workbench/contrib/codeEditor/browser/saveParticipants.ts:					message: localize(
'codeAction.apply', "Applying code action '{0}'.", action.action.title) }
'toggleRenderControlCharacters', "Toggle Control Characters"
{ key: 'miToggleRenderControlCharacters', comment: ['&& denotes a mnemonic'] }, "Render &&Control Characters"
'parseErrors', "Errors parsing {0}: {1}", configFileLocation.toString(), errors.map(e => (`[${e.offset}, ${e.length}] ${getParseErrorMessage(e.error)}`)).join('\n'))
'formatError', "{0}: Invalid format, JSON object expected.", configFileLocation.toString())
'schema.openBracket', 'The opening bracket character or string sequence.'
'schema.closeBracket', 'The closing bracket character or string sequence.'
'schema.comments', 'Defines the comment symbols'
'schema.blockComments', 'Defines how block comments are marked.'
'schema.blockComment.begin', 'The character sequence that starts a block comment.'
'schema.blockComment.end', 'The character sequence that ends a block comment.'
'schema.lineComment', 'The character sequence that starts a line comment.'
'schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'
'schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'
'schema.autoClosingPairs', 'Defines the bracket pairs. When a opening bracket is entered, the closing bracket is inserted automatically.'
'schema.autoClosingPairs.notIn', 'Defines a list of scopes where the auto pairs are disabled.'
'schema.autoCloseBefore', 'Defines what characters must be after the cursor in order for bracket or quote autoclosing to occur when using the \'languageDefined\' autoclosing setting. This is typically the set of characters which can not start an expression.'
'schema.surroundingPairs', 'Defines the bracket pairs that can be used to surround a selected string.'
'schema.wordPattern', 'Defines what is considered to be a word in the programming language.'
'schema.wordPattern.pattern', 'The RegExp pattern used to match words.'
'schema.wordPattern.flags', 'The RegExp flags used to match words.'
'schema.wordPattern.flags.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.indentationRules', 'The language\'s indentation settings.'
'schema.indentationRules.increaseIndentPattern', 'If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).'
'schema.indentationRules.increaseIndentPattern.pattern', 'The RegExp pattern for increaseIndentPattern.'
'schema.indentationRules.increaseIndentPattern.flags', 'The RegExp flags for increaseIndentPattern.'
'schema.indentationRules.increaseIndentPattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.indentationRules.decreaseIndentPattern', 'If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).'
'schema.indentationRules.decreaseIndentPattern.pattern', 'The RegExp pattern for decreaseIndentPattern.'
'schema.indentationRules.decreaseIndentPattern.flags', 'The RegExp flags for decreaseIndentPattern.'
'schema.indentationRules.decreaseIndentPattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.indentationRules.indentNextLinePattern', 'If a line matches this pattern, then **only the next line** after it should be indented once.'
'schema.indentationRules.indentNextLinePattern.pattern', 'The RegExp pattern for indentNextLinePattern.'
'schema.indentationRules.indentNextLinePattern.flags', 'The RegExp flags for indentNextLinePattern.'
'schema.indentationRules.indentNextLinePattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.indentationRules.unIndentedLinePattern', 'If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.'
'schema.indentationRules.unIndentedLinePattern.pattern', 'The RegExp pattern for unIndentedLinePattern.'
'schema.indentationRules.unIndentedLinePattern.flags', 'The RegExp flags for unIndentedLinePattern.'
'schema.indentationRules.unIndentedLinePattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.folding', 'The language\'s folding settings.'
'schema.folding.offSide', 'A language adheres to the off-side rule if blocks in that language are expressed by their indentation. If set, empty lines belong to the subsequent block.'
'schema.folding.markers', 'Language specific folding markers such as \'#region\' and \'#endregion\'. The start and end regexes will be tested against the contents of all lines and must be designed efficiently'
'schema.folding.markers.start', 'The RegExp pattern for the start marker. The regexp must start with \'^\'.'
'schema.folding.markers.end', 'The RegExp pattern for the end marker. The regexp must start with \'^\'.'
'schema.onEnterRules', 'The language\'s rules to be evaluated when pressing Enter.'
'schema.onEnterRules', 'The language\'s rules to be evaluated when pressing Enter.'
'schema.onEnterRules.beforeText', 'This rule will only execute if the text before the cursor matches this regular expression.'
'schema.onEnterRules.beforeText.pattern', 'The RegExp pattern for beforeText.'
'schema.onEnterRules.beforeText.flags', 'The RegExp flags for beforeText.'
'schema.onEnterRules.beforeText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.onEnterRules.afterText', 'This rule will only execute if the text after the cursor matches this regular expression.'
'schema.onEnterRules.afterText.pattern', 'The RegExp pattern for afterText.'
'schema.onEnterRules.afterText.flags', 'The RegExp flags for afterText.'
'schema.onEnterRules.afterText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.onEnterRules.previousLineText', 'This rule will only execute if the text above the line matches this regular expression.'
'schema.onEnterRules.previousLineText.pattern', 'The RegExp pattern for previousLineText.'
'schema.onEnterRules.previousLineText.flags', 'The RegExp flags for previousLineText.'
'schema.onEnterRules.previousLineText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.'
'schema.onEnterRules.action', 'The action to execute.'
'schema.onEnterRules.action.indent', "Describe what to do with the indentation"
'schema.onEnterRules.action.indent.none', "Insert new line and copy the previous line's indentation."
'schema.onEnterRules.action.indent.indent', "Insert new line and indent once (relative to the previous line's indentation)."
'schema.onEnterRules.action.indent.indentOutdent', "Insert two new lines:\n - the first one indented which will hold the cursor\n - the second one at the same indentation level"
'schema.onEnterRules.action.indent.outdent', "Insert new line and outdent once (relative to the previous line's indentation)."
'schema.onEnterRules.action.appendText', 'Describes text to be appended after the new line and after the indentation.'
'schema.onEnterRules.action.removeText', 'Describes the number of characters to remove from the new line\'s indentation.'
'actions.pasteSelectionClipboard', "Paste Selection Clipboard"
'editorWordWrap', 'Whether the editor is currently using word wrapping.')
'toggle.wordwrap', "View: Toggle Word Wrap"
'unwrapMinified', "Disable wrapping for this file"
'wrapMinified', "Enable wrapping for this file"
{ key: 'miToggleWordWrap', comment: ['&& denotes a mnemonic'] }, "&&Word Wrap"
'hintTimeout', "The diff algorithm was stopped early (after {0} ms.)", this._diffEditor.maxComputationTime
'removeTimeout', "Remove Limit"
'hintWhitespace', "Show Whitespace Differences"), null
src/vs/workbench/contrib/codeEditor/browser/largeFileOptimizations.ts:				const message = nls.localize(
'removeOptimizations', "Forcefully Enable Features"
'reopenFilePrompt', "Please reopen file in order for this setting to take effect.")
'empty', 'No matching entries'
'gotoSymbol', "Go to Symbol in Editor..."
{ key: 'miGotoSymbolInEditor', comment: ['&& denotes a mnemonic'] }, "Go to &&Symbol in Editor..."
'gotoSymbolQuickAccessPlaceholder', "Type the name of a symbol to go to."
'gotoSymbolQuickAccess', "Go to Symbol in Editor"
'gotoSymbolByCategoryQuickAccess', "Go to Symbol in Editor by Category"
'document', "Document Symbols")
'reply', "Reply...")
'newComment', "Type a new comment")
'reply', "Reply..."
'reply', "Reply..."
'commentToggleReaction', "Toggle Reaction"))
'commentToggleReactionError', "Toggling the comment reaction failed: {0}.", e.message
'commentToggleReactionDefaultError', "Toggling the comment reaction failed"
'commentDeleteReactionError', "Deleting the comment reaction failed: {0}.", e.message
'commentDeleteReactionDefaultError', "Deleting the comment reaction failed"
'commentAddReactionError', "Deleting the comment reaction failed: {0}.", e.message
'commentAddReactionDefaultError', "Deleting the comment reaction failed"
'label.find', "Find"
'placeholder.find', "Find (\u21C5 for history)"
'label.previousMatchButton', "Previous Match"
'label.nextMatchButton', "Next Match"
'label.closeButton', "Close"
'ariaSearchNoInput', "Enter search input"
'ariaSearchNoResultEmpty', "{0} found", label
'ariaSearchNoResult', "{0} found for '{1}'", label, searchString
'ariaSearchNoResultWithLineNumNoCurrentMatch', "{0} found for '{1}'", label, searchString
'resolvedCommentBorder', 'Color of borders and arrow for resolved comments.')
'unresolvedCommentBorder', 'Color of borders and arrow for unresolved comments.')
'commentThreadRangeBackground', 'Color of background for comment ranges.')
'commentThreadRangeBorder', 'Color of border for comment ranges.')
'commentThreadActiveRangeBackground', 'Color of background for currently selected or hovered comment range.')
'commentThreadActiveRangeBorder', 'Color of border for currently selected or hovered comment range.')
'collapseIcon', 'Icon to collapse a review comment.')
'label.collapse', "Collapse"), COLLAPSE_ACTION_CLASS, true, () => this._delegate.collapse()
'startThread', "Start discussion"
src/vs/workbench/contrib/comments/browser/commentThreadBody.ts:			this._commentsElement.ariaLabel = nls.localize('commentThreadAria.withRange', "Comment thread with {0} comments on lines {1} through {2}. {3}.",
src/vs/workbench/contrib/comments/browser/commentThreadBody.ts:			this._commentsElement.ariaLabel = nls.localize('commentThreadAria', "Comment thread with {0} comments. {1}.",
'title.template', "{0} ({1})", element.symbol.name, DocumentSymbolRenderer._symbolKindNames[element.symbol.kind]
'N.problem', "{0} problems in this element", count
'deep.problem', "Contains elements with problems"
'Array', "array"
'Boolean', "boolean"
'Class', "class"
'Constant', "constant"
'Constructor', "constructor"
'Enum', "enumeration"
'EnumMember', "enumeration member"
'Event', "event"
'Field', "field"
'File', "file"
'Function', "function"
'Interface', "interface"
'Key', "key"
'Method', "method"
'Module', "module"
'Namespace', "namespace"
'Null', "null"
'Number', "number"
'Object', "object"
'Operator', "operator"
'Package', "package"
'Property', "property"
'String', "string"
'Struct', "struct"
'TypeParameter', "type parameter"
'Variable', "variable"
'callFrom', "Calls from '{0}'", element.model.root.name
'callsTo', "Callers of '{0}'", element.model.root.name
'title.loading', "Loading...")
'empt.callsFrom', "No calls from '{0}'", model.root.name
'empt.callsTo', "No callers of '{0}'", model.root.name)
'editorGutterCommentRangeForeground', 'Editor gutter decoration color for commenting ranges.')
'emergencyConfOn', "Now changing the setting `editor.accessibilitySupport` to 'on'.")
'openingDocs', "Now opening the VS Code Accessibility documentation page.")
'introMsg', "Thank you for trying out VS Code's accessibility options."
'status', "Status:"
'changeConfigToOnMac', "To configure the editor to be permanently optimized for usage with a Screen Reader press Command+E now."
'changeConfigToOnWinLinux', "To configure the editor to be permanently optimized for usage with a Screen Reader press Control+E now."
'auto_unknown', "The editor is configured to use platform APIs to detect when a Screen Reader is attached, but the current runtime does not support this."
'auto_on', "The editor has automatically detected a Screen Reader is attached."
'auto_off', "The editor is configured to automatically detect when a Screen Reader is attached, which is not the case at this time."
'configuredOn', "The editor is configured to be permanently optimized for usage with a Screen Reader - you can change this by editing the setting `editor.accessibilitySupport`."
'configuredOff', "The editor is configured to never be optimized for usage with a Screen Reader."
'tabFocusModeOnMsg', "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}."
'tabFocusModeOnMsgNoKb', "Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding."
'tabFocusModeOffMsg', "Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}."
'tabFocusModeOffMsgNoKb', "Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding."
'openDocMac', "Press Command+H now to open a browser window with more VS Code information related to Accessibility."
'openDocWinLinux', "Press Control+H now to open a browser window with more VS Code information related to Accessibility."
'outroMsg', "You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape."
'ShowAccessibilityHelpAction', "Show Accessibility Help"
'tree.aria', "Call Hierarchy"
'from', "calls from {0}", element.item.name
'to', "callers of {0}", element.item.name
'gotoLine', "Go to Line/Column..."
'gotoLineQuickAccessPlaceholder', "Type the line number and optional column to go to (e.g. 42:5 for line 42 and column 5)."
'gotoLineQuickAccess', "Go to Line/Column"
'default', "Other"
'summary.0', "Made no edits"
'summary.nm', "Made {0} text edits in {1} files", textEditCount, textEditResources.size
'summary.n0', "Made {0} text edits in one file", textEditCount
'summary.textFiles', "Made {0} text edits in {1} files, also created or deleted {2} files", textEditCount, textEditResources.size, otherResources.size
'workspaceEdit', "Workspace Edit"), this._code || 'undoredo.workspaceEdit', undoRedoGroup, undoRedoSource, confirmBeforeUndo, progress, this._token, edits
'workspaceEdit', "Workspace Edit"), this._code || 'undoredo.workspaceEdit', this._editor, undoRedoGroup, undoRedoSource, progress, this._token, edits
'nothing', "Made no edits"
'fileOperation', "File operation"
'changeWorkspace', "Change Workspace"
'quit', "Quit"
'areYouSureQuiteBulkEdit', "Are you sure you want to {0}? '{1}' is in progress.", reasonLabel.toLowerCase(), label
'refactoring.autoSave', "Controls if files that were part of a refactoring are saved automatically"
'overlap', "Another refactoring is being previewed."
'cancel', "Cancel"
'detail', "Press 'Continue' to discard the previous refactoring and continue with the current refactoring."
'apply', "Apply Refactoring"
'cat', "Refactor Preview"
'Discard', "Discard Refactoring"
'cat', "Refactor Preview"
'toogleSelection', "Toggle Change"
'cat', "Refactor Preview"
'groupByFile', "Group Changes By File"
'cat', "Refactor Preview"
'groupByType', "Group Changes By Type"
'cat', "Refactor Preview"
'groupByType', "Group Changes By Type"
'cat', "Refactor Preview"
'refactorPreviewViewIcon', 'View icon of the refactor preview view.')
'panel', "Refactor Preview"
'panel', "Refactor Preview"
'audioCues.enabled.auto', "Enable audio cue when a screen reader is attached."
'audioCues.enabled.on', "Enable audio cue."
'audioCues.enabled.off', "Disable audio cue."
'audioCues.volume', "The volume of the audio cues in percent (0-100)."
'audioCues.lineHasBreakpoint', "Plays a sound when the active line has a breakpoint."
'audioCues.lineHasInlineSuggestion', "Plays a sound when the active line has an inline suggestion."
'audioCues.lineHasError', "Plays a sound when the active line has an error."
'audioCues.lineHasFoldedArea', "Plays a sound when the active line has a folded area that can be unfolded."
'audioCues.lineHasWarning', "Plays a sound when the active line has a warning."
'audioCues.onDebugBreak', "Plays a sound when the debugger stopped on a breakpoint."
'audioCues.noInlayHints', "Plays a sound when trying to read a line with inlay hints that has no inlay hints."
'audioCues.taskCompleted', "Plays a sound when a task completed."
'audioCues.taskFailed', "Plays a sound when a task fails (non-zero exit code)."
'audioCues.terminalQuickFix', "Plays a sound when a terminal quick fixes are available"
'ok', 'Apply'
'cancel', 'Discard'
'empty.msg', "Invoke a code action, like rename, to see a preview of its changes here."
'conflict.1', "Cannot apply refactoring because '{0}' has changed in the meantime.", this._labelService.getUriLabel(conflicts[0], { relative: true })
'conflict.N', "Cannot apply refactoring because {0} other files have changed in the meantime.", conflicts.length
'edt.title.del', "{0} (delete, refactor preview)", basename(fileElement.edit.uri)
'rename', "rename"
'create', "create"
'edt.title.2', "{0} ({1}, refactor preview)", basename(fileElement.edit.uri), typeLabel
'edt.title.1', "{0} (refactor preview)", basename(fileElement.edit.uri)
'editorHasCallHierarchyProvider', 'Whether a call hierarchy provider is available')
'callHierarchyVisible', 'Whether call hierarchy peek is currently showing')
'callHierarchyDirection', 'Whether call hierarchy shows incoming or outgoing calls') }
'no.item', "No results")
'error', "Failed to show call hierarchy")
'title', "Peek Call Hierarchy"
'title.incoming', "Show Incoming Calls"
'showIncomingCallsIcons', 'Icon for incoming calls in the call hierarchy view.')
'title.outgoing', "Show Outgoing Calls"
'showOutgoingCallsIcon', 'Icon for outgoing calls in the call hierarchy view.')
'title.refocus', "Refocus Call Hierarchy"
'close', 'Close'
'audioCues.lineHasError.name', 'Error on Line'
'audioCues.lineHasWarning.name', 'Warning on Line'
'audioCues.lineHasFoldedArea.name', 'Folded Area on Line'
'audioCues.lineHasBreakpoint.name', 'Breakpoint on Line'
'audioCues.lineHasInlineSuggestion.name', 'Inline Suggestion on Line'
'audioCues.terminalQuickFix.name', 'Terminal Quick Fix'
'audioCues.onDebugBreak.name', 'Debugger Stopped on Breakpoint'
'audioCues.noInlayHints', 'No Inlay Hints on Line'
'audioCues.taskCompleted', 'Task Completed'
'audioCues.taskFailed', 'Task Failed'
'audioCues.terminalBell', 'Terminal Bell'
'stickydesc', "Stick to the end even when going to longer lines"
'stickydesc', "Stick to the end even when going to longer lines"
'removedCursor', "Removed secondary cursors")
'bulkEdit', "Bulk Edit"
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
src/vs/workbench/contrib/bulkEdit/browser/preview/bulkEditTree.ts:					return localize(
'aria.replace', "line {0}, replacing {1} with {2}", element.edit.textEdit.textEdit.range.startLineNumber, element.selecting, element.inserting
'aria.del', "line {0}, removing {1}", element.edit.textEdit.textEdit.range.startLineNumber, element.selecting
'aria.insert', "line {0}, inserting {1}", element.edit.textEdit.textEdit.range.startLineNumber, element.selecting
'rename.label', "{0} → {1}", this._labelService.getUriLabel(element.edit.uri, { relative: true }), this._labelService.getUriLabel(element.edit.newUri, { relative: true })
'detail.rename', "(renaming)"
'detail.create', "(creating)"
'detail.del', "(deleting)"
'title', "{0} - {1}", metadata.label, metadata.description
'audioCues.help', "Help: List Audio Cues"
'disabled', "Disabled") + '
'audioCues.help.settings', 'Enable/Disable Audio Cue'
'audioCues.help.placeholder', 'Select an audio cue to play'
'lineHighlight', 'Background color for the highlight of line at the cursor position.')
'lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.')
'rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true
'rangeHighlightBorder', 'Background color of the border around highlighted ranges.'), true
'symbolHighlight', 'Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.'), true
'symbolHighlightBorder', 'Background color of the border around highlighted symbols.'), true
'caret', 'Color of the editor cursor.')
'editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.')
'editorWhitespaces', 'Color of whitespace characters in the editor.')
'editorIndentGuides', 'Color of the editor indentation guides.')
'editorActiveIndentGuide', 'Color of the active editor indentation guides.')
'editorLineNumbers', 'Color of editor line numbers.')
'deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \'editorLineNumber.activeForeground\' instead.')
'editorActiveLineNumber', 'Color of editor active line number')
'editorRuler', 'Color of the editor rulers.')
'editorCodeLensForeground', 'Foreground color of editor CodeLens')
'editorBracketMatchBackground', 'Background color behind matching brackets')
'editorBracketMatchBorder', 'Color for matching brackets boxes')
'editorOverviewRulerBorder', 'Color of the overview ruler border.')
'editorOverviewRulerBackground', 'Background color of the editor overview ruler.')
'editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.')
'unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.')
'unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, "#000000c0" will render the code with 75% opacity. For high contrast themes, use the  \'editorUnnecessaryCode.border\' theme color to underline unnecessary code instead of fading it out.')
'editorGhostTextBorder', 'Border color of ghost text in the editor.')
'editorGhostTextForeground', 'Foreground color of the ghost text in the editor.')
'editorGhostTextBackground', 'Background color of the ghost text in the editor.')
'overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true
'overviewRuleError', 'Overview ruler marker color for errors.')
'overviewRuleWarning', 'Overview ruler marker color for warnings.')
'overviewRuleInfo', 'Overview ruler marker color for infos.')
'editorBracketHighlightForeground1', 'Foreground color of brackets (1). Requires enabling bracket pair colorization.')
'editorBracketHighlightForeground2', 'Foreground color of brackets (2). Requires enabling bracket pair colorization.')
'editorBracketHighlightForeground3', 'Foreground color of brackets (3). Requires enabling bracket pair colorization.')
'editorBracketHighlightForeground4', 'Foreground color of brackets (4). Requires enabling bracket pair colorization.')
'editorBracketHighlightForeground5', 'Foreground color of brackets (5). Requires enabling bracket pair colorization.')
'editorBracketHighlightForeground6', 'Foreground color of brackets (6). Requires enabling bracket pair colorization.')
'editorBracketHighlightUnexpectedBracketForeground', 'Foreground color of unexpected brackets.')
'editorBracketPairGuide.background1', 'Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.')
'editorBracketPairGuide.background2', 'Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.')
'editorBracketPairGuide.background3', 'Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.')
'editorBracketPairGuide.background4', 'Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.')
'editorBracketPairGuide.background5', 'Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.')
'editorBracketPairGuide.background6', 'Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.')
'editorBracketPairGuide.activeBackground1', 'Background color of active bracket pair guides (1). Requires enabling bracket pair guides.')
'editorBracketPairGuide.activeBackground2', 'Background color of active bracket pair guides (2). Requires enabling bracket pair guides.')
'editorBracketPairGuide.activeBackground3', 'Background color of active bracket pair guides (3). Requires enabling bracket pair guides.')
'editorBracketPairGuide.activeBackground4', 'Background color of active bracket pair guides (4). Requires enabling bracket pair guides.')
'editorBracketPairGuide.activeBackground5', 'Background color of active bracket pair guides (5). Requires enabling bracket pair guides.')
'editorBracketPairGuide.activeBackground6', 'Background color of active bracket pair guides (6). Requires enabling bracket pair guides.')
'editorUnicodeHighlight.border', 'Border color used to highlight unicode characters.')
'editorUnicodeHighlight.background', 'Background color used to highlight unicode characters.')
'editorConfigurationTitle', "Editor"
'tabSize', "The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`'
'indentSize', "The number of spaces used for indentation or 'tabSize' to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on."
'insertSpaces', "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.", '`#editor.detectIndentation#`'
'detectIndentation', "Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.", '`#editor.tabSize#`', '`#editor.insertSpaces#`'
'trimAutoWhitespace', "Remove trailing auto inserted whitespace."
'largeFileOptimizations', "Special handling for large files to disable certain memory intensive features."
'wordBasedSuggestions', "Controls whether completions should be computed based on words in the document."
'wordBasedSuggestionsMode.currentDocument', 'Only suggest words from the active document.'
'wordBasedSuggestionsMode.matchingDocuments', 'Suggest words from all open documents of the same language.'
'wordBasedSuggestionsMode.allDocuments', 'Suggest words from all open documents.'
'wordBasedSuggestionsMode', "Controls from which documents word based completions are computed."
'semanticHighlighting.true', 'Semantic highlighting enabled for all color themes.'
'semanticHighlighting.false', 'Semantic highlighting disabled for all color themes.'
'semanticHighlighting.configuredByTheme', 'Semantic highlighting is configured by the current color theme\'s `semanticHighlighting` setting.'
'semanticHighlighting.enabled', "Controls whether the semanticHighlighting is shown for the languages that support it."
'stablePeek', "Keep peek editors open even when double clicking their content or when hitting `Escape`."
'maxTokenizationLineLength', "Lines above this length will not be tokenized for performance reasons"
'schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation.'
'schema.openBracket', 'The opening bracket character or string sequence.'
'schema.closeBracket', 'The closing bracket character or string sequence.'
'schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.'
'schema.openBracket', 'The opening bracket character or string sequence.'
'schema.closeBracket', 'The closing bracket character or string sequence.'
'maxComputationTime', "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout."
'maxFileSize', "Maximum file size in MB for which to compute diffs. Use 0 for no limit."
'sideBySide', "Controls whether the diff editor shows the diff side by side or inline."
'renderMarginRevertIcon', "When enabled, the diff editor shows arrows in its glyph margin to revert changes."
'ignoreTrimWhitespace', "When enabled, the diff editor ignores changes in leading or trailing whitespace."
'renderIndicators', "Controls whether the diff editor shows +/- indicators for added/removed changes."
'codeLens', "Controls whether the editor shows CodeLens."
'wordWrap.off', "Lines will never wrap."
'wordWrap.on', "Lines will wrap at the viewport width."
'wordWrap.inherit', "Lines will wrap according to the {0} setting.", '`#editor.wordWrap#`'
'diffAlgorithm.smart', "Uses the default diffing algorithm."
'diffAlgorithm.experimental', "Uses an experimental diffing algorithm."
'editor', "editor")
'accessibilityOffAriaLabel', "The editor is not accessible at this time. Press {0} for options.", platform.isLinux ? 'Shift+Alt+F1' : 'Alt+F1'
'corrupt.commands', "Unexpected exception while executing command."
data: ILocalizeInfo | string, message: string, ...args: any[]
'accessibilitySupport.auto', "The editor will use platform APIs to detect when a Screen Reader is attached."
'accessibilitySupport.on', "The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled."
'accessibilitySupport.off', "The editor will never be optimized for usage with a Screen Reader."
'accessibilitySupport', "Controls whether the editor should run in a mode where it is optimized for screen readers."
'comments.insertSpace', "Controls whether a space character is inserted when commenting."
'comments.ignoreEmptyLines', 'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.'
'emptySelectionClipboard', "Controls whether copying without a selection copies the current line."
'find.cursorMoveOnType', "Controls whether the cursor should jump to find matches while typing."
'editor.find.seedSearchStringFromSelection.never', 'Never seed search string from the editor selection.'
'editor.find.seedSearchStringFromSelection.always', 'Always seed search string from the editor selection, including word at cursor position.'
'editor.find.seedSearchStringFromSelection.selection', 'Only seed search string from the editor selection.'
'find.seedSearchStringFromSelection', "Controls whether the search string in the Find Widget is seeded from the editor selection."
'editor.find.autoFindInSelection.never', 'Never turn on Find in Selection automatically (default).'
'editor.find.autoFindInSelection.always', 'Always turn on Find in Selection automatically.'
'editor.find.autoFindInSelection.multiline', 'Turn on Find in Selection automatically when multiple lines of content are selected.'
'find.autoFindInSelection', "Controls the condition for turning on Find in Selection automatically."
'find.globalFindClipboard', "Controls whether the Find Widget should read or modify the shared find clipboard on macOS."
'find.addExtraSpaceOnTop', "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible."
'find.loop', "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found."
'fontLigatures', "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."
'fontFeatureSettings', "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures."
'fontLigaturesGeneral', "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."
'fontSize', "Controls the font size in pixels."
'fontWeightErrorMessage', "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
'fontWeight', "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000."
'editor.gotoLocation.multiple.peek', 'Show peek view of the results (default)'
'editor.gotoLocation.multiple.gotoAndPeek', 'Go to the primary result and show a peek view'
'editor.gotoLocation.multiple.goto', 'Go to the primary result and enable peek-less navigation to others'
'editor.gotoLocation.multiple.deprecated', "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead."
'editor.editor.gotoLocation.multipleDefinitions', "Controls the behavior the 'Go to Definition'-command when multiple target locations exist."
'editor.editor.gotoLocation.multipleTypeDefinitions', "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist."
'editor.editor.gotoLocation.multipleDeclarations', "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist."
'editor.editor.gotoLocation.multipleImplemenattions', "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist."
'editor.editor.gotoLocation.multipleReferences', "Controls the behavior the 'Go to References'-command when multiple target locations exist."
'alternativeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Definition' is the current location."
'alternativeTypeDefinitionCommand', "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location."
'alternativeDeclarationCommand', "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location."
'alternativeImplementationCommand', "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location."
'alternativeReferenceCommand', "Alternative command id that is being executed when the result of 'Go to Reference' is the current location."
'hover.enabled', "Controls whether the hover is shown."
'hover.delay', "Controls the delay in milliseconds after which the hover is shown."
'hover.sticky', "Controls whether the hover should remain visible when mouse is moved over it."
'hover.above', "Prefer showing hovers above the line, if there's space."
'wrappingStrategy.simple', "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."
'wrappingStrategy.advanced', "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases."
'wrappingStrategy', "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience."
'codeActions', "Enables the code action lightbulb in the editor."
'editor.stickyScroll', "Shows the nested current scopes during the scroll at the top of the editor."
'editor.stickyScroll.', "Defines the maximum number of sticky lines to show."
'inlayHints.enable', "Enables the inlay hints in the editor."
'editor.inlayHints.on', "Inlay hints are enabled"
'editor.inlayHints.onUnlessPressed', "Inlay hints are showing by default and hide when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`
'editor.inlayHints.offUnlessPressed', "Inlay hints are hidden by default and show when holding {0}", platform.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`
'editor.inlayHints.off', "Inlay hints are disabled"
'inlayHints.fontSize', "Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.", '`#editor.fontSize#`', '`5`'
'inlayHints.fontFamily', "Controls font family of inlay hints in the editor. When set to empty, the {0} is used.", '`#editor.fontFamily#`'
'inlayHints.padding', "Enables the padding around the inlay hints in the editor."
'lineHeight', "Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values."
'minimap.enabled', "Controls whether the minimap is shown."
'minimap.autohide', "Controls whether the minimap is hidden automatically."
'minimap.size.proportional', "The minimap has the same size as the editor contents (and might scroll)."
'minimap.size.fill', "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."
'minimap.size.fit', "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."
'minimap.size', "Controls the size of the minimap."
'minimap.side', "Controls the side where to render the minimap."
'minimap.showSlider', "Controls when the minimap slider is shown."
'minimap.scale', "Scale of content drawn in the minimap: 1, 2 or 3."
'minimap.renderCharacters', "Render the actual characters on a line as opposed to color blocks."
'minimap.maxColumn', "Limit the width of the minimap to render at most a certain number of columns."
'padding.top', "Controls the amount of space between the top edge of the editor and the first line."
'padding.bottom', "Controls the amount of space between the bottom edge of the editor and the last line."
'parameterHints.enabled', "Enables a pop-up that shows parameter documentation and type information as you type."
'parameterHints.cycle', "Controls whether the parameter hints menu cycles or closes when reaching the end of the list."
'off', "Quick suggestions are disabled"
'quickSuggestions.strings', "Enable quick suggestions inside strings."
'quickSuggestions.comments', "Enable quick suggestions inside comments."
'quickSuggestions.other', "Enable quick suggestions outside of strings and comments."
'quickSuggestions', "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '{0}'-setting which controls if suggestions are triggered by special characters.", `#editor.suggestOnTriggerCharacters#`
'lineNumbers.off', "Line numbers are not rendered."
'lineNumbers.on', "Line numbers are rendered as absolute number."
'lineNumbers.relative', "Line numbers are rendered as distance in lines to cursor position."
'lineNumbers.interval', "Line numbers are rendered every 10 lines."
'lineNumbers', "Controls the display of line numbers."
'rulers.size', "Number of monospace characters at which this editor ruler will render."
'rulers.color', "Color of this editor ruler."
'rulers', "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty."
'scrollbar.vertical.auto', "The vertical scrollbar will be visible only when necessary."
'scrollbar.vertical.visible', "The vertical scrollbar will always be visible."
'scrollbar.vertical.fit', "The vertical scrollbar will always be hidden."
'scrollbar.vertical', "Controls the visibility of the vertical scrollbar."
'scrollbar.horizontal.auto', "The horizontal scrollbar will be visible only when necessary."
'scrollbar.horizontal.visible', "The horizontal scrollbar will always be visible."
'scrollbar.horizontal.fit', "The horizontal scrollbar will always be hidden."
'scrollbar.horizontal', "Controls the visibility of the horizontal scrollbar."
'scrollbar.verticalScrollbarSize', "The width of the vertical scrollbar."
'scrollbar.horizontalScrollbarSize', "The height of the horizontal scrollbar."
'scrollbar.scrollByPage', "Controls whether clicks scroll by page or jump to click position."
'unicodeHighlight.nonBasicASCII', "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII."
'unicodeHighlight.invisibleCharacters', "Controls whether characters that just reserve space or have no width at all are highlighted."
'unicodeHighlight.ambiguousCharacters', "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale."
'unicodeHighlight.includeComments', "Controls whether characters in comments should also be subject to unicode highlighting."
'unicodeHighlight.includeStrings', "Controls whether characters in strings should also be subject to unicode highlighting."
'unicodeHighlight.allowedCharacters', "Defines allowed characters that are not being highlighted."
'unicodeHighlight.allowedLocales', "Unicode characters that are common in allowed locales are not being highlighted."
'inlineSuggest.enabled', "Controls whether to automatically show inline suggestions in the editor."
'bracketPairColorization.enabled', "Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.", '`#workbench.colorCustomizations#`'
'bracketPairColorization.independentColorPoolPerBracketType', "Controls whether each bracket type has its own independent color pool."
'editor.guides.bracketPairs.true', "Enables bracket pair guides."
'editor.guides.bracketPairs.active', "Enables bracket pair guides only for the active bracket pair."
'editor.guides.bracketPairs.false', "Disables bracket pair guides."
'editor.guides.bracketPairs', "Controls whether bracket pair guides are enabled or not."
'editor.guides.bracketPairsHorizontal.true', "Enables horizontal guides as addition to vertical bracket pair guides."
'editor.guides.bracketPairsHorizontal.active', "Enables horizontal guides only for the active bracket pair."
'editor.guides.bracketPairsHorizontal.false', "Disables horizontal bracket pair guides."
'editor.guides.bracketPairsHorizontal', "Controls whether horizontal bracket pair guides are enabled or not."
'editor.guides.highlightActiveBracketPair', "Controls whether the editor should highlight the active bracket pair."
'editor.guides.indentation', "Controls whether the editor should render indent guides."
'editor.guides.highlightActiveIndentation.true', "Highlights the active indent guide."
'editor.guides.highlightActiveIndentation.always', "Highlights the active indent guide even if bracket guides are highlighted."
'editor.guides.highlightActiveIndentation.false', "Do not highlight the active indent guide."
'editor.guides.highlightActiveIndentation', "Controls whether the editor should highlight the active indent guide."
'suggest.insertMode.insert', "Insert suggestion without overwriting text right of the cursor."
'suggest.insertMode.replace', "Insert suggestion and overwrite text right of the cursor."
'suggest.insertMode', "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature."
'suggest.filterGraceful', "Controls whether filtering and sorting suggestions accounts for small typos."
'suggest.localityBonus', "Controls whether sorting favors words that appear close to the cursor."
'suggest.shareSuggestSelections', "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`)."
'suggest.snippetsPreventQuickSuggestions', "Controls whether an active snippet prevents quick suggestions."
'suggest.showIcons', "Controls whether to show or hide icons in suggestions."
'suggest.showStatusBar', "Controls the visibility of the status bar at the bottom of the suggest widget."
'suggest.preview', "Controls whether to preview the suggestion outcome in the editor."
'suggest.showInlineDetails', "Controls whether suggest details show inline with the label or only in the details widget"
'suggest.maxVisibleSuggestions.dep', "This setting is deprecated. The suggest widget can now be resized."
'deprecated', "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead."
'editor.suggest.showMethods', "When enabled IntelliSense shows `method`-suggestions."
'editor.suggest.showFunctions', "When enabled IntelliSense shows `function`-suggestions."
'editor.suggest.showConstructors', "When enabled IntelliSense shows `constructor`-suggestions."
'editor.suggest.showDeprecated', "When enabled IntelliSense shows `deprecated`-suggestions."
'editor.suggest.matchOnWordStartOnly', "When enabled IntelliSense filtering requires that the first character matches on a word start, e.g `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality."
'editor.suggest.showFields', "When enabled IntelliSense shows `field`-suggestions."
'editor.suggest.showVariables', "When enabled IntelliSense shows `variable`-suggestions."
'editor.suggest.showClasss', "When enabled IntelliSense shows `class`-suggestions."
'editor.suggest.showStructs', "When enabled IntelliSense shows `struct`-suggestions."
'editor.suggest.showInterfaces', "When enabled IntelliSense shows `interface`-suggestions."
'editor.suggest.showModules', "When enabled IntelliSense shows `module`-suggestions."
'editor.suggest.showPropertys', "When enabled IntelliSense shows `property`-suggestions."
'editor.suggest.showEvents', "When enabled IntelliSense shows `event`-suggestions."
'editor.suggest.showOperators', "When enabled IntelliSense shows `operator`-suggestions."
'editor.suggest.showUnits', "When enabled IntelliSense shows `unit`-suggestions."
'editor.suggest.showValues', "When enabled IntelliSense shows `value`-suggestions."
'editor.suggest.showConstants', "When enabled IntelliSense shows `constant`-suggestions."
'editor.suggest.showEnums', "When enabled IntelliSense shows `enum`-suggestions."
'editor.suggest.showEnumMembers', "When enabled IntelliSense shows `enumMember`-suggestions."
'editor.suggest.showKeywords', "When enabled IntelliSense shows `keyword`-suggestions."
'editor.suggest.showTexts', "When enabled IntelliSense shows `text`-suggestions."
'editor.suggest.showColors', "When enabled IntelliSense shows `color`-suggestions."
'editor.suggest.showFiles', "When enabled IntelliSense shows `file`-suggestions."
'editor.suggest.showReferences', "When enabled IntelliSense shows `reference`-suggestions."
'editor.suggest.showCustomcolors', "When enabled IntelliSense shows `customcolor`-suggestions."
'editor.suggest.showFolders', "When enabled IntelliSense shows `folder`-suggestions."
'editor.suggest.showTypeParameters', "When enabled IntelliSense shows `typeParameter`-suggestions."
'editor.suggest.showSnippets', "When enabled IntelliSense shows `snippet`-suggestions."
'editor.suggest.showUsers', "When enabled IntelliSense shows `user`-suggestions."
'editor.suggest.showIssues', "When enabled IntelliSense shows `issues`-suggestions."
'selectLeadingAndTrailingWhitespace', "Whether leading and trailing whitespace should always be selected."
'wrappingIndent.none', "No indentation. Wrapped lines begin at column 1."
'wrappingIndent.same', "Wrapped lines get the same indentation as the parent."
'wrappingIndent.indent', "Wrapped lines get +1 indentation toward the parent."
'wrappingIndent.deepIndent', "Wrapped lines get +2 indentation toward the parent."
'wrappingIndent', "Controls the indentation of wrapped lines."
'dropIntoEditor.enabled', "Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor)."
'acceptSuggestionOnCommitCharacter', "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`; `) can be a commit character that accepts a suggestion and types that character."
'acceptSuggestionOnEnterSmart', "Only accept a suggestion with `Enter` when it makes a textual change."
'acceptSuggestionOnEnter', "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions."
'accessibilityPageSize', "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default."
'editorViewAccessibleLabel', "Editor content"
'editor.autoClosingBrackets.languageDefined', "Use language configurations to determine when to autoclose brackets."
'editor.autoClosingBrackets.beforeWhitespace', "Autoclose brackets only when the cursor is to the left of whitespace."
'autoClosingBrackets', "Controls whether the editor should automatically close brackets after the user adds an opening bracket."
'editor.autoClosingDelete.auto', "Remove adjacent closing quotes or brackets only if they were automatically inserted."
'autoClosingDelete', "Controls whether the editor should remove adjacent closing quotes or brackets when deleting."
'editor.autoClosingOvertype.auto', "Type over closing quotes or brackets only if they were automatically inserted."
'autoClosingOvertype', "Controls whether the editor should type over closing quotes or brackets."
'editor.autoClosingQuotes.languageDefined', "Use language configurations to determine when to autoclose quotes."
'editor.autoClosingQuotes.beforeWhitespace', "Autoclose quotes only when the cursor is to the left of whitespace."
'autoClosingQuotes', "Controls whether the editor should automatically close quotes after the user adds an opening quote."
'editor.autoIndent.none', "The editor will not insert indentation automatically."
'editor.autoIndent.keep', "The editor will keep the current line's indentation."
'editor.autoIndent.brackets', "The editor will keep the current line's indentation and honor language defined brackets."
'editor.autoIndent.advanced', "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."
'editor.autoIndent.full', "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."
'autoIndent', "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines."
'editor.autoSurround.languageDefined', "Use language configurations to determine when to automatically surround selections."
'editor.autoSurround.quotes', "Surround with quotes but not brackets."
'editor.autoSurround.brackets', "Surround with brackets but not quotes."
'autoSurround', "Controls whether the editor should automatically surround selections when typing quotes or brackets."
'stickyTabStops', "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops."
'codeLens', "Controls whether the editor shows CodeLens."
'codeLensFontFamily', "Controls the font family for CodeLens."
'codeLensFontSize', "Controls the font size in pixels for CodeLens. When set to `0`, 90% of `#editor.fontSize#` is used."
'colorDecorators', "Controls whether the editor should render the inline color decorators and color picker."
'columnSelection', "Enable that the selection with the mouse and keys is doing column selection."
'copyWithSyntaxHighlighting', "Controls whether syntax highlighting should be copied into the clipboard."
'cursorBlinking', "Control the cursor animation style."
'cursorSmoothCaretAnimation', "Controls whether the smooth caret animation should be enabled."
'cursorStyle', "Controls the cursor style."
'cursorSurroundingLines', "Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors."
'cursorSurroundingLinesStyle.default', "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."
'cursorSurroundingLinesStyle.all', "`cursorSurroundingLines` is enforced always."
'cursorSurroundingLinesStyle', "Controls when `cursorSurroundingLines` should be enforced."
'cursorWidth', "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`."
'dragAndDrop', "Controls whether the editor should allow moving selections via drag and drop."
'fastScrollSensitivity', "Scrolling speed multiplier when pressing `Alt`."
'folding', "Controls whether the editor has code folding enabled."
'foldingStrategy.auto', "Use a language-specific folding strategy if available, else the indentation-based one."
'foldingStrategy.indentation', "Use the indentation-based folding strategy."
'foldingStrategy', "Controls the strategy for computing folding ranges."
'foldingHighlight', "Controls whether the editor should highlight folded ranges."
'foldingImportsByDefault', "Controls whether the editor automatically collapses import ranges."
'foldingMaximumRegions', "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions."
'unfoldOnClickAfterEndOfLine', "Controls whether clicking on the empty content after a folded line will unfold the line."
'fontFamily', "Controls the font family."
'formatOnPaste', "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document."
'formatOnType', "Controls whether the editor should automatically format the line after typing."
'glyphMargin', "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging."
'hideCursorInOverviewRuler', "Controls whether the cursor should be hidden in the overview ruler."
'letterSpacing', "Controls the letter spacing in pixels."
'linkedEditing', "Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing."
'links', "Controls whether the editor should detect links and make them clickable."
'matchBrackets', "Highlight matching brackets."
'mouseWheelScrollSensitivity', "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events."
'mouseWheelZoom', "Zoom the font of the editor when using mouse wheel and holding `Ctrl`."
'multiCursorMergeOverlapping', "Merge multiple cursors when they are overlapping."
'multiCursorModifier.ctrlCmd', "Maps to `Control` on Windows and Linux and to `Command` on macOS."
'multiCursorModifier.alt', "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
src/vs/editor/common/config/editorOptions.ts:			markdownDescription: nls.localize({
'multiCursorPaste.spread', "Each cursor pastes a single line of the text."
'multiCursorPaste.full', "Each cursor pastes the full text."
'multiCursorPaste', "Controls pasting when the line count of the pasted text matches the cursor count."
'occurrencesHighlight', "Controls whether the editor should highlight semantic symbol occurrences."
'overviewRulerBorder', "Controls whether a border should be drawn around the overview ruler."
'peekWidgetDefaultFocus.tree', "Focus the tree when opening peek"
'peekWidgetDefaultFocus.editor', "Focus the editor when opening peek"
'peekWidgetDefaultFocus', "Controls whether to focus the inline editor or the tree in the peek widget."
'definitionLinkOpensInPeek', "Controls whether the Go to Definition mouse gesture always opens the peek widget."
'quickSuggestionsDelay', "Controls the delay in milliseconds after which quick suggestions will show up."
'renameOnTypeDeprecate', "Deprecated, use `editor.linkedEditing` instead."
'renderControlCharacters', "Controls whether the editor should render control characters."
'renderFinalNewline', "Render last line number when the file ends with a newline."
'renderLineHighlight.all', "Highlights both the gutter and the current line."
'renderLineHighlight', "Controls how the editor should render the current line highlight."
'renderLineHighlightOnlyWhenFocus', "Controls if the editor should render the current line highlight only when the editor is focused."
'renderWhitespace.boundary', "Render whitespace characters except for single spaces between words."
'renderWhitespace.selection', "Render whitespace characters only on selected text."
'renderWhitespace.trailing', "Render only trailing whitespace characters."
'renderWhitespace', "Controls how the editor should render whitespace characters."
'roundedSelection', "Controls whether selections should have rounded corners."
'scrollBeyondLastColumn', "Controls the number of extra characters beyond which the editor will scroll horizontally."
'scrollBeyondLastLine', "Controls whether the editor will scroll beyond the last line."
'scrollPredominantAxis', "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad."
'selectionClipboard', "Controls whether the Linux primary clipboard should be supported."
'selectionHighlight', "Controls whether the editor should highlight matches similar to the selection."
'showFoldingControls.always', "Always show the folding controls."
'showFoldingControls.never', "Never show the folding controls and reduce the gutter size."
'showFoldingControls.mouseover', "Only show the folding controls when the mouse is over the gutter."
'showFoldingControls', "Controls when the folding controls on the gutter are shown."
'showUnused', "Controls fading out of unused code."
'showDeprecated', "Controls strikethrough deprecated variables."
'snippetSuggestions.top', "Show snippet suggestions on top of other suggestions."
'snippetSuggestions.bottom', "Show snippet suggestions below other suggestions."
'snippetSuggestions.inline', "Show snippets suggestions with other suggestions."
'snippetSuggestions.none', "Do not show snippet suggestions."
'snippetSuggestions', "Controls whether snippets are shown with other suggestions and how they are sorted."
'smoothScrolling', "Controls whether the editor will scroll using an animation."
'suggestFontSize', "Font size for the suggest widget. When set to {0}, the value of {1} is used.", '`0`', '`#editor.fontSize#`'
'suggestLineHeight', "Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.", '`0`', '`#editor.lineHeight#`'
'suggestOnTriggerCharacters', "Controls whether suggestions should automatically show up when typing trigger characters."
'suggestSelection.first', "Always select the first suggestion."
'suggestSelection.recentlyUsed', "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."
'suggestSelection.recentlyUsedByPrefix', "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
'suggestSelection', "Controls how suggestions are pre-selected when showing the suggest list."
'tabCompletion.on', "Tab complete will insert the best matching suggestion when pressing tab."
'tabCompletion.off', "Disable tab completions."
'tabCompletion.onlySnippets', "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
'tabCompletion', "Enables tab completions."
'unusualLineTerminators.auto', "Unusual line terminators are automatically removed."
'unusualLineTerminators.off', "Unusual line terminators are ignored."
'unusualLineTerminators.prompt', "Unusual line terminators prompt to be removed."
'unusualLineTerminators', "Remove unusual line terminators that might cause problems."
'useTabStops', "Inserting and deleting whitespace follows tab stops."
'wordSeparators', "Characters that will be used as word separators when doing word related navigations or operations."
'wordWrap.off', "Lines will never wrap."
'wordWrap.on', "Lines will wrap at the viewport width."
src/vs/editor/common/config/editorOptions.ts:				nls.localize({
src/vs/editor/common/config/editorOptions.ts:				nls.localize({
src/vs/editor/common/config/editorOptions.ts:			description: nls.localize({
src/vs/editor/common/config/editorOptions.ts:			markdownDescription: nls.localize({
'secondInstanceAdmin', "A second instance of {0} is already running as administrator.", productService.nameShort
'secondInstanceAdminDetail', "Please close the other instance and try again."
'secondInstanceNoResponse', "Another instance of {0} is running but not responding", productService.nameShort
'secondInstanceNoResponseDetail', "Please close all other instances and try again."
'startupDataDirError', "Unable to write program user data."
'startupUserDataAndExtensionsDirErrorDetail', "{0}\n\nPlease make sure the following directories are writeable:\n\n{1}", toErrorMessage(error), directories.join('\n')
{ key: 'close', comment: ['&& denotes a mnemonic'] }, "&&Close")
'invalid file', "Error extracting {0}. Invalid file.", fileName))
'incompleteExtract', "Incomplete. Found {0} of {1} entries", extractedEntriesCount, zipfile.entryCount)))
'notFound', "{0} not found inside zip.", filePath)))
{ key: 'open', comment: ['&& denotes a mnemonic'] }, "&&Yes")
{ key: 'cancel', comment: ['&& denotes a mnemonic'] }, "&&No")
'confirmOpenMessage', "An external application wants to open '{0}' in {1}. Do you want to open this file or folder?", getPathLabel(uri, { os: OS, tildify: this.environmentMainService }), this.productService.nameShort
'confirmOpenDetail', "If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press 'No'"
'stackTrace.format', "{0}: {1}", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace)
'nodeExceptionMessage', "A system error occurred ({0})", exception.message
'error.defaultMessage', "An unknown error occurred. Please consult the log for more details."
'error.defaultMessage', "An unknown error occurred. Please consult the log for more details."
'error.moreErrors', "{0} ({1} errors in total)", msg, errors.length
'error.defaultMessage', "An unknown error occurred. Please consult the log for more details."
'error.invalidSymbol', 'Invalid symbol'
'error.invalidNumberFormat', 'Invalid number format'
'error.propertyNameExpected', 'Property name expected'
'error.valueExpected', 'Value expected'
'error.colonExpected', 'Colon expected'
'error.commaExpected', 'Comma expected'
'error.closeBraceExpected', 'Closing brace expected'
'error.closeBracketExpected', 'Closing bracket expected'
'error.endOfFileExpected', 'End of file expected'
{ key: 'titleLabel', comment: ['action title', 'action keybinding'] }, "{0} ({1})", title, this.options.keybinding
{ key: 'ensureLoaderPluginIsLoaded', comment: ['{Locked}'] }, '_'
'viewSection', "{0} Section", options.title
'mMore', 'More'
'collapse all', "Collapse All"), 'collapse-all', enabled
{ key: 'selectBox', comment: ['Behave like native select dropdown element.'] }, "Select Box"
'moreActions', "More Actions..."
'filter', "Filter"
'type to search', "Type to search")
'type to search', "Type to search"
'close', "Close"), 'codicon codicon-close', true, () => this.dispose())
'not found', "No elements found.") }
'iconLabel.loading', "Loading..."), focus
'unbound', "Unbound"))
'caseDescription', "Match Case"
'wordsDescription', "Match Whole Word"
'regexDescription', "Use Regular Expression"
'moreActions', "More Actions..."))), menuActionsProvider, this.contextMenuProvider, { classNames: ['dropdown', ...Codicon.dropDownButton.classNamesArray, ...menuActionClassNames] }
'ok', "OK"
'dialogInfoMessage', 'Info'
'dialogErrorMessage', 'Error'
'dialogWarningMessage', 'Warning'
'dialogPendingMessage', 'In Progress'
'dialogClose', "Close Dialog"), Codicon.dialogClose.classNames, true, async (
'alertErrorMessage', "Error: {0}", this.message.content
'alertWarningMessage', "Warning: {0}", this.message.content
'alertInfoMessage', "Info: {0}", this.message.content
{ key: 'history.inputbox.hint', comment: ['Text will be prefixed with \u21C5 plus a single space, then used as a hint where input field keeps history'] }, "for history"
{ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"
{ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"
{ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"
{ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, "Windows"
{ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, "Ctrl"
{ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, "Shift"
{ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, "Alt"
{ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, "Super"
{ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"
{ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"
{ key: 'optKey.long', comment: ['This is the long form for the Alt/Option key on the keyboard'] }, "Option"
{ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, "Command"
{ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"
{ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"
{ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"
{ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, "Windows"
{ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, "Control"
{ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, "Shift"
{ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, "Alt"
{ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, "Super"
"button dropdown more actions", 'More Actions...'
'defaultLabel', "input"
'date.fromNow.in', 'in {0}', fromNow(new Date().getTime() + seconds * 1000, false)
'date.fromNow.now', 'now'
'date.fromNow.seconds.singular.ago.fullWord', '{0} second ago', value
'date.fromNow.seconds.singular.ago', '{0} sec ago', value
'date.fromNow.seconds.plural.ago.fullWord', '{0} seconds ago', value
'date.fromNow.seconds.plural.ago', '{0} secs ago', value
'date.fromNow.seconds.singular.fullWord', '{0} second', value
'date.fromNow.seconds.singular', '{0} sec', value
'date.fromNow.seconds.plural.fullWord', '{0} seconds', value
'date.fromNow.seconds.plural', '{0} secs', value
'date.fromNow.minutes.singular.ago.fullWord', '{0} minute ago', value
'date.fromNow.minutes.singular.ago', '{0} min ago', value
'date.fromNow.minutes.plural.ago.fullWord', '{0} minutes ago', value
'date.fromNow.minutes.plural.ago', '{0} mins ago', value
'date.fromNow.minutes.singular.fullWord', '{0} minute', value
'date.fromNow.minutes.singular', '{0} min', value
'date.fromNow.minutes.plural.fullWord', '{0} minutes', value
'date.fromNow.minutes.plural', '{0} mins', value
'date.fromNow.hours.singular.ago.fullWord', '{0} hour ago', value
'date.fromNow.hours.singular.ago', '{0} hr ago', value
'date.fromNow.hours.plural.ago.fullWord', '{0} hours ago', value
'date.fromNow.hours.plural.ago', '{0} hrs ago', value
'date.fromNow.hours.singular.fullWord', '{0} hour', value
'date.fromNow.hours.singular', '{0} hr', value
'date.fromNow.hours.plural.fullWord', '{0} hours', value
'date.fromNow.hours.plural', '{0} hrs', value
'date.fromNow.days.singular.ago', '{0} day ago', value
'date.fromNow.days.plural.ago', '{0} days ago', value
'date.fromNow.days.singular', '{0} day', value
'date.fromNow.days.plural', '{0} days', value
'date.fromNow.weeks.singular.ago.fullWord', '{0} week ago', value
'date.fromNow.weeks.singular.ago', '{0} wk ago', value
'date.fromNow.weeks.plural.ago.fullWord', '{0} weeks ago', value
'date.fromNow.weeks.plural.ago', '{0} wks ago', value
'date.fromNow.weeks.singular.fullWord', '{0} week', value
'date.fromNow.weeks.singular', '{0} wk', value
'date.fromNow.weeks.plural.fullWord', '{0} weeks', value
'date.fromNow.weeks.plural', '{0} wks', value
'date.fromNow.months.singular.ago.fullWord', '{0} month ago', value
'date.fromNow.months.singular.ago', '{0} mo ago', value
'date.fromNow.months.plural.ago.fullWord', '{0} months ago', value
'date.fromNow.months.plural.ago', '{0} mos ago', value
'date.fromNow.months.singular.fullWord', '{0} month', value
'date.fromNow.months.singular', '{0} mo', value
'date.fromNow.months.plural.fullWord', '{0} months', value
'date.fromNow.months.plural', '{0} mos', value
'date.fromNow.years.singular.ago.fullWord', '{0} year ago', value
'date.fromNow.years.singular.ago', '{0} yr ago', value
'date.fromNow.years.plural.ago.fullWord', '{0} years ago', value
'date.fromNow.years.plural.ago', '{0} yrs ago', value
'date.fromNow.years.singular.fullWord', '{0} year', value
'date.fromNow.years.singular', '{0} yr', value
'date.fromNow.years.plural.fullWord', '{0} years', value
'date.fromNow.years.plural', '{0} yrs', value
'defaultLabel', "input"
'label.preserveCaseToggle', "Preserve Case"
'name', "Process Name"
'cpu', "CPU (%)"
'pid', "PID"
'memory', "Memory (MB)"
'killProcess', "Kill Process"
'forceKillProcess', "Force Kill Process"
'copy', "Copy"
'copyAll', "Copy All"
'debug', "Debug"
'submenu.empty', '(empty)'), undefined, false
'quickInput.back', "Back"
'inputModeEntry', "Press 'Enter' to confirm your input or 'Escape' to cancel"
'quickInput.steps', "{0}/{1}", this.step, this.totalSteps
'quickInputBox.ariaLabel', "Type to narrow down results."
'inputModeEntryDescription', "{0} (Press 'Enter' to confirm or 'Escape' to cancel)", prompt
'quickInput.checkAll', "Toggle all checkboxes")
{ key: 'quickInput.visibleCount', comment: ['This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.'] }, "{0} Results") }
{ key: 'quickInput.countSelected', comment: ['This tells the user how many items are selected in a list of items to select from. The items can be anything.'] }, "{0} Selected") }
'ok', "OK"
'custom', "Custom"
'quickInput.back', "Back"
'quickInput', "Quick Input"
'sendSystemInfo', "Include my system information")
'sendProcessInfo', "Include my currently running processes")
'sendWorkspaceInfo', "Include my workspace metadata")
'sendExtensions', "Include my enabled extensions")
'sendExperiments', "Include A/B experiment info")
src/vs/code/electron-sandbox/issue/issueReporterPage.ts:const reviewGuidanceLabel = localize( // intentionally not escaped because of its embedded tags
'completeInEnglish', "Please complete the form in English.")
'issueTypeLabel', "This is a")
'issueSourceLabel', "File on")
'issueSourceEmptyValidation', "An issue source is required.")
'disableExtensionsLabelText', "Try to reproduce the problem after {0}. If the problem only reproduces when extensions are active, it is likely an issue with an extension.")
'disableExtensions', "disabling all extensions and reloading the window"))}</span>`
'chooseExtension', "Extension")
'extensionWithNonstandardBugsUrl', "The issue reporter is unable to create issues for this extension. Please visit {0} to report an issue.")
'extensionWithNoBugsUrl', "The issue reporter is unable to create issues for this extension, as it does not specify a URL for reporting issues. Please check the marketplace page of this extension to see if other instructions are available.")
'issueTitleLabel', "Title")
'issueTitleRequired', "Please enter a title.")
'titleEmptyValidation', "A title is required.")
'titleLengthValidation', "The title is too long.")
'details', "Please enter details.")
'descriptionEmptyValidation', "A description is required.")
'show', "show"))}</a>
'show', "show"))}</a>
'show', "show"))}</a>
'show', "show"))}</a>
'show', "show"))}</a>
'hide', "hide"
'show', "show"
'createOnGitHub', "Create on GitHub"
'previewOnGitHub', "Preview on GitHub"
'loadingData', "Loading data..."
'rateLimited', "GitHub query limit exceeded. Please wait."
'similarIssues', "Similar issues"
'closed', "Closed"
'closed', "Closed"
'noSimilarIssues', "No similar issues found"
'bugReporter', "Bug Report")
'featureRequest', "Feature Request")
'performanceIssue', "Performance Issue")
'selectSource', "Select source"), true)
'vscode', "Visual Studio Code"), false)
'extension', "An extension"), false)
'marketplace', "Extensions marketplace"), false)
'unknown', "Don't know"), false)
'stepsToReproduce', "Steps to Reproduce") + ' ', $('span.required-input', undefined, '*')
'bugDescription', "Share the steps needed to reliably reproduce the problem. Please include actual and expected results. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.")
'stepsToReproduce', "Steps to Reproduce") + ' ', $('span.required-input', undefined, '*')
'performanceIssueDesciption', "When did this performance issue happen? Does it occur on startup or after a specific series of actions? We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.")
'description', "Description") + ' ', $('span.required-input', undefined, '*')
'featureRequestDescription', "Please describe the feature you would like to see. We support GitHub-flavored Markdown. You will be able to edit your issue and add screenshots when we preview it on GitHub.")
'pasteData', "We have written the needed data into your clipboard because it was too large to send. Please paste."))}`
'disabledExtensions', "Extensions are disabled")
'noCurrentExperiments', "No current experiments."
'organizeLinkDefAction.title', "Organize link definitions"
'server.ready.nocapture.error', "Format uri ('{0}') uses a substitution placeholder but pattern did not capture anything.", format
'server.ready.placeholder.error', "Format uri ('{0}') must contain exactly one substitution placeholder.", format
'status.text.auto.attach.disabled', 'Auto Attach: Disabled'
'status.text.auto.attach.always', 'Auto Attach: Always'
'status.text.auto.attach.smart', 'Auto Attach: Smart'
'status.text.auto.attach.withFlag', 'Auto Attach: With Flag'
'debug.javascript.autoAttach.disabled.label', 'Disabled'
'debug.javascript.autoAttach.always.label', 'Always'
'debug.javascript.autoAttach.smart.label', 'Smart'
extensions/debug-auto-launch/src/extension.ts:	[State.OnlyWithFlag]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.Disabled]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.Always]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.Smart]: localize(
extensions/debug-auto-launch/src/extension.ts:	[State.OnlyWithFlag]: localize(
'scope.workspace', 'Toggle auto attach in this workspace'
'scope.global', 'Toggle auto attach on this machine'
'tempDisable.disable', 'Temporarily disable auto attach in this session'
'tempDisable.enable', 'Re-enable auto attach'
'tempDisable.suffix', 'Auto Attach: Disabled'
'status.name.auto.attach', "Debug Auto Attach"
'status.tooltip.auto.attach', "Automatically attach to node.js processes in debug mode"
...
...
